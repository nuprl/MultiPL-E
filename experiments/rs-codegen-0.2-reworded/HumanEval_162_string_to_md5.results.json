{
  "name": "HumanEval_162_string_to_md5",
  "language": "rs",
  "prompt": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmpmp7_35bv.rs:9:13\n  |\n9 |   let md5 = crypto::md5(text.as_bytes());\n  |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5.hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp5zv61m8y.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5zv61m8y.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.hex()));\n   |          +++++                       +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return Some(String::from(md5));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpyxlc_jny.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpyxlc_jny.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.to_c_str_or_null());\n  return Option::from_some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppzi4s3c1.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.to_c_str_or_null());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_or_null` found for struct `String` in the current scope\n  --> /tmp/tmppzi4s3c1.rs:10:31\n   |\n10 |   let hash = crypto::md5(text.to_c_str_or_null());\n   |                               ^^^^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0599]: no variant or associated item named `from_some` found for enum `Option` in the current scope\n  --> /tmp/tmppzi4s3c1.rs:11:18\n   |\n11 |   return Option::from_some(String::from(hash));\n   |                  ^^^^^^^^^\n   |                  |\n   |                  variant or associated item not found in `Option<_>`\n   |                  help: there is an associated function with a similar name: `is_some`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5.hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp5zv61m8y.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5zv61m8y.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.hex()));\n   |          +++++                       +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpzo0u_l5h.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return String::from(hash.as_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp02mdhlb5.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02mdhlb5.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(hash.as_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(hash.as_hex()));\n   |          +++++                           +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_bytes());\n  return String::from(md5.to_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpu4hlc6ks.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_bytes` found for struct `String` in the current scope\n  --> /tmp/tmpu4hlc6ks.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_bytes());\n   |                              ^^^^^^^^ help: there is an associated function with a similar name: `bytes`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu4hlc6ks.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.to_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.to_hex()));\n   |          +++++                          +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_utf8()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmp8qwja8tg.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `as_utf8` found for struct `String` in the current scope\n --> /tmp/tmp8qwja8tg.rs:9:40\n  |\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |                                        ^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8qwja8tg.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_utf8())))\n  |          +++++                                         +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmphcyz_5ip.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpt1qrelpc.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return Some(String::from(md5));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpyxlc_jny.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpyxlc_jny.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpzo0u_l5h.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmphcyz_5ip.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp1t7zeedo.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_or_null());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpgcl5swhe.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_or_null());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_or_null` found for struct `String` in the current scope\n  --> /tmp/tmpgcl5swhe.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_or_null());\n   |                              ^^^^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgcl5swhe.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp_uzqhiup.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.to_c_str_utf8());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpztjycpk_.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.to_c_str_utf8());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpztjycpk_.rs:10:31\n   |\n10 |   let hash = crypto::md5(text.to_c_str_utf8());\n   |                               ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpky6_cxm2.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmphcyz_5ip.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_utf8()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmp8qwja8tg.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `as_utf8` found for struct `String` in the current scope\n --> /tmp/tmp8qwja8tg.rs:9:40\n  |\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |                                        ^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8qwja8tg.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_utf8())))\n  |          +++++                                         +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp_uzqhiup.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp_j6lucjq.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5.to_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpyi34kdbl.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpyi34kdbl.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyi34kdbl.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.to_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.to_hex()));\n   |          +++++                          +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_bytes());\n  return String::from(md5.to_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpu4hlc6ks.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_bytes` found for struct `String` in the current scope\n  --> /tmp/tmpu4hlc6ks.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_bytes());\n   |                              ^^^^^^^^ help: there is an associated function with a similar name: `bytes`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu4hlc6ks.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.to_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.to_hex()));\n   |          +++++                          +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_utf8()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmp8qwja8tg.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `as_utf8` found for struct `String` in the current scope\n --> /tmp/tmp8qwja8tg.rs:9:40\n  |\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |                                        ^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8qwja8tg.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_utf8())))\n  |          +++++                                         +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpt1qrelpc.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpmdmxnvog.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_bytes` found for struct `String` in the current scope\n  --> /tmp/tmpmdmxnvog.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_bytes());\n   |                              ^^^^^^^^ help: there is an associated function with a similar name: `bytes`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmphcyz_5ip.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp_uzqhiup.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_utf8()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmp8qwja8tg.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `as_utf8` found for struct `String` in the current scope\n --> /tmp/tmp8qwja8tg.rs:9:40\n  |\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |                                        ^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8qwja8tg.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_utf8())))\n  |          +++++                                         +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp1t7zeedo.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp1t7zeedo.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5.to_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp6av36hfm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6av36hfm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.to_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.to_hex()));\n   |          +++++                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp_uzqhiup.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpt1qrelpc.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpzo0u_l5h.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_string());\n  return Some(String::from(md5));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpbmg28ulp.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_string());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5.to_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpyi34kdbl.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpyi34kdbl.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyi34kdbl.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.to_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.to_hex()));\n   |          +++++                          +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp_uzqhiup.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5.hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp5zv61m8y.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5zv61m8y.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.hex()));\n   |          +++++                       +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.hex()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfmrv_zyr.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return String::from(hash.as_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp02mdhlb5.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02mdhlb5.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(hash.as_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(hash.as_hex()));\n   |          +++++                           +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  let hash = crypto::md5(text.as_bytes());\n  return Option::from_some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmpwt3v_vco.rs:9:14\n  |\n9 |   let hash = crypto::md5(text.as_bytes());\n  |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no variant or associated item named `from_some` found for enum `Option` in the current scope\n  --> /tmp/tmpwt3v_vco.rs:10:18\n   |\n10 |   return Option::from_some(String::from(hash));\n   |                  ^^^^^^^^^\n   |                  |\n   |                  variant or associated item not found in `Option<_>`\n   |                  help: there is an associated function with a similar name: `is_some`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5.hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp5zv61m8y.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5zv61m8y.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.hex()));\n   |          +++++                       +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return Some(String::from(md5));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpyxlc_jny.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpyxlc_jny.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpt1qrelpc.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpt1qrelpc.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_or_null());\n  return String::from(md5.to_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmptli2ngnf.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_or_null());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_or_null` found for struct `String` in the current scope\n  --> /tmp/tmptli2ngnf.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_or_null());\n   |                              ^^^^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptli2ngnf.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.to_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.to_hex()));\n   |          +++++                          +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpqa29yus2.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpqa29yus2.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmphcyz_5ip.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return String::from(hash.as_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp02mdhlb5.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02mdhlb5.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(hash.as_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(hash.as_hex()));\n   |          +++++                           +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp_uzqhiup.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_utf8()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmp8qwja8tg.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `as_utf8` found for struct `String` in the current scope\n --> /tmp/tmp8qwja8tg.rs:9:40\n  |\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |                                        ^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8qwja8tg.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_utf8()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_utf8())))\n  |          +++++                                         +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.to_c_str_utf8());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpztjycpk_.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.to_c_str_utf8());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpztjycpk_.rs:10:31\n   |\n10 |   let hash = crypto::md5(text.to_c_str_utf8());\n   |                               ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpzo0u_l5h.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmppqwkti9p.rs:9:13\n  |\n9 |   let md5 = crypto::md5(text.as_bytes());\n  |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp1t7zeedo.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmphcyz_5ip.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpctnw4djf.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpctnw4djf.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp1t7zeedo.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmphcyz_5ip.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp_j6lucjq.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpqa29yus2.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpqa29yus2.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp1t7zeedo.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpky6_cxm2.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5.to_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpyi34kdbl.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpyi34kdbl.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyi34kdbl.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.to_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.to_hex()));\n   |          +++++                          +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmphcyz_5ip.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp_uzqhiup.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpz5gg19rt.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmppqwkti9p.rs:9:13\n  |\n9 |   let md5 = crypto::md5(text.as_bytes());\n  |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpqa29yus2.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpqa29yus2.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpzo0u_l5h.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  let hash = crypto::md5(text.as_bytes());\n  return String::from(hash.as_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmpqq83r1vf.rs:9:14\n  |\n9 |   let hash = crypto::md5(text.as_bytes());\n  |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqq83r1vf.rs:10:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n10 |   return String::from(hash.as_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n10 |   return Some(String::from(hash.as_hex()));\n   |          +++++                           +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmp4th1fexq.rs:9:13\n  |\n9 |   let md5 = crypto::md5(text.as_bytes());\n  |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmphcyz_5ip.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmpt_by290v.rs:9:14\n  |\n9 |   let hash = crypto::md5(text.as_bytes());\n  |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp_uzqhiup.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp1t7zeedo.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmphcyz_5ip.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp_uzqhiup.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5.to_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp6av36hfm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6av36hfm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.to_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.to_hex()));\n   |          +++++                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp1t7zeedo.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5.hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp5zv61m8y.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5zv61m8y.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.hex()));\n   |          +++++                       +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp_uzqhiup.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp1t7zeedo.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.to_c_str_utf8());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpztjycpk_.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.to_c_str_utf8());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpztjycpk_.rs:10:31\n   |\n10 |   let hash = crypto::md5(text.to_c_str_utf8());\n   |                               ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmppyu4jwv2.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5.hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp5zv61m8y.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5zv61m8y.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.hex()));\n   |          +++++                       +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpt1qrelpc.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.as_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpz5gg19rt.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpnak69u0p.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5.hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp5zv61m8y.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5zv61m8y.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.hex()));\n   |          +++++                       +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpctnw4djf.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpctnw4djf.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n  return String::from(crypto::md5(text.as_bytes()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n --> /tmp/tmptf068v52.rs:9:23\n  |\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |                       ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n --> /tmp/tmptf068v52.rs:9:10\n  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |                                   -------------- expected `Option<String>` because of return type\n...\n9 |   return String::from(crypto::md5(text.as_bytes()))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression in `Some`\n  |\n9 |   return Some(String::from(crypto::md5(text.as_bytes())))\n  |          +++++                                          +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5.hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp5zv61m8y.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5zv61m8y.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.hex()));\n   |          +++++                       +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return String::from(md5.hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp5zv61m8y.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5zv61m8y.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.hex()));\n   |          +++++                       +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5.to_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpyi34kdbl.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpyi34kdbl.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyi34kdbl.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5.to_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5.to_hex()));\n   |          +++++                          +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.to_c_str_utf8());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpztjycpk_.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.to_c_str_utf8());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpztjycpk_.rs:10:31\n   |\n10 |   let hash = crypto::md5(text.to_c_str_utf8());\n   |                               ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.as_bytes());\n  return Some(String::from(md5.to_hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmphcyz_5ip.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.as_bytes());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let md5 = crypto::md5(text.to_c_str_utf8());\n  return String::from(md5);\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpfuolvbgm.rs:10:13\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |             ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0599]: no method named `to_c_str_utf8` found for struct `String` in the current scope\n  --> /tmp/tmpfuolvbgm.rs:10:30\n   |\n10 |   let md5 = crypto::md5(text.to_c_str_utf8());\n   |                              ^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuolvbgm.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(md5);\n   |          ^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(md5));\n   |          +++++                 +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp0rtrfiks.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return String::from(hash.as_hex());\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmp02mdhlb5.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02mdhlb5.rs:11:10\n   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |                                   -------------- expected `Option<String>` because of return type\n...\n11 |   return String::from(hash.as_hex());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n11 |   return Some(String::from(hash.as_hex()));\n   |          +++++                           +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\nfn string_to_md5(text: String) -> Option<String> {\n  if text.is_empty() {\n    return None\n  }\n\n  let hash = crypto::md5(text.as_bytes());\n  return Some(String::from(hash.hex()));\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n  --> /tmp/tmpt1qrelpc.rs:10:14\n   |\n10 |   let hash = crypto::md5(text.as_bytes());\n   |              ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}