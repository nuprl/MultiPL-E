name: HumanEval_118_get_closest_vowel
language: rs
prompt: "/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
  yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"FULL\"\
  ))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"))\n\
  /// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n/// String::from(\"\
  \")\nfn get_closest_vowel(word: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
  yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
  )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
  \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")),\
  \ String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n  \
  \  assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\"\
  )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"\
  o\"));\n}\n"
completions: ["    let vowels = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let vowels_count = 0;\n    let consonants_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = word.length() - 1; i >= 0; i--) {\n        let c =\
    \ word[i];\n        if (vowels.indexOf(c) >= 0) {\n            vowels_count +=\
    \ 1;\n            if (vowels_count > 1) {\n                closest_vowel = c;\n\
    \                break;\n            }\n        } else if (consonants.indexOf(c)\
    \ >= 0) {\n            consonants_count += 1;\n            if (consonants_count\
    \ > 1) {\n                closest_vowel = c;\n                break;\n       \
    \     }\n        }\n    }\n    return closest_vowel;", "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ == -1 || consonant_index == -1) {\n        return \"\"\n    } else if (vowel_index\
    \ < consonant_index) {\n        return vowels[vowel_index + 1]\n    } else {\n\
    \        return vowels[vowel_index - 1]\n    }", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    let\
    \ vowels_count = 0;\n    let consonants_count = 0;\n    let result = \"\";\n \
    \   for (let i = 0; i < word.length(); i++) {\n        let c = word[i];\n    \
    \    if (vowels.indexOf(c) >= 0) {\n            vowels_count += 1;\n         \
    \   if (vowels_count > 1) {\n                result = c;\n                break;\n\
    \            }\n        } else if (consonants.indexOf(c) >= 0) {\n           \
    \ consonants_count += 1;\n            if (consonants_count > 1) {\n          \
    \      result = c;\n                break;\n            }\n        }\n    }\n\
    \    return result;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n   \
    \ let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ < consonant_index) {\n        return word[word.length - 1];\n    } else if (vowel_index\
    \ > consonant_index) {\n        return word[word.length - 2];\n    } else {\n\
    \        return \"\";\n    }", "    let vowels = [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length; i++) {\n        if (consonants.indexOf(word[i]) > consonant_index)\
    \ {\n            consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\";\n    }\n    let consonant_index_plus_1\
    \ = consonants.indexOf(word[consonant_index + 1]);\n    let vowel_index_plus_1\
    \ = vowels.indexOf(word[vowel_index + 1]);\n    let consonant_count_plus_1 = 0;\n\
    \    let vowel_count_plus_1 = 0;\n    for (let i = 0; i < word.length; i++) {\n\
    \        if (consonants.indexOf(word[i]) > consonant_index_plus_1) {\n       \
    \     consonant_count_plus_1 += 1;\n        }\n        if (vowels.indexOf(word[i])\
    \ > vowel_index_plus_1) {\n            vowel_count_plus_1 += 1;\n        }\n \
    \   }\n    if (consonant_count_plus_1 == 0 || vowel_count_plus_1 == 0) {\n   \
    \     return \"\";\n    }\n    let consonant_index_plus_2 = consonants.indexOf(word[consonant",
  "    let vowels = [String::from(\"a\"), String::from(\"e\"), String::from(\"i\"\
    ), String::from(\"o\"), String::from(\"u\")];\n    let consonants = word.chars().filter(c\
    \ => c != \" \").to_list();\n    let consonant_index = consonants.indexOf(consonants.last());\n\
    \    let vowel_index = consonant_index + 1;\n    if (vowel_index >= vowels.length)\
    \ {\n        return \"\"\n    }\n    return vowels[vowel_index]", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.indexOf(word[i]) != -1) {\n            vowel_count += 1;\n\
    \            if (vowel_count > vowel_count) {\n                closest_vowel =\
    \ word[i];\n            }\n        } else if (consonants.indexOf(word[i]) != -1)\
    \ {\n            consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ vowels_count = 0;\n    let consonants_count = 0;\n    let vowels_index = 0;\n\
    \    let consonants_index = 0;\n    let result = \"\";\n    for (let i = 0; i\
    \ < word.length(); i++) {\n        if (vowels.contains(word[i])) {\n         \
    \   vowels_count += 1;\n            vowels_index = i;\n        } else if (consonants.contains(word[i]))\
    \ {\n            consonants_count += 1;\n            consonants_index = i;\n \
    \       }\n    }\n    if (vowels_count == 0 || consonants_count == 0) {\n    \
    \    return \"\";\n    }\n    if (vowels_count == 1) {\n        return word[vowels_index];\n\
    \    }\n    if (vowels_count == 2) {\n        if (vowels_index - 1 >= 0 && consonants_index\
    \ - 1 >= 0) {\n            if (word[vowels_index - 1] == word[vowels_index]) {\n\
    \                return word[vowels_index];\n            }\n        }\n      \
    \  if (vowels_index + 1 < word.length() && consonants_index + 1 < word.length())\
    \ {\n            if (word[vowels_index + 1] == word[vowels_index]) {\n       \
    \         return word[vowels_index];\n            }\n        }\n    }\n    if\
    \ (vowels_count == 3) {\n        if (vowels_index - 2 >= 0 && consonants_index\
    \ - 1 >= 0) {\n            if (word[vowels_index - 2] == word[vowels_index]) {\n\
    \                return word[vow", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    let consonants = word.chars().filter(c => !vowels.includes(c)).to_list();\n\
    \    let consonant_index = consonants.indexOf(word.chars().find(c => !vowels.includes(c)));\n\
    \    if (consonant_index === -1) {\n        return \"\"\n    }\n    let vowel_index\
    \ = consonants[consonant_index + 1].indexOf(word.chars().find(c => !vowels.includes(c)))\
    \ + 1;\n    return word.chars().slice(vowel_index, consonant_index + 1).join(\"\
    \");", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index =\
    \ vowels.indexOf(word[word.length - 1]);\n    let consonant_count = 0;\n    let\
    \ vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++) {\n        if\
    \ (consonants.indexOf(word[i]) > consonant_index) {\n            consonant_count\
    \ += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index) {\n   \
    \         vowel_count += 1;\n        }\n    }\n    if (consonant_count == 0 ||\
    \ vowel_count == 0) {\n        return \"\";\n    }\n    let closest_vowel = \"\
    \";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n     \
    \   if (vowels.indexOf(word[i]) > vowel_index) {\n            closest_vowel =\
    \ word[i];\n            break;\n        }\n    }\n    return closest_vowel;",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = word.length - 1;\n    let vowel_count = 0;\n\
    \    let closest_vowel = \"\";\n    for (let i = consonant_index + 1; i < word.length\
    \ - 1; i++) {\n        if (vowels.includes(word[i])) {\n            vowel_count\
    \ += 1;\n            if (vowel_count > vowel_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let vowels_count = 0;\n    let consonants_count =\
    \ 0;\n    let vowels_index = 0;\n    let consonants_index = 0;\n    let result\
    \ = \"\";\n    for (let i = 0; i < word.length(); i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            vowels_count += 1;\n            vowels_index = i;\n \
    \       } else if (consonants.indexOf(word[i]) !== -1) {\n            consonants_count\
    \ += 1;\n            consonants_index = i;\n        }\n    }\n    if (vowels_count\
    \ === 0 || consonants_count === 0) {\n        return \"\";\n    }\n    if (vowels_count\
    \ > consonants_count) {\n        result = word[vowels_index + 1];\n    } else\
    \ {\n        result = word[consonants_index + 1];\n    }\n    return result;",
  "    let vowels = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let vowels_count = 0;\n    let consonants_count = 0;\n    let result =\
    \ \"\";\n    for (let i = word.length() - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            vowels_count += 1;\n            if (vowels_count > 1) {\n\
    \                result = word[i];\n                break;\n            }\n  \
    \      } else if (consonants.indexOf(word[i]) > -1) {\n            consonants_count\
    \ += 1;\n            if (consonants_count > 1) {\n                result = word[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    if (vowel_index == -1 || consonant_index == -1) {\n        return\
    \ \"\"\n    } else if (vowel_index - consonant_index == 1) {\n        return vowels[vowel_index]\n\
    \    } else {\n        return vowels[vowel_index - 1]\n    }", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (consonant_count == 0 || vowel_count == 0) {\n     \
    \   return \"\";\n    }\n    let consonant_index_plus_one = consonant_index +\
    \ 1;\n    let vowel_index_plus_one = vowel_index + 1;\n    let consonant_count_plus_one\
    \ = consonant_count + 1;\n    let vowel_count_plus_one = vowel_count + 1;\n  \
    \  for (let i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index_plus_one) {\n            consonant_count_plus_one += 1;\n\
    \        }\n        if (vowels.indexOf(word[i]) > vowel_index_plus_one) {\n  \
    \          vowel_count_plus_one += 1;\n        }\n    }\n    if (consonant_count_plus_one\
    \ == 0 || vowel_count_plus_one == 0) {\n        return \"\";\n    }\n    let consonant_index_minus_one\
    \ = consonant_index - 1;\n    let vowel_index_minus_one", "    let vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index =\
    \ consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    if (vowel_index == -1 || consonant_index == -1) {\n        return\
    \ \"\"\n    } else if (vowel_index - consonant_index == 1) {\n        return vowels[vowel_index]\n\
    \    } else {\n        return vowels[vowel_index - 1]\n    }", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_count) {\n                closest_vowel = word[i];\n\
    \            }\n        } else if (consonants.includes(word[i])) {\n         \
    \   consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (vowel_count == 0)\
    \ {\n        return \"\";\n    }\n    if (consonant_count == 0) {\n        return\
    \ word[word.length - 1];\n    }\n    let closest_vowel = \"\";\n    let closest_distance\
    \ = 99999;\n    for (let i = 0; i < vowels.length; i++) {\n        let distance\
    \ = Math.abs(vowels.indexOf(word[word.length - 1]) - i);\n        if (distance\
    \ < closest_distance) {\n            closest_vowel = vowels[i];\n            closest_distance\
    \ = distance;\n        }\n    }\n    return closest_vowel;", "    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = word.chars()\n  \
    \      .filter(c => c != \" \")\n        .map(c => c.toLowerCase())\n        .filter(c\
    \ => c != \"a\" && c != \"e\" && c != \"i\" && c != \"o\" && c != \"u\");\n  \
    \  let consonant_index = consonants.indexOf(consonants.last());\n    let vowel_index\
    \ = consonants.indexOf(vowels.last());\n    let vowel = vowels[vowel_index];\n\
    \    let consonant = consonants[consonant_index];\n    if (vowel_index > consonant_index)\
    \ {\n        return vowel;\n    }\n    return \"\";", "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ > vowel_count) {\n        return vowels[vowel_index + 1];\n    } else if (consonant_count\
    \ < vowel_count) {\n        return vowels[vowel_index - 1];\n    } else {\n  \
    \      return \"\";\n    }", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    if (vowel_index >= 0 && consonant_index >= 0) {\n        let consonant_index_plus_1\
    \ = consonant_index + 1;\n        let vowel_index_plus_1 = vowel_index + 1;\n\
    \        if (vowel_index_plus_1 < word.length) {\n            return word[vowel_index_plus_1];\n\
    \        } else if (consonant_index_plus_1 < word.length) {\n            return\
    \ word[consonant_index_plus_1];\n        }\n    }\n    return \"\";", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = word.chars()\n\
    \        .filter(c => c != \" \")\n        .filter(c => vowels.indexOf(c) == -1)\n\
    \        .map(c => c.toLowerCase())\n        .sort();\n    let consonant_index\
    \ = consonants.indexOf(\"a\");\n    let vowel_index = consonants.indexOf(\"a\"\
    , consonant_index + 1);\n    if (vowel_index == -1) {\n        return \"\";\n\
    \    } else {\n        return vowels[vowel_index];\n    }", "    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    if (consonant_index < 0 || vowel_index < 0) {\n        return \"\
    \"\n    }\n    let consonant_index_plus_1 = consonant_index + 1;\n    let vowel_index_plus_1\
    \ = vowel_index + 1;\n    if (consonant_index_plus_1 >= word.length || vowel_index_plus_1\
    \ >= word.length) {\n        return \"\"\n    }\n    let consonant_index_plus_2\
    \ = consonant_index_plus_1 + 1;\n    let vowel_index_plus_2 = vowel_index_plus_1\
    \ + 1;\n    if (consonant_index_plus_2 >= word.length || vowel_index_plus_2 >=\
    \ word.length) {\n        return \"\"\n    }\n    if (vowels.indexOf(word[consonant_index_plus_1])\
    \ >= 0 && vowels.indexOf(word[vowel_index_plus_1]) >= 0) {\n        return word[consonant_index_plus_1]\n\
    \    } else if (vowels.indexOf(word[consonant_index_plus_2]) >= 0 && vowels.indexOf(word[vowel_index_plus_2])\
    \ >= 0) {\n        return word[consonant_index_plus_2]\n    } else {\n       \
    \ return \"\"\n    }", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n   \
    \ let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = word.length - 1;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n\
    \    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n        if\
    \ (vowels.indexOf(word[i]) > -1) {\n            vowel_count += 1;\n        }\n\
    \        if (vowel_count == 2) {\n            closest_vowel = word[i];\n     \
    \       break;\n        }\n    }\n    return closest_vowel;", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = word.chars()\n\
    \        .filter(c => !vowels.includes(c))\n        .map(c => c.toLowerCase())\n\
    \        .sort();\n    let consonant_index = consonants.indexOf(word.toLowerCase());\n\
    \    if (consonant_index === -1) {\n        return \"\";\n    }\n    let vowel_index\
    \ = consonant_index + 1;\n    if (vowel_index >= word.length) {\n        return\
    \ \"\";\n    }\n    return vowels[vowel_index];", "    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let vowels_count = 0;\n    let\
    \ consonants_count = 0;\n    let closest_vowel = \"\";\n    for (let i = 0; i\
    \ < word.length(); i++) {\n        if (vowels.includes(word[i])) {\n         \
    \   vowels_count += 1;\n            if (vowels_count > 1) {\n                closest_vowel\
    \ = word[i];\n                break;\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonants_count += 1;\n            if (consonants_count > 1)\
    \ {\n                closest_vowel = word[i];\n                break;\n      \
    \      }\n        }\n    }\n    return closest_vowel;", "    let vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index =\
    \ consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_count) {\n                closest_vowel = word[i];\n\
    \            }\n        } else if (consonants.includes(word[i])) {\n         \
    \   consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ < consonant_index) {\n        return word[word.length - 1];\n    } else {\n\
    \        return \"\";\n    }", "    let vowels = [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\";\n    }\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    let consonant_index = consonants.indexOf(word[0]);\n  \
    \  let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) >", "    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\";\n    }\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.indexOf(word[i]) > vowel_index) {\n            closest_vowel\
    \ = word[i];\n            break;\n        }\n    }\n    return closest_vowel;",
  "    let vowels = [\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"\n    ];\n    let consonants = word.chars().filter(c => c !==\
    \ \" \").to_list();\n    let consonant_index = consonants.indexOf(word.chars().find(c\
    \ => c !== \" \"));\n    let vowel_index = consonants[consonant_index + 1].indexOf(word.chars().find(c\
    \ => c !== \" \"));\n    if (vowel_index === -1) {\n        return \"\";\n   \
    \ }\n    return vowels[vowel_index];", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = word.length - 1;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n\
    \    if (vowel_index > -1 && consonant_index > -1) {\n        let right_side_vowel\
    \ = word[word.length - 1];\n        let right_side_vowel_index = vowels.indexOf(right_side_vowel);\n\
    \        let right_side_vowel_count = 0;\n        for (let i = consonant_index\
    \ + 1; i < word.length; i++) {\n            if (vowels.indexOf(word[i]) > -1)\
    \ {\n                right_side_vowel_count += 1;\n            }\n        }\n\
    \        if (right_side_vowel_count > 0) {\n            let left_side_vowel =\
    \ word[0];\n            let left_side_vowel_index = vowels.indexOf(left_side_vowel);\n\
    \            let left_side_vowel_count = 0;\n            for (let i = 0; i < consonant_index;\
    \ i++) {\n                if (vowels.indexOf(word[i]) > -1) {\n              \
    \      left_side_vowel_count += 1;\n                }\n            }\n       \
    \     if (left_side_vowel_count > 0 && right_side_vowel_count > 0) {\n       \
    \         if (left_side_vowel_index > right_side_vowel_index) {\n            \
    \        closest_vowel = left_side_v", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_index_next\
    \ = consonants.indexOf(word[1]);\n    let vowel_index_next = vowels.indexOf(word[word.length\
    \ - 2]);\n    if (vowel_index == -1 || vowel_index_next == -1 || consonant_index_next\
    \ == -1) {\n        return \"\"\n    }\n    if (vowel_index < vowel_index_next)\
    \ {\n        return vowels[vowel_index + 1]\n    } else {\n        return vowels[vowel_index_next\
    \ + 1]\n    }", "    let vowels = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let consonant_index\
    \ = 0;\n    let vowel_index = 0;\n    let result = \"\";\n    for (let i = 0;\
    \ i < word.length(); i++) {\n        let letter = word[i];\n        if (vowels.indexOf(letter)\
    \ >= 0) {\n            vowel_count += 1;\n            vowel_index = i;\n     \
    \   } else if (consonants.indexOf(letter) >= 0) {\n            consonant_count\
    \ += 1;\n            consonant_index = i;\n        }\n    }\n    if (vowel_count\
    \ == 0) {\n        return \"\";\n    }\n    if (consonant_count == 0) {\n    \
    \    return word[vowel_index + 1];\n    }\n    for (let i = vowel_index + 1; i\
    \ < word.length(); i++) {\n        let letter = word[i];\n        if (vowels.indexOf(letter)\
    \ >= 0) {\n            result = letter;\n            break;\n        }\n    }\n\
    \    return result;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n   \
    \ let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ >= 0 && consonant_index >= 0) {\n        let consonant_index_plus_1 = consonants.indexOf(word[consonant_index\
    \ + 1]);\n        if (consonant_index_plus_1 >= 0) {\n            return vowels[vowel_index\
    \ + 1];\n        }\n    }\n    return \"\";", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            vowel_count += 1;\n        } else if (consonants.indexOf(word[i])\
    \ != -1) {\n            consonant_count += 1;\n        }\n        if (vowel_count\
    \ == 1 && consonant_count == 0) {\n            closest_vowel = word[i];\n    \
    \        break;\n        }\n    }\n    return closest_vowel;", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (vowel_count == 0) {\n        return \"\";\n    }\n\
    \    if (consonant_count == 0) {\n        return word[word.length - 1];\n    }\n\
    \    let closest_vowel = \"\";\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (vowels.indexOf(word[i]) > vowel_index) {\n            closest_vowel\
    \ = word[i];\n            break;\n        }\n    }\n    return closest_vowel;",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[1]);\n\
    \    if (vowel_index == -1 || consonant_index == -1) {\n        return \"\"\n\
    \    } else if (vowel_index - consonant_index == 1) {\n        return vowels[vowel_index]\n\
    \    } else {\n        return vowels[vowel_index - 1]\n    }", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = word.length - 1 - consonant_index;\n    let\
    \ vowel_count = word.length - 1 - vowel_index;\n    let consonant_index_plus_1\
    \ = consonant_index + 1;\n    let vowel_index_plus_1 = vowel_index + 1;\n    let\
    \ consonant_index_plus_2 = consonant_index + 2;\n    let vowel_index_plus_2 =\
    \ vowel_index + 2;\n    let consonant_index_plus_3 = consonant_index + 3;\n  \
    \  let vowel_index_plus_3 = vowel_index + 3;\n    let consonant_index_plus_4 =\
    \ consonant_index + 4;\n    let vowel_index_plus_4 = vowel_index + 4;\n    let\
    \ consonant_index_plus_5 = consonant_index + 5;\n    let vowel_index_plus_5 =\
    \ vowel_index + 5;\n    let consonant_index_plus_6 = consonant_index + 6;\n  \
    \  let vowel_index_plus_6 = vowel_index + 6;\n    let consonant_index_plus_7 =\
    \ consonant_index + 7;\n    let vowel_index_plus_7 = vowel_index + 7;\n    let\
    \ consonant_index_plus_8 = consonant_index + 8;\n    let vowel_index_plus_8 =\
    \ vowel_index + 8;\n    let consonant_index_plus_9 = consonant_index + 9;\n  \
    \  let vowel_index_plus_9 = vowel_index + 9;\n    let consonant_index_plus_10\
    \ = consonant_index + 10;\n    let", "    let vowels = [String::from(\"a\"), String::from(\"\
    e\"), String::from(\"i\"), String::from(\"o\"), String::from(\"u\")];\n    let\
    \ consonants = word.chars().filter(c => c != \" \").map(c => String::from(c)).to_list();\n\
    \    let consonant_index = consonants.indexOf(word.chars().find(c => c != \" \"\
    ));\n    if (consonant_index == -1) {\n        return String::from(\"\");\n  \
    \  }\n    let vowel_index = consonants[consonant_index + 1].indexOf(word.chars().find(c\
    \ => c != \" \"));\n    if (vowel_index == -1) {\n        return String::from(\"\
    \");\n    }\n    let vowel = vowels[vowel_index];\n    return vowel;", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (consonant_count == 0 || vowel_count == 0) {\n     \
    \   return \"\";\n    }\n    let closest_vowel = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            closest_vowel = word[i];\n            break;\n        }\n   \
    \ }\n    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ < 0 || consonant_index < 0) {\n        return \"\";\n    }\n    let consonant_index_next\
    \ = consonants.indexOf(word[1]);\n    if (consonant_index_next < 0) {\n      \
    \  return \"\";\n    }\n    let vowel_index_next = vowels.indexOf(word[word.length\
    \ - 2]);\n    if (vowel_index_next < 0) {\n        return \"\";\n    }\n    let\
    \ consonant_index_prev = consonants.indexOf(word[word.length - 3]);\n    if (consonant_index_prev\
    \ < 0) {\n        return \"\";\n    }\n    let vowel_index_prev = vowels.indexOf(word[word.length\
    \ - 4]);\n    if (vowel_index_prev < 0) {\n        return \"\";\n    }\n    let\
    \ consonant_index_prev_next = consonants.indexOf(word[word.length - 5]);\n   \
    \ if (consonant_index_prev_next < 0) {\n        return \"\";\n    }\n    let vowel_index_prev_next\
    \ = vowels.indexOf(word[word.length - 6]);\n    if (vowel_index_prev_next < 0)\
    \ {\n        return \"\";\n    }\n    let consonant_index_next_next = consonants.indexOf(word[word.length\
    \ - 7]);\n    if (consonant_index_next_next < 0) {\n        return \"\";\n   \
    \ }\n    let vowel_index_next_next = vowels.indexOf(word[word", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (consonant_count > vowel_count) {\n        return vowels[vowel_count\
    \ - 1];\n    } else {\n        return \"\";\n    }", "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let consonants = word.split(\"\").filter(c\
    \ => !vowels.includes(c));\n    let consonant_index = consonants.indexOf(consonants.last());\n\
    \    let vowel_index = consonants.indexOf(consonants[consonant_index + 1]);\n\
    \    return vowels[vowel_index];", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\",\
    \ \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let result\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.indexOf(word[i]) >= 0) {\n            vowel_count += 1;\n\
    \        } else if (consonants.indexOf(word[i]) >= 0) {\n            consonant_count\
    \ += 1;\n        }\n        if (vowel_count > 0 && consonant_count > 0) {\n  \
    \          result = word[i];\n            break;\n        }\n    }\n    return\
    \ result;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = word.split(\"\").filter(c => c !== \"\")\n        .map(c => c.toLowerCase())\n\
    \        .filter(c => vowels.indexOf(c) === -1);\n    let consonant_index = consonants.length\
    \ - 1;\n    let vowel_index = consonants.length - 1;\n    while (vowel_index >=\
    \ 0 && consonant_index >= 0) {\n        if (vowels.indexOf(consonants[consonant_index])\
    \ !== -1) {\n            vowel_index--;\n        } else {\n            consonant_index--;\n\
    \        }\n    }\n    return vowels[vowel_index + 1];", "    let vowels = \"\
    aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let vowels_count = 0;\n    let consonants_count = 0;\n    let result =\
    \ \"\";\n    for i in word.chars() {\n        if (vowels.contains(i)) {\n    \
    \        vowels_count += 1;\n            if (vowels_count > 1) {\n           \
    \     result = i;\n                break;\n            }\n        } else if (consonants.contains(i))\
    \ {\n            consonants_count += 1;\n            if (consonants_count > 1)\
    \ {\n                result = i;\n                break;\n            }\n    \
    \    }\n    }\n    return result;", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    let consonants = word.chars().filter(c => !vowels.includes(c)).to_list();\n\
    \    let consonant_index = consonants.indexOf(word.chars().find(c => !vowels.includes(c)));\n\
    \    let vowel = consonants[consonant_index + 1];\n    return vowel;", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (consonant_count == 0 || vowel_count == 0) {\n     \
    \   return \"\";\n    }\n    let closest_vowel = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            closest_vowel = word[i];\n            break;\n        }\n   \
    \ }\n    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = word.length - 1 - consonant_index;\n    let vowel_count = word.length - 1\
    \ - vowel_index;\n    let result = \"\";\n    if (vowel_count > 0 && consonant_count\
    \ > 0) {\n        let consonant_index = consonants.indexOf(word[0]);\n       \
    \ let vowel_index = vowels.indexOf(word[word.length - 1]);\n        let consonant_count\
    \ = word.length - 1 - consonant_index;\n        let vowel_count = word.length\
    \ - 1 - vowel_index;\n        let consonant_index = consonants.indexOf(word[0]);\n\
    \        let vowel_index = vowels.indexOf(word[word.length - 1]);\n        let\
    \ consonant_count = word.length - 1 - consonant_index;\n        let vowel_count\
    \ = word.length - 1 - vowel_index;\n        let consonant_index = consonants.indexOf(word[0]);\n\
    \        let vowel_index = vowels.indexOf(word[word.length - 1]);\n        let\
    \ consonant_count = word.length - 1 - consonant_index;\n        let vowel_count\
    \ = word.length - 1 - vowel_index;\n        let consonant_index = consonants.indexOf(word[0]);\n\
    \        let vowel_index = vowels.indexOf(word[word.length - 1]);\n        let\
    \ consonant_count = word.length - 1 - consonant_index;\n        let vowel_count\
    \ = word.length - 1 - vowel_index;\n        let consonant_index = consonants.indexOf(word[0]);\n",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = consonants.length - 1 - consonant_index;\n\
    \    let vowel_count = vowels.length - 1 - vowel_index;\n    if (vowel_count <\
    \ consonant_count) {\n        return word[0];\n    } else if (vowel_count > consonant_count)\
    \ {\n        return word[word.length - 1];\n    } else {\n        return word[1];\n\
    \    }", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index =\
    \ vowels.indexOf(word[word.length - 1]);\n    let consonant_count = 0;\n    let\
    \ vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++) {\n        if\
    \ (consonants.indexOf(word[i]) > consonant_index) {\n            consonant_count\
    \ += 1;\n        } else {\n            consonant_count = 0;\n        }\n     \
    \   if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        } else {\n            vowel_count = 0;\n        }\n        if (consonant_count\
    \ > 1 && vowel_count > 1) {\n            return word[i];\n        }\n    }\n \
    \   return \"\";", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  \
    \  let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n    let\
    \ vowel_index = vowels.indexOf(word[1]);\n    let consonant_count = consonants.length\
    \ - 1;\n    let vowel_count = vowels.length - 1;\n    let closest_vowel = \"\"\
    ;\n    if (vowel_index > consonant_index) {\n        closest_vowel = vowels[vowel_index\
    \ + 1];\n    } else if (vowel_index < consonant_index) {\n        closest_vowel\
    \ = vowels[vowel_index - 1];\n    } else if (vowel_index == consonant_index) {\n\
    \        if (vowel_count > consonant_count) {\n            closest_vowel = vowels[vowel_index\
    \ + 1];\n        } else if (vowel_count < consonant_count) {\n            closest_vowel\
    \ = vowels[vowel_index - 1];\n        } else {\n            closest_vowel = \"\
    \";\n        }\n    }\n    return closest_vowel;", "    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ < 0 || consonant_index < 0) {\n        return \"\"\n    }\n    let consonant_count\
    \ = 0;\n    for (let i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ >= 0) {\n            consonant_count += 1\n        }\n    }\n    let vowel_count\
    \ = 0;\n    for (let i = 0; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            vowel_count += 1\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\"\n    }\n    let consonant_index_plus\
    \ = consonant_index + 1;\n    let vowel_index_plus = vowel_index + 1;\n    if\
    \ (consonant_index_plus >= word.length - 1 || vowel_index_plus >= word.length\
    \ - 1) {\n        return \"\"\n    }\n    let consonant_count_plus = 0;\n    for\
    \ (let i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ >= 0) {\n            consonant_count_plus += 1\n        }\n    }\n    let vowel_count_plus\
    \ = 0;\n    for (let i = 0; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            vowel_count_plus += 1\n        }", "    let vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index =\
    \ consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (vowel_count == 0) {\n        return \"\";\n    }\n\
    \    if (consonant_count == 0) {\n        return word[word.length - 1];\n    }\n\
    \    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index =\
    \ vowels.indexOf(word[word.length - 1]);\n    let consonant_count = 0;\n    let\
    \ vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++) {\n        if\
    \ (consonants.indexOf(word[i]) > consonant_index) {\n            consonant_count\
    \ += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index) {\n   \
    \         vowel_count += 1;\n        }\n    }\n    if (vowel_count == 0) {\n \
    \       return \"\";\n    }\n    if (consonant_count == 0) {\n        return word[0];\n\
    \    }\n    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index\
    \ = vowels.index", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  \
    \  let consonants = word.chars()\n        .filter(c => c != \" \")\n        .filter(c\
    \ => !vowels.includes(c))\n        .map(c => c.toLowerCase())\n        .sort();\n\
    \    let consonant_index = consonants.indexOf(consonants.last());\n    if (consonant_index\
    \ == -1) {\n        return \"\";\n    }\n    let vowel_index = consonant_index\
    \ + 1;\n    if (vowel_index == word.length()) {\n        return \"\";\n    }\n\
    \    return vowels[vowel_index];", "    let vowels = \"aeiouAEIOU\";\n    let\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    let vowels_count\
    \ = 0;\n    let consonants_count = 0;\n    let result = \"\";\n    for (let i\
    \ = word.length() - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) !=\
    \ -1) {\n            vowels_count += 1;\n            if (vowels_count > 1) {\n\
    \                break;\n            }\n            result = word[i];\n      \
    \  } else if (consonants.indexOf(word[i]) != -1) {\n            consonants_count\
    \ += 1;\n            if (consonants_count > 1) {\n                break;\n   \
    \         }\n        }\n    }\n    return result;", "    let vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    if (vowel_index === -1 || consonant_index === -1) {\n        return\
    \ \"\";\n    }\n    let consonant_index_plus_1 = consonant_index + 1;\n    let\
    \ vowel_index_plus_1 = vowel_index + 1;\n    if (vowel_index_plus_1 === vowels.length)\
    \ {\n        return \"\";\n    }\n    if (vowel_index_plus_1 === consonant_index_plus_1)\
    \ {\n        return vowels[vowel_index_plus_1];\n    }\n    return vowels[vowel_index_plus_1];",
  "    let vowels = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index\
    \ = vowels.indexOf(word[word.length - 1]);\n    let consonant_count = 0;\n   \
    \ let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++) {\n    \
    \    if (consonants.indexOf(word[i]) > consonant_index) {\n            consonant_count\
    \ += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index) {\n   \
    \         vowel_count += 1;\n        }\n    }\n    if (consonant_count == 0 ||\
    \ vowel_count == 0) {\n        return \"\";\n    }\n    let consonant_index_plus\
    \ = consonant_index + 1;\n    let vowel_index_plus = vowel_index + 1;\n    if\
    \ (consonant_index_plus == word.length - 1) {\n        return \"\";\n    }\n \
    \   if (vowel_index_plus == word.length - 1) {\n        return vowels[vowel_index_plus];\n\
    \    }\n    let consonant_count_plus = 0;\n    let vowel_count_plus = 0;\n   \
    \ for (let i = word.length - 2; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index_plus) {\n            consonant_count_plus += 1;\n        }\n\
    \        if (vowels.indexOf(word[i]) > vowel_index_plus) {\n            vowel_count_plus\
    \ += 1;\n        }\n    }\n    if (consonant_count_plus == 0 || vowel_count_plus\
    \ == 0) {\n        return \"\";\n    }\n    let consonant_index_minus = consonant_index\
    \ - 1;\n    let vowel_index_minus = vowel_index - 1;\n    if (cons", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_count) {\n                closest_vowel = word[i];\n\
    \            }\n        } else if (consonants.includes(word[i])) {\n         \
    \   consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.indexOf(word[i]) != -1) {\n            consonant_count += 1;\n \
    \           if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ vowels_count = 0;\n    let consonants_count = 0;\n    let result = \"\";\n \
    \   for (let i = 0; i < word.length(); i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowels_count += 1;\n            if (vowels_count > 1) {\n   \
    \             result = word[i];\n                break;\n            }\n     \
    \   } else if (consonants.includes(word[i])) {\n            consonants_count +=\
    \ 1;\n            if (consonants_count > 1) {\n                result = word[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_count) {\n                closest_vowel = word[i];\n\
    \            }\n        } else if (consonants.includes(word[i])) {\n         \
    \   consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let result = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i])) {\n\
    \            vowel_count += 1;\n            if (vowel_count > vowel_index) {\n\
    \                result = word[i];\n                break;\n            }\n  \
    \      } else if (consonants.includes(word[i])) {\n            consonant_count\
    \ += 1;\n            if (consonant_count > consonant_index) {\n              \
    \  result = word[i];\n                break;\n            }\n        }\n    }\n\
    \    return result;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n   \
    \ let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ == -1 || consonant_index == -1) {\n        return \"\"\n    } else if (vowel_index\
    \ < consonant_index) {\n        return vowels[vowel_index + 1]\n    } else {\n\
    \        return vowels[vowel_index - 1]\n    }", "    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let vowels_count = 0;\n    let\
    \ consonants_count = 0;\n    let closest_vowel = \"\";\n    for (let i = 0; i\
    \ < word.length(); i++) {\n        if (vowels.includes(word[i])) {\n         \
    \   vowels_count += 1;\n            if (vowels_count > 1) {\n                closest_vowel\
    \ = word[i];\n                break;\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonants_count += 1;\n            if (consonants_count > 1)\
    \ {\n                closest_vowel = word[i];\n                break;\n      \
    \      }\n        }\n    }\n    return closest_vowel;", "    let vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index =\
    \ consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let result = \"\";\n    if (vowel_index > consonant_index) {\n \
    \       result = vowels[vowel_index - consonant_index - 1];\n    }\n    return\
    \ result;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = word.split(\"\").filter(c => c != \" \");\n    let consonant_index = consonants.findIndex(c\
    \ => vowels.includes(c));\n    if (consonant_index == -1) {\n        return \"\
    \"\n    }\n    let vowel_index = consonants[consonant_index + 1].findIndex(v =>\
    \ vowels.includes(v));\n    if (vowel_index == -1) {\n        return \"\"\n  \
    \  }\n    return consonants[consonant_index + 1][vowel_index]", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[1]);\n\
    \    if (vowel_index >= 0 && consonant_index >= 0) {\n        let consonant_index_plus_1\
    \ = consonants.indexOf(word[2]);\n        if (consonant_index_plus_1 >= 0) {\n\
    \            return vowels[vowel_index + 1];\n        }\n    }\n    return \"\"\
    ;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index =\
    \ vowels.indexOf(word[word.length - 1]);\n    if (vowel_index > consonant_index)\
    \ {\n        return word[word.length - 1];\n    } else if (vowel_index < consonant_index)\
    \ {\n        return word[0];\n    } else {\n        return \"\";\n    }", "  \
    \  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_index_next = consonants.indexOf(word[1]);\n    let\
    \ vowel_index_next = vowels.indexOf(word[word.length - 2]);\n    if (consonant_index_next\
    \ >= consonant_index && vowel_index_next >= vowel_index) {\n        return word[1];\n\
    \    }\n    return \"\";", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (vowel_count == 0)\
    \ {\n        return \"\";\n    }\n    let closest_vowel = \"\";\n    if (consonant_count\
    \ == 0) {\n        closest_vowel = vowels[vowel_index + 1];\n    } else if (vowel_count\
    \ == 1) {\n        closest_vowel = vowels[vowel_index];\n    } else {\n      \
    \  let vowel_index_of_consonant = vowels.indexOf(word[consonant_index]);\n   \
    \     if (vowel_index_of_consonant > vowel_index) {\n            closest_vowel\
    \ = vowels[vowel_index_of_consonant - 1];\n        } else {\n            closest_vowel\
    \ = vowels[vowel_index_of_consonant + 1];\n        }\n    }\n    return closest_vowel;",
  "    let vowels = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let consonant_index\
    \ = 0;\n    let vowel_index = 0;\n    let result = \"\";\n    for (let i = 0;\
    \ i < word.length(); i++) {\n        let c = word[i];\n        if (vowels.indexOf(c)\
    \ > -1) {\n            vowel_count += 1;\n            if (vowel_count > 1) {\n\
    \                return \"\";\n            }\n            vowel_index = i;\n \
    \       } else if (consonants.indexOf(c) > -1) {\n            consonant_count\
    \ += 1;\n            if (consonant_count > 1) {\n                return \"\";\n\
    \            }\n            consonant_index = i;\n        }\n    }\n    if (vowel_count\
    \ == 0) {\n        return \"\";\n    }\n    if (vowel_index > consonant_index)\
    \ {\n        result = word[vowel_index];\n    } else {\n        result = word[consonant_index];\n\
    \    }\n    return result;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\";\n    }\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.indexOf(word[i]) > vowel_index) {\n            closest_vowel\
    \ = word[i];\n            break;\n        }\n    }\n    return closest_vowel;",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let result\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_index) {\n                result = word[i];\n\
    \                break;\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonant_count += 1;\n            if (consonant_count > consonant_index)\
    \ {\n                result = word[i];\n                break;\n            }\n\
    \        }\n    }\n    return result;", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let consonants = word.chars()\n        .filter(c => c !=\
    \ \" \")\n        .filter(c => vowels.indexOf(c) == -1)\n        .map(c => c.toLowerCase())\n\
    \        .sort();\n    let consonant_index = consonants.indexOf(consonants.last());\n\
    \    if (consonant_index == -1) {\n        return \"\";\n    } else {\n      \
    \  let vowel_index = consonants.indexOf(consonants[consonant_index + 1]);\n  \
    \      return vowels[vowel_index];\n    }", "    let vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n    let consonants = word.chars().filter(c => !vowels.includes(c)).to_list();\n\
    \    let consonant_index = consonants.indexOf(word.chars().find(c => !vowels.includes(c)));\n\
    \    let vowel_index = consonant_index + 1;\n    if (vowel_index < 0 || vowel_index\
    \ >= word.length()) {\n        return \"\"\n    }\n    return word.chars()[vowel_index]",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        } else {\n\
    \            consonant_count = 0;\n        }\n        if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            vowel_count += 1;\n        } else {\n        \
    \    vowel_count = 0;\n        }\n        if (consonant_count == 2 && vowel_count\
    \ == 1) {\n            return word[i];\n        }\n    }\n    return \"\";", " \
    \   let vowels = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index\
    \ = vowels.indexOf(word[word.length - 1]);\n    let consonant_count = 0;\n   \
    \ let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++) {\n    \
    \    if (consonants.indexOf(word[i]) > consonant_index) {\n            consonant_count\
    \ += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index) {\n   \
    \         vowel_count += 1;\n        }\n    }\n    if (vowel_count > consonant_count)\
    \ {\n        return word[word.length - 1];\n    }\n    return \"\";", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = word.chars().filter(c\
    \ => !vowels.includes(c)).to_list();\n    let consonant_index = consonants.indexOf(word.chars().find(c\
    \ => !vowels.includes(c)));\n    let vowel_index = consonants.indexOf(word.chars().find(c\
    \ => vowels.includes(c)));\n    if (vowel_index == -1 || consonant_index == -1)\
    \ {\n        return \"\"\n    } else {\n        return word.chars()[vowel_index\
    \ + 1 + consonant_index]\n    }", "    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ > consonant_index) {\n        return word[word.length - 1];\n    }\n    for\
    \ (let i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            return word[i];\n        }\n    }\n    return \"\";", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = word.length - 1;\n    let vowel_count = word.length\
    \ - 1 - consonant_index;\n    let closest_vowel = \"\";\n    if (vowel_count >\
    \ 0 && vowel_count <= vowel_index) {\n        closest_vowel = vowels[vowel_count];\n\
    \    } else if (vowel_count > vowel_index && vowel_count <= consonant_count) {\n\
    \        closest_vowel = vowels[vowel_count - 1];\n    } else if (vowel_count\
    \ > consonant_count) {\n        closest_vowel = vowels[vowel_count - 1];\n   \
    \ } else if (vowel_count == 0) {\n        closest_vowel = vowels[vowel_count];\n\
    \    } else if (vowel_count == 1) {\n        closest_vowel = vowels[vowel_count];\n\
    \    } else if (vowel_count == 2) {\n        closest_vowel = vowels[vowel_count];\n\
    \    } else if (vowel_count == 3) {\n        closest_vowel = vowels[vowel_count];\n\
    \    } else if (vowel_count == 4) {\n        closest_vowel = vowels[vowel_count];\n\
    \    } else if (vowel_count == 5) {\n        closest_vowel = vowels[vowel_count];\n\
    \    } else if (vowel", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n   \
    \ let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) < consonant_index) {\n          \
    \  consonant_count += 1;\n        } else if (vowels.indexOf(word[i]) < vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ > vowel_count) {\n        return vowels[vowel_count - 1];\n    } else {\n  \
    \      return vowels[vowel_count];\n    }", "    let vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\",\
    \ \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let result = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i])) {\n\
    \            vowel_count += 1;\n            if (vowel_count > vowel_index) {\n\
    \                result = word[i];\n                break;\n            }\n  \
    \      } else if (consonants.includes(word[i])) {\n            consonant_count\
    \ += 1;\n            if (consonant_count > consonant_index) {\n              \
    \  result = word[i];\n                break;\n            }\n        }\n    }\n\
    \    return result;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n   \
    \ let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let result = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i])) {\n\
    \            vowel_count += 1;\n            if (vowel_count > vowel_count) {\n\
    \                result = word[i];\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    let vowels_count = 0;\n    let consonants_count = 0;\n    let result = \"\
    \";\n    for (let i = word.length() - 1; i >= 0; i--) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowels_count += 1;\n            if (vowels_count > 1) {\n   \
    \             result = word[i];\n                break;\n            }\n     \
    \   } else if (consonants.includes(word[i])) {\n            consonants_count +=\
    \ 1;\n            if (consonants_count > 1) {\n                result = word[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = word.chars()\n\
    \        .filter(c => c != \" \")\n        .filter(c => vowels.indexOf(c) == -1);\n\
    \    let consonant_index = consonants.indexOf(consonants.last());\n    let vowel\
    \ = vowels[consonant_index + 1];\n    return vowel;", "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (vowel_count == 0\
    \ || consonant_count == 0) {\n        return \"\";\n    }\n    let closest_vowel\
    \ = \"\";\n    for (let i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\";\n    }\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (consonant_count == 0 || vowel_count == 0) {\n     \
    \   return \"\";\n    }\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0;", "    let vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index =\
    \ consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (consonant_count == 0 || vowel_count == 0) {\n     \
    \   return \"\";\n    }\n    let closest_vowel = \"\";\n    for (let i = consonant_index\
    \ + 1; i < vowel_index; i++) {\n        closest_vowel += vowels[i];\n    }\n \
    \   return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\";\n    }\n    let closest_vowel_index\
    \ = consonant_index + 1;\n    for (let i = 0; i < word.length - 1; i++) {\n  \
    \      if (vowels.indexOf(word[i]) > vowel_index) {\n            closest_vowel_index\
    \ = i;\n        }\n    }\n    return word[closest_vowel_index];", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        } else if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ > vowel_count) {\n        return vowels[vowel_index + 1];\n    } else {\n  \
    \      return vowels[vowel_index - 1];\n    }", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    if (vowel_index > consonant_index) {\n        return word[word.length\
    \ - 1];\n    } else if (vowel_index < consonant_index) {\n        return word[0];\n\
    \    } else {\n        return \"\";\n    }", "    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = consonants.length - 1 - consonant_index;\n    let vowel_count = vowels.length\
    \ - 1 - vowel_index;\n    let consonant_vowel_count = Math.min(vowel_count, consonant_count);\n\
    \    let consonant_vowel_index = consonant_count - consonant_vowel_count;\n  \
    \  let vowel_consonant_count = Math.min(vowel_count, consonant_count);\n    let\
    \ vowel_consonant_index = vowel_count - vowel_consonant_count;\n    let consonant_vowel_index_plus_1\
    \ = consonant_vowel_index + 1;\n    let vowel_consonant_index_plus_1 = vowel_consonant_index\
    \ + 1;\n    let consonant_vowel_index_minus_1 = consonant_vowel_index - 1;\n \
    \   let vowel_consonant_index_minus_1 = vowel_consonant_index - 1;\n    let consonant_vowel_index_plus_2\
    \ = consonant_vowel_index + 2;\n    let vowel_consonant_index_plus_2 = vowel_consonant_index\
    \ + 2;\n    let consonant_vowel_index_minus_2 = consonant_vowel_index - 2;\n \
    \   let vowel_consonant_index_minus_2 = vowel_consonant_index - 2;\n    let consonant_vowel_index_plus_3\
    \ = consonant_vowel_index + 3;\n    let vowel_conson", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    let\
    \ vowels_count = 0;\n    let consonants_count = 0;\n    let result = \"\";\n \
    \   for (let i = word.length() - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            vowels_count += 1;\n            if (vowels_count > 1) {\n\
    \                break;\n            }\n            if (consonants.indexOf(word[i\
    \ - 1]) > -1) {\n                result = word[i];\n                break;\n \
    \           }\n        } else if (consonants.indexOf(word[i]) > -1) {\n      \
    \      consonants_count += 1;\n            if (consonants_count > 1) {\n     \
    \           break;\n            }\n            if (vowels.indexOf(word[i - 1])\
    \ > -1) {\n                result = word[i];\n                break;\n       \
    \     }\n        }\n    }\n    return result;", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let result\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.indexOf(word[i]) != -1) {\n            vowel_count += 1;\n\
    \        } else if (consonants.indexOf(word[i]) != -1) {\n            consonant_count\
    \ += 1;\n        }\n        if (vowel_count == 1 && consonant_count == 1) {\n\
    \            result = word[i];\n            break;\n        }\n    }\n    return\
    \ result;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index =\
    \ vowels.indexOf(word[word.length - 1]);\n    let consonant_count = 0;\n    let\
    \ vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i])) {\n\
    \            vowel_count += 1;\n            if (vowel_count > vowel_count) {\n\
    \                closest_vowel = word[i];\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            vowel_count += 1;\n        } else if (consonants.indexOf(word[i])\
    \ != -1) {\n            consonant_count += 1;\n        }\n        if (vowel_count\
    \ == 2 && consonant_count == 0) {\n            closest_vowel = word[i];\n    \
    \        break;\n        }\n    }\n    return closest_vowel;", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = word.length - 1;\n    let vowel_count = 0;\n\
    \    let closest_vowel = \"\";\n    for (let i = consonant_index + 1; i < word.length\
    \ - 1; i++) {\n        if (vowels.indexOf(word[i]) > -1) {\n            vowel_count\
    \ += 1;\n            if (vowel_count > vowel_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        } else {\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            vowel_count += 1;\n        } else if (consonants.indexOf(word[i])\
    \ != -1) {\n            consonant_count += 1;\n        }\n        if (vowel_count\
    \ == 1 && consonant_count == 1) {\n            closest_vowel = word[i];\n    \
    \        break;\n        }\n    }\n    return closest_vowel;", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (consonant_count > vowel_count) {\n        return word[word.length\
    \ - 1];\n    } else if (consonant_count < vowel_count) {\n        return word[0];\n\
    \    } else {\n        return \"\";\n    }", "    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ > consonant_index) {\n        return word[word.length - 1];\n    } else if (vowel_index\
    \ < consonant_index) {\n        return word[0];\n    } else {\n        return\
    \ \"\";\n    }", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index\
    \ = vowels.indexOf(word[word.length - 1]);\n    let consonant_index_next = consonants.indexOf(word[1]);\n\
    \    let vowel_index_next = vowels.indexOf(word[word.length - 2]);\n    if (vowel_index\
    \ > -1 && vowel_index_next > -1 && consonant_index_next > -1) {\n        let consonant_index_next_next\
    \ = consonants.indexOf(word[2]);\n        if (vowel_index_next > consonant_index_next\
    \ && vowel_index_next > consonant_index_next_next) {\n            return vowels[vowel_index_next];\n\
    \        } else if (vowel_index > consonant_index_next && vowel_index > consonant_index_next_next)\
    \ {\n            return vowels[vowel_index];\n        } else if (vowel_index_next\
    \ > consonant_index_next && vowel_index_next > consonant_index) {\n          \
    \  return vowels[vowel_index_next];\n        } else if (vowel_index > consonant_index_next\
    \ && vowel_index > consonant_index) {\n            return vowels[vowel_index];\n\
    \        } else if (vowel_index_next > consonant_index && vowel_index_next > consonant_index_next)\
    \ {\n            return vowels[vowel_index_next];\n        } else if (vowel_index\
    \ > consonant_index && vowel_index > consonant_index_next) {\n            return\
    \ vowels[vowel_index];\n        } else if (vowel_index_next >", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_count) {\n                closest_vowel = word[i];\n\
    \            }\n        } else if (consonants.includes(word[i])) {\n         \
    \   consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ > consonant_index) {\n        return word[word.length - 1];\n    }\n    let\
    \ consonant_index_plus_1 = consonant_index + 1;\n    let vowel_index_plus_1 =\
    \ vowels.indexOf(word[consonant_index_plus_1]);\n    if (vowel_index_plus_1 >\
    \ consonant_index_plus_1) {\n        return word[consonant_index_plus_1];\n  \
    \  }\n    return \"\";", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[1]);\n    if (vowel_index < 0 || consonant_index\
    \ < 0) {\n        return \"\"\n    }\n    let consonant_index_next = consonants.indexOf(word[2]);\n\
    \    if (consonant_index_next < 0) {\n        return \"\"\n    }\n    let vowel_index_next\
    \ = vowels.indexOf(word[3]);\n    if (vowel_index_next < 0) {\n        return\
    \ \"\"\n    }\n    if (vowel_index_next - vowel_index < consonant_index_next -\
    \ consonant_index) {\n        return vowels[vowel_index + 1]\n    } else {\n \
    \       return vowels[vowel_index_next]\n    }", "    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = consonant_index + 1; i < word.length\
    \ - 1; i++) {\n        if (consonants.indexOf(word[i]) != -1) {\n            consonant_count\
    \ += 1;\n        }\n    }\n    for (let i = vowel_index + 1; i < word.length -\
    \ 1; i++) {\n        if (vowels.indexOf(word[i]) != -1) {\n            vowel_count\
    \ += 1;\n        }\n    }\n    if (consonant_count == 0 || vowel_count == 0) {\n\
    \        return \"\";\n    }\n    let closest_vowel_index = 0;\n    let closest_vowel_distance\
    \ = Math.abs(vowel_index - consonant_index);\n    for (let i = 1; i < word.length\
    \ - 1; i++) {\n        let distance = Math.abs(vowel_index - consonants.indexOf(word[i]));\n\
    \        if (distance < closest_vowel_distance) {\n            closest_vowel_distance\
    \ = distance;\n            closest_vowel_index = i;\n        }\n    }\n    return\
    \ word[closest_vowel_index];", "    let vowels = [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = word.length - 1 - consonant_index;\n    let vowel_count = word.length - 1\
    \ - vowel_index;\n    if (vowel_count > consonant_count) {\n        return word[word.length\
    \ - 1];\n    } else if (vowel_count == consonant_count) {\n        return word[word.length\
    \ - 2];\n    } else {\n        return \"\";\n    }", "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let result = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i]) != -1)\
    \ {\n            vowel_count += 1;\n        } else if (consonants.indexOf(word[i])\
    \ != -1) {\n            consonant_count += 1;\n        }\n        if (vowel_count\
    \ > 0 && consonant_count > 0) {\n            result = word[i];\n            break;\n\
    \        }\n    }\n    return result;", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (vowel_count == 0)\
    \ {\n        return \"\";\n    }\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            closest_vowel = word[i];\n            break;\n\
    \        }\n    }\n    return closest_vowel;", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_index_next\
    \ = consonants.indexOf(word[1]);\n    let vowel_index_next = vowels.indexOf(word[word.length\
    \ - 2]);\n    if (vowel_index_next >= 0 && consonant_index_next >= 0) {\n    \
    \    return vowels[vowel_index_next];\n    } else if (vowel_index >= 0 && consonant_index_next\
    \ >= 0) {\n        return vowels[vowel_index];\n    } else if (vowel_index >=\
    \ 0 && vowel_index_next >= 0) {\n        return vowels[vowel_index];\n    } else\
    \ if (vowel_index >= 0 && vowel_index_next < 0) {\n        return vowels[vowel_index];\n\
    \    } else if (vowel_index_next >= 0 && vowel_index < 0) {\n        return vowels[vowel_index_next];\n\
    \    } else if (vowel_index < 0 && vowel_index_next >= 0) {\n        return vowels[vowel_index_next];\n\
    \    } else if (vowel_index < 0 && vowel_index_next < 0) {\n        return vowels[vowel_index];\n\
    \    } else if (vowel_index >= 0 && vowel_index_next < 0) {\n        return vowels[vowel_index];\n\
    \    } else if (vowel_index < 0 && vowel_index_next >= 0) {\n        return vowels[vowel_index_next];\n\
    \    } else if (vowel_index < 0 &&", "    let vowels = [String::from(\"a\"), String::from(\"\
    e\"), String::from(\"i\"), String::from(\"o\"), String::from(\"u\")];\n    let\
    \ consonants = word.split(\"\").filter(c => c != \"\")\n        .map(c => c.toLowerCase())\n\
    \        .filter(c => c != \"\")\n        .filter(c => vowels.includes(c))\n \
    \       .filter(c => c != \"\")\n        .filter(c => c != \"\")\n        .filter(c\
    \ => c != \"\")\n        .filter(c => c != \"\")\n        .filter(c => c != \"\
    \")\n        .filter(c => c != \"\")\n        .filter(c => c != \"\")\n      \
    \  .filter(c => c != \"\")\n        .filter(c => c != \"\")\n        .filter(c\
    \ => c != \"\")\n        .filter(c => c != \"\")\n        .filter(c => c != \"\
    \")\n        .filter(c => c != \"\")\n        .filter(c => c != \"\")\n      \
    \  .filter(c => c != \"\")\n        .filter(c => c != \"\")\n        .filter(c\
    \ => c != \"\")\n        .filter(c => c != \"\")\n        .filter(c => c != \"\
    \")\n        .filter(c => c != \"\")\n        .filter(c => c != \"\")\n      \
    \  .filter(c => c != \"\")\n        .filter(c => c != \"\")\n        .filter(c\
    \ => c != \"\")\n        .filter(c => c != \"\")\n        .filter(c => c != \"\
    \")\n        .filter(c => c != \"\")\n        .filter(c => c != \"\")\n      \
    \  .filter(c => c != \"\")\n        .filter(c => c != \"\")\n        .filter(c\
    \ => c != \"\")\n        .filter(c => c != \"\")\n        .filter(c => c != \"\
    \")\n        .filter(c => c != \"\")\n        .filter(c => c != \"\")\n      \
    \  .filter(c => c != \"\")\n        .filter(c => c != \"\")\n        .filter(c\
    \ => c != \"\")", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n   \
    \ let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n    let\
    \ vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.indexOf(word[i]) != -1) {\n            consonant_count += 1;\n \
    \           if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\",\n    ];\n    let consonants = [\n        \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\",\n    ];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let consonant_index_next\
    \ = consonants.indexOf(word[1]);\n    let vowel_index_next = vowels.indexOf(word[word.length\
    \ - 2]);\n    let consonant_count_next = 0;\n    let vowel_count_next = 0;\n \
    \   let result = \"\";\n    while (vowel_index_next >= 0 && vowel_count_next <\
    \ vowel_count) {\n        vowel_count_next += 1;\n        vowel_index_next -=\
    \ 1;\n    }\n    while (consonant_index_next >= 0 && consonant_count_next < consonant_count)\
    \ {\n        consonant_count_next += 1;\n        consonant_index_next -= 1;\n\
    \    }\n    if (vowel_index >= 0 && vowel_count < vowel_count_next) {\n      \
    \  result = vowels[vowel_index];\n    } else if (consonant_index >= 0 && consonant_count\
    \ < consonant_count_next) {\n        result = consonants[consonant_index];\n \
    \   }\n    return result;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = word.chars()\n        .filter(c => c != \" \")\n \
    \       .map(c => c.toLowerCase())\n        .filter(c => vowels.indexOf(c) ==\
    \ -1);\n    let consonant_index = consonants.indexOf(consonants.last());\n   \
    \ if (consonant_index == -1) {\n        return \"\";\n    }\n    let vowel_index\
    \ = consonants.slice(consonant_index).indexOf(vowels.last());\n    if (vowel_index\
    \ == -1) {\n        return \"\";\n    }\n    return vowels[vowel_index];", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (vowel_count == 0) {\n        return \"\";\n    }\n\
    \    let closest_vowel = \"\";\n    if (consonant_count == 0) {\n        closest_vowel\
    \ = vowels[vowel_count - 1];\n    } else {\n        let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n        let consonant_index = consonants.indexOf(word[0]);\n       \
    \ let closest_vowel_index = 0;\n        for (let i = 0; i < word.length - 1; i++)\
    \ {\n            if (vowels.indexOf(word[i]) > vowel_index) {\n              \
    \  closest_vowel_index = i;\n                break;\n            }\n        }\n\
    \        if (closest_vowel_index == 0) {\n            closest_vowel = vowels[vowel_count\
    \ - 1];\n        } else {\n            closest_vowel = vowels[closest_vowel_index];\n\
    \        }\n    }\n    return closest_vowel;", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            vowel_count += 1;\n            if (vowel_count == 1) {\n\
    \                closest_vowel = word[i];\n            }\n        } else if (vowels.indexOf(word[i])\
    \ == -1) {\n            consonant_count += 1;\n        }\n    }\n    return closest_vowel;",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = word.chars()\n\
    \        .filter(c => !vowels.includes(c))\n        .map(c => c.toLowerCase())\n\
    \        .toSet();\n    let consonant_index = consonants.reduce((acc, c) => {\n\
    \        let index = word.indexOf(c);\n        if (index === -1) {\n         \
    \   return acc;\n        }\n        return index;\n    }, -1);\n    let vowel_index\
    \ = vowels.reduce((acc, v) => {\n        let index = word.indexOf(v);\n      \
    \  if (index === -1) {\n            return acc;\n        }\n        return index;\n\
    \    }, -1);\n    if (vowel_index === -1 || consonant_index === -1) {\n      \
    \  return \"\";\n    }\n    let vowel_index_end = vowel_index + 1;\n    let consonant_index_end\
    \ = consonant_index + 1;\n    let vowel_index_start = vowel_index - 1;\n    let\
    \ consonant_index_start = consonant_index - 1;\n    if (vowel_index_end >= word.length)\
    \ {\n        return \"\";\n    }\n    if (vowel_index_start < 0) {\n        return\
    \ \"\";\n    }\n    if (consonant_index_end >= word.length) {\n        return\
    \ \"\";\n    }\n    if (consonant_index_start < 0) {\n        return \"\";\n \
    \   }\n    if (vowel_index_end < vowel_index_start) {\n        return \"\";\n\
    \    }\n    if (vowel_index_start < vowel_index_end) {\n        return word[vowel_index_start];\n\
    \    }\n    if (consonant_index_end < consonant_index_start) {\n        return\
    \ word[consonant_index_start];\n    }\n    return word[consonant_index_end];",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    if (vowel_index < 0 || consonant_index < 0) {\n        return \"\
    \"\n    } else if (vowel_index - consonant_index < 1) {\n        return \"\"\n\
    \    } else {\n        return vowels[vowel_index - consonant_index - 1]\n    }",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_count) {\n                closest_vowel = word[i];\n\
    \            }\n        } else if (consonants.includes(word[i])) {\n         \
    \   consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ == -1 || consonant_index == -1) {\n        return \"\"\n    } else if (vowel_index\
    \ < consonant_index) {\n        return vowels[vowel_index + 1]\n    } else {\n\
    \        return vowels[vowel_index - 1]\n    }", "    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\",\
    \ \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\";\n    }\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.indexOf(word[i]) > vowel_index) {\n            closest_vowel\
    \ = word[i];\n            break;\n        }\n    }\n    return closest_vowel;",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    if (vowel_index == -1 || consonant_index == -1) {\n        return\
    \ \"\"\n    }\n    let consonant_index_plus_1 = consonant_index + 1;\n    let\
    \ vowel_index_plus_1 = vowel_index + 1;\n    if (vowel_index_plus_1 == word.length)\
    \ {\n        return \"\"\n    }\n    if (vowel_index_plus_1 == word.length - 1)\
    \ {\n        return vowels[vowel_index_plus_1]\n    }\n    if (vowel_index_plus_1\
    \ == consonant_index_plus_1) {\n        return vowels[vowel_index_plus_1]\n  \
    \  }\n    return \"\"", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n   \
    \ let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = word.length - 1;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n\
    \    for (let i = consonant_index + 1; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.indexOf(word[i]) > -1) {\n            consonant_count += 1;\n  \
    \          if (vowel_count > vowel_count) {\n                closest_vowel = word[i];\n\
    \            }\n        }\n    }\n    return closest_vowel;", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = consonants.length - 1 - consonant_index;\n\
    \    let vowel_count = vowels.length - 1 - vowel_index;\n    let consonant_index_plus_1\
    \ = consonant_index + 1;\n    let vowel_index_plus_1 = vowel_index + 1;\n    let\
    \ consonant_index_minus_1 = consonant_index - 1;\n    let vowel_index_minus_1\
    \ = vowel_index - 1;\n    let consonant_index_plus_2 = consonant_index + 2;\n\
    \    let vowel_index_plus_2 = vowel_index + 2;\n    let consonant_index_minus_2\
    \ = consonant_index - 2;\n    let vowel_index_minus_2 = vowel_index - 2;\n   \
    \ let consonant_index_plus_3 = consonant_index + 3;\n    let vowel_index_plus_3\
    \ = vowel_index + 3;\n    let consonant_index_minus_3 = consonant_index - 3;\n\
    \    let vowel_index_minus_3 = vowel_index - 3;\n    let consonant_index_plus_4\
    \ = consonant_index + 4;\n    let vowel_index_plus_4 = vowel_index + 4;\n    let\
    \ consonant_index_minus_4 = consonant_index - 4;\n    let vowel_index_minus_4\
    \ = vowel_index - 4;\n    let consonant_index_plus_5 = consonant_index + 5;\n\
    \    let vowel_index_plus_5 = vowel_index + 5;\n    let consonant_index_minus_5\
    \ = consonant_index - 5;\n", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ > consonant_index) {\n        return word[word.length - 1];\n    }\n    let\
    \ consonant_index_plus_1 = consonant_index + 1;\n    let vowel_index_plus_1 =\
    \ vowel_index + 1;\n    if (vowel_index_plus_1 < consonant_index_plus_1) {\n \
    \       return word[word.length - 1];\n    }\n    return \"\";", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_count) {\n                closest_vowel = word[i];\n\
    \            }\n        } else if (consonants.includes(word[i])) {\n         \
    \   consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = consonants.length - 1 - consonant_index;\n    let vowel_count = vowels.length\
    \ - 1 - vowel_index;\n    let result = \"\";\n    if (vowel_count > 0 && consonant_count\
    \ > 0) {\n        let consonant_index = consonants.indexOf(word[0]);\n       \
    \ let vowel_index = vowels.indexOf(word[word.length - 1]);\n        let consonant_count\
    \ = consonants.length - 1 - consonant_index;\n        let vowel_count = vowels.length\
    \ - 1 - vowel_index;\n        let consonant_index_2 = consonants.indexOf(word[1]);\n\
    \        let vowel_index_2 = vowels.indexOf(word[word.length - 2]);\n        let\
    \ consonant_count_2 = consonants.length - 1 - consonant_index_2;\n        let\
    \ vowel_count_2 = vowels.length - 1 - vowel_index_2;\n        if (vowel_count_2\
    \ > 0 && consonant_count_2 > 0) {\n            let consonant_index_3 = consonants.indexOf(word[2]);\n\
    \            let vowel_index_3 = vowels.indexOf(word[word.length - 3]);\n    \
    \        let consonant_count_3 = consonants.length - 1 - consonant_index_3;\n\
    \            let vowel_count_3 = vowels.length - 1 - vowel_index_3;\n        \
    \    if (vowel_count_3 > 0 && consonant_count_3 > 0) {\n                let consonant_index_4\
    \ = consonants.index", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n   \
    \ let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    if (vowel_index > consonant_index) {\n        return word[word.length\
    \ - 1];\n    }\n    let i = consonant_index + 1;\n    while (i < word.length -\
    \ 1) {\n        if (vowels.indexOf(word[i]) > -1) {\n            return word[i];\n\
    \        }\n        i += 1;\n    }\n    return \"\";", "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let consonants = word.chars().filter(c =>\
    \ !vowels.includes(c)).to_list();\n    let consonant_index = consonants.indexOf(word.chars().find(c\
    \ => !vowels.includes(c)));\n    let vowel_index = consonants.indexOf(word.chars().find(c\
    \ => vowels.includes(c)));\n    if (vowel_index == -1 || consonant_index == -1)\
    \ {\n        return \"\"\n    } else {\n        return word.chars().slice(vowel_index,\
    \ consonant_index + 1).join(\"\");\n    }", "    let vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\",\
    \ \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (consonant_index\
    \ == -1 || vowel_index == -1) {\n        return \"\";\n    }\n    let consonant_index_next\
    \ = consonants.indexOf(word[consonant_index + 1]);\n    if (consonant_index_next\
    \ == -1) {\n        return \"\";\n    }\n    let vowel_index_next = vowels.indexOf(word[vowel_index\
    \ + 1]);\n    if (vowel_index_next == -1) {\n        return \"\";\n    }\n   \
    \ return word[consonant_index + 1] + word[vowel_index + 1];", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (vowel_count == 0) {\n        return \"\";\n    }\n\
    \    if (consonant_count == 0) {\n        return word[word.length - 1];\n    }\n\
    \    let closest_vowel = word[word.length - 1];\n    for (let i = word.length\
    \ - 2; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) > vowel_index) {\n\
    \            vowel_count += 1;\n        }\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowel_count == vowel_count + 1) {\n            closest_vowel = word[i];\n\
    \        }\n    }\n    return closest_vowel;", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (consonant_count == 0 || vowel_count == 0) {\n     \
    \   return \"\";\n    }\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ >", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index =\
    \ vowels.indexOf(word[word.length - 1]);\n    let consonant_count = 0;\n    let\
    \ vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i]) != -1)\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.indexOf(word[i]) != -1) {\n            consonant_count += 1;\n \
    \           if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ != -1) {\n            consonant_count += 1;\n        }\n    }\n    for (let\
    \ i = vowel_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\";\n    }\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let closest_vowel = \"\";\n    if (vowel_count > consonant_count)\
    \ {\n        for (let i = consonant_index + 1; i < word.length - 1; i++) {\n \
    \           if (vowels.indexOf(word[i]) != -1) {\n                closest_vowel\
    \ = word[i];\n                break;\n            }\n        }\n    } else {\n\
    \        for (let i = vowel_index + 1; i < word.length - 1; i++) {\n         \
    \   if (consonants.indexOf(word[i]) != -1) {\n                closest_vowel =\
    \ word[i];\n                break;\n            }\n        }\n    }\n    return\
    \ closest", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index =\
    \ vowels.indexOf(word[word.length - 1]);\n    let consonant_count = 0;\n    let\
    \ vowel_count = 0;\n    let result = \"\";\n    for (let i = consonant_index +\
    \ 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i])) {\n  \
    \          vowel_count += 1;\n            if (vowel_count > vowel_count) {\n \
    \               result = word[i];\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index =\
    \ vowels.indexOf(word[word.length - 1]);\n    let consonant_count = 0;\n    let\
    \ vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i]) != -1)\
    \ {\n            vowel_count += 1;\n        } else if (consonants.indexOf(word[i])\
    \ != -1) {\n            consonant_count += 1;\n        }\n        if (vowel_count\
    \ == 1 && consonant_count == 0) {\n            closest_vowel = word[i];\n    \
    \        break;\n        }\n    }\n    return closest_vowel;", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        } else {\n\
    \            consonant_count = 0;\n        }\n        if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            vowel_count += 1;\n        } else {\n        \
    \    vowel_count = 0;\n        }\n        if (consonant_count == 2 && vowel_count\
    \ == 1) {\n            return word[i];\n        }\n    }\n    return \"\";", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count++;\n        }\n        if\
    \ (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count++;\n    \
    \    }\n    }\n    if (consonant_count > vowel_count) {\n        return vowels[vowel_index\
    \ + 1];\n    } else {\n        return vowels[vowel_index - 1];\n    }", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_count) {\n                closest_vowel = word[i];\n\
    \            }\n        } else if (consonants.includes(word[i])) {\n         \
    \   consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    if (vowel_index == -1 || consonant_index == -1) {\n        return\
    \ \"\";\n    }\n    let consonant_index_plus_1 = consonant_index + 1;\n    let\
    \ vowel_index_plus_1 = vowel_index + 1;\n    if (vowel_index_plus_1 == word.length)\
    \ {\n        return \"\";\n    }\n    if (consonant_index_plus_1 == word.length)\
    \ {\n        return vowels[vowel_index_plus_1];\n    }\n    if (vowel_index_plus_1\
    \ == consonant_index_plus_1) {\n        return vowels[vowel_index_plus_1];\n \
    \   }\n    let consonant_index_plus_2 = consonant_index_plus_1 + 1;\n    let vowel_index_plus_2\
    \ = vowel_index_plus_1 + 1;\n    if (vowel_index_plus_2 == word.length) {\n  \
    \      return \"\";\n    }\n    if (consonant_index_plus_2 == word.length) {\n\
    \        return vowels[vowel_index_plus_2];\n    }\n    if (vowel_index_plus_2\
    \ == consonant_index_plus_2) {\n        return vowels[vowel_index_plus_2];\n \
    \   }\n    let consonant_index_plus_3 = consonant_index_plus_2 + 1;\n    let vowel_index_plus_3\
    \ = vowel_index_plus_2 + 1;\n    if (vowel_index_plus_", "    let vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index =\
    \ consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count++;\n        }\n        if\
    \ (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count++;\n    \
    \    }\n    }\n    if (vowel_count == 0) {\n        return \"\";\n    }\n    if\
    \ (consonant_count == 0) {\n        return word[word.length - 1];\n    }\n   \
    \ let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count++;\n        }\n        if\
    \ (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count++;\n    \
    \    }\n    }\n    let consonant_index = consonants.indexOf(word[0]);\n    let\
    \ vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n   \
    \ let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n    let\
    \ vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index <\
    \ 0 || consonant_index < 0) {\n        return \"\"\n    }\n    let consonant_index_plus_1\
    \ = consonant_index + 1;\n    let vowel_index_plus_1 = vowel_index + 1;\n    if\
    \ (vowel_index_plus_1 >= vowels.length || consonant_index_plus_1 >= consonants.length)\
    \ {\n        return \"\"\n    }\n    return vowels[vowel_index_plus_1]", "   \
    \ let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ vowels_count = 0;\n    let consonants_count = 0;\n    let closest_vowel = \"\
    \";\n    for (let i = 0; i < word.length(); i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowels_count += 1;\n            if (vowels_count > 1) {\n   \
    \             closest_vowel = word[i];\n                break;\n            }\n\
    \        } else if (consonants.includes(word[i])) {\n            consonants_count\
    \ += 1;\n            if (consonants_count > 1) {\n                closest_vowel\
    \ = word[i];\n                break;\n            }\n        }\n    }\n    return\
    \ closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  \
    \  let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n    let\
    \ vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\";\n    }\n    let closest_vowel\
    \ = \"\";\n    let closest_vowel_index = 0;\n    for (let i = word.length - 1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(word[i]) > vowel_index) {\n     \
    \       closest_vowel = word[i];\n            closest_vowel_index = i;\n     \
    \       break;\n        }\n    }\n    return closest_vowel;", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = word.length - 1 - consonant_index;\n    let\
    \ vowel_count = word.length - 1 - vowel_index;\n    if (vowel_count > consonant_count)\
    \ {\n        return word[vowel_index + 1];\n    } else if (vowel_count < consonant_count)\
    \ {\n        return word[consonant_index + 1];\n    } else {\n        return \"\
    \";\n    }", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index =\
    \ vowels.indexOf(word[word.length - 1]);\n    let consonant_count = 0;\n    let\
    \ vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i])) {\n\
    \            vowel_count += 1;\n            if (vowel_count > vowel_count) {\n\
    \                closest_vowel = word[i];\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let vowels_count = 0;\n    let consonants_count =\
    \ 0;\n    let closest_vowel = \"\";\n    for (let i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.includes(word[i])) {\n            vowels_count\
    \ += 1;\n            if (vowels_count > 1) {\n                closest_vowel =\
    \ word[i];\n                break;\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonants_count += 1;\n            if (consonants_count > 1)\
    \ {\n                closest_vowel = word[i];\n                break;\n      \
    \      }\n        }\n    }\n    return closest_vowel;", "    let vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index =\
    \ consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ > consonant_index) {\n            consonant_count += 1;\n        }\n       \
    \ if (vowels.indexOf(word[i]) > vowel_index) {\n            vowel_count += 1;\n\
    \        }\n    }\n    if (vowel_count > consonant_count) {\n        return vowels[vowel_index\
    \ + 1];\n    } else {\n        return \"\";\n    }", "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = word.split(\"\
    \").filter(c => c !== \"\").map(c => c.toLowerCase());\n    let consonant_count\
    \ = consonants.length;\n    let vowel_count = vowels.length;\n    let vowel_index\
    \ = 0;\n    let consonant_index = 0;\n    let closest_vowel = \"\";\n    while\
    \ (vowel_count > 0 && consonant_count > 0) {\n        if (vowels[vowel_index]\
    \ === consonants[consonant_index]) {\n            vowel_index += 1;\n        \
    \    if (vowel_index === vowel_count) {\n                closest_vowel = vowels[vowel_index\
    \ - 1];\n                break;\n            }\n        } else {\n           \
    \ consonant_index += 1;\n            if (consonant_index === consonant_count)\
    \ {\n                closest_vowel = vowels[vowel_index];\n                break;\n\
    \            }\n        }\n    }\n    return closest_vowel;", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let result\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_count) {\n                result = word[i];\n\
    \            }\n        } else if (consonants.includes(word[i])) {\n         \
    \   consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    let vowels = [String::from(\"a\"), String::from(\"e\"), String::from(\"\
    i\"), String::from(\"o\"), String::from(\"u\")];\n    let consonants = word.split(\"\
    \").filter(c => c !== \"\").map(c => c.toLowerCase());\n    let consonant_index\
    \ = consonants.findIndex(c => c !== \"\");\n    let vowel_index = consonants[consonant_index\
    \ + 1].findIndex(c => c !== \"\" && vowels.includes(c));\n    if (vowel_index\
    \ === -1) {\n        return \"\";\n    } else {\n        return vowels[vowel_index];\n\
    \    }", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = word.split(\"\").filter(c => c != \"\")\n        .map(c => c.toLowerCase())\n\
    \        .filter(c => vowels.indexOf(c) == -1);\n    let consonant_index = consonants.indexOf(consonants.pop());\n\
    \    let vowel_index = consonants.indexOf(consonants.pop());\n    return vowels[vowel_index]\
    \ if vowel_index != -1 else \"\";", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\",\
    \ \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let result = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i])) {\n\
    \            vowel_count += 1;\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonant_count += 1;\n        }\n        if (vowel_count > 0\
    \ && consonant_count > 0) {\n            result = word[i];\n            break;\n\
    \        }\n    }\n    return result;", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            vowel_count += 1;\n        } else if (consonants.indexOf(word[i])\
    \ != -1) {\n            consonant_count += 1;\n        }\n        if (vowel_count\
    \ == 1 && consonant_count == 1) {\n            closest_vowel = word[i];\n    \
    \        break;\n        }\n    }\n    return closest_vowel;", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = word.length - 1 - consonant_index;\n    let\
    \ vowel_count = word.length - 1 - vowel_index;\n    if (vowel_count == 0) {\n\
    \        return \"\";\n    }\n    if (vowel_count == 1) {\n        return vowels[vowel_index];\n\
    \    }\n    if (consonant_count == 0) {\n        return vowels[vowel_index];\n\
    \    }\n    if (consonant_count == 1) {\n        return vowels[vowel_index - 1];\n\
    \    }\n    if (consonant_count == 2) {\n        return vowels[vowel_index - 2];\n\
    \    }\n    return \"\";", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ < 0 || consonant_index < 0) {\n        return \"\";\n    }\n    let consonant_index_plus_1\
    \ = consonant_index + 1;\n    if (consonant_index_plus_1 >= word.length) {\n \
    \       return \"\";\n    }\n    let vowel_index_plus_1 = vowel_index + 1;\n \
    \   if (vowel_index_plus_1 >= word.length) {\n        return \"\";\n    }\n  \
    \  let consonant_index_plus_2 = consonant_index + 2;\n    if (consonant_index_plus_2\
    \ >= word.length) {\n        return \"\";\n    }\n    let vowel_index_plus_2 =\
    \ vowel_index + 2;\n    if (vowel_index_plus_2 >= word.length) {\n        return\
    \ \"\";\n    }\n    if (vowels.indexOf(word[consonant_index_plus_1]) >= 0 && vowels.indexOf(word[vowel_index_plus_1])\
    \ >= 0) {\n        return word[consonant_index_plus_1];\n    }\n    if (vowels.indexOf(word[consonant_index_plus_2])\
    \ >= 0 && vowels.indexOf(word[vowel_index_plus_2]) >= 0) {\n        return word[consonant_index_plus_2];\n\
    \    }\n    return \"\";", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_index_next\
    \ = consonants.indexOf(word[1]);\n    let vowel_index_next = vowels.indexOf(word[word.length\
    \ - 2]);\n    if (vowel_index_next >= 0 && consonant_index_next >= 0) {\n    \
    \    return vowels[vowel_index_next];\n    } else if (vowel_index >= 0 && consonant_index_next\
    \ >= 0) {\n        return vowels[vowel_index];\n    } else if (vowel_index >=\
    \ 0 && vowel_index_next >= 0) {\n        return vowels[vowel_index];\n    } else\
    \ if (vowel_index >= 0 && vowel_index_next < 0) {\n        return vowels[vowel_index];\n\
    \    } else if (vowel_index_next >= 0 && vowel_index < 0) {\n        return vowels[vowel_index_next];\n\
    \    } else if (vowel_index < 0 && vowel_index_next >= 0) {\n        return vowels[vowel_index_next];\n\
    \    } else if (vowel_index < 0 && vowel_index_next < 0) {\n        return vowels[vowel_index];\n\
    \    } else if (vowel_index_next < 0 && vowel_index >= 0) {\n        return vowels[vowel_index];\n\
    \    } else if (vowel_index_next < 0 && vowel_index < 0) {\n        return vowels[vowel_index_next];\n\
    \    } else if (vowel_index >= 0 &&", "    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (vowel_index\
    \ < 0 || consonant_index < 0) {\n        return \"\";\n    }\n    let consonant_index_plus_1\
    \ = consonant_index + 1;\n    if (consonant_index_plus_1 >= word.length) {\n \
    \       return \"\";\n    }\n    let vowel_index_plus_1 = vowel_index + 1;\n \
    \   if (vowel_index_plus_1 >= word.length) {\n        return \"\";\n    }\n  \
    \  let consonant_index_plus_2 = consonant_index + 2;\n    if (consonant_index_plus_2\
    \ >= word.length) {\n        return \"\";\n    }\n    let vowel_index_plus_2 =\
    \ vowel_index + 2;\n    if (vowel_index_plus_2 >= word.length) {\n        return\
    \ \"\";\n    }\n    let consonant_index_plus_3 = consonant_index + 3;\n    if\
    \ (consonant_index_plus_3 >= word.length) {\n        return \"\";\n    }\n   \
    \ let vowel_index_plus_3 = vowel_index + 3;\n    if (vowel_index_plus_3 >= word.length)\
    \ {\n        return \"\";\n    }\n    let consonant_index_plus_4 = consonant_index\
    \ + 4;\n    if (consonant_index_plus_4 >= word.length) {\n        return \"\"\
    ;\n    }\n    let vowel_index_plus_4 = vowel_index + 4;\n    if (vowel_index_plus_4\
    \ >= word.length) {\n        ", "    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    if (consonant_index\
    \ == -1 || vowel_index == -1) {\n        return \"\";\n    }\n    let consonant_index_plus_1\
    \ = consonant_index + 1;\n    let vowel_index_plus_1 = vowel_index + 1;\n    if\
    \ (consonant_index_plus_1 == word.length) {\n        return \"\";\n    }\n   \
    \ if (vowel_index_plus_1 == word.length) {\n        return \"\";\n    }\n    if\
    \ (vowels.indexOf(word[consonant_index_plus_1]) == -1) {\n        return \"\"\
    ;\n    }\n    if (vowels.indexOf(word[vowel_index_plus_1]) == -1) {\n        return\
    \ \"\";\n    }\n    return word[consonant_index_plus_1];", "    let vowels = \"\
    aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index\
    \ = vowels.indexOf(word[word.length - 1]);\n    let consonant_count = 0;\n   \
    \ let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i]) != -1)\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.indexOf(word[i]) != -1) {\n            consonant_count += 1;\n \
    \           if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"\n    ];\n    let consonants = [\n        \"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\n    ];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length; i++) {\n        if (consonants.indexOf(word[i]) > consonant_index)\
    \ {\n            consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\";\n    }\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length; i++) {\n        if (consonants.indexOf(word[i]) > consonant_index)\
    \ {\n            consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            vowel_count += 1;\n        }\n    }\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = word.chars()\n        .filter(c => c != \" \")\n \
    \       .filter(c => vowels.indexOf(c) == -1);\n    let consonant_index = consonants.indexOf(word.chars().find(c\
    \ => vowels.indexOf(c) != -1));\n    let vowel_index = consonants.indexOf(word.chars().find(c\
    \ => vowels.indexOf(c) != -1), consonant_index + 1);\n    return word.chars().slice(vowel_index,\
    \ consonant_index + 1).join(\"\");", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\",\
    \ \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        } else {\n            break;\n        }\n  \
    \  }\n    for (let i = word.length - 1; i > 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            vowel_count += 1;\n        } else {\n        \
    \    break;\n        }\n    }\n    if (consonant_count == 0 || vowel_count ==\
    \ 0) {\n        return \"\";\n    }\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            closest_vowel = word[i];\n            break;\n\
    \        }\n    }\n    return closest_vowel;", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = consonant_index + 1; i < word.length\
    \ - 1; i++) {\n        if (consonants.indexOf(word[i]) != -1) {\n            consonant_count\
    \ += 1;\n        }\n    }\n    for (let i = vowel_index + 1; i < word.length -\
    \ 1; i++) {\n        if (vowels.indexOf(word[i]) != -1) {\n            vowel_count\
    \ += 1;\n        }\n    }\n    if (consonant_count == 0 || vowel_count == 0) {\n\
    \        return \"\";\n    }\n    let consonant_index_plus_1 = consonants.indexOf(word[consonant_index\
    \ + 1]);\n    let vowel_index_plus_1 = vowels.indexOf(word[vowel_index + 1]);\n\
    \    if (consonant_index_plus_1 == -1 || vowel_index_plus_1 == -1) {\n       \
    \ return \"\";\n    }\n    let consonant_count_plus_1 = 0;\n    let vowel_count_plus_1\
    \ = 0;\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n  \
    \      if (consonants.indexOf(word[i]) != -1) {\n            consonant_count_plus_1\
    \ += 1;\n        }\n    }\n    for (let i = vowel_index + 1; i < word.length -\
    \ 1; i++) {\n        if (vowels", "    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"];\n    let vowels_count = 0;\n    let consonants_count\
    \ = 0;\n    let result = \"\";\n    for (let i = 0; i < word.length(); i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowels_count += 1;\n   \
    \         if (vowels_count > 1) {\n                result = word[i];\n       \
    \         break;\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonants_count += 1;\n            if (consonants_count > 1)\
    \ {\n                result = word[i];\n                break;\n            }\n\
    \        }\n    }\n    return result;", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            vowel_count += 1;\n            if (vowel_count > vowel_index)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.indexOf(word[i]) > -1) {\n            consonant_count += 1;\n  \
    \          if (consonant_count > consonant_index) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.indexOf(word[i]) != -1) {\n            vowel_count += 1;\n\
    \            if (vowel_count > vowel_count) {\n                closest_vowel =\
    \ word[i];\n            }\n        } else if (consonants.indexOf(word[i]) != -1)\
    \ {\n            consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_index_next\
    \ = consonants.indexOf(word[1]);\n    let vowel_index_next = vowels.indexOf(word[word.length\
    \ - 2]);\n    if (vowel_index_next >= 0 && consonant_index_next >= 0) {\n    \
    \    return vowels[vowel_index_next];\n    }\n    if (vowel_index >= 0 && consonant_index_next\
    \ >= 0) {\n        return vowels[vowel_index];\n    }\n    if (vowel_index >=\
    \ 0 && vowel_index_next >= 0) {\n        return vowels[vowel_index];\n    }\n\
    \    if (vowel_index >= 0 && vowel_index_next < 0) {\n        return vowels[vowel_index];\n\
    \    }\n    if (vowel_index_next >= 0 && vowel_index < 0) {\n        return vowels[vowel_index_next];\n\
    \    }\n    if (vowel_index < 0 && vowel_index_next >= 0) {\n        return vowels[vowel_index_next];\n\
    \    }\n    if (vowel_index < 0 && vowel_index_next < 0) {\n        return \"\"\
    ;\n    }", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = word.chars()\n        .filter(c => c != \" \")\n        .filter(c => vowels.indexOf(c)\
    \ == -1)\n        .map(c => c.toLowerCase())\n        .sort();\n    let consonant_index\
    \ = consonants.indexOf(\"q\");\n    let vowel_index = consonants[consonant_index\
    \ + 1] == \"y\" ? 1 : consonants[consonant_index + 1] == \"w\" ? 2 : consonants[consonant_index\
    \ + 1] == \"x\" ? 3 : consonants[consonant_index + 1] == \"z\" ? 4 : -1;\n   \
    \ return vowels[vowel_index];", "    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"];\n    let vowels_count = 0;\n    let consonants_count\
    \ = 0;\n    let result = \"\";\n    for (let i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.includes(word[i])) {\n            vowels_count += 1;\n\
    \            if (vowels_count > 1) {\n                result = word[i];\n    \
    \            break;\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonants_count += 1;\n            if (consonants_count > 1)\
    \ {\n                result = word[i];\n                break;\n            }\n\
    \        }\n    }\n    return result;", "    let vowels = \"aeiouAEIOU\";\n  \
    \  let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    let vowels_count\
    \ = 0;\n    let consonants_count = 0;\n    let result = \"\";\n    for (let i\
    \ = word.length() - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) > -1)\
    \ {\n            vowels_count += 1;\n            if (vowels_count > 1) {\n   \
    \             result = word[i];\n                break;\n            }\n     \
    \   } else if (consonants.indexOf(word[i]) > -1) {\n            consonants_count\
    \ += 1;\n            if (consonants_count > 1) {\n                result = word[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = 0; i < word.length; i++) {\n        if (consonants.indexOf(word[i]) > consonant_index)\
    \ {\n            consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            vowel_count += 1;\n        }\n    }\n    if (vowel_count\
    \ == 0) {\n        return \"\";\n    }\n    let closest_vowel = \"\";\n    for\
    \ (let i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            closest_vowel = word[i];\n            break;\n\
    \        }\n    }\n    return closest_vowel;", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let consonants = word.chars()\n        .filter(c\
    \ => c != \" \")\n        .map(c => c.toLowerCase())\n        .filter(c => vowels.indexOf(c)\
    \ == -1);\n    let consonant_index = consonants.indexOf(consonants.last());\n\
    \    if (consonant_index == -1) {\n        return \"\";\n    }\n    let vowel_index\
    \ = consonants.slice(consonant_index).indexOf(vowels.last());\n    return vowels[vowel_index];",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_count) {\n                closest_vowel = word[i];\n\
    \            }\n        } else if (consonants.includes(word[i])) {\n         \
    \   consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = \"aeiouAEIOU\";\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    let consonant_index =\
    \ consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[1]);\n\
    \    let consonant_count = word.length - 1;\n    let vowel_count = 0;\n    let\
    \ closest_vowel = \"\";\n    for (let i = consonant_index + 1; i < consonant_count;\
    \ i++) {\n        if (vowels.indexOf(word[i]) >= 0) {\n            vowel_count\
    \ += 1;\n            closest_vowel = word[i];\n        } else if (vowels.indexOf(word[i])\
    \ < 0) {\n            if (vowel_count > 0) {\n                vowel_count -= 1;\n\
    \                closest_vowel = word[i];\n            }\n        }\n    }\n \
    \   return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\";\n    }\n    let closest_vowel\
    \ = \"\";\n    for (let i = 0; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            closest_vowel = word[i];\n            break;\n\
    \        }\n    }\n    return closest_vowel;", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let result\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_count) {\n                result = word[i];\n\
    \            }\n        } else if (consonants.includes(word[i])) {\n         \
    \   consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    let consonant_index = consonants.indexOf(word[0]);\n    let vowel_index =\
    \ vowels.indexOf(word[word.length - 1]);\n    let consonant_count = 0;\n    let\
    \ vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let i = consonant_index\
    \ + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i])) {\n\
    \            vowel_count += 1;\n            if (vowel_count > vowel_count) {\n\
    \                closest_vowel = word[i];\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (vowel_count == 0\
    \ || consonant_count == 0) {\n        return \"\";\n    }\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < vowel_index; i++) {\n   \
    \     closest_vowel += vowels[i];\n    }\n    return closest_vowel;", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index\
    \ = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (consonants.indexOf(word[i])\
    \ != -1) {\n            consonant_count += 1;\n        }\n    }\n    for (let\
    \ i = vowel_index + 1; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            vowel_count += 1;\n        }\n    }\n    if (consonant_count\
    \ == 0 || vowel_count == 0) {\n        return \"\";\n    }\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (consonants.indexOf(word[i]) != -1) {\n            closest_vowel =\
    \ vowels[vowel_count - 1];\n            break;\n        }\n    }\n    return closest_vowel;",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.indexOf(word[i]) > -1) {\n            vowel_count += 1;\n\
    \            if (vowel_count > vowel_count) {\n                closest_vowel =\
    \ word[i];\n            }\n        } else if (consonants.indexOf(word[i]) > -1)\
    \ {\n            consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"];\n    let vowels_count = 0;\n    let consonants_count =\
    \ 0;\n    let closest_vowel = \"\";\n    for (let i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.includes(word[i])) {\n            vowels_count\
    \ += 1;\n            if (vowels_count > 1) {\n                closest_vowel =\
    \ word[i];\n                break;\n            }\n        } else if (consonants.includes(word[i]))\
    \ {\n            consonants_count += 1;\n            if (consonants_count > 1)\
    \ {\n                closest_vowel = word[i];\n                break;\n      \
    \      }\n        }\n    }\n    return closest_vowel;", "    let vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index =\
    \ consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    if (vowel_index < consonant_index) {\n        return word[word.length\
    \ - 1];\n    }\n    for (let i = consonant_index + 1; i < word.length - 1; i++)\
    \ {\n        if (vowels.includes(word[i])) {\n            return word[i];\n  \
    \      }\n    }\n    return \"\";", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\",\
    \ \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = 0; i < word.length - 1; i++)\
    \ {\n        if (consonants.indexOf(word[i]) > consonant_index) {\n          \
    \  consonant_count += 1;\n        }\n        if (vowels.indexOf(word[i]) > vowel_index)\
    \ {\n            vowel_count += 1;\n        }\n    }\n    if (vowel_count == 0\
    \ || consonant_count == 0) {\n        return \"\";\n    }\n    let vowel_index\
    \ = 0;\n    for (let i = 0; i < word.length - 1; i++) {\n        if (vowels.indexOf(word[i])\
    \ > vowel_index) {\n            vowel_index = vowels.indexOf(word[i]);\n     \
    \   }\n    }\n    return vowels[vowel_index];", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    let closest_vowel = \"\";\n    for (let\
    \ i = consonant_index + 1; i < word.length - 1; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowel_count += 1;\n            if (vowel_count > vowel_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        } else if\
    \ (consonants.includes(word[i])) {\n            consonant_count += 1;\n      \
    \      if (consonant_count > consonant_count) {\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    if (vowel_index == -1 || consonant_index == -1) {\n        return\
    \ \"\"\n    } else if (vowel_index == consonant_index) {\n        return \"\"\n\
    \    } else if (vowel_index > consonant_index) {\n        return \"\"\n    } else\
    \ {\n        let i = consonant_index + 1;\n        while (i < vowel_index) {\n\
    \            if (vowels.includes(word[i])) {\n                return word[i]\n\
    \            }\n            i += 1\n        }\n        return \"\"\n    }", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[word.length\
    \ - 1]);\n    let consonant_count = 0;\n    let vowel_count = 0;\n    let closest_vowel\
    \ = \"\";\n    for (let i = consonant_index + 1; i < word.length - 1; i++) {\n\
    \        if (vowels.includes(word[i])) {\n            vowel_count += 1;\n    \
    \        if (vowel_count > vowel_count) {\n                closest_vowel = word[i];\n\
    \            }\n        } else if (consonants.includes(word[i])) {\n         \
    \   consonant_count += 1;\n            if (consonant_count > consonant_count)\
    \ {\n                closest_vowel = word[i];\n            }\n        }\n    }\n\
    \    return closest_vowel;"]
stop_tokens:
- "\n}"
