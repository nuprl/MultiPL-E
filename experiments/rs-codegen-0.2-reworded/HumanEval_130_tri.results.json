{
  "name": "HumanEval_130_tri",
  "language": "rs",
  "prompt": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let a = Vec::new(3)\n  let b = Vec::new(1)\n  let c = Vec::new(2)\n  for i in 0..n {\n    let t = a + b + c\n    a = b\n    b = c\n    c = t\n  }\n  return a\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxhaer46a.rs:27:22\n   |\n27 |   let a = Vec::new(3)\n   |                      ^ help: add `;` here\n28 |   let b = Vec::new(1)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpxhaer46a.rs:28:22\n   |\n28 |   let b = Vec::new(1)\n   |                      ^ help: add `;` here\n29 |   let c = Vec::new(2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxhaer46a.rs:29:22\n   |\n29 |   let c = Vec::new(2)\n   |                      ^ help: add `;` here\n30 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpxhaer46a.rs:31:22\n   |\n31 |     let t = a + b + c\n   |                      ^ help: add `;` here\n32 |     a = b\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpxhaer46a.rs:32:10\n   |\n32 |     a = b\n   |          ^ help: add `;` here\n33 |     b = c\n   |     - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpxhaer46a.rs:33:10\n   |\n33 |     b = c\n   |          ^ help: add `;` here\n34 |     c = t\n   |     - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxhaer46a.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxhaer46a.rs:22:12\n    |\n22  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxhaer46a.rs:25:12\n    |\n25  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arg",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n == 2 {\n    return Vec::new(2);\n  }\n  return Vec::new(1) + Vec::new(n / 2) + Vec::new(n / 2);\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpubhuusro.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpubhuusro.rs:22:12\n    |\n22  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpubhuusro.rs:25:12\n    |\n25  |     return Vec::new(2);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpubhuusro.rs:27:10\n    |\n27  |   return Vec::new(1) + Vec::new(n / 2) + Vec::new(n / 2);\n    |          ^^^^^^^^ - supplied 1 argument\n    |          |\n    |          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpubhuusro.rs:27:24\n    |\n27  |   return Vec::new(1) + Vec::new(n / 2) + Vec::new(n / 2);\n    |                        ^^^^^^^^ ----- supplied 1 argument\n    |                        |\n    |                        expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<_>`\n  --> /tmp/tmpubhuusro.rs:27:22\n   |\n27 |   return Vec::new(1) + Vec::new(n / 2) + Vec::new(n / 2);\n   |          ----------- ^ --------------- Vec<_>\n   |          |\n   |          Vec<_>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpubhuusro.rs:27:42\n    |\n27  |   return Vec::new(1) + Vec::new(n / 2) + Vec::new(n / 2);\n    |                                          ^^^^^^^^ ----- su",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let tri = [0, 1, 1];\n    for i in 0..n {\n        tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[1] + tri[0]];\n    }\n    return tri;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp3xk1s7pt.rs:20:15\n   |\n20 |         tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[1] + tri[0]];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 4 elements\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3xk1s7pt.rs:22:12\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected `Vec<isize>` because of return type\n...\n22 |     return tri;\n   |            ^^^- help: try using a conversion method: `.to_vec()`\n   |            |\n   |            expected struct `Vec`, found array `[{integer}; 3]`\n   |\n   = note: expected struct `Vec<isize>`\n               found array `[{integer}; 3]`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    let [j, k, l] = tri(n - 4)\n    return Vec::new(a + b + c, d + e + f, g + h + i, j + k + l)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqebiztit.rs:25:31\n   |\n25 |     let [a, b, c] = tri(n - 1)\n   |                               ^ help: add `;` here\n26 |     let [d, e, f] = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqebiztit.rs:26:31\n   |\n26 |     let [d, e, f] = tri(n - 2)\n   |                               ^ help: add `;` here\n27 |     let [g, h, i] = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqebiztit.rs:27:31\n   |\n27 |     let [g, h, i] = tri(n - 3)\n   |                               ^ help: add `;` here\n28 |     let [j, k, l] = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpqebiztit.rs:28:31\n   |\n28 |     let [j, k, l] = tri(n - 4)\n   |                               ^ help: add `;` here\n29 |     return Vec::new(a + b + c, d + e + f, g + h + i, j + k + l)\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqebiztit.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqebiztit.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqebiztit.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpqebiztit.rs:25:9\n   |\n25 |     let [a, b, c] = tri(n - 1)\n   |         ^^^^^^^^^   ---------- help: conside",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0);\n    } else if n == 1 {\n        return Vec::new(1);\n    } else {\n        let [a, b, c] = tri(n - 1);\n        let [d, e, f] = tri(n - 2);\n        let [g, h, i] = tri(n - 3);\n        let [j, k, l] = tri(n - 4);\n        let [m, n, o] = tri(n - 5);\n        let [p, q, r] = tri(n - 6);\n        let [s, t, u] = tri(n - 7);\n        let [v, w, x] = tri(n - 8);\n        let [y, z, aa] = tri(n - 9);\n        let [bb, cc, dd] = tri(n - 10);\n        let [ee, ff, gg] = tri(n - 11);\n        let [hh, ii, jj] = tri(n - 12);\n        let [kk, ll, mm] = tri(n - 13);\n        let [nn, oo, pp] = tri(n - 14);\n        let [qq, rr, ss] = tri(n - 15);\n        let [tt, uu, vv] = tri(n - 16);\n        let [ww, xx, yy] = tri(n - 17);\n        let [zz, aa, bb] = tri(n - 18);\n        let [cc, dd, ee] = tri(n - 19);\n        let [ff, gg, hh] = tri(n - 20);\n        let [ii, jj, kk] = tri(n - 21);\n        let [ll, mm, nn] = tri(n - 22);\n        let [oo, pp, qq] = tri(n - 23);\n        let [rr, ss, tt] = tri(n - 24);\n        let [uu, vv, ww] = tri(n - 25);\n        let [xx, yy, zz] = tri(n - 26);\n        let [aa, bb, cc\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp19smmasg.rs:64:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n22 |     } else {\n   |            - this delimiter might not be properly closed...\n...\n50 | }\n   | - ...as it matches this but it has different indentation\n...\n64 | }\n   |   ^\n\nerror: expected one of `:`, `;`, `=`, or `|`, found `}`\n  --> /tmp/tmp19smmasg.rs:50:1\n   |\n50 | }\n   | ^ expected one of `:`, `;`, `=`, or `|`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp19smmasg.rs:49:13\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - closing delimiter possibly meant for this\n...\n49 |         let [aa, bb, cc\n   |             ^ unclosed delimiter\n50 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp19smmasg.rs:19:16\n    |\n19  |         return Vec::new(0);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp19smmasg.rs:21:16\n    |\n21  |         return Vec::new(1);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp19smmasg.rs:23:13\n   |\n23 |         let [a, b, c] = tri(n - 1);\n   |             ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |             |\n   |             pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp19smmasg.rs:24:13\n   |\n24 |         let [d, e, f] = tri(n - 2);\n   |             ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 2)[..]`\n   |             |\n   |             pattern cannot match with input type `V",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  let [a, b] = tri(n - 1)\n  let [c, d] = tri(n - 2)\n  let [e, f] = tri(n - 3)\n  let [g, h] = tri(n - 4)\n  let [i, j] = tri(n - 5)\n  let [k, l] = tri(n - 6)\n  let [m, n] = tri(n - 7)\n  let [o, p] = tri(n - 8)\n  let [q, r] = tri(n - 9)\n  let [s, t] = tri(n - 10)\n  let [u, v] = tri(n - 11)\n  let [w, x] = tri(n - 12)\n  let [y, z] = tri(n - 13)\n  let [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(n + 1)\n  let [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(n + 1)\n  let [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(n + 1)\n  let [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(n + 1)\n  let [a, b,\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:24:26\n   |\n24 |   let [a, b] = tri(n - 1)\n   |                          ^ help: add `;` here\n25 |   let [c, d] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:25:26\n   |\n25 |   let [c, d] = tri(n - 2)\n   |                          ^ help: add `;` here\n26 |   let [e, f] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:26:26\n   |\n26 |   let [e, f] = tri(n - 3)\n   |                          ^ help: add `;` here\n27 |   let [g, h] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:27:26\n   |\n27 |   let [g, h] = tri(n - 4)\n   |                          ^ help: add `;` here\n28 |   let [i, j] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:28:26\n   |\n28 |   let [i, j] = tri(n - 5)\n   |                          ^ help: add `;` here\n29 |   let [k, l] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:29:26\n   |\n29 |   let [k, l] = tri(n - 6)\n   |                          ^ help: add `;` here\n30 |   let [m, n] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:30:26\n   |\n30 |   let [m, n] = tri(n - 7)\n   |                          ^ help: add `;` here\n31 |   let [o, p] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:31:26\n   |\n31 |   let [o, p] = tri(n - 8)\n   |                          ^ help: add `;` here\n32 |   let [q, r] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:32:26\n   |\n32 |   let [q, r] = tri(n - 9)\n   |                          ^ help: add `;` here\n33 |   let [s, t] = tri(n - 10)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 3, 2, 8)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n - 26)\n    let aa = tri(n - 27)\n    let ab = tri(n - 28)\n    let ac = tri(n - 29)\n    let ad = tri(n - 30)\n    let ae = tri(n - 31)\n    let af = tri(n - 32)\n    let ag = tri(n - 33)\n    let ah = tri(n - 34)\n    let ai = tri(n - 35)\n    let aj = tri(n - 36)\n    let ak = tri(n - 37)\n    let al = tri(n - 38)\n    let am = tri(n - 39)\n    let an = tri(n - 40)\n    let ao =\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpnprqdrik.rs:80:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n80 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:25:23\n   |\n25 |     let a = tri(n - 1)\n   |                       ^ help: add `;` here\n26 |     let b = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:26:23\n   |\n26 |     let b = tri(n - 2)\n   |                       ^ help: add `;` here\n27 |     let c = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:27:23\n   |\n27 |     let c = tri(n - 3)\n   |                       ^ help: add `;` here\n28 |     let d = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:28:23\n   |\n28 |     let d = tri(n - 4)\n   |                       ^ help: add `;` here\n29 |     let e = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:29:23\n   |\n29 |     let e = tri(n - 5)\n   |                       ^ help: add `;` here\n30 |     let f = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:30:23\n   |\n30 |     let f = tri(n - 6)\n   |                       ^ help: add `;` here\n31 |     let g = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:31:23\n   |\n31 |     let g = tri(n - 7)\n   |                       ^ help: add `;` here\n32 |     let h = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:32:23\n   |\n32 |     let h = tri(n - 8)\n   |                       ^ help: add `;` here\n33 |     let i = tri(n - 9)\n   |     --- unexpe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    let [j, k, l] = tri(n - 4)\n    let [m, n, o] = tri(n - 5)\n    let [p, q, r] = tri(n - 6)\n    let [s, t, u] = tri(n - 7)\n    let [v, w, x] = tri(n - 8)\n    let [y, z, aa] = tri(n - 9)\n    let [bb, cc, dd] = tri(n - 10)\n    let [ee, ff, gg] = tri(n - 11)\n    let [hh, ii, jj] = tri(n - 12)\n    let [kk, ll, mm] = tri(n - 13)\n    let [nn, oo, pp] = tri(n - 14)\n    let [qq, rr, ss] = tri(n - 15)\n    let [tt, uu, vv] = tri(n - 16)\n    let [ww, xx, yy] = tri(n - 17)\n    let [zz, aa, bb] = tri(n - 18)\n    let [cc, dd, ee] = tri(n - 19)\n    let [ff, gg, hh] = tri(n - 20)\n    let [ii, jj, kk] = tri(n - 21)\n    let [ll, mm, nn] = tri(n - 22)\n    let [oo, pp, qq] = tri(n - 23)\n    let [rr, ss, tt] = tri(n - 24)\n    let [uu, vv, ww] = tri(n - 25)\n    let [xx, yy, zz] = tri(n - 26)\n    let [aa, bb, cc\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpqs978pt6.rs:64:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n22 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n50 | }\n   | - ...as it matches this but it has different indentation\n...\n64 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqs978pt6.rs:23:31\n   |\n23 |     let [a, b, c] = tri(n - 1)\n   |                               ^ help: add `;` here\n24 |     let [d, e, f] = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqs978pt6.rs:24:31\n   |\n24 |     let [d, e, f] = tri(n - 2)\n   |                               ^ help: add `;` here\n25 |     let [g, h, i] = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqs978pt6.rs:25:31\n   |\n25 |     let [g, h, i] = tri(n - 3)\n   |                               ^ help: add `;` here\n26 |     let [j, k, l] = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqs978pt6.rs:26:31\n   |\n26 |     let [j, k, l] = tri(n - 4)\n   |                               ^ help: add `;` here\n27 |     let [m, n, o] = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqs978pt6.rs:27:31\n   |\n27 |     let [m, n, o] = tri(n - 5)\n   |                               ^ help: add `;` here\n28 |     let [p, q, r] = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqs978pt6.rs:28:31\n   |\n28 |     let [p, q, r] = tri(n - 6)\n   |                               ^ help: add `;` here\n29 |     let [s, t, u] = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqs978pt6.rs:29:31\n   |\n29 |     let [s, t, u] = tri(n - 7)\n   |                               ^ help: add `;` here\n30 |     let [v, w, x] = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keywor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0);\n    }\n    if n == 1 {\n        return Vec::new(1);\n    }\n    if n == 2 {\n        return Vec::new(2);\n    }\n    return Vec::new(1) + Vec::new(n / 2) + tri(n - 1) + tri(n - 2) + tri(n + 1);\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpls75kvnr.rs:19:16\n    |\n19  |         return Vec::new(0);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpls75kvnr.rs:22:16\n    |\n22  |         return Vec::new(1);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpls75kvnr.rs:25:16\n    |\n25  |         return Vec::new(2);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpls75kvnr.rs:27:12\n    |\n27  |     return Vec::new(1) + Vec::new(n / 2) + tri(n - 1) + tri(n - 2) + tri(n + 1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpls75kvnr.rs:27:26\n    |\n27  |     return Vec::new(1) + Vec::new(n / 2) + tri(n - 1) + tri(n - 2) + tri(n + 1);\n    |                          ^^^^^^^^ ----- supplied 1 argument\n    |                          |\n    |                          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<_>`\n  --> /tmp/tmpls75kvnr.rs:27:24\n   |\n27 |     return Vec::new(1) + Vec::new(n / 2) + tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |            ----------- ^ --------------- Vec<_>\n   |            |\n   |            Vec<_>\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else {\n    let a = Vec::new(0)\n    let b = Vec::new(1)\n    let c = Vec::new(0)\n    for i in 0..n {\n      let t = a + b\n      a = b\n      b = c\n      c = t\n    }\n    return c\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpa15rjk0e.rs:23:24\n   |\n23 |     let a = Vec::new(0)\n   |                        ^ help: add `;` here\n24 |     let b = Vec::new(1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpa15rjk0e.rs:24:24\n   |\n24 |     let b = Vec::new(1)\n   |                        ^ help: add `;` here\n25 |     let c = Vec::new(0)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpa15rjk0e.rs:25:24\n   |\n25 |     let c = Vec::new(0)\n   |                        ^ help: add `;` here\n26 |     for i in 0..n {\n   |     --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpa15rjk0e.rs:27:20\n   |\n27 |       let t = a + b\n   |                    ^ help: add `;` here\n28 |       a = b\n   |       - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpa15rjk0e.rs:28:12\n   |\n28 |       a = b\n   |            ^ help: add `;` here\n29 |       b = c\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpa15rjk0e.rs:29:12\n   |\n29 |       b = c\n   |            ^ help: add `;` here\n30 |       c = t\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpa15rjk0e.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpa15rjk0e.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpa15rjk0e.rs:23:13\n    |\n23  |     let a = Vec::new(0)\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined h",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  if n % 2 == 0 {\n    return Vec::new(1 + (n / 2))\n  }\n  return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp878tm44s.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp878tm44s.rs:22:12\n    |\n22  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp878tm44s.rs:25:12\n    |\n25  |     return Vec::new(1 + (n / 2))\n    |            ^^^^^^^^ ----------- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp878tm44s.rs:27:30\n   |\n27 |   return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   |                   ---------- ^ ---------- Vec<isize>\n   |                   |\n   |                   Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp878tm44s.rs:27:10\n    |\n27  |   return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    |          ^^^^^^^^ ------------------------------------ supplied 1 argument\n    |          |\n    |          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(3);\n  } else if n == 2 {\n    return Vec::new(1, 2, 3);\n  } else {\n    let a = Vec::new(1, 2, 3);\n    let b = Vec::new(1, 2, 3);\n    let c = Vec::new(1, 2, 3);\n    for i in 0..n {\n      let t = a + b + c;\n      a = b;\n      b = c;\n      c = t;\n    }\n    return c;\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpordagzu6.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpordagzu6.rs:21:12\n    |\n21  |     return Vec::new(3);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpordagzu6.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3);\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpordagzu6.rs:25:13\n    |\n25  |     let a = Vec::new(1, 2, 3);\n    |             ^^^^^^^^ -  -  - supplied 3 arguments\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpordagzu6.rs:26:13\n    |\n26  |     let b = Vec::new(1, 2, 3);\n    |             ^^^^^^^^ -  -  - supplied 3 arguments\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpordagzu6.rs:27:13\n    |\n27  |     let c = Vec::new(1, 2, 3);\n    |             ^^^^^^^^ -  -  - supplied 3 arguments\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<_>`\n  --> /tmp/tmpordagzu6.rs:29:17\n   |\n29 |       let t = a + b + c;\n   |               - ^ - Vec<_>\n   |               |\n   |               Vec<_>\n\nerror: aborting due",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n  } else {\n    let a = Vec::new(1);\n    let b = Vec::new(1);\n    let c = Vec::new(1);\n    for i in 0..n {\n      let t = a + b + c;\n      a = b;\n      b = c;\n      c = t;\n    }\n    return c;\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxfewjrqe.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxfewjrqe.rs:21:12\n    |\n21  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxfewjrqe.rs:23:13\n    |\n23  |     let a = Vec::new(1);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxfewjrqe.rs:24:13\n    |\n24  |     let b = Vec::new(1);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxfewjrqe.rs:25:13\n    |\n25  |     let c = Vec::new(1);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<_>`\n  --> /tmp/tmpxfewjrqe.rs:27:17\n   |\n27 |       let t = a + b + c;\n   |               - ^ - Vec<_>\n   |               |\n   |               Vec<_>\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 3, 2, 8)\n  } else {\n    let a = Vec::new(1, 3, 2, 8)\n    let b = tri(n - 1)\n    let c = tri(n - 2)\n    let d = tri(n + 1)\n    return a + b + c + d\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8yybnnjl.rs:25:33\n   |\n25 |     let a = Vec::new(1, 3, 2, 8)\n   |                                 ^ help: add `;` here\n26 |     let b = tri(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8yybnnjl.rs:26:23\n   |\n26 |     let b = tri(n - 1)\n   |                       ^ help: add `;` here\n27 |     let c = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8yybnnjl.rs:27:23\n   |\n27 |     let c = tri(n - 2)\n   |                       ^ help: add `;` here\n28 |     let d = tri(n + 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp8yybnnjl.rs:28:23\n   |\n28 |     let d = tri(n + 1)\n   |                       ^ help: add `;` here\n29 |     return a + b + c + d\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp8yybnnjl.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp8yybnnjl.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmp8yybnnjl.rs:23:12\n    |\n23  |     return Vec::new(1, 3, 2, 8)\n    |            ^^^^^^^^ -  -  -  - supplied 4 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmp8yybnnjl.rs:25:13\n    |\n25  |     let a = Vec::new(1, 3, 2, 8)\n    |             ^^^^^^^^ -  -  -  - supplied 4 arguments\n    |             |\n    |             expected 0 argume",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz] = tri(n - 26)\n  let [aa, bb, cc]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp6fcn6kbu.rs:24:29\n   |\n24 |   let [a, b, c] = tri(n - 1)\n   |                             ^ help: add `;` here\n25 |   let [d, e, f] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6fcn6kbu.rs:25:29\n   |\n25 |   let [d, e, f] = tri(n - 2)\n   |                             ^ help: add `;` here\n26 |   let [g, h, i] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6fcn6kbu.rs:26:29\n   |\n26 |   let [g, h, i] = tri(n - 3)\n   |                             ^ help: add `;` here\n27 |   let [j, k, l] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6fcn6kbu.rs:27:29\n   |\n27 |   let [j, k, l] = tri(n - 4)\n   |                             ^ help: add `;` here\n28 |   let [m, n, o] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6fcn6kbu.rs:28:29\n   |\n28 |   let [m, n, o] = tri(n - 5)\n   |                             ^ help: add `;` here\n29 |   let [p, q, r] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6fcn6kbu.rs:29:29\n   |\n29 |   let [p, q, r] = tri(n - 6)\n   |                             ^ help: add `;` here\n30 |   let [s, t, u] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6fcn6kbu.rs:30:29\n   |\n30 |   let [s, t, u] = tri(n - 7)\n   |                             ^ help: add `;` here\n31 |   let [v, w, x] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6fcn6kbu.rs:31:29\n   |\n31 |   let [v, w, x] = tri(n - 8)\n   |                             ^ help: add `;` here\n32 |   let [y, z, aa] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6fcn6kbu.rs:32:30\n   |\n32 |   let [y, z, aa] = tri(n - 9)\n   |                              ^ help: add `;` here\n33 |   let [bb, cc, dd] = tri(n - 10)\n   |   --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else {\n    let a = Vec::new(0)\n    let b = Vec::new(1)\n    let c = Vec::new(2)\n    for i in 0..n {\n      let t = a + b + c\n      a = b\n      b = c\n      c = t\n    }\n    return a\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprrfwm_pi.rs:23:24\n   |\n23 |     let a = Vec::new(0)\n   |                        ^ help: add `;` here\n24 |     let b = Vec::new(1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprrfwm_pi.rs:24:24\n   |\n24 |     let b = Vec::new(1)\n   |                        ^ help: add `;` here\n25 |     let c = Vec::new(2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprrfwm_pi.rs:25:24\n   |\n25 |     let c = Vec::new(2)\n   |                        ^ help: add `;` here\n26 |     for i in 0..n {\n   |     --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmprrfwm_pi.rs:27:24\n   |\n27 |       let t = a + b + c\n   |                        ^ help: add `;` here\n28 |       a = b\n   |       - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmprrfwm_pi.rs:28:12\n   |\n28 |       a = b\n   |            ^ help: add `;` here\n29 |       b = c\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmprrfwm_pi.rs:29:12\n   |\n29 |       b = c\n   |            ^ help: add `;` here\n30 |       c = t\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprrfwm_pi.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprrfwm_pi.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprrfwm_pi.rs:23:13\n    |\n23  |     let a = Vec::new(0)\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function d",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = 1\n    let b = 2\n    let c = 3\n    let result = Vec::new(n + 1)\n    for i in 0..n {\n      result[i] = a\n      a = b\n      b = c\n      c = a + b\n    }\n    return result\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7zntb2aq.rs:25:14\n   |\n25 |     let a = 1\n   |              ^ help: add `;` here\n26 |     let b = 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7zntb2aq.rs:26:14\n   |\n26 |     let b = 2\n   |              ^ help: add `;` here\n27 |     let c = 3\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7zntb2aq.rs:27:14\n   |\n27 |     let c = 3\n   |              ^ help: add `;` here\n28 |     let result = Vec::new(n + 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7zntb2aq.rs:28:33\n   |\n28 |     let result = Vec::new(n + 1)\n   |                                 ^ help: add `;` here\n29 |     for i in 0..n {\n   |     --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmp7zntb2aq.rs:30:20\n   |\n30 |       result[i] = a\n   |                    ^ help: add `;` here\n31 |       a = b\n   |       - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmp7zntb2aq.rs:31:12\n   |\n31 |       a = b\n   |            ^ help: add `;` here\n32 |       b = c\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmp7zntb2aq.rs:32:12\n   |\n32 |       b = c\n   |            ^ help: add `;` here\n33 |       c = a + b\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp7zntb2aq.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp7zntb2aq.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp7zntb2aq.rs:23:12\n    |\n23  |     re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps6sb8tgy.rs:25:23\n   |\n25 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps6sb8tgy.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current = 1;\n    let mut previous = 0;\n    let mut next = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n            next = previous + current;\n        } else {\n            next = previous + current + next;\n        }\n        result.push_back(next);\n        previous = current;\n        current = next;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp3caz2xer.rs:28:16\n   |\n28 |         result.push_back(next);\n   |                ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = 1\n    let b = 2\n    let c = 3\n    for i in 0..n - 2 {\n      a = b + c\n      b = c\n      c = a\n    }\n    return Vec::new(a, b, c)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwhk5nt0_.rs:25:14\n   |\n25 |     let a = 1\n   |              ^ help: add `;` here\n26 |     let b = 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwhk5nt0_.rs:26:14\n   |\n26 |     let b = 2\n   |              ^ help: add `;` here\n27 |     let c = 3\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwhk5nt0_.rs:27:14\n   |\n27 |     let c = 3\n   |              ^ help: add `;` here\n28 |     for i in 0..n - 2 {\n   |     --- unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpwhk5nt0_.rs:29:16\n   |\n29 |       a = b + c\n   |                ^ help: add `;` here\n30 |       b = c\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpwhk5nt0_.rs:30:12\n   |\n30 |       b = c\n   |            ^ help: add `;` here\n31 |       c = a\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwhk5nt0_.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwhk5nt0_.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpwhk5nt0_.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpwhk5nt0_.rs:33:12\n    |\n33  |     return Vec::new(a, b, c)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let tri_vec = Vec::new(n + 1);\n    let tri_vec_prev = Vec::new(n + 1);\n    tri_vec_prev[0] = 0;\n    tri_vec_prev[1] = 1;\n    for i in 1..n {\n        tri_vec[i] = tri_vec_prev[i - 1] + tri_vec_prev[i] + tri_vec_prev[i + 1];\n        tri_vec_prev[i] = tri_vec[i];\n    }\n    return tri_vec;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1s_v5w99.rs:18:19\n    |\n18  |     let tri_vec = Vec::new(n + 1);\n    |                   ^^^^^^^^ ----- supplied 1 argument\n    |                   |\n    |                   expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1s_v5w99.rs:19:24\n    |\n19  |     let tri_vec_prev = Vec::new(n + 1);\n    |                        ^^^^^^^^ ----- supplied 1 argument\n    |                        |\n    |                        expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp1s_v5w99.rs:23:9\n   |\n23 |         tri_vec[i] = tri_vec_prev[i - 1] + tri_vec_prev[i] + tri_vec_prev[i + 1];\n   |         ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1s_v5w99.rs:23:22\n   |\n23 |         tri_vec[i] = tri_vec_prev[i - 1] + tri_vec_prev[i] + tri_vec_prev[i + 1];\n   |                      ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1s_v5w99.rs:23:44\n   |\n23 |         tri_vec[i] = tri_vec_prev[i - 1] + tri_vec_prev[i] + tri_vec_prev[i + 1];\n   |                                            ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0);\n    } else if n == 1 {\n        return Vec::new(1);\n    } else if n == 2 {\n        return Vec::new(2);\n    } else {\n        let a = Vec::new(n - 1);\n        let b = Vec::new(n - 2);\n        let c = Vec::new(n - 3);\n        let d = Vec::new(n - 4);\n        let e = Vec::new(n - 5);\n        let f = Vec::new(n - 6);\n        let g = Vec::new(n - 7);\n        let h = Vec::new(n - 8);\n        let i = Vec::new(n - 9);\n        let j = Vec::new(n - 10);\n        let k = Vec::new(n - 11);\n        let l = Vec::new(n - 12);\n        let m = Vec::new(n - 13);\n        let n = Vec::new(n - 14);\n        let o = Vec::new(n - 15);\n        let p = Vec::new(n - 16);\n        let q = Vec::new(n - 17);\n        let r = Vec::new(n - 18);\n        let s = Vec::new(n - 19);\n        let t = Vec::new(n - 20);\n        let u = Vec::new(n - 21);\n        let v = Vec::new(n - 22);\n        let w = Vec::new(n - 23);\n        let x = Vec::new(n - 24);\n        let y = Vec::new(n - 25);\n        let z = Vec::new(n - 26);\n        let a1 = a + b;\n        let b1 = b + c;\n        let c1 = c + d;\n        let d1 = d + e;\n        let e1 = e + f;\n        let f1 = f + g;\n        let g1 = g + h;\n        let h1 = h + i;\n        let i1 = i + j;\n        let j1 = j + k;\n        let k1 = k + l;\n        let l1 = l +\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpgevkeh1c.rs:77:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |     } else {\n   |            - this delimiter might not be properly closed...\n...\n63 | }\n   | - ...as it matches this but it has different indentation\n...\n77 | }\n   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmpgevkeh1c.rs:63:1\n   |\n63 | }\n   | ^ expected expression\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgevkeh1c.rs:19:16\n    |\n19  |         return Vec::new(0);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgevkeh1c.rs:21:16\n    |\n21  |         return Vec::new(1);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgevkeh1c.rs:23:16\n    |\n23  |         return Vec::new(2);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgevkeh1c.rs:25:17\n    |\n25  |         let a = Vec::new(n - 1);\n    |                 ^^^^^^^^ ----- supplied 1 argument\n    |                 |\n    |                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgevkeh1c.rs:26:17\n    |\n26  |         let b = Vec::new(n - 2);\n    |                 ^^^^^^^^ ----- supplied 1 argument\n    |                 |\n    |                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let [a, b, c] = [1, 1, 1];\n    for i in 0..n {\n        let [a, b, c] = [a + b, a, b + c];\n    }\n    return vec![a, b, c];\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 1, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpq94c_ftk.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let tri_vec = [1, 3, 2, 8];\n  for i in 0..n {\n    tri_vec.push(tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2]);\n  }\n  return tri_vec;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push` found for array `[{integer}; 4]` in the current scope\n  --> /tmp/tmp_94hhjpx.rs:20:13\n   |\n20 |     tri_vec.push(tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2]);\n   |             ^^^^ method not found in `[{integer}; 4]`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_94hhjpx.rs:20:18\n   |\n20 |     tri_vec.push(tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2]);\n   |                  ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_94hhjpx.rs:20:31\n   |\n20 |     tri_vec.push(tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2]);\n   |                               ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_94hhjpx.rs:20:48\n   |\n20 |     tri_vec.push(tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2]);\n   |                                                ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_94hhjpx.rs:22:10\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected `Vec<isize>` because of return type\n...\n22 |   return tri_vec;\n   |    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut a = 1;\n  let mut b = 1;\n  let mut c = 1;\n  for i in 0..n {\n    if i % 2 == 0 {\n      result.push_back(a);\n      a = b + c;\n      b = c;\n      c = a;\n    } else {\n      result.push_back(a);\n      a = b + c;\n      b = c;\n      c = a + b;\n    }\n  }\n  result.push_back(a);\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpukec1kg9.rs:24:14\n   |\n24 |       result.push_back(a);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpukec1kg9.rs:29:14\n   |\n29 |       result.push_back(a);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpukec1kg9.rs:35:10\n   |\n35 |   result.push_back(a);\n   |          ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n  } else if n == 2 {\n    return Vec::new(2);\n  } else {\n    let a = Vec::new(n - 1);\n    let b = Vec::new(n - 2);\n    let c = Vec::new(n - 3);\n    let d = Vec::new(n - 4);\n    let e = Vec::new(n - 5);\n    let f = Vec::new(n - 6);\n    let g = Vec::new(n - 7);\n    let h = Vec::new(n - 8);\n    let i = Vec::new(n - 9);\n    let j = Vec::new(n - 10);\n    let k = Vec::new(n - 11);\n    let l = Vec::new(n - 12);\n    let m = Vec::new(n - 13);\n    let n = Vec::new(n - 14);\n    let o = Vec::new(n - 15);\n    let p = Vec::new(n - 16);\n    let q = Vec::new(n - 17);\n    let r = Vec::new(n - 18);\n    let s = Vec::new(n - 19);\n    let t = Vec::new(n - 20);\n    let u = Vec::new(n - 21);\n    let v = Vec::new(n - 22);\n    let w = Vec::new(n - 23);\n    let x = Vec::new(n - 24);\n    let y = Vec::new(n - 25);\n    let z = Vec::new(n - 26);\n    let a1 = a + b + c;\n    let b1 = b + c + d;\n    let c1 = c + d + e;\n    let d1 = d + e + f;\n    let e1 = e + f + g;\n    let f1 = f + g + h;\n    let g1 = g + h + i;\n    let h1 = h + i + j;\n    let i1 = i + j + k;\n    let j1 = j + k +\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8oki9chs.rs:75:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n61 | }\n   | - ...as it matches this but it has different indentation\n...\n75 | }\n   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmp8oki9chs.rs:61:1\n   |\n61 | }\n   | ^ expected expression\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp8oki9chs.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp8oki9chs.rs:21:12\n    |\n21  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp8oki9chs.rs:23:12\n    |\n23  |     return Vec::new(2);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp8oki9chs.rs:25:13\n    |\n25  |     let a = Vec::new(n - 1);\n    |             ^^^^^^^^ ----- supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp8oki9chs.rs:26:13\n    |\n26  |     let b = Vec::new(n - 2);\n    |             ^^^^^^^^ ----- supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n  } else {\n    let [a, b, c] = tri(n - 1);\n    let [d, e, f] = tri(n - 2);\n    let [g, h, i] = tri(n - 3);\n    let [j, k, l] = tri(n - 4);\n    let [m, n, o] = tri(n - 5);\n    let [p, q, r] = tri(n - 6);\n    let [s, t, u] = tri(n - 7);\n    let [v, w, x] = tri(n - 8);\n    let [y, z, aa] = tri(n - 9);\n    let [bb, cc, dd] = tri(n - 10);\n    let [ee, ff, gg] = tri(n - 11);\n    let [hh, ii, jj] = tri(n - 12);\n    let [kk, ll, mm] = tri(n - 13);\n    let [nn, oo, pp] = tri(n - 14);\n    let [qq, rr, ss] = tri(n - 15);\n    let [tt, uu, vv] = tri(n - 16);\n    let [ww, xx, yy] = tri(n - 17);\n    let [zz, aaa, bbb] = tri(n - 18);\n    let [ccc, ddd, eee] = tri(n - 19);\n    let [fff, ggg, hhh] = tri(n - 20);\n    let [ii, jj, kk] = tri(n - 21);\n    let [ll, mm, nn] = tri(n - 22);\n    let [oo, pp, qq] = tri(n - 23);\n    let [rr, ss, tt] = tri(n - 24);\n    let [uu, vv, ww] = tri(n - 25);\n    let [xx, yy, zz] = tri(n - 26);\n    let [aaa, bbb\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpoew46v4_.rs:64:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n22 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n50 | }\n   | - ...as it matches this but it has different indentation\n...\n64 | }\n   |   ^\n\nerror: expected one of `:`, `;`, `=`, or `|`, found `}`\n  --> /tmp/tmpoew46v4_.rs:50:1\n   |\n50 | }\n   | ^ expected one of `:`, `;`, `=`, or `|`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpoew46v4_.rs:49:9\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - closing delimiter possibly meant for this\n...\n49 |     let [aaa, bbb\n   |         ^ unclosed delimiter\n50 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoew46v4_.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoew46v4_.rs:21:12\n    |\n21  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpoew46v4_.rs:23:9\n   |\n23 |     let [a, b, c] = tri(n - 1);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpoew46v4_.rs:24:9\n   |\n24 |     let [d, e, f] = tri(n - 2);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 2)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = Vec::new(0)\n    let b = Vec::new(1, 2, 3)\n    for i in 0..n {\n      a = a.plus(b)\n      b = b.plus(a)\n    }\n    return a\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwjo0s7mf.rs:25:24\n   |\n25 |     let a = Vec::new(0)\n   |                        ^ help: add `;` here\n26 |     let b = Vec::new(1, 2, 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwjo0s7mf.rs:26:30\n   |\n26 |     let b = Vec::new(1, 2, 3)\n   |                              ^ help: add `;` here\n27 |     for i in 0..n {\n   |     --- unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpwjo0s7mf.rs:28:20\n   |\n28 |       a = a.plus(b)\n   |                    ^ help: add `;` here\n29 |       b = b.plus(a)\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwjo0s7mf.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwjo0s7mf.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpwjo0s7mf.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwjo0s7mf.rs:25:13\n    |\n25  |     let a = Vec::new(0)\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpwjo0s7mf.rs:26:13\n    |\n26  |     let b = Vec::new(1, 2, 3)\n    |             ^^^^^^^^ -  -  - supplied 3 arguments\n    |     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpchechgou.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpchechgou.rs:22:12\n    |\n22  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpchechgou.rs:25:23\n   |\n25 |     return tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpchechgou.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(3);\n  } else {\n    let a = Vec::new(0);\n    let b = Vec::new(1);\n    let c = Vec::new(2);\n    let d = Vec::new(3);\n    let e = Vec::new(4);\n    let f = Vec::new(5);\n    let g = Vec::new(6);\n    let h = Vec::new(7);\n    let i = Vec::new(8);\n    let j = Vec::new(9);\n    let k = Vec::new(10);\n    let l = Vec::new(11);\n    let m = Vec::new(12);\n    let n = Vec::new(13);\n    let o = Vec::new(14);\n    let p = Vec::new(15);\n    let q = Vec::new(16);\n    let r = Vec::new(17);\n    let s = Vec::new(18);\n    let t = Vec::new(19);\n    let u = Vec::new(20);\n    let v = Vec::new(21);\n    let w = Vec::new(22);\n    let x = Vec::new(23);\n    let y = Vec::new(24);\n    let z = Vec::new(25);\n    let aa = Vec::new(26);\n    let ab = Vec::new(27);\n    let ac = Vec::new(28);\n    let ad = Vec::new(29);\n    let ae = Vec::new(30);\n    let af = Vec::new(31);\n    let ag = Vec::new(32);\n    let ah = Vec::new(33);\n    let ai = Vec::new(34);\n    let aj = Vec::new(35);\n    let ak = Vec::new(36);\n    let al = Vec::new(37);\n    let am = Vec::new(38);\n    let an = Vec::new(39);\n    let ao = Vec::new(40);\n    let ap = Vec::new(41);\n    let aq = Vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpx_y8zva9.rs:80:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n22 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n80 | }\n   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpx_y8zva9.rs:65:17\n   |\n65 |     let aq = Vec\n   |                 ^ help: add `;` here\n66 | }\n   | - unexpected token\n\nerror[E0423]: expected value, found struct `Vec`\n   --> /tmp/tmpx_y8zva9.rs:65:14\n    |\n65  |       let aq = Vec\n    |                ^^^ help: use struct literal syntax instead: `Vec { buf: val, len: val }`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx_y8zva9.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx_y8zva9.rs:21:12\n    |\n21  |     return Vec::new(3);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx_y8zva9.rs:23:13\n    |\n23  |     let a = Vec::new(0);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx_y8zva9.rs:24:13\n    |\n24  |     let b = Vec::new(1);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx_y8zva9.rs:25:13\n    |\n25  |     let c = Vec:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut res = Vec::new();\n  let mut cur = 1;\n  let mut prev = 0;\n  let mut next = 0;\n  for i in 0..n {\n    if i % 2 == 0 {\n      next = prev + cur;\n    } else {\n      next = cur + prev + next;\n    }\n    res.push_back(next);\n    prev = cur;\n    cur = next;\n  }\n  return res;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp5pq9cmpt.rs:28:9\n   |\n28 |     res.push_back(next);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n - 26)\n    let aa = tri(n - 27)\n    let ab = tri(n - 28)\n    let ac = tri(n - 29)\n    let ad = tri(n - 30)\n    let ae = tri(n - 31)\n    let af = tri(n - 32)\n    let ag = tri(n - 33)\n    let ah = tri(n - 34)\n    let ai = tri(n - 35)\n    let aj = tri(n - 36)\n    let ak = tri(n - 37)\n    let al = tri(n - 38)\n    let am = tri(n - 39)\n    let an = tri(n - 40)\n    let ao = tri(\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpuhqqy379.rs:80:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n80 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:25:23\n   |\n25 |     let a = tri(n - 1)\n   |                       ^ help: add `;` here\n26 |     let b = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:26:23\n   |\n26 |     let b = tri(n - 2)\n   |                       ^ help: add `;` here\n27 |     let c = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:27:23\n   |\n27 |     let c = tri(n - 3)\n   |                       ^ help: add `;` here\n28 |     let d = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:28:23\n   |\n28 |     let d = tri(n - 4)\n   |                       ^ help: add `;` here\n29 |     let e = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:29:23\n   |\n29 |     let e = tri(n - 5)\n   |                       ^ help: add `;` here\n30 |     let f = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:30:23\n   |\n30 |     let f = tri(n - 6)\n   |                       ^ help: add `;` here\n31 |     let g = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:31:23\n   |\n31 |     let g = tri(n - 7)\n   |                       ^ help: add `;` here\n32 |     let h = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:32:23\n   |\n32 |     let h = tri(n - 8)\n   |                       ^ help: add `;` here\n33 |     let i = tri(n - 9)\n   |     --- unexpe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp03tvrpfz.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp03tvrpfz.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp03tvrpfz.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp03tvrpfz.rs:25:32\n   |\n25 |     return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   |                     ---------- ^ ---------- Vec<isize>\n   |                     |\n   |                     Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp03tvrpfz.rs:25:12\n    |\n25  |     return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    |            ^^^^^^^^ ------------------------------------ supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps6sb8tgy.rs:25:23\n   |\n25 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps6sb8tgy.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(3);\n  } else if n == 2 {\n    return Vec::new(1, 2, 3);\n  } else {\n    let a = Vec::new(0);\n    let b = Vec::new(1, 2);\n    let c = Vec::new(3);\n    for i in 0..n {\n      let t = a + b + c;\n      a = b;\n      b = c;\n      c = t;\n    }\n    return c;\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9n6459gc.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9n6459gc.rs:21:12\n    |\n21  |     return Vec::new(3);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp9n6459gc.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3);\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9n6459gc.rs:25:13\n    |\n25  |     let a = Vec::new(0);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 2 arguments were supplied\n   --> /tmp/tmp9n6459gc.rs:26:13\n    |\n26  |     let b = Vec::new(1, 2);\n    |             ^^^^^^^^ -  - supplied 2 arguments\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9n6459gc.rs:27:13\n    |\n27  |     let c = Vec::new(3);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<_>`\n  --> /tmp/tmp9n6459gc.rs:29:17\n   |\n29 |       let t = a + b + c;\n   |               - ^ - Vec<_>\n   |               |\n   |               Vec<_>\n\nerror: aborting due to 7 previous errors\n\nSome errors h",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0);\n    } else if n == 1 {\n        return Vec::new(1);\n    } else if n == 2 {\n        return Vec::new(2);\n    } else {\n        let a = Vec::new(n - 2);\n        let b = Vec::new(n - 1);\n        let c = Vec::new(n);\n        let d = Vec::new(n + 1);\n        let e = Vec::new(n + 2);\n        let f = Vec::new(n + 3);\n        let g = Vec::new(n + 4);\n        let h = Vec::new(n + 5);\n        let i = Vec::new(n + 6);\n        let j = Vec::new(n + 7);\n        let k = Vec::new(n + 8);\n        let l = Vec::new(n + 9);\n        let m = Vec::new(n + 10);\n        let n = Vec::new(n + 11);\n        let o = Vec::new(n + 12);\n        let p = Vec::new(n + 13);\n        let q = Vec::new(n + 14);\n        let r = Vec::new(n + 15);\n        let s = Vec::new(n + 16);\n        let t = Vec::new(n + 17);\n        let u = Vec::new(n + 18);\n        let v = Vec::new(n + 19);\n        let w = Vec::new(n + 20);\n        let x = Vec::new(n + 21);\n        let y = Vec::new(n + 22);\n        let z = Vec::new(n + 23);\n        let aa = Vec::new(n + 24);\n        let ab = Vec::new(n + 25);\n        let ac = Vec::new(n + 26);\n        let ad = Vec::new(n + 27);\n        let ae = Vec::new(n + 28);\n        let af = Vec::new(n + 29);\n        let ag = Vec::new(n + 30);\n        let ah = Vec::new(n + 31);\n        let ai = Vec::new(n + 32);\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp7hwc6aic.rs:74:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |     } else {\n   |            - this delimiter might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but it has different indentation\n...\n74 | }\n   |   ^\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp7hwc6aic.rs:19:16\n    |\n19  |         return Vec::new(0);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp7hwc6aic.rs:21:16\n    |\n21  |         return Vec::new(1);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp7hwc6aic.rs:23:16\n    |\n23  |         return Vec::new(2);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp7hwc6aic.rs:25:17\n    |\n25  |         let a = Vec::new(n - 2);\n    |                 ^^^^^^^^ ----- supplied 1 argument\n    |                 |\n    |                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp7hwc6aic.rs:26:17\n    |\n26  |         let b = Vec::new(n - 1);\n    |                 ^^^^^^^^ ----- supplied 1 argument\n    |                 |\n    |                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp7hwc6aic.rs:27:17\n    |\n2",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = Vec::new(1, 2, 3)\n    let b = tri(n - 1)\n    let c = tri(n - 2)\n    let d = tri(n - 3)\n    let e = tri(n - 4)\n    let f = tri(n - 5)\n    let g = tri(n - 6)\n    let h = tri(n - 7)\n    let i = tri(n - 8)\n    let j = tri(n - 9)\n    let k = tri(n - 10)\n    let l = tri(n - 11)\n    let m = tri(n - 12)\n    let n = tri(n - 13)\n    let o = tri(n - 14)\n    let p = tri(n - 15)\n    let q = tri(n - 16)\n    let r = tri(n - 17)\n    let s = tri(n - 18)\n    let t = tri(n - 19)\n    let u = tri(n - 20)\n    let v = tri(n - 21)\n    let w = tri(n - 22)\n    let x = tri(n - 23)\n    let y = tri(n - 24)\n    let z = tri(n - 25)\n    let aa = tri(n - 26)\n    let ab = tri(n - 27)\n    let ac = tri(n - 28)\n    let ad = tri(n - 29)\n    let ae = tri(n - 30)\n    let af = tri(n - 31)\n    let ag = tri(n - 32)\n    let ah = tri(n - 33)\n    let ai = tri(n - 34)\n    let aj = tri(n - 35)\n    let ak = tri(n - 36)\n    let al = tri(n - 37)\n    let am = tri(n - 38)\n    let an = tri(n - 39)\n    let a\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpu994_j66.rs:80:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n80 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:25:30\n   |\n25 |     let a = Vec::new(1, 2, 3)\n   |                              ^ help: add `;` here\n26 |     let b = tri(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:26:23\n   |\n26 |     let b = tri(n - 1)\n   |                       ^ help: add `;` here\n27 |     let c = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:27:23\n   |\n27 |     let c = tri(n - 2)\n   |                       ^ help: add `;` here\n28 |     let d = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:28:23\n   |\n28 |     let d = tri(n - 3)\n   |                       ^ help: add `;` here\n29 |     let e = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:29:23\n   |\n29 |     let e = tri(n - 4)\n   |                       ^ help: add `;` here\n30 |     let f = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:30:23\n   |\n30 |     let f = tri(n - 5)\n   |                       ^ help: add `;` here\n31 |     let g = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:31:23\n   |\n31 |     let g = tri(n - 6)\n   |                       ^ help: add `;` here\n32 |     let h = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:32:23\n   |\n32 |     let h = tri(n - 7)\n   |                       ^ help: add `;` here\n33 |     let i = tri(n - 8)\n   | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  let [a, b] = tri(n - 1)\n  let [c, d] = tri(n - 2)\n  let [e, f] = tri(n - 3)\n  let [g, h] = tri(n - 4)\n  let [i, j] = tri(n - 5)\n  let [k, l] = tri(n - 6)\n  let [m, n] = tri(n - 7)\n  let [o, p] = tri(n - 8)\n  let [q, r] = tri(n - 9)\n  let [s, t] = tri(n - 10)\n  let [u, v] = tri(n - 11)\n  let [w, x] = tri(n - 12)\n  let [y, z] = tri(n - 13)\n  let [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z)\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2b5zivwx.rs:24:26\n   |\n24 |   let [a, b] = tri(n - 1)\n   |                          ^ help: add `;` here\n25 |   let [c, d] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2b5zivwx.rs:25:26\n   |\n25 |   let [c, d] = tri(n - 2)\n   |                          ^ help: add `;` here\n26 |   let [e, f] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2b5zivwx.rs:26:26\n   |\n26 |   let [e, f] = tri(n - 3)\n   |                          ^ help: add `;` here\n27 |   let [g, h] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2b5zivwx.rs:27:26\n   |\n27 |   let [g, h] = tri(n - 4)\n   |                          ^ help: add `;` here\n28 |   let [i, j] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2b5zivwx.rs:28:26\n   |\n28 |   let [i, j] = tri(n - 5)\n   |                          ^ help: add `;` here\n29 |   let [k, l] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2b5zivwx.rs:29:26\n   |\n29 |   let [k, l] = tri(n - 6)\n   |                          ^ help: add `;` here\n30 |   let [m, n] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2b5zivwx.rs:30:26\n   |\n30 |   let [m, n] = tri(n - 7)\n   |                          ^ help: add `;` here\n31 |   let [o, p] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2b5zivwx.rs:31:26\n   |\n31 |   let [o, p] = tri(n - 8)\n   |                          ^ help: add `;` here\n32 |   let [q, r] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2b5zivwx.rs:32:26\n   |\n32 |   let [q, r] = tri(n - 9)\n   |                          ^ help: add `;` here\n33 |   let [s, t] = tri(n - 10)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2b5zivwx.rs:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n - 26)\n    let aa = tri(n - 27)\n    let ab = tri(n - 28)\n    let ac = tri(n - 29)\n    let ad = tri(n - 30)\n    let ae = tri(n - 31)\n    let af = tri(n - 32)\n    let ag = tri(n - 33)\n    let ah = tri(n - 34)\n    let ai = tri(n - 35)\n    let aj = tri(n - 36)\n    let ak = tri(n - 37)\n    let al = tri(n - 38)\n    let am = tri(n - 39)\n    let an = tri(n - 40)\n    let ao = tri(\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpuhqqy379.rs:80:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n80 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:25:23\n   |\n25 |     let a = tri(n - 1)\n   |                       ^ help: add `;` here\n26 |     let b = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:26:23\n   |\n26 |     let b = tri(n - 2)\n   |                       ^ help: add `;` here\n27 |     let c = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:27:23\n   |\n27 |     let c = tri(n - 3)\n   |                       ^ help: add `;` here\n28 |     let d = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:28:23\n   |\n28 |     let d = tri(n - 4)\n   |                       ^ help: add `;` here\n29 |     let e = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:29:23\n   |\n29 |     let e = tri(n - 5)\n   |                       ^ help: add `;` here\n30 |     let f = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:30:23\n   |\n30 |     let f = tri(n - 6)\n   |                       ^ help: add `;` here\n31 |     let g = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:31:23\n   |\n31 |     let g = tri(n - 7)\n   |                       ^ help: add `;` here\n32 |     let h = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:32:23\n   |\n32 |     let h = tri(n - 8)\n   |                       ^ help: add `;` here\n33 |     let i = tri(n - 9)\n   |     --- unexpe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n - 26)\n    let aa = tri(n - 27)\n    let ab = tri(n - 28)\n    let ac = tri(n - 29)\n    let ad = tri(n - 30)\n    let ae = tri(n - 31)\n    let af = tri(n - 32)\n    let ag = tri(n - 33)\n    let ah = tri(n - 34)\n    let ai = tri(n - 35)\n    let aj = tri(n - 36)\n    let ak = tri(n - 37)\n    let al = tri(n - 38)\n    let am = tri(n - 39)\n    let an = tri(n - 40)\n    let ao = tri(\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpuhqqy379.rs:80:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n80 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:25:23\n   |\n25 |     let a = tri(n - 1)\n   |                       ^ help: add `;` here\n26 |     let b = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:26:23\n   |\n26 |     let b = tri(n - 2)\n   |                       ^ help: add `;` here\n27 |     let c = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:27:23\n   |\n27 |     let c = tri(n - 3)\n   |                       ^ help: add `;` here\n28 |     let d = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:28:23\n   |\n28 |     let d = tri(n - 4)\n   |                       ^ help: add `;` here\n29 |     let e = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:29:23\n   |\n29 |     let e = tri(n - 5)\n   |                       ^ help: add `;` here\n30 |     let f = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:30:23\n   |\n30 |     let f = tri(n - 6)\n   |                       ^ help: add `;` here\n31 |     let g = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:31:23\n   |\n31 |     let g = tri(n - 7)\n   |                       ^ help: add `;` here\n32 |     let h = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:32:23\n   |\n32 |     let h = tri(n - 8)\n   |                       ^ help: add `;` here\n33 |     let i = tri(n - 9)\n   |     --- unexpe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut res = Vec::new();\n  let mut a = 1;\n  let mut b = 1;\n  let mut c = 1;\n  for i in 0..n {\n    if i % 2 == 0 {\n      a = a + b;\n      b = b + c;\n      c = a + b;\n    } else {\n      a = a + b;\n      b = b + c;\n      c = a + b;\n    }\n    res.push_back(c);\n  }\n  return res;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpcj60fqwv.rs:32:9\n   |\n32 |     res.push_back(c);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = 1 + n / 2\n    let b = a - 1\n    let c = b + 1\n    return Vec::new(a, b, c)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph44gx7fj.rs:25:22\n   |\n25 |     let a = 1 + n / 2\n   |                      ^ help: add `;` here\n26 |     let b = a - 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph44gx7fj.rs:26:18\n   |\n26 |     let b = a - 1\n   |                  ^ help: add `;` here\n27 |     let c = b + 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmph44gx7fj.rs:27:18\n   |\n27 |     let c = b + 1\n   |                  ^ help: add `;` here\n28 |     return Vec::new(a, b, c)\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph44gx7fj.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph44gx7fj.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmph44gx7fj.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmph44gx7fj.rs:28:12\n    |\n28  |     return Vec::new(a, b, c)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n % 2 == 0 {\n    return Vec::new(1 + (n / 2))\n  }\n  return Vec::new(\n    tri(n - 1) + tri(n - 2) + tri(n + 1)\n  )\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm2hp6lxv.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm2hp6lxv.rs:22:12\n    |\n22  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm2hp6lxv.rs:25:12\n    |\n25  |     return Vec::new(1 + (n / 2))\n    |            ^^^^^^^^ ----------- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpm2hp6lxv.rs:28:16\n   |\n28 |     tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |     ---------- ^ ---------- Vec<isize>\n   |     |\n   |     Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm2hp6lxv.rs:27:10\n    |\n27  |   return Vec::new(\n    |          ^^^^^^^^ expected 0 arguments\n28  |     tri(n - 1) + tri(n - 2) + tri(n + 1)\n    |     ------------------------------------ supplied 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current = 1;\n  let mut previous = 0;\n  let mut next = 0;\n  for i in 0..n {\n    if i % 2 == 0 {\n      next = previous + current;\n      previous = current;\n      current = next;\n    } else {\n      next = previous + current;\n      previous = current;\n      current = next;\n    }\n    result.push_back(current);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmptydz466_.rs:32:12\n   |\n32 |     result.push_back(current);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  if n == 2 {\n    return Vec::new(1, 2, 3)\n  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, y\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsoif49a0.rs:27:29\n   |\n27 |   let [a, b, c] = tri(n - 1)\n   |                             ^ help: add `;` here\n28 |   let [d, e, f] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsoif49a0.rs:28:29\n   |\n28 |   let [d, e, f] = tri(n - 2)\n   |                             ^ help: add `;` here\n29 |   let [g, h, i] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsoif49a0.rs:29:29\n   |\n29 |   let [g, h, i] = tri(n - 3)\n   |                             ^ help: add `;` here\n30 |   let [j, k, l] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsoif49a0.rs:30:29\n   |\n30 |   let [j, k, l] = tri(n - 4)\n   |                             ^ help: add `;` here\n31 |   let [m, n, o] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsoif49a0.rs:31:29\n   |\n31 |   let [m, n, o] = tri(n - 5)\n   |                             ^ help: add `;` here\n32 |   let [p, q, r] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsoif49a0.rs:32:29\n   |\n32 |   let [p, q, r] = tri(n - 6)\n   |                             ^ help: add `;` here\n33 |   let [s, t, u] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsoif49a0.rs:33:29\n   |\n33 |   let [s, t, u] = tri(n - 7)\n   |                             ^ help: add `;` here\n34 |   let [v, w, x] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsoif49a0.rs:34:29\n   |\n34 |   let [v, w, x] = tri(n - 8)\n   |                             ^ help: add `;` here\n35 |   let [y, z, aa] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsoif49a0.rs:35:30\n   |\n35 |   let [y, z, aa] = tri(n - 9)\n   |                              ^ help: add `;` here\n36 |   let [bb, cc, dd] = tri(n - 10)\n   |   --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n == 2 {\n    return Vec::new(2);\n  }\n  let [a, b, c] = tri(n - 1);\n  let [d, e, f] = tri(n - 2);\n  let [g, h, i] = tri(n - 3);\n  let [j, k, l] = tri(n - 4);\n  let [m, n, o] = tri(n - 5);\n  let [p, q, r] = tri(n - 6);\n  let [s, t, u] = tri(n - 7);\n  let [v, w, x] = tri(n - 8);\n  let [y, z, aa] = tri(n - 9);\n  let [bb, cc, dd] = tri(n - 10);\n  let [ee, ff, gg] = tri(n - 11);\n  let [hh, ii, jj] = tri(n - 12);\n  let [kk, ll, mm] = tri(n - 13);\n  let [nn, oo, pp] = tri(n - 14);\n  let [qq, rr, ss] = tri(n - 15);\n  let [tt, uu, vv] = tri(n - 16);\n  let [ww, xx, yy] = tri(n - 17);\n  let [zz, aa, bb] = tri(n - 18);\n  let [cc, dd, ee] = tri(n - 19);\n  let [ff, gg, hh] = tri(n - 20);\n  let [ii, jj, kk] = tri(n - 21);\n  let [ll, mm, nn] = tri(n - 22);\n  let [oo, pp, qq] = tri(n - 23);\n  let [rr, ss, tt] = tri(n - 24);\n  let [uu, vv, ww] = tri(n - 25);\n  let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected one of `:`, `;`, `=`, or `|`, found `}`\n  --> /tmp/tmpvt11lbxi.rs:53:1\n   |\n53 | }\n   | ^ expected one of `:`, `;`, `=`, or `|`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpvt11lbxi.rs:52:7\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - closing delimiter possibly meant for this\n...\n52 |   let [xx, yy, zz\n   |       ^ unclosed delimiter\n53 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvt11lbxi.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvt11lbxi.rs:22:12\n    |\n22  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvt11lbxi.rs:25:12\n    |\n25  |     return Vec::new(2);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpvt11lbxi.rs:27:7\n   |\n27 |   let [a, b, c] = tri(n - 1);\n   |       ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |       |\n   |       pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpvt11lbxi.rs:28:7\n   |\n28 |   let [d, e, f] = tri(n - 2);\n   |       ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 2)[..]`\n   |       |\n   |       pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpvt11lbxi.rs:29:7\n   |\n29 |   let [g, h, i] = tri(n - 3);\n   |       ^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 1)\n    let d = Vec::new(n - 1)\n    let e = Vec::new(n - 1)\n    let f = Vec::new(n - 1)\n    let g = Vec::new(n - 1)\n    let h = Vec::new(n - 1)\n    let i = Vec::new(n - 1)\n    let j = Vec::new(n - 1)\n    let k = Vec::new(n - 1)\n    let l = Vec::new(n - 1)\n    let m = Vec::new(n - 1)\n    let n = Vec::new(n - 1)\n    let o = Vec::new(n - 1)\n    let p = Vec::new(n - 1)\n    let q = Vec::new(n - 1)\n    let r = Vec::new(n - 1)\n    let s = Vec::new(n - 1)\n    let t = Vec::new(n - 1)\n    let u = Vec::new(n - 1)\n    let v = Vec::new(n - 1)\n    let w = Vec::new(n - 1)\n    let x = Vec::new(n - 1)\n    let y = Vec::new(n - 1)\n    let z = Vec::new(n - 1)\n    let a1 = Vec::new(n - 1)\n    let b1 = Vec::new(n - 1)\n    let c1 = Vec::new(n - 1)\n    let d1 = Vec::new(n - 1)\n    let e1 = Vec::new(n - 1)\n    let f1 = Vec::new(n - 1)\n    let g1 = Vec::new(n - 1)\n    let h1 = Vec::new(n - 1)\n    let i1 =\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpysrxk5s5.rs:74:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but it has different indentation\n...\n74 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:25:28\n   |\n25 |     let a = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n26 |     let b = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:26:28\n   |\n26 |     let b = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n27 |     let c = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:27:28\n   |\n27 |     let c = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n28 |     let d = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:28:28\n   |\n28 |     let d = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n29 |     let e = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:29:28\n   |\n29 |     let e = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n30 |     let f = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:30:28\n   |\n30 |     let f = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n31 |     let g = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:31:28\n   |\n31 |     let g = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n32 |     let h = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:32:28\n   |\n32 |     let h = V",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let a = 1\n  let b = 1\n  let c = 2\n  let d = 3\n  let e = 3\n  let f = 4\n  let g = 5\n  let h = 6\n  let i = 7\n  let j = 8\n  let k = 9\n  let l = 10\n  let m = 11\n  let n = 12\n  let o = 13\n  let p = 14\n  let q = 15\n  let r = 16\n  let s = 17\n  let t = 18\n  let u = 19\n  let v = 20\n  let w = 21\n  let x = 22\n  let y = 23\n  let z = 24\n  let aa = a + (n / 2)\n  let bb = b + (n / 2)\n  let cc = c + (n / 2)\n  let dd = d + (n / 2)\n  let ee = e + (n / 2)\n  let ff = f + (n / 2)\n  let gg = g + (n / 2)\n  let hh = h + (n / 2)\n  let ii = i + (n / 2)\n  let jj = j + (n / 2)\n  let kk = k + (n / 2)\n  let ll = l + (n / 2)\n  let mm = m + (n / 2)\n  let nn = n + (n / 2)\n  let oo = o + (n / 2)\n  let pp = p + (n / 2)\n  let qq = q + (n / 2)\n  let rr = r + (n / 2)\n  let ss = s + (n / 2)\n  let tt = t + (n / 2)\n  let uu = u + (n / 2)\n  let vv = v + (n / 2)\n  let ww = w + (n / 2)\n  let xx = x + (n\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx9kkg2ks.rs:27:12\n   |\n27 |   let a = 1\n   |            ^ help: add `;` here\n28 |   let b = 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx9kkg2ks.rs:28:12\n   |\n28 |   let b = 1\n   |            ^ help: add `;` here\n29 |   let c = 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx9kkg2ks.rs:29:12\n   |\n29 |   let c = 2\n   |            ^ help: add `;` here\n30 |   let d = 3\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx9kkg2ks.rs:30:12\n   |\n30 |   let d = 3\n   |            ^ help: add `;` here\n31 |   let e = 3\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx9kkg2ks.rs:31:12\n   |\n31 |   let e = 3\n   |            ^ help: add `;` here\n32 |   let f = 4\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx9kkg2ks.rs:32:12\n   |\n32 |   let f = 4\n   |            ^ help: add `;` here\n33 |   let g = 5\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx9kkg2ks.rs:33:12\n   |\n33 |   let g = 5\n   |            ^ help: add `;` here\n34 |   let h = 6\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx9kkg2ks.rs:34:12\n   |\n34 |   let h = 6\n   |            ^ help: add `;` here\n35 |   let i = 7\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx9kkg2ks.rs:35:12\n   |\n35 |   let i = 7\n   |            ^ help: add `;` here\n36 |   let j = 8\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx9kkg2ks.rs:36:12\n   |\n36 |   let j = 8\n   |            ^ help: add `;` here\n37 |   let k = 9\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx9kkg2ks.rs:37:12\n   |\n37 |   let k = 9\n   |            ^ help: add `;` here\n38 |   let l = 10\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx9kkg2ks.rs:38:13\n   |\n38 |   let ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else if n == 3 {\n    return Vec::new(3)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let result = Vec::new(n + 1)\n    for i in 0..n {\n      result[i] = a[i] + b[i] + c[i]\n    }\n    return result\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5d9nv0lb.rs:27:23\n   |\n27 |     let a = tri(n - 1)\n   |                       ^ help: add `;` here\n28 |     let b = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5d9nv0lb.rs:28:23\n   |\n28 |     let b = tri(n - 2)\n   |                       ^ help: add `;` here\n29 |     let c = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5d9nv0lb.rs:29:23\n   |\n29 |     let c = tri(n - 3)\n   |                       ^ help: add `;` here\n30 |     let result = Vec::new(n + 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5d9nv0lb.rs:30:33\n   |\n30 |     let result = Vec::new(n + 1)\n   |                                 ^ help: add `;` here\n31 |     for i in 0..n {\n   |     --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5d9nv0lb.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5d9nv0lb.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5d9nv0lb.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5d9nv0lb.rs:25:12\n    |\n25  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined her",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n  } else if n == 2 {\n    return Vec::new(2);\n  } else {\n    let a = Vec::new(3);\n    let b = Vec::new(1);\n    let c = Vec::new(2);\n    for i in 0..n {\n      let t = a + b + c;\n      a = b;\n      b = c;\n      c = t;\n    }\n    return c;\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpybjdr_tw.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpybjdr_tw.rs:21:12\n    |\n21  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpybjdr_tw.rs:23:12\n    |\n23  |     return Vec::new(2);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpybjdr_tw.rs:25:13\n    |\n25  |     let a = Vec::new(3);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpybjdr_tw.rs:26:13\n    |\n26  |     let b = Vec::new(1);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpybjdr_tw.rs:27:13\n    |\n27  |     let c = Vec::new(2);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<_>`\n  --> /tmp/tmpybjdr_tw.rs:29:17\n   |\n29 |       let t = a + b + c;\n   |               - ^ - Vec<_>\n   |               |\n   |               Vec<_>\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanation",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else {\n    let [a, b] = tri(n - 1)\n    let [c, d] = tri(n - 2)\n    let [e, f] = tri(n - 3)\n    let [g, h] = tri(n - 4)\n    let [i, j] = tri(n - 5)\n    let [k, l] = tri(n - 6)\n    let [m, n] = tri(n - 7)\n    let [o, p] = tri(n - 8)\n    let [q, r] = tri(n - 9)\n    let [s, t] = tri(n - 10)\n    let [u, v] = tri(n - 11)\n    let [w, x] = tri(n - 12)\n    let [y, z] = tri(n - 13)\n    let [aa, ab] = tri(n - 14)\n    let [ac, ad] = tri(n - 15)\n    let [ae, af] = tri(n - 16)\n    let [ag, ah] = tri(n - 17)\n    let [ai, aj] = tri(n - 18)\n    let [ak, al] = tri(n - 19)\n    let [am, an] = tri(n - 20)\n    let [ao, ap] = tri(n - 21)\n    let [aq, ar] = tri(n - 22)\n    let [as, at] = tri(n - 23)\n    let [au, av] = tri(n - 24)\n    let [aw, ax] = tri(n - 25)\n    let [ay, az] = tri(n - 26)\n    let [ba, bb] = tri(n - 27)\n    let [bc, bd] = tri(n - 28)\n    let [be, bf] = tri(n - 29)\n    let [bg, bh] = tri(n - 30)\n    let [bi, bj] = tri(n - 31)\n    let\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpy2r82jpl.rs:69:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n22 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n55 | }\n   | - ...as it matches this but it has different indentation\n...\n69 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:23:28\n   |\n23 |     let [a, b] = tri(n - 1)\n   |                            ^ help: add `;` here\n24 |     let [c, d] = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:24:28\n   |\n24 |     let [c, d] = tri(n - 2)\n   |                            ^ help: add `;` here\n25 |     let [e, f] = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:25:28\n   |\n25 |     let [e, f] = tri(n - 3)\n   |                            ^ help: add `;` here\n26 |     let [g, h] = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:26:28\n   |\n26 |     let [g, h] = tri(n - 4)\n   |                            ^ help: add `;` here\n27 |     let [i, j] = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:27:28\n   |\n27 |     let [i, j] = tri(n - 5)\n   |                            ^ help: add `;` here\n28 |     let [k, l] = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:28:28\n   |\n28 |     let [k, l] = tri(n - 6)\n   |                            ^ help: add `;` here\n29 |     let [m, n] = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:29:28\n   |\n29 |     let [m, n] = tri(n - 7)\n   |                            ^ help: add `;` here\n30 |     let [o, p] = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:30:28\n   |\n30 |     let [o, p",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let a = [1, 1];\n  let b = [1, 1];\n  for i in 0..n {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0369]: cannot add `[{integer}; 2]` to `[{integer}; 2]`\n  --> /tmp/tmpuqk87eqx.rs:21:15\n   |\n21 |     let c = a + b;\n   |             - ^ - [{integer}; 2]\n   |             |\n   |             [{integer}; 2]\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuqk87eqx.rs:25:10\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected `Vec<isize>` because of return type\n...\n25 |   return a;\n   |          ^- help: try using a conversion method: `.to_vec()`\n   |          |\n   |          expected struct `Vec`, found array `[{integer}; 2]`\n   |\n   = note: expected struct `Vec<isize>`\n               found array `[{integer}; 2]`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let tri_vec = Vec::new(n + 1);\n    tri_vec[0] = 1;\n    tri_vec[1] = 3;\n    for i in 1..n {\n        tri_vec[i + 1] = tri_vec[i] + tri_vec[i - 1] + tri_vec[i + 2];\n    }\n    return tri_vec;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwezmi17q.rs:18:19\n    |\n18  |     let tri_vec = Vec::new(n + 1);\n    |                   ^^^^^^^^ ----- supplied 1 argument\n    |                   |\n    |                   expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwezmi17q.rs:22:9\n   |\n22 |         tri_vec[i + 1] = tri_vec[i] + tri_vec[i - 1] + tri_vec[i + 2];\n   |         ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwezmi17q.rs:22:26\n   |\n22 |         tri_vec[i + 1] = tri_vec[i] + tri_vec[i - 1] + tri_vec[i + 2];\n   |                          ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwezmi17q.rs:22:39\n   |\n22 |         tri_vec[i + 1] = tri_vec[i] + tri_vec[i - 1] + tri_vec[i + 2];\n   |                                       ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwezmi17q.rs:22:56\n   |\n22 |         tri_vec[i + 1] = tri_vec[i]",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp03tvrpfz.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp03tvrpfz.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp03tvrpfz.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp03tvrpfz.rs:25:32\n   |\n25 |     return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   |                     ---------- ^ ---------- Vec<isize>\n   |                     |\n   |                     Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp03tvrpfz.rs:25:12\n    |\n25  |     return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    |            ^^^^^^^^ ------------------------------------ supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(0)\n    let b = Vec::new(1)\n    let c = Vec::new(2)\n    for i in 0..n {\n      let t = a + b + c\n      a = b\n      b = c\n      c = t\n    }\n    return c\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx9pizv5r.rs:25:24\n   |\n25 |     let a = Vec::new(0)\n   |                        ^ help: add `;` here\n26 |     let b = Vec::new(1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx9pizv5r.rs:26:24\n   |\n26 |     let b = Vec::new(1)\n   |                        ^ help: add `;` here\n27 |     let c = Vec::new(2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpx9pizv5r.rs:27:24\n   |\n27 |     let c = Vec::new(2)\n   |                        ^ help: add `;` here\n28 |     for i in 0..n {\n   |     --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpx9pizv5r.rs:29:24\n   |\n29 |       let t = a + b + c\n   |                        ^ help: add `;` here\n30 |       a = b\n   |       - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpx9pizv5r.rs:30:12\n   |\n30 |       a = b\n   |            ^ help: add `;` here\n31 |       b = c\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpx9pizv5r.rs:31:12\n   |\n31 |       b = c\n   |            ^ help: add `;` here\n32 |       c = t\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx9pizv5r.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx9pizv5r.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx9pizv5r.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0);\n    } else if n == 1 {\n        return Vec::new(1);\n    } else if n == 2 {\n        return Vec::new(2);\n    } else if n % 2 == 0 {\n        return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    } else {\n        return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp05q3jkhd.rs:19:16\n    |\n19  |         return Vec::new(0);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp05q3jkhd.rs:21:16\n    |\n21  |         return Vec::new(1);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp05q3jkhd.rs:23:16\n    |\n23  |         return Vec::new(2);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp05q3jkhd.rs:25:27\n   |\n25 |         return tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |                ---------- ^ ---------- Vec<isize>\n   |                |\n   |                Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp05q3jkhd.rs:27:27\n   |\n27 |         return tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |                ---------- ^ ---------- Vec<isize>\n   |                |\n   |                Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut a = 1;\n  let mut b = 1;\n  let mut c = 1;\n  for i in 0..n {\n    let t = a + b + c;\n    a = b;\n    b = c;\n    c = t;\n    result.push(t);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[3, 5, 9]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpodwbdr0g.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0);\n    } else if n == 1 {\n        return Vec::new(1);\n    } else if n == 2 {\n        return Vec::new(2);\n    } else {\n        let a = Vec::new(n - 1);\n        let b = Vec::new(n - 2);\n        let c = Vec::new(n - 3);\n        let d = Vec::new(n - 4);\n        let e = Vec::new(n - 5);\n        let f = Vec::new(n - 6);\n        let g = Vec::new(n - 7);\n        let h = Vec::new(n - 8);\n        let i = Vec::new(n - 9);\n        let j = Vec::new(n - 10);\n        let k = Vec::new(n - 11);\n        let l = Vec::new(n - 12);\n        let m = Vec::new(n - 13);\n        let n = Vec::new(n - 14);\n        let o = Vec::new(n - 15);\n        let p = Vec::new(n - 16);\n        let q = Vec::new(n - 17);\n        let r = Vec::new(n - 18);\n        let s = Vec::new(n - 19);\n        let t = Vec::new(n - 20);\n        let u = Vec::new(n - 21);\n        let v = Vec::new(n - 22);\n        let w = Vec::new(n - 23);\n        let x = Vec::new(n - 24);\n        let y = Vec::new(n - 25);\n        let z = Vec::new(n - 26);\n        let a1 = Vec::new(n - 27);\n        let b1 = Vec::new(n - 28);\n        let c1 = Vec::new(n - 29);\n        let d1 = Vec::new(n - 30);\n        let e1 = Vec::new(n - 31);\n        let f1 = Vec::new(n - 32);\n        let g1 = Vec::new(n - 33);\n        let h1 = Vec::new(n - 34);\n        let i1 =\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpabyrgkiv.rs:74:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |     } else {\n   |            - this delimiter might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but it has different indentation\n...\n74 | }\n   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmpabyrgkiv.rs:60:1\n   |\n60 | }\n   | ^ expected expression\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpabyrgkiv.rs:19:16\n    |\n19  |         return Vec::new(0);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpabyrgkiv.rs:21:16\n    |\n21  |         return Vec::new(1);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpabyrgkiv.rs:23:16\n    |\n23  |         return Vec::new(2);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpabyrgkiv.rs:25:17\n    |\n25  |         let a = Vec::new(n - 1);\n    |                 ^^^^^^^^ ----- supplied 1 argument\n    |                 |\n    |                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpabyrgkiv.rs:26:17\n    |\n26  |         let b = Vec::new(n - 2);\n    |                 ^^^^^^^^ ----- supplied 1 argument\n    |                 |\n    |                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  if n == 2 {\n    return Vec::new(1, 2, 3)\n  }\n  let a = Vec::new(1, 2, 3)\n  let b = Vec::new(1, 2, 3)\n  let c = Vec::new(1, 2, 3)\n  for i in 0..n {\n    let a_i = a[i]\n    let b_i = b[i]\n    let c_i = c[i]\n    let sum = a_i + b_i + c_i\n    a = Vec::new(sum, a_i, b_i)\n    b = Vec::new(sum, b_i, c_i)\n    c = Vec::new(sum, a_i, b_i)\n  }\n  return a\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgor3iunc.rs:27:28\n   |\n27 |   let a = Vec::new(1, 2, 3)\n   |                            ^ help: add `;` here\n28 |   let b = Vec::new(1, 2, 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgor3iunc.rs:28:28\n   |\n28 |   let b = Vec::new(1, 2, 3)\n   |                            ^ help: add `;` here\n29 |   let c = Vec::new(1, 2, 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgor3iunc.rs:29:28\n   |\n29 |   let c = Vec::new(1, 2, 3)\n   |                            ^ help: add `;` here\n30 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgor3iunc.rs:31:19\n   |\n31 |     let a_i = a[i]\n   |                   ^ help: add `;` here\n32 |     let b_i = b[i]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgor3iunc.rs:32:19\n   |\n32 |     let b_i = b[i]\n   |                   ^ help: add `;` here\n33 |     let c_i = c[i]\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgor3iunc.rs:33:19\n   |\n33 |     let c_i = c[i]\n   |                   ^ help: add `;` here\n34 |     let sum = a_i + b_i + c_i\n   |     --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpgor3iunc.rs:34:30\n   |\n34 |     let sum = a_i + b_i + c_i\n   |                              ^ help: add `;` here\n35 |     a = Vec::new(sum, a_i, b_i)\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpgor3iunc.rs:35:32\n   |\n35 |     a = Vec::new(sum, a_i, b_i)\n   |                                ^ help: add `;` here\n36 |     b = Vec::new(sum, b_i, c_i)\n   |     - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpgor3iunc.rs:36:32\n   |\n36 |     b = Vec::new(sum, b_i, c_i)\n   |                                ^ help: add `;` here\n37 |     c = Vec::new(sum, a_i, b_i)\n   |     - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 3, 2, 8)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n - 26)\n    let aa = tri(n - 27)\n    let ab = tri(n - 28)\n    let ac = tri(n - 29)\n    let ad = tri(n - 30)\n    let ae = tri(n - 31)\n    let af = tri(n - 32)\n    let ag = tri(n - 33)\n    let ah = tri(n - 34)\n    let ai = tri(n - 35)\n    let aj = tri(n - 36)\n    let ak = tri(n - 37)\n    let al = tri(n - 38)\n    let am = tri(n - 39)\n    let an = tri(n - 40)\n    let ao =\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpnprqdrik.rs:80:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n80 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:25:23\n   |\n25 |     let a = tri(n - 1)\n   |                       ^ help: add `;` here\n26 |     let b = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:26:23\n   |\n26 |     let b = tri(n - 2)\n   |                       ^ help: add `;` here\n27 |     let c = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:27:23\n   |\n27 |     let c = tri(n - 3)\n   |                       ^ help: add `;` here\n28 |     let d = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:28:23\n   |\n28 |     let d = tri(n - 4)\n   |                       ^ help: add `;` here\n29 |     let e = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:29:23\n   |\n29 |     let e = tri(n - 5)\n   |                       ^ help: add `;` here\n30 |     let f = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:30:23\n   |\n30 |     let f = tri(n - 6)\n   |                       ^ help: add `;` here\n31 |     let g = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:31:23\n   |\n31 |     let g = tri(n - 7)\n   |                       ^ help: add `;` here\n32 |     let h = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnprqdrik.rs:32:23\n   |\n32 |     let h = tri(n - 8)\n   |                       ^ help: add `;` here\n33 |     let i = tri(n - 9)\n   |     --- unexpe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let tri = [0, 1, 3];\n  for i in 0..n {\n    tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[0] + tri[1]];\n  }\n  tri\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4bzer35l.rs:20:11\n   |\n20 |     tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[0] + tri[1]];\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 4 elements\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4bzer35l.rs:22:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected `Vec<isize>` because of return type\n...\n22 |   tri\n   |   ^^^- help: try using a conversion method: `.to_vec()`\n   |   |\n   |   expected struct `Vec`, found array `[{integer}; 3]`\n   |\n   = note: expected struct `Vec<isize>`\n               found array `[{integer}; 3]`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else {\n    let [a, b] = tri(n - 1)\n    let [c, d] = tri(n - 2)\n    let [e, f] = tri(n - 3)\n    let [g, h] = tri(n - 4)\n    let [i, j] = tri(n - 5)\n    let [k, l] = tri(n - 6)\n    let [m, n] = tri(n - 7)\n    let [o, p] = tri(n - 8)\n    let [q, r] = tri(n - 9)\n    let [s, t] = tri(n - 10)\n    let [u, v] = tri(n - 11)\n    let [w, x] = tri(n - 12)\n    let [y, z] = tri(n - 13)\n    let [aa, ab] = tri(n - 14)\n    let [ac, ad] = tri(n - 15)\n    let [ae, af] = tri(n - 16)\n    let [ag, ah] = tri(n - 17)\n    let [ai, aj] = tri(n - 18)\n    let [ak, al] = tri(n - 19)\n    let [am, an] = tri(n - 20)\n    let [ao, ap] = tri(n - 21)\n    let [aq, ar] = tri(n - 22)\n    let [as, at] = tri(n - 23)\n    let [au, av] = tri(n - 24)\n    let [aw, ax] = tri(n - 25)\n    let [ay, az] = tri(n - 26)\n    let [ba, bb] = tri(n - 27)\n    let [bc, bd] = tri(n - 28)\n    let [be, bf] = tri(n - 29)\n    let [bg, bh] = tri(n - 30)\n    let [bi, bj] = tri(n - 31)\n    let\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpy2r82jpl.rs:69:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n22 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n55 | }\n   | - ...as it matches this but it has different indentation\n...\n69 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:23:28\n   |\n23 |     let [a, b] = tri(n - 1)\n   |                            ^ help: add `;` here\n24 |     let [c, d] = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:24:28\n   |\n24 |     let [c, d] = tri(n - 2)\n   |                            ^ help: add `;` here\n25 |     let [e, f] = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:25:28\n   |\n25 |     let [e, f] = tri(n - 3)\n   |                            ^ help: add `;` here\n26 |     let [g, h] = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:26:28\n   |\n26 |     let [g, h] = tri(n - 4)\n   |                            ^ help: add `;` here\n27 |     let [i, j] = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:27:28\n   |\n27 |     let [i, j] = tri(n - 5)\n   |                            ^ help: add `;` here\n28 |     let [k, l] = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:28:28\n   |\n28 |     let [k, l] = tri(n - 6)\n   |                            ^ help: add `;` here\n29 |     let [m, n] = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:29:28\n   |\n29 |     let [m, n] = tri(n - 7)\n   |                            ^ help: add `;` here\n30 |     let [o, p] = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy2r82jpl.rs:30:28\n   |\n30 |     let [o, p",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for i in 0..n {\n    if i % 2 == 0 {\n      sum = sum + 1;\n    } else {\n      sum = sum + 2;\n    }\n    result.push(sum);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 3, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp6t33xdka.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let tri = [0, 1, 1];\n  for i in 0..n {\n    tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[0] + tri[1]];\n  }\n  return tri;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpmt779i0i.rs:20:11\n   |\n20 |     tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[0] + tri[1]];\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 4 elements\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmt779i0i.rs:22:10\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected `Vec<isize>` because of return type\n...\n22 |   return tri;\n   |          ^^^- help: try using a conversion method: `.to_vec()`\n   |          |\n   |          expected struct `Vec`, found array `[{integer}; 3]`\n   |\n   = note: expected struct `Vec<isize>`\n               found array `[{integer}; 3]`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else if n == 3 {\n    return Vec::new(8)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpncrc8zwi.rs:19:12\n    |\n19  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpncrc8zwi.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpncrc8zwi.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpncrc8zwi.rs:25:12\n    |\n25  |     return Vec::new(8)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpncrc8zwi.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    return Vec::new(a + b + c, d + e + f, g + h + i)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpehk3xuix.rs:25:31\n   |\n25 |     let [a, b, c] = tri(n - 1)\n   |                               ^ help: add `;` here\n26 |     let [d, e, f] = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpehk3xuix.rs:26:31\n   |\n26 |     let [d, e, f] = tri(n - 2)\n   |                               ^ help: add `;` here\n27 |     let [g, h, i] = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpehk3xuix.rs:27:31\n   |\n27 |     let [g, h, i] = tri(n - 3)\n   |                               ^ help: add `;` here\n28 |     return Vec::new(a + b + c, d + e + f, g + h + i)\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpehk3xuix.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpehk3xuix.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpehk3xuix.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpehk3xuix.rs:25:9\n   |\n25 |     let [a, b, c] = tri(n - 1)\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpehk3xuix.rs:26:9\n   |\n26 |     let [d, e, f] = tri(n - 2)\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(3);\n  } else {\n    let [a, b, c] = tri(n - 1);\n    let [d, e, f] = tri(n - 2);\n    let [g, h, i] = tri(n - 3);\n    let [j, k, l] = tri(n - 4);\n    let [m, n, o] = tri(n - 5);\n    let [p, q, r] = tri(n - 6);\n    let [s, t, u] = tri(n - 7);\n    let [v, w, x] = tri(n - 8);\n    let [y, z, aa] = tri(n - 9);\n    let [bb, cc, dd] = tri(n - 10);\n    let [ee, ff, gg] = tri(n - 11);\n    let [hh, ii, jj] = tri(n - 12);\n    let [kk, ll, mm] = tri(n - 13);\n    let [nn, oo, pp] = tri(n - 14);\n    let [qq, rr, ss] = tri(n - 15);\n    let [tt, uu, vv] = tri(n - 16);\n    let [ww, xx, yy] = tri(n - 17);\n    let [zz, aa, bb] = tri(n - 18);\n    let [cc, dd, ee] = tri(n - 19);\n    let [ff, gg, hh] = tri(n - 20);\n    let [ii, jj, kk] = tri(n - 21);\n    let [ll, mm, nn] = tri(n - 22);\n    let [oo, pp, qq] = tri(n - 23);\n    let [rr, ss, tt] = tri(n - 24);\n    let [uu, vv, ww] = tri(n - 25);\n    let [xx, yy, zz] = tri(n - 26);\n    let [aa, bb, cc\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpo4y4qnlp.rs:64:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n22 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n50 | }\n   | - ...as it matches this but it has different indentation\n...\n64 | }\n   |   ^\n\nerror: expected one of `:`, `;`, `=`, or `|`, found `}`\n  --> /tmp/tmpo4y4qnlp.rs:50:1\n   |\n50 | }\n   | ^ expected one of `:`, `;`, `=`, or `|`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpo4y4qnlp.rs:49:9\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - closing delimiter possibly meant for this\n...\n49 |     let [aa, bb, cc\n   |         ^ unclosed delimiter\n50 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpo4y4qnlp.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpo4y4qnlp.rs:21:12\n    |\n21  |     return Vec::new(3);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpo4y4qnlp.rs:23:9\n   |\n23 |     let [a, b, c] = tri(n - 1);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpo4y4qnlp.rs:24:9\n   |\n24 |     let [d, e, f] = tri(n - 2);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 2)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(1)\n    } else if n == 1 {\n        return Vec::new(3)\n    } else if n == 2 {\n        return Vec::new(2)\n    } else {\n        let [a, b, c] = tri(n - 1)\n        let [d, e, f] = tri(n - 2)\n        let [g, h, i] = tri(n - 3)\n        let [j, k, l] = tri(n - 4)\n        return Vec::new(a + b + c,\n                        d + e + f,\n                        g + h + i,\n                        j + k + l)\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp81dngkx3.rs:25:35\n   |\n25 |         let [a, b, c] = tri(n - 1)\n   |                                   ^ help: add `;` here\n26 |         let [d, e, f] = tri(n - 2)\n   |         --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp81dngkx3.rs:26:35\n   |\n26 |         let [d, e, f] = tri(n - 2)\n   |                                   ^ help: add `;` here\n27 |         let [g, h, i] = tri(n - 3)\n   |         --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp81dngkx3.rs:27:35\n   |\n27 |         let [g, h, i] = tri(n - 3)\n   |                                   ^ help: add `;` here\n28 |         let [j, k, l] = tri(n - 4)\n   |         --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp81dngkx3.rs:28:35\n   |\n28 |         let [j, k, l] = tri(n - 4)\n   |                                   ^ help: add `;` here\n29 |         return Vec::new(a + b + c,\n   |         ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp81dngkx3.rs:19:16\n    |\n19  |         return Vec::new(1)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp81dngkx3.rs:21:16\n    |\n21  |         return Vec::new(3)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp81dngkx3.rs:23:16\n    |\n23  |         return Vec::new(2)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp81dngkx3.rs:25:13\n   |\n25 | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0);\n    }\n    if n == 1 {\n        return Vec::new(3);\n    }\n    if n == 2 {\n        return Vec::new(2);\n    }\n    let [a, b, c] = tri(n - 1);\n    let [d, e, f] = tri(n - 2);\n    let [g, h, i] = tri(n - 3);\n    let [j, k, l] = tri(n - 4);\n    let [m, n, o] = tri(n - 5);\n    let [p, q, r] = tri(n - 6);\n    let [s, t, u] = tri(n - 7);\n    let [v, w, x] = tri(n - 8);\n    let [y, z, aa] = tri(n - 9);\n    let [bb, cc, dd] = tri(n - 10);\n    let [ee, ff, gg] = tri(n - 11);\n    let [hh, ii, jj] = tri(n - 12);\n    let [kk, ll, mm] = tri(n - 13);\n    let [nn, oo, pp] = tri(n - 14);\n    let [qq, rr, ss] = tri(n - 15);\n    let [tt, uu, vv] = tri(n - 16);\n    let [ww, xx, yy] = tri(n - 17);\n    let [zz, aa, bb] = tri(n - 18);\n    let [cc, dd, ee] = tri(n - 19);\n    let [ff, gg, hh] = tri(n - 20);\n    let [ii, jj, kk] = tri(n - 21);\n    let [ll, mm, nn] = tri(n - 22);\n    let [oo, pp, qq] = tri(n - 23);\n    let [rr, ss, tt] = tri(n - 24);\n    let [uu, vv, ww] = tri(n - 25);\n    let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected one of `:`, `;`, `=`, or `|`, found `}`\n  --> /tmp/tmp6beg_hly.rs:53:1\n   |\n53 | }\n   | ^ expected one of `:`, `;`, `=`, or `|`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp6beg_hly.rs:52:9\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - closing delimiter possibly meant for this\n...\n52 |     let [xx, yy, zz\n   |         ^ unclosed delimiter\n53 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6beg_hly.rs:19:16\n    |\n19  |         return Vec::new(0);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6beg_hly.rs:22:16\n    |\n22  |         return Vec::new(3);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6beg_hly.rs:25:16\n    |\n25  |         return Vec::new(2);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp6beg_hly.rs:27:9\n   |\n27 |     let [a, b, c] = tri(n - 1);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp6beg_hly.rs:28:9\n   |\n28 |     let [d, e, f] = tri(n - 2);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 2)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp6beg_h",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n % 2 == 0 {\n    return Vec::new(1, n / 2, tri(n - 2) + tri(n - 1) + tri(n + 1));\n  } else {\n    return Vec::new(1, tri(n - 1) + tri(n - 2) + tri(n + 1), n / 2);\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqdzzobq7.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqdzzobq7.rs:22:12\n    |\n22  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpqdzzobq7.rs:25:42\n   |\n25 |     return Vec::new(1, n / 2, tri(n - 2) + tri(n - 1) + tri(n + 1));\n   |                               ---------- ^ ---------- Vec<isize>\n   |                               |\n   |                               Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpqdzzobq7.rs:25:12\n    |\n25  |     return Vec::new(1, n / 2, tri(n - 2) + tri(n - 1) + tri(n + 1));\n    |            ^^^^^^^^ -  -----  ------------------------------------ supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpqdzzobq7.rs:27:35\n   |\n27 |     return Vec::new(1, tri(n - 1) + tri(n - 2) + tri(n + 1), n / 2);\n   |                        ---------- ^ ---------- Vec<isize>\n   |                        |\n   |                        Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpqdzzobq7.rs:27:12\n    |\n27  |     return Vec::new(1, tri(n - 1) + tri(n - 2) + tri(n + 1), n / 2);\n    |            ^^^^^^^^ -  ------------------------------------  ----- supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps6sb8tgy.rs:25:23\n   |\n25 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps6sb8tgy.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 1)\n    let d = Vec::new(n - 2)\n    let e = Vec::new(n - 1)\n    let f = Vec::new(n - 2)\n    let g = Vec::new(n - 1)\n    let h = Vec::new(n - 2)\n    let i = Vec::new(n - 1)\n    let j = Vec::new(n - 2)\n    let k = Vec::new(n - 1)\n    let l = Vec::new(n - 2)\n    let m = Vec::new(n - 1)\n    let n = Vec::new(n - 2)\n    let o = Vec::new(n - 1)\n    let p = Vec::new(n - 2)\n    let q = Vec::new(n - 1)\n    let r = Vec::new(n - 2)\n    let s = Vec::new(n - 1)\n    let t = Vec::new(n - 2)\n    let u = Vec::new(n - 1)\n    let v = Vec::new(n - 2)\n    let w = Vec::new(n - 1)\n    let x = Vec::new(n - 2)\n    let y = Vec::new(n - 1)\n    let z = Vec::new(n - 2)\n    let aa = Vec::new(n - 1)\n    let ab = Vec::new(n - 2)\n    let ac = Vec::new(n - 1)\n    let ad = Vec::new(n - 2)\n    let ae = Vec::new(n - 1)\n    let af = Vec::new(n - 2)\n    let ag = Vec::new(n - 1)\n    let ah = Vec::new(n - 2)\n    let ai = Vec::new(n -\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8lury3tx.rs:74:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but it has different indentation\n...\n74 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8lury3tx.rs:25:28\n   |\n25 |     let a = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n26 |     let b = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8lury3tx.rs:26:28\n   |\n26 |     let b = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n27 |     let c = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8lury3tx.rs:27:28\n   |\n27 |     let c = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n28 |     let d = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8lury3tx.rs:28:28\n   |\n28 |     let d = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n29 |     let e = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8lury3tx.rs:29:28\n   |\n29 |     let e = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n30 |     let f = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8lury3tx.rs:30:28\n   |\n30 |     let f = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n31 |     let g = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8lury3tx.rs:31:28\n   |\n31 |     let g = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n32 |     let h = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8lury3tx.rs:32:28\n   |\n32 |     let h = V",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(3);\n  }\n  let [a, b] = tri(n - 1);\n  let [c, d] = tri(n - 2);\n  let [e, f] = tri(n - 3);\n  let [g, h] = tri(n - 4);\n  let [i, j] = tri(n - 5);\n  let [k, l] = tri(n - 6);\n  let [m, n] = tri(n - 7);\n  let [o, p] = tri(n - 8);\n  let [q, r] = tri(n - 9);\n  let [s, t] = tri(n - 10);\n  let [u, v] = tri(n - 11);\n  let [w, x] = tri(n - 12);\n  let [y, z] = tri(n - 13);\n  let [aa, ab] = tri(n - 14);\n  let [ac, ad] = tri(n - 15);\n  let [ae, af] = tri(n - 16);\n  let [ag, ah] = tri(n - 17);\n  let [ai, aj] = tri(n - 18);\n  let [ak, al] = tri(n - 19);\n  let [am, an] = tri(n - 20);\n  let [ao, ap] = tri(n - 21);\n  let [aq, ar] = tri(n - 22);\n  let [as, at] = tri(n - 23);\n  let [au, av] = tri(n - 24);\n  let [aw, ax] = tri(n - 25);\n  let [ay, az] = tri(n - 26);\n  let [ba, bb] = tri(n - 27);\n  let [bc, bd] = tri(n - 28);\n  let [be, bf] = tri(n - 29);\n  let [bg, bh] = tri(n - 30);\n  let [bi, bj] = tri(n - 31);\n  let [\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `as`\n  --> /tmp/tmp77x8udsb.rs:46:8\n   |\n46 |   let [as, at] = tri(n - 23);\n   |        ^^ expected identifier, found keyword\n   |\nhelp: escape `as` to use it as an identifier\n   |\n46 |   let [r#as, at] = tri(n - 23);\n   |        ++\n\nerror: expected one of `:`, `;`, `=`, or `|`, found `}`\n  --> /tmp/tmp77x8udsb.rs:56:1\n   |\n56 | }\n   | ^ expected one of `:`, `;`, `=`, or `|`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp77x8udsb.rs:55:7\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - closing delimiter possibly meant for this\n...\n55 |   let [\n   |       ^ unclosed delimiter\n56 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp77x8udsb.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp77x8udsb.rs:22:12\n    |\n22  |     return Vec::new(3);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp77x8udsb.rs:24:7\n   |\n24 |   let [a, b] = tri(n - 1);\n   |       ^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |       |\n   |       pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp77x8udsb.rs:25:7\n   |\n25 |   let [c, d] = tri(n - 2);\n   |       ^^^^^^   ---------- help: consider slicing here: `tri(n - 2)[..]`\n   |       |\n   |       pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp77x8udsb.rs:26:7\n   |\n26 |   let [e, f] = tri(n - 3);\n   |       ^^^^^^   ---------- help: consider slicing here: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n  } else if n == 2 {\n    return Vec::new(2);\n  } else {\n    let [a, b, c] = tri(n - 1);\n    let [d, e, f] = tri(n - 2);\n    let [g, h, i] = tri(n - 3);\n    let [j, k, l] = tri(n - 4);\n    return Vec::new(a + b + c, b + d + e, c + e + f, e + g + h, f + h + i, g + j + k, h + k + l);\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp06yelpa1.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp06yelpa1.rs:21:12\n    |\n21  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp06yelpa1.rs:23:12\n    |\n23  |     return Vec::new(2);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp06yelpa1.rs:25:9\n   |\n25 |     let [a, b, c] = tri(n - 1);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp06yelpa1.rs:26:9\n   |\n26 |     let [d, e, f] = tri(n - 2);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 2)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp06yelpa1.rs:27:9\n   |\n27 |     let [g, h, i] = tri(n - 3);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 3)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp06yelpa1.rs:28:9\n   |\n28 |     let [j, k, l] = tri(n - 4);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 4)[..]`\n   |         |\n   |         pattern cannot match with input type ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = 1\n    let b = 1\n    let c = 2\n    for i in 0..n {\n      let t = a + b + c\n      a = b\n      b = c\n      c = t\n    }\n    return Vec::new(t)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqgmbsbib.rs:25:14\n   |\n25 |     let a = 1\n   |              ^ help: add `;` here\n26 |     let b = 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqgmbsbib.rs:26:14\n   |\n26 |     let b = 1\n   |              ^ help: add `;` here\n27 |     let c = 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqgmbsbib.rs:27:14\n   |\n27 |     let c = 2\n   |              ^ help: add `;` here\n28 |     for i in 0..n {\n   |     --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpqgmbsbib.rs:29:24\n   |\n29 |       let t = a + b + c\n   |                        ^ help: add `;` here\n30 |       a = b\n   |       - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpqgmbsbib.rs:30:12\n   |\n30 |       a = b\n   |            ^ help: add `;` here\n31 |       b = c\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpqgmbsbib.rs:31:12\n   |\n31 |       b = c\n   |            ^ help: add `;` here\n32 |       c = t\n   |       - unexpected token\n\nerror[E0425]: cannot find value `t` in this scope\n  --> /tmp/tmpqgmbsbib.rs:34:21\n   |\n34 |     return Vec::new(t)\n   |                     ^ help: a local variable with a similar name exists: `a`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqgmbsbib.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqgmbsbib.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqgmbsbib.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = Vec::new(1, 2, 3)\n    let b = a.map(|x| x + 1)\n    let c = b.map(|x| x + 1)\n    return c.map(|x| x + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpr0iyieqd.rs:25:30\n   |\n25 |     let a = Vec::new(1, 2, 3)\n   |                              ^ help: add `;` here\n26 |     let b = a.map(|x| x + 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpr0iyieqd.rs:26:29\n   |\n26 |     let b = a.map(|x| x + 1)\n   |                             ^ help: add `;` here\n27 |     let c = b.map(|x| x + 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpr0iyieqd.rs:27:29\n   |\n27 |     let c = b.map(|x| x + 1)\n   |                             ^ help: add `;` here\n28 |     return c.map(|x| x + 1)\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr0iyieqd.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr0iyieqd.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpr0iyieqd.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpr0iyieqd.rs:25:13\n    |\n25  |     let a = Vec::new(1, 2, 3)\n    |             ^^^^^^^^ -  -  - supplied 3 arguments\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: `Vec<_>` is not an iterator\n   --> /tmp/tmpr0iyieqd.rs:26:15\n    |\n26  |       let b = a.map(|x| x + 1)\n    |                 ^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let a = 1\n  let b = 1\n  let c = 2\n  let d = 3\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let aa = 0\n  let ab = 0\n  let ac = 0\n  let ad = 0\n  let ae = 0\n  let af = 0\n  let ag = 0\n  let ah = 0\n  let ai = 0\n  let aj = 0\n  let ak = 0\n  let al = 0\n  let am = 0\n  let an = 0\n  let ao = 0\n  let ap = 0\n  let aq = 0\n  let ar = 0\n  let as = 0\n  let at = 0\n  let au = 0\n  let av = 0\n  let aw = 0\n  let ax = 0\n  let ay = 0\n  let az = 0\n  let ba = 0\n  let bb = 0\n  let bc = 0\n  let bd = 0\n  let be = 0\n  let bf = 0\n  let bg = 0\n  let bh = 0\n  let bi = 0\n  let bj = 0\n  let bk = 0\n  let bl = 0\n  let bm = 0\n  let bn = 0\n  let bo = 0\n  let bp = 0\n  let bq = 0\n  let br = 0\n  let bs = 0\n  let bt = 0\n  let bu =\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpi5jgvckz.rs:27:12\n   |\n27 |   let a = 1\n   |            ^ help: add `;` here\n28 |   let b = 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi5jgvckz.rs:28:12\n   |\n28 |   let b = 1\n   |            ^ help: add `;` here\n29 |   let c = 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi5jgvckz.rs:29:12\n   |\n29 |   let c = 2\n   |            ^ help: add `;` here\n30 |   let d = 3\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi5jgvckz.rs:30:12\n   |\n30 |   let d = 3\n   |            ^ help: add `;` here\n31 |   let e = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi5jgvckz.rs:31:12\n   |\n31 |   let e = 0\n   |            ^ help: add `;` here\n32 |   let f = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi5jgvckz.rs:32:12\n   |\n32 |   let f = 0\n   |            ^ help: add `;` here\n33 |   let g = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi5jgvckz.rs:33:12\n   |\n33 |   let g = 0\n   |            ^ help: add `;` here\n34 |   let h = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi5jgvckz.rs:34:12\n   |\n34 |   let h = 0\n   |            ^ help: add `;` here\n35 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi5jgvckz.rs:35:12\n   |\n35 |   let i = 0\n   |            ^ help: add `;` here\n36 |   let j = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi5jgvckz.rs:36:12\n   |\n36 |   let j = 0\n   |            ^ help: add `;` here\n37 |   let k = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi5jgvckz.rs:37:12\n   |\n37 |   let k = 0\n   |            ^ help: add `;` here\n38 |   let l = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi5jgvckz.rs:38:12\n   |\n38 |   let l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    return Vec::new(\n      tri(n - 1) + tri(n - 2) + tri(n + 1),\n    )\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6wk8ih0m.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6wk8ih0m.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp6wk8ih0m.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp6wk8ih0m.rs:26:18\n   |\n26 |       tri(n - 1) + tri(n - 2) + tri(n + 1),\n   |       ---------- ^ ---------- Vec<isize>\n   |       |\n   |       Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6wk8ih0m.rs:25:12\n    |\n25  |     return Vec::new(\n    |            ^^^^^^^^ expected 0 arguments\n26  |       tri(n - 1) + tri(n - 2) + tri(n + 1),\n    |       ------------------------------------ supplied 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    let [j, k, l] = tri(n - 4)\n    let [m, n, o] = tri(n - 5)\n    let [p, q, r] = tri(n - 6)\n    let [s, t, u] = tri(n - 7)\n    let [v, w, x] = tri(n - 8)\n    let [y, z, aa] = tri(n - 9)\n    let [bb, cc, dd] = tri(n - 10)\n    let [ee, ff, gg] = tri(n - 11)\n    let [hh, ii, jj] = tri(n - 12)\n    let [kk, ll, mm] = tri(n - 13)\n    let [nn, oo, pp] = tri(n - 14)\n    let [qq, rr, ss] = tri(n - 15)\n    let [tt, uu, vv] = tri(n - 16)\n    let [ww, xx, yy] = tri(n - 17)\n    let [zz, aa, bb] = tri(n - 18)\n    let [cc, dd, ee] = tri(n - 19)\n    let [ff, gg, hh] = tri(n - 20)\n    let [ii, jj, kk] = tri(n - 21)\n    let [ll, mm, nn] = tri(n - 22)\n    let [oo, pp, qq] = tri(n - 23)\n    let [rr, ss, tt] = tri(n - 24)\n    let [uu, vv, ww] = tri(n - 25)\n    let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpjb03_23i.rs:65:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n51 | }\n   | - ...as it matches this but it has different indentation\n...\n65 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:25:31\n   |\n25 |     let [a, b, c] = tri(n - 1)\n   |                               ^ help: add `;` here\n26 |     let [d, e, f] = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:26:31\n   |\n26 |     let [d, e, f] = tri(n - 2)\n   |                               ^ help: add `;` here\n27 |     let [g, h, i] = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:27:31\n   |\n27 |     let [g, h, i] = tri(n - 3)\n   |                               ^ help: add `;` here\n28 |     let [j, k, l] = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:28:31\n   |\n28 |     let [j, k, l] = tri(n - 4)\n   |                               ^ help: add `;` here\n29 |     let [m, n, o] = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:29:31\n   |\n29 |     let [m, n, o] = tri(n - 5)\n   |                               ^ help: add `;` here\n30 |     let [p, q, r] = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:30:31\n   |\n30 |     let [p, q, r] = tri(n - 6)\n   |                               ^ help: add `;` here\n31 |     let [s, t, u] = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:31:31\n   |\n31 |     let [s, t, u] = tri(n - 7)\n   |                               ^ help: add `;` here\n32 |     let [v, w, x] = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keywor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    return Vec::new(1) + Vec::new(n / 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps1qvqan2.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps1qvqan2.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps1qvqan2.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps1qvqan2.rs:25:12\n    |\n25  |     return Vec::new(1) + Vec::new(n / 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps1qvqan2.rs:25:26\n    |\n25  |     return Vec::new(1) + Vec::new(n / 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    |                          ^^^^^^^^ ----- supplied 1 argument\n    |                          |\n    |                          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<_>`\n  --> /tmp/tmps1qvqan2.rs:25:24\n   |\n25 |     return Vec::new(1) + Vec::new(n / 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ----------- ^ --------------- Vec<_>\n   |            |\n   |            Vec<_>\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut last = 0;\n    let mut next = 1;\n    for i in 0..n {\n        if i % 2 == 0 {\n            result.push_back(next);\n            last = next;\n            next = last + next;\n        } else {\n            result.push_back(last);\n            last = next;\n            next = last + next;\n        }\n    }\n    result.push_back(next);\n    return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpciy2cpym.rs:23:20\n   |\n23 |             result.push_back(next);\n   |                    ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpciy2cpym.rs:27:20\n   |\n27 |             result.push_back(last);\n   |                    ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpciy2cpym.rs:32:12\n   |\n32 |     result.push_back(next);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current = 0;\n  let mut previous = 0;\n  let mut next = 1;\n  for i in 0..n {\n    result.push(current);\n    current = previous + current;\n    previous = next;\n    next = current + previous;\n  }\n  result.push(current);\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 0, 1, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpqsc3d2eg.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n - 26)\n    let aa = tri(n - 27)\n    let ab = tri(n - 28)\n    let ac = tri(n - 29)\n    let ad = tri(n - 30)\n    let ae = tri(n - 31)\n    let af = tri(n - 32)\n    let ag = tri(n - 33)\n    let ah = tri(n - 34)\n    let ai = tri(n - 35)\n    let aj = tri(n - 36)\n    let ak = tri(n - 37)\n    let al = tri(n - 38)\n    let am = tri(n - 39)\n    let an = tri(n - 40)\n    let ao = tri(\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpuhqqy379.rs:80:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n80 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:25:23\n   |\n25 |     let a = tri(n - 1)\n   |                       ^ help: add `;` here\n26 |     let b = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:26:23\n   |\n26 |     let b = tri(n - 2)\n   |                       ^ help: add `;` here\n27 |     let c = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:27:23\n   |\n27 |     let c = tri(n - 3)\n   |                       ^ help: add `;` here\n28 |     let d = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:28:23\n   |\n28 |     let d = tri(n - 4)\n   |                       ^ help: add `;` here\n29 |     let e = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:29:23\n   |\n29 |     let e = tri(n - 5)\n   |                       ^ help: add `;` here\n30 |     let f = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:30:23\n   |\n30 |     let f = tri(n - 6)\n   |                       ^ help: add `;` here\n31 |     let g = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:31:23\n   |\n31 |     let g = tri(n - 7)\n   |                       ^ help: add `;` here\n32 |     let h = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:32:23\n   |\n32 |     let h = tri(n - 8)\n   |                       ^ help: add `;` here\n33 |     let i = tri(n - 9)\n   |     --- unexpe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  return Vec::new(3) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpzkgee3rx.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpzkgee3rx.rs:22:12\n    |\n22  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpzkgee3rx.rs:25:12\n    |\n25  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpzkgee3rx.rs:27:10\n    |\n27  |   return Vec::new(3) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    |          ^^^^^^^^ - supplied 1 argument\n    |          |\n    |          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<_>`\n  --> /tmp/tmpzkgee3rx.rs:27:22\n   |\n27 |   return Vec::new(3) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |          ----------- ^ ---------- Vec<isize>\n   |          |\n   |          Vec<_>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = 1\n    let b = 1\n    let c = 2\n    let d = 0\n    let e = 0\n    let f = 0\n    let g = 0\n    let h = 0\n    let i = 0\n    let j = 0\n    let k = 0\n    let l = 0\n    let m = 0\n    let n = 0\n    let o = 0\n    let p = 0\n    let q = 0\n    let r = 0\n    let s = 0\n    let t = 0\n    let u = 0\n    let v = 0\n    let w = 0\n    let x = 0\n    let y = 0\n    let z = 0\n    let aa = 0\n    let ab = 0\n    let ac = 0\n    let ad = 0\n    let ae = 0\n    let af = 0\n    let ag = 0\n    let ah = 0\n    let ai = 0\n    let aj = 0\n    let ak = 0\n    let al = 0\n    let am = 0\n    let an = 0\n    let ao = 0\n    let ap = 0\n    let aq = 0\n    let ar = 0\n    let as = 0\n    let at = 0\n    let au = 0\n    let av = 0\n    let aw = 0\n    let ax = 0\n    let ay = 0\n    let az = 0\n    let ba = 0\n    let bb = 0\n    let bc = 0\n    let bd = 0\n    let be = 0\n    let bf = 0\n    let bg = 0\n    let bh = 0\n    let bi = 0\n    let bj = 0\n    let bk = 0\n    let bl = 0\n    let bm = 0\n    let bn = 0\n    let bo = 0\n    let bp = 0\n    let bq = 0\n    let br = 0\n    let bs = 0\n    let bt = 0\n    let bu =\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n   --> /tmp/tmpo2axy_a5.rs:112:3\n    |\n17  | fn tri(n: isize) -> Vec<isize> {\n    |                                - unclosed delimiter\n...\n24  |   } else {\n    |          - this delimiter might not be properly closed...\n...\n98  | }\n    | - ...as it matches this but it has different indentation\n...\n112 | }\n    |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo2axy_a5.rs:25:14\n   |\n25 |     let a = 1\n   |              ^ help: add `;` here\n26 |     let b = 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo2axy_a5.rs:26:14\n   |\n26 |     let b = 1\n   |              ^ help: add `;` here\n27 |     let c = 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo2axy_a5.rs:27:14\n   |\n27 |     let c = 2\n   |              ^ help: add `;` here\n28 |     let d = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo2axy_a5.rs:28:14\n   |\n28 |     let d = 0\n   |              ^ help: add `;` here\n29 |     let e = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo2axy_a5.rs:29:14\n   |\n29 |     let e = 0\n   |              ^ help: add `;` here\n30 |     let f = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo2axy_a5.rs:30:14\n   |\n30 |     let f = 0\n   |              ^ help: add `;` here\n31 |     let g = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo2axy_a5.rs:31:14\n   |\n31 |     let g = 0\n   |              ^ help: add `;` here\n32 |     let h = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo2axy_a5.rs:32:14\n   |\n32 |     let h = 0\n   |              ^ help: add `;` here\n33 |     let i = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo2axy_a5.rs:33:14\n   |\n33 |     let i = 0\n   |              ^ help: add `;` here\n34 |     let j = 0\n   |     --- unexpected token\n\nerror: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current = 1;\n  let mut previous = 0;\n  let mut next = 0;\n  for i in 0..n {\n    if i % 2 == 0 {\n      next = previous + current;\n    } else {\n      next = current + previous + current;\n    }\n    result.push_back(next);\n    previous = current;\n    current = next;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmplvsxm1gz.rs:28:12\n   |\n28 |     result.push_back(next);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  if n == 2 {\n    return Vec::new(1, 2, 3)\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n + 1)\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpy0gh1vwb.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpy0gh1vwb.rs:22:12\n    |\n22  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpy0gh1vwb.rs:25:12\n    |\n25  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpy0gh1vwb.rs:27:21\n   |\n27 |   return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |          ---------- ^ ---------- Vec<isize>\n   |          |\n   |          Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut sum = 0;\n    for i in 0..n {\n        let tri_i = (i + 1) / 2;\n        if i % 2 == 0 {\n            sum += tri_i;\n        } else {\n            sum += tri_i + tri_i + tri_i;\n        }\n        result.push(sum);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 3, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpf2mp8o9y.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0);\n    }\n    if n == 1 {\n        return Vec::new(1);\n    }\n    if n == 2 {\n        return Vec::new(2);\n    }\n    let [a, b, c] = tri(n - 1);\n    let [d, e, f] = tri(n - 2);\n    let [g, h, i] = tri(n - 3);\n    let [j, k, l] = tri(n - 4);\n    let [m, n, o] = tri(n - 5);\n    let [p, q, r] = tri(n - 6);\n    let [s, t, u] = tri(n - 7);\n    let [v, w, x] = tri(n - 8);\n    let [y, z, aa] = tri(n - 9);\n    let [bb, cc, dd] = tri(n - 10);\n    let [ee, ff, gg] = tri(n - 11);\n    let [hh, ii, jj] = tri(n - 12);\n    let [kk, ll, mm] = tri(n - 13);\n    let [nn, oo, pp] = tri(n - 14);\n    let [qq, rr, ss] = tri(n - 15);\n    let [tt, uu, vv] = tri(n - 16);\n    let [ww, xx, yy] = tri(n - 17);\n    let [zz, aa, bb] = tri(n - 18);\n    let [cc, dd, ee] = tri(n - 19);\n    let [ff, gg, hh] = tri(n - 20);\n    let [ii, jj, kk] = tri(n - 21);\n    let [ll, mm, nn] = tri(n - 22);\n    let [oo, pp, qq] = tri(n - 23);\n    let [rr, ss, tt] = tri(n - 24);\n    let [uu, vv, ww] = tri(n - 25);\n    let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected one of `:`, `;`, `=`, or `|`, found `}`\n  --> /tmp/tmp32uk35_e.rs:53:1\n   |\n53 | }\n   | ^ expected one of `:`, `;`, `=`, or `|`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp32uk35_e.rs:52:9\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - closing delimiter possibly meant for this\n...\n52 |     let [xx, yy, zz\n   |         ^ unclosed delimiter\n53 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp32uk35_e.rs:19:16\n    |\n19  |         return Vec::new(0);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp32uk35_e.rs:22:16\n    |\n22  |         return Vec::new(1);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp32uk35_e.rs:25:16\n    |\n25  |         return Vec::new(2);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp32uk35_e.rs:27:9\n   |\n27 |     let [a, b, c] = tri(n - 1);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp32uk35_e.rs:28:9\n   |\n28 |     let [d, e, f] = tri(n - 2);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 2)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp32uk35",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(3)\n    let b = Vec::new(3)\n    let c = Vec::new(3)\n    a[0] = 1\n    b[0] = 1\n    c[0] = 1\n    for i in 0..n - 2 {\n      a[i + 1] = a[i] + b[i]\n      b[i + 1] = b[i] + c[i]\n      c[i + 1] = a[i] + b[i]\n    }\n    return Vec::new(a)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqdo8cyid.rs:25:24\n   |\n25 |     let a = Vec::new(3)\n   |                        ^ help: add `;` here\n26 |     let b = Vec::new(3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqdo8cyid.rs:26:24\n   |\n26 |     let b = Vec::new(3)\n   |                        ^ help: add `;` here\n27 |     let c = Vec::new(3)\n   |     --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpqdo8cyid.rs:27:24\n   |\n27 |     let c = Vec::new(3)\n   |                        ^ help: add `;` here\n28 |     a[0] = 1\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpqdo8cyid.rs:28:13\n   |\n28 |     a[0] = 1\n   |             ^ help: add `;` here\n29 |     b[0] = 1\n   |     - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpqdo8cyid.rs:29:13\n   |\n29 |     b[0] = 1\n   |             ^ help: add `;` here\n30 |     c[0] = 1\n   |     - unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqdo8cyid.rs:30:13\n   |\n30 |     c[0] = 1\n   |             ^ help: add `;` here\n31 |     for i in 0..n - 2 {\n   |     --- unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpqdo8cyid.rs:32:29\n   |\n32 |       a[i + 1] = a[i] + b[i]\n   |                             ^ help: add `;` here\n33 |       b[i + 1] = b[i] + c[i]\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpqdo8cyid.rs:33:29\n   |\n33 |       b[i + 1] = b[i] + c[i]\n   |                             ^ help: add `;` here\n34 |       c[i + 1] = a[i] + b[i]\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqdo8cyid.rs:19:12\n    |\n19  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqdo8cyid.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0)\n    } else if n == 1 {\n        return Vec::new(1)\n    } else if n == 2 {\n        return Vec::new(2)\n    } else if n % 2 == 0 {\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    } else {\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp8fz2h63x.rs:19:16\n    |\n19  |         return Vec::new(0)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp8fz2h63x.rs:21:16\n    |\n21  |         return Vec::new(1)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp8fz2h63x.rs:23:16\n    |\n23  |         return Vec::new(2)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp8fz2h63x.rs:25:27\n   |\n25 |         return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |                ---------- ^ ---------- Vec<isize>\n   |                |\n   |                Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp8fz2h63x.rs:27:27\n   |\n27 |         return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |                ---------- ^ ---------- Vec<isize>\n   |                |\n   |                Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    return Vec::new(1 + (n / 2), tri(n - 1), tri(n - 2), tri(n + 1))\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwv77qw2l.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwv77qw2l.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwv77qw2l.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmpwv77qw2l.rs:25:12\n    |\n25  |     return Vec::new(1 + (n / 2), tri(n - 1), tri(n - 2), tri(n + 1))\n    |            ^^^^^^^^ -----------  ----------  ----------  ---------- supplied 4 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n == 2 {\n    return Vec::new(2);\n  }\n  let [a, b, c] = tri(n - 1);\n  let [d, e, f] = tri(n - 2);\n  let [g, h, i] = tri(n - 3);\n  let [j, k, l] = tri(n - 4);\n  let [m, n, o] = tri(n - 5);\n  let [p, q, r] = tri(n - 6);\n  let [s, t, u] = tri(n - 7);\n  let [v, w, x] = tri(n - 8);\n  let [y, z, aa] = tri(n - 9);\n  let [bb, cc, dd] = tri(n - 10);\n  let [ee, ff, gg] = tri(n - 11);\n  let [hh, ii, jj] = tri(n - 12);\n  let [kk, ll, mm] = tri(n - 13);\n  let [nn, oo, pp] = tri(n - 14);\n  let [qq, rr, ss] = tri(n - 15);\n  let [tt, uu, vv] = tri(n - 16);\n  let [ww, xx, yy] = tri(n - 17);\n  let [zz, aa, bb] = tri(n - 18);\n  let [cc, dd, ee] = tri(n - 19);\n  let [ff, gg, hh] = tri(n - 20);\n  let [ii, jj, kk] = tri(n - 21);\n  let [ll, mm, nn] = tri(n - 22);\n  let [oo, pp, qq] = tri(n - 23);\n  let [rr, ss, tt] = tri(n - 24);\n  let [uu, vv, ww] = tri(n - 25);\n  let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected one of `:`, `;`, `=`, or `|`, found `}`\n  --> /tmp/tmpvt11lbxi.rs:53:1\n   |\n53 | }\n   | ^ expected one of `:`, `;`, `=`, or `|`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpvt11lbxi.rs:52:7\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - closing delimiter possibly meant for this\n...\n52 |   let [xx, yy, zz\n   |       ^ unclosed delimiter\n53 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvt11lbxi.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvt11lbxi.rs:22:12\n    |\n22  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvt11lbxi.rs:25:12\n    |\n25  |     return Vec::new(2);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpvt11lbxi.rs:27:7\n   |\n27 |   let [a, b, c] = tri(n - 1);\n   |       ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |       |\n   |       pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpvt11lbxi.rs:28:7\n   |\n28 |   let [d, e, f] = tri(n - 2);\n   |       ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 2)[..]`\n   |       |\n   |       pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpvt11lbxi.rs:29:7\n   |\n29 |   let [g, h, i] = tri(n - 3);\n   |       ^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n - 26)\n    let aa = tri(n - 27)\n    let ab = tri(n - 28)\n    let ac = tri(n - 29)\n    let ad = tri(n - 30)\n    let ae = tri(n - 31)\n    let af = tri(n - 32)\n    let ag = tri(n - 33)\n    let ah = tri(n - 34)\n    let ai = tri(n - 35)\n    let aj = tri(n - 36)\n    let ak = tri(n - 37)\n    let al = tri(n - 38)\n    let am = tri(n - 39)\n    let an = tri(n - 40)\n    let ao = tri(\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpuhqqy379.rs:80:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n80 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:25:23\n   |\n25 |     let a = tri(n - 1)\n   |                       ^ help: add `;` here\n26 |     let b = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:26:23\n   |\n26 |     let b = tri(n - 2)\n   |                       ^ help: add `;` here\n27 |     let c = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:27:23\n   |\n27 |     let c = tri(n - 3)\n   |                       ^ help: add `;` here\n28 |     let d = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:28:23\n   |\n28 |     let d = tri(n - 4)\n   |                       ^ help: add `;` here\n29 |     let e = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:29:23\n   |\n29 |     let e = tri(n - 5)\n   |                       ^ help: add `;` here\n30 |     let f = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:30:23\n   |\n30 |     let f = tri(n - 6)\n   |                       ^ help: add `;` here\n31 |     let g = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:31:23\n   |\n31 |     let g = tri(n - 7)\n   |                       ^ help: add `;` here\n32 |     let h = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:32:23\n   |\n32 |     let h = tri(n - 8)\n   |                       ^ help: add `;` here\n33 |     let i = tri(n - 9)\n   |     --- unexpe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut acc = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n            acc = acc + 1;\n        } else {\n            acc = acc + 2;\n        }\n        res.push_back(acc);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpexystypt.rs:26:13\n   |\n26 |         res.push_back(acc);\n   |             ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 1)\n    let d = Vec::new(n - 2)\n    let e = Vec::new(n - 1)\n    let f = Vec::new(n - 2)\n    let g = Vec::new(n - 1)\n    let h = Vec::new(n - 2)\n    let i = Vec::new(n - 1)\n    let j = Vec::new(n - 2)\n    let k = Vec::new(n - 1)\n    let l = Vec::new(n - 2)\n    let m = Vec::new(n - 1)\n    let n = Vec::new(n - 2)\n    let o = Vec::new(n - 1)\n    let p = Vec::new(n - 2)\n    let q = Vec::new(n - 1)\n    let r = Vec::new(n - 2)\n    let s = Vec::new(n - 1)\n    let t = Vec::new(n - 2)\n    let u = Vec::new(n - 1)\n    let v = Vec::new(n - 2)\n    let w = Vec::new(n - 1)\n    let x = Vec::new(n - 2)\n    let y = Vec::new(n - 1)\n    let z = Vec::new(n - 2)\n    let a1 = Vec::new(n - 1)\n    let b1 = Vec::new(n - 2)\n    let c1 = Vec::new(n - 1)\n    let d1 = Vec::new(n - 2)\n    let e1 = Vec::new(n - 1)\n    let f1 = Vec::new(n - 2)\n    let g1 = Vec::new(n - 1)\n    let h1 = Vec::new(n - 2)\n    let i1 =\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpqgwkbfui.rs:74:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but it has different indentation\n...\n74 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqgwkbfui.rs:25:28\n   |\n25 |     let a = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n26 |     let b = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqgwkbfui.rs:26:28\n   |\n26 |     let b = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n27 |     let c = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqgwkbfui.rs:27:28\n   |\n27 |     let c = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n28 |     let d = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqgwkbfui.rs:28:28\n   |\n28 |     let d = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n29 |     let e = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqgwkbfui.rs:29:28\n   |\n29 |     let e = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n30 |     let f = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqgwkbfui.rs:30:28\n   |\n30 |     let f = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n31 |     let g = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqgwkbfui.rs:31:28\n   |\n31 |     let g = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n32 |     let h = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqgwkbfui.rs:32:28\n   |\n32 |     let h = V",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  return Vec::new(1 + (n / 2), tri(n - 1), tri(n - 2), tri(n + 1))\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6rm1bpnk.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6rm1bpnk.rs:22:12\n    |\n22  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6rm1bpnk.rs:25:12\n    |\n25  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmp6rm1bpnk.rs:27:10\n    |\n27  |   return Vec::new(1 + (n / 2), tri(n - 1), tri(n - 2), tri(n + 1))\n    |          ^^^^^^^^ -----------  ----------  ----------  ---------- supplied 4 arguments\n    |          |\n    |          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else {\n    let a = Vec::new(0)\n    let b = Vec::new(1)\n    let c = Vec::new(0)\n    for i in 0..n {\n      let t = a + b\n      a = b\n      b = c\n      c = t\n    }\n    return a\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmdswjrkz.rs:23:24\n   |\n23 |     let a = Vec::new(0)\n   |                        ^ help: add `;` here\n24 |     let b = Vec::new(1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmdswjrkz.rs:24:24\n   |\n24 |     let b = Vec::new(1)\n   |                        ^ help: add `;` here\n25 |     let c = Vec::new(0)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmdswjrkz.rs:25:24\n   |\n25 |     let c = Vec::new(0)\n   |                        ^ help: add `;` here\n26 |     for i in 0..n {\n   |     --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpmdswjrkz.rs:27:20\n   |\n27 |       let t = a + b\n   |                    ^ help: add `;` here\n28 |       a = b\n   |       - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpmdswjrkz.rs:28:12\n   |\n28 |       a = b\n   |            ^ help: add `;` here\n29 |       b = c\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpmdswjrkz.rs:29:12\n   |\n29 |       b = c\n   |            ^ help: add `;` here\n30 |       c = t\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpmdswjrkz.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpmdswjrkz.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpmdswjrkz.rs:23:13\n    |\n23  |     let a = Vec::new(0)\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined h",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n % 2 == 0 {\n    return Vec::new(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp17m3cq1c.rs:40:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   if n % 2 == 0 {\n   |                 - this delimiter might not be properly closed...\n25 |     return Vec::new(1, 2, 3, ...\n26 | }\n   | - ...as it matches this but it has different indentation\n...\n40 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp17m3cq1c.rs:25:20\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - closing delimiter possibly meant for this\n...\n25 |     return Vec::new(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32...\n   |                    ^ unclosed delimiter\n26 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp17m3cq1c.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp17m3cq1c.rs:22:12\n    |\n22  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 230 arguments were supplied\n   --> /tmp/tmp17m3cq1c.rs:25:12\n    |\n25  | ...rn Vec::new(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:27:29\n   |\n27 |   let [a, b, c] = tri(n - 1)\n   |                             ^ help: add `;` here\n28 |   let [d, e, f] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:28:29\n   |\n28 |   let [d, e, f] = tri(n - 2)\n   |                             ^ help: add `;` here\n29 |   let [g, h, i] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:29:29\n   |\n29 |   let [g, h, i] = tri(n - 3)\n   |                             ^ help: add `;` here\n30 |   let [j, k, l] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:30:29\n   |\n30 |   let [j, k, l] = tri(n - 4)\n   |                             ^ help: add `;` here\n31 |   let [m, n, o] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:31:29\n   |\n31 |   let [m, n, o] = tri(n - 5)\n   |                             ^ help: add `;` here\n32 |   let [p, q, r] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:32:29\n   |\n32 |   let [p, q, r] = tri(n - 6)\n   |                             ^ help: add `;` here\n33 |   let [s, t, u] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:33:29\n   |\n33 |   let [s, t, u] = tri(n - 7)\n   |                             ^ help: add `;` here\n34 |   let [v, w, x] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:34:29\n   |\n34 |   let [v, w, x] = tri(n - 8)\n   |                             ^ help: add `;` here\n35 |   let [y, z, aa] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:35:30\n   |\n35 |   let [y, z, aa] = tri(n - 9)\n   |                              ^ help: add `;` here\n36 |   let [bb, cc, dd] = tri(n - 10)\n   |   --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(3)\n    let b = Vec::new(1)\n    let c = Vec::new(2)\n    for i in 0..n {\n      a = a.plus(b)\n      b = c\n      c = a\n    }\n    return a\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsemwvhyh.rs:25:24\n   |\n25 |     let a = Vec::new(3)\n   |                        ^ help: add `;` here\n26 |     let b = Vec::new(1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsemwvhyh.rs:26:24\n   |\n26 |     let b = Vec::new(1)\n   |                        ^ help: add `;` here\n27 |     let c = Vec::new(2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpsemwvhyh.rs:27:24\n   |\n27 |     let c = Vec::new(2)\n   |                        ^ help: add `;` here\n28 |     for i in 0..n {\n   |     --- unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpsemwvhyh.rs:29:20\n   |\n29 |       a = a.plus(b)\n   |                    ^ help: add `;` here\n30 |       b = c\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpsemwvhyh.rs:30:12\n   |\n30 |       b = c\n   |            ^ help: add `;` here\n31 |       c = a\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsemwvhyh.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsemwvhyh.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsemwvhyh.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsemwvhyh.rs:25:13\n    |\n25  |     let a = Vec::new(3)\n    |             ^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps6sb8tgy.rs:25:23\n   |\n25 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps6sb8tgy.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut sum = 0;\n    let mut prev = 0;\n    let mut next = 1;\n    for i in 0..n {\n        result.push_back(sum);\n        sum = prev + next;\n        prev = next;\n        next = sum;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpoy0qewod.rs:23:16\n   |\n23 |         result.push_back(sum);\n   |                ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let a = [1, 1];\n  let b = [1, 0];\n  for i in 0..n {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0369]: cannot add `[{integer}; 2]` to `[{integer}; 2]`\n  --> /tmp/tmp2qsul1wz.rs:21:15\n   |\n21 |     let c = a + b;\n   |             - ^ - [{integer}; 2]\n   |             |\n   |             [{integer}; 2]\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2qsul1wz.rs:25:10\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected `Vec<isize>` because of return type\n...\n25 |   return a;\n   |          ^- help: try using a conversion method: `.to_vec()`\n   |          |\n   |          expected struct `Vec`, found array `[{integer}; 2]`\n   |\n   = note: expected struct `Vec<isize>`\n               found array `[{integer}; 2]`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 1)\n    let d = Vec::new(n - 2)\n    let e = Vec::new(n - 1)\n    let f = Vec::new(n - 2)\n    let g = Vec::new(n - 1)\n    let h = Vec::new(n - 2)\n    let i = Vec::new(n - 1)\n    let j = Vec::new(n - 2)\n    let k = Vec::new(n - 1)\n    let l = Vec::new(n - 2)\n    let m = Vec::new(n - 1)\n    let n = Vec::new(n - 2)\n    let o = Vec::new(n - 1)\n    let p = Vec::new(n - 2)\n    let q = Vec::new(n - 1)\n    let r = Vec::new(n - 2)\n    let s = Vec::new(n - 1)\n    let t = Vec::new(n - 2)\n    let u = Vec::new(n - 1)\n    let v = Vec::new(n - 2)\n    let w = Vec::new(n - 1)\n    let x = Vec::new(n - 2)\n    let y = Vec::new(n - 1)\n    let z = Vec::new(n - 2)\n    let a1 = Vec::new(n - 1)\n    let b1 = Vec::new(n - 2)\n    let c1 = Vec::new(n - 1)\n    let d1 = Vec::new(n - 2)\n    let e1 = Vec::new(n - 1)\n    let f1 = Vec::new(n - 2)\n    let g1 = Vec::new(n - 1)\n    let h1 = Vec::new(n - 2)\n    let i1 =\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpk7f36uu0.rs:74:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but it has different indentation\n...\n74 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:25:28\n   |\n25 |     let a = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n26 |     let b = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:26:28\n   |\n26 |     let b = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n27 |     let c = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:27:28\n   |\n27 |     let c = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n28 |     let d = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:28:28\n   |\n28 |     let d = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n29 |     let e = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:29:28\n   |\n29 |     let e = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n30 |     let f = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:30:28\n   |\n30 |     let f = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n31 |     let g = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:31:28\n   |\n31 |     let g = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n32 |     let h = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:32:28\n   |\n32 |     let h = V",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    return Vec::new(a + b + c, b + d + e, c + e + f, d + f + g, e + g + h, f + h + i)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpejag7n4h.rs:25:31\n   |\n25 |     let [a, b, c] = tri(n - 1)\n   |                               ^ help: add `;` here\n26 |     let [d, e, f] = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpejag7n4h.rs:26:31\n   |\n26 |     let [d, e, f] = tri(n - 2)\n   |                               ^ help: add `;` here\n27 |     let [g, h, i] = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpejag7n4h.rs:27:31\n   |\n27 |     let [g, h, i] = tri(n - 3)\n   |                               ^ help: add `;` here\n28 |     return Vec::new(a + b + c, b + d + e, c + e + f, d + f + g, e + g + h, f + h + i)\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpejag7n4h.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpejag7n4h.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpejag7n4h.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpejag7n4h.rs:25:9\n   |\n25 |     let [a, b, c] = tri(n - 1)\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpejag7n4h.rs:2",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n  } else {\n    let a = Vec::new(0);\n    let b = Vec::new(1);\n    let c = Vec::new(2);\n    let d = Vec::new(3);\n    let e = Vec::new(4);\n    let f = Vec::new(5);\n    let g = Vec::new(6);\n    let h = Vec::new(7);\n    let i = Vec::new(8);\n    let j = Vec::new(9);\n    let k = Vec::new(10);\n    let l = Vec::new(11);\n    let m = Vec::new(12);\n    let n = Vec::new(13);\n    let o = Vec::new(14);\n    let p = Vec::new(15);\n    let q = Vec::new(16);\n    let r = Vec::new(17);\n    let s = Vec::new(18);\n    let t = Vec::new(19);\n    let u = Vec::new(20);\n    let v = Vec::new(21);\n    let w = Vec::new(22);\n    let x = Vec::new(23);\n    let y = Vec::new(24);\n    let z = Vec::new(25);\n    let a1 = Vec::new(26);\n    let b1 = Vec::new(27);\n    let c1 = Vec::new(28);\n    let d1 = Vec::new(29);\n    let e1 = Vec::new(30);\n    let f1 = Vec::new(31);\n    let g1 = Vec::new(32);\n    let h1 = Vec::new(33);\n    let i1 = Vec::new(34);\n    let j1 = Vec::new(35);\n    let k1 = Vec::new(36);\n    let l1 = Vec::new(37);\n    let m1 = Vec::new(38);\n    let n1 = Vec::new(39);\n    let o1 = Vec::new(40);\n    let p1 = Vec::\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpihrc3v62.rs:79:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n22 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n65 | }\n   | - ...as it matches this but it has different indentation\n...\n79 | }\n   |   ^\n\nerror: expected identifier, found `}`\n  --> /tmp/tmpihrc3v62.rs:65:1\n   |\n65 | }\n   | ^ expected identifier\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpihrc3v62.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpihrc3v62.rs:21:12\n    |\n21  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpihrc3v62.rs:23:13\n    |\n23  |     let a = Vec::new(0);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpihrc3v62.rs:24:13\n    |\n24  |     let b = Vec::new(1);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpihrc3v62.rs:25:13\n    |\n25  |     let c = Vec::new(2);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpihrc3v62.rs:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else if n == 3 {\n    return Vec::new(3)\n  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 3)\n    let d = Vec::new(n - 4)\n    let e = Vec::new(n - 5)\n    let f = Vec::new(n - 6)\n    let g = Vec::new(n - 7)\n    let h = Vec::new(n - 8)\n    let i = Vec::new(n - 9)\n    let j = Vec::new(n - 10)\n    let k = Vec::new(n - 11)\n    let l = Vec::new(n - 12)\n    let m = Vec::new(n - 13)\n    let n = Vec::new(n - 14)\n    let o = Vec::new(n - 15)\n    let p = Vec::new(n - 16)\n    let q = Vec::new(n - 17)\n    let r = Vec::new(n - 18)\n    let s = Vec::new(n - 19)\n    let t = Vec::new(n - 20)\n    let u = Vec::new(n - 21)\n    let v = Vec::new(n - 22)\n    let w = Vec::new(n - 23)\n    let x = Vec::new(n - 24)\n    let y = Vec::new(n - 25)\n    let z = Vec::new(n - 26)\n    let a1 = a + b\n    let b1 = b + c\n    let c1 = c + d\n    let d1 = d + e\n    let e1 = e + f\n    let f1 = f + g\n    let g1 = g + h\n    let h1 = h + i\n    let i1 = i + j\n    let j1 = j + k\n    let k1 = k + l\n\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpkvl43nx0.rs:79:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n26 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n65 | }\n   | - ...as it matches this but it has different indentation\n...\n79 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkvl43nx0.rs:27:28\n   |\n27 |     let a = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n28 |     let b = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkvl43nx0.rs:28:28\n   |\n28 |     let b = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n29 |     let c = Vec::new(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkvl43nx0.rs:29:28\n   |\n29 |     let c = Vec::new(n - 3)\n   |                            ^ help: add `;` here\n30 |     let d = Vec::new(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkvl43nx0.rs:30:28\n   |\n30 |     let d = Vec::new(n - 4)\n   |                            ^ help: add `;` here\n31 |     let e = Vec::new(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkvl43nx0.rs:31:28\n   |\n31 |     let e = Vec::new(n - 5)\n   |                            ^ help: add `;` here\n32 |     let f = Vec::new(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkvl43nx0.rs:32:28\n   |\n32 |     let f = Vec::new(n - 6)\n   |                            ^ help: add `;` here\n33 |     let g = Vec::new(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkvl43nx0.rs:33:28\n   |\n33 |     let g = Vec::new(n - 7)\n   |                            ^ help: add `;` here\n34 |     let h = Vec::new(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkvl43nx0.rs:34:28\n   |\n34 |     let h = V",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = 1\n    let b = 1\n    let c = 1\n    for i in 0..n - 2 {\n      a = a + b\n      b = b + c\n      c = a + b\n      a = b + c\n    }\n    return Vec::new(a + b + c)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpluce42mo.rs:25:14\n   |\n25 |     let a = 1\n   |              ^ help: add `;` here\n26 |     let b = 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpluce42mo.rs:26:14\n   |\n26 |     let b = 1\n   |              ^ help: add `;` here\n27 |     let c = 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpluce42mo.rs:27:14\n   |\n27 |     let c = 1\n   |              ^ help: add `;` here\n28 |     for i in 0..n - 2 {\n   |     --- unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpluce42mo.rs:29:16\n   |\n29 |       a = a + b\n   |                ^ help: add `;` here\n30 |       b = b + c\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpluce42mo.rs:30:16\n   |\n30 |       b = b + c\n   |                ^ help: add `;` here\n31 |       c = a + b\n   |       - unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpluce42mo.rs:31:16\n   |\n31 |       c = a + b\n   |                ^ help: add `;` here\n32 |       a = b + c\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpluce42mo.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpluce42mo.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpluce42mo.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 arg",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n  } else if n == 2 {\n    return Vec::new(2);\n  } else {\n    let [a, b, c] = tri(n - 1);\n    let [d, e, f] = tri(n - 2);\n    let [g, h, i] = tri(n - 3);\n    let [j, k, l] = tri(n - 4);\n    let [m, n, o] = tri(n - 5);\n    let [p, q, r] = tri(n - 6);\n    let [s, t, u] = tri(n - 7);\n    let [v, w, x] = tri(n - 8);\n    let [y, z, aa] = tri(n - 9);\n    let [bb, cc, dd] = tri(n - 10);\n    let [ee, ff, gg] = tri(n - 11);\n    let [hh, ii, jj] = tri(n - 12);\n    let [kk, ll, mm] = tri(n - 13);\n    let [nn, oo, pp] = tri(n - 14);\n    let [qq, rr, ss] = tri(n - 15);\n    let [tt, uu, vv] = tri(n - 16);\n    let [ww, xx, yy] = tri(n - 17);\n    let [zz, aaa, bbb] = tri(n - 18);\n    let [ccc, ddd, eee] = tri(n - 19);\n    let [fff, ggg, hhh] = tri(n - 20);\n    let [ii, jj, kk] = tri(n - 21);\n    let [ll, mm, nn] = tri(n - 22);\n    let [oo, pp, qq] = tri(n - 23);\n    let [rr, ss, tt] = tri(n - 24);\n    let [uu, vv, ww] = tri(n - 25);\n    let [xx, yy,\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmppaovn7fr.rs:65:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n51 | }\n   | - ...as it matches this but it has different indentation\n...\n65 | }\n   |   ^\n\nerror: expected one of `:`, `;`, `=`, or `|`, found `}`\n  --> /tmp/tmppaovn7fr.rs:51:1\n   |\n51 | }\n   | ^ expected one of `:`, `;`, `=`, or `|`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmppaovn7fr.rs:50:9\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - closing delimiter possibly meant for this\n...\n50 |     let [xx, yy,\n   |         ^ unclosed delimiter\n51 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmppaovn7fr.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmppaovn7fr.rs:21:12\n    |\n21  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmppaovn7fr.rs:23:12\n    |\n23  |     return Vec::new(2);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmppaovn7fr.rs:25:9\n   |\n25 |     let [a, b, c] = tri(n - 1);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2)\n  } else if n == 3 {\n    return Vec::new(3)\n  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpv4uctuxr.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpv4uctuxr.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 2 arguments were supplied\n   --> /tmp/tmpv4uctuxr.rs:23:12\n    |\n23  |     return Vec::new(1, 2)\n    |            ^^^^^^^^ -  - supplied 2 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpv4uctuxr.rs:25:12\n    |\n25  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpv4uctuxr.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpv4uctuxr.rs:29:23\n   |\n29 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0);\n    } else if n == 1 {\n        return Vec::new(3);\n    } else if n == 2 {\n        return Vec::new(1, 2, 3);\n    } else {\n        let [a, b, c] = tri(n - 1);\n        let [d, e, f] = tri(n - 2);\n        let [g, h, i] = tri(n - 3);\n        let [j, k, l] = tri(n - 4);\n        let [m, n, o] = tri(n - 5);\n        return Vec::new(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcsxxerqy.rs:19:16\n    |\n19  |         return Vec::new(0);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcsxxerqy.rs:21:16\n    |\n21  |         return Vec::new(3);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpcsxxerqy.rs:23:16\n    |\n23  |         return Vec::new(1, 2, 3);\n    |                ^^^^^^^^ -  -  - supplied 3 arguments\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpcsxxerqy.rs:25:13\n   |\n25 |         let [a, b, c] = tri(n - 1);\n   |             ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |             |\n   |             pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpcsxxerqy.rs:26:13\n   |\n26 |         let [d, e, f] = tri(n - 2);\n   |             ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 2)[..]`\n   |             |\n   |             pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpcsxxerqy.rs:27:13\n   |\n27 |         let [g, h, i] = tri(n - 3);\n   |             ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 3)[..]`\n   |             |\n   |             pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpcsxxerqy.rs:28:13\n   |\n28 |         let [j, k, l] = tri(n - 4);\n   |             ^^^^^^^^^  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let tri = [0, 1, 3];\n  for i in 0..n {\n    tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[0] + tri[1]];\n  }\n  return tri;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6a22xwtr.rs:20:11\n   |\n20 |     tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[0] + tri[1]];\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 4 elements\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6a22xwtr.rs:22:10\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected `Vec<isize>` because of return type\n...\n22 |   return tri;\n   |          ^^^- help: try using a conversion method: `.to_vec()`\n   |          |\n   |          expected struct `Vec`, found array `[{integer}; 3]`\n   |\n   = note: expected struct `Vec<isize>`\n               found array `[{integer}; 3]`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n - 2)\n    let b = Vec::new(n - 1)\n    let c = Vec::new(n)\n    for i in 0..n {\n      c[i] = a[i] + b[i] + c[i - 1]\n    }\n    return c\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwhy4jldr.rs:25:28\n   |\n25 |     let a = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n26 |     let b = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwhy4jldr.rs:26:28\n   |\n26 |     let b = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n27 |     let c = Vec::new(n)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwhy4jldr.rs:27:24\n   |\n27 |     let c = Vec::new(n)\n   |                        ^ help: add `;` here\n28 |     for i in 0..n {\n   |     --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwhy4jldr.rs:19:12\n    |\n19  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwhy4jldr.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwhy4jldr.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwhy4jldr.rs:25:13\n    |\n25  |     let a = Vec::new(n - 2)\n    |             ^^^^^^^^ ----- supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwhy4jldr.rs:26:13\n    |\n26  |     let b = Vec::new(n - 1)\n    |             ^^^^^^^^ ----- supplied 1 argument\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2)\n  } else if n == 3 {\n    return Vec::new(3, 1, 2, 8)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpjh9fik_z.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpjh9fik_z.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 2 arguments were supplied\n   --> /tmp/tmpjh9fik_z.rs:23:12\n    |\n23  |     return Vec::new(1, 2)\n    |            ^^^^^^^^ -  - supplied 2 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmpjh9fik_z.rs:25:12\n    |\n25  |     return Vec::new(3, 1, 2, 8)\n    |            ^^^^^^^^ -  -  -  - supplied 4 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpjh9fik_z.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  if n % 2 == 0 {\n    return Vec::new(2, 1, 3, 2, 8)\n  }\n  return Vec::new(3, 1, 3, 2, 8)\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1ydhsbcl.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1ydhsbcl.rs:22:12\n    |\n22  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 5 arguments were supplied\n   --> /tmp/tmp1ydhsbcl.rs:25:12\n    |\n25  |     return Vec::new(2, 1, 3, 2, 8)\n    |            ^^^^^^^^ -  -  -  -  - supplied 5 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 5 arguments were supplied\n   --> /tmp/tmp1ydhsbcl.rs:27:10\n    |\n27  |   return Vec::new(3, 1, 3, 2, 8)\n    |          ^^^^^^^^ -  -  -  -  - supplied 5 arguments\n    |          |\n    |          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n - 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpyywnfiga.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpyywnfiga.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpyywnfiga.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpyywnfiga.rs:25:23\n   |\n25 |     return tri(n - 1) + tri(n - 2) + tri(n - 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    let [j, k, l] = tri(n - 4)\n    let [m, n, o] = tri(n - 5)\n    let [p, q, r] = tri(n - 6)\n    let [s, t, u] = tri(n - 7)\n    let [v, w, x] = tri(n - 8)\n    let [y, z, aa] = tri(n - 9)\n    let [bb, cc, dd] = tri(n - 10)\n    let [ee, ff, gg] = tri(n - 11)\n    let [hh, ii, jj] = tri(n - 12)\n    let [kk, ll, mm] = tri(n - 13)\n    let [nn, oo, pp] = tri(n - 14)\n    let [qq, rr, ss] = tri(n - 15)\n    let [tt, uu, vv] = tri(n - 16)\n    let [ww, xx, yy] = tri(n - 17)\n    let [zz, aa, bb] = tri(n - 18)\n    let [cc, dd, ee] = tri(n - 19)\n    let [ff, gg, hh] = tri(n - 20)\n    let [ii, jj, kk] = tri(n - 21)\n    let [ll, mm, nn] = tri(n - 22)\n    let [oo, pp, qq] = tri(n - 23)\n    let [rr, ss, tt] = tri(n - 24)\n    let [uu, vv, ww] = tri(n - 25)\n    let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpjb03_23i.rs:65:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n51 | }\n   | - ...as it matches this but it has different indentation\n...\n65 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:25:31\n   |\n25 |     let [a, b, c] = tri(n - 1)\n   |                               ^ help: add `;` here\n26 |     let [d, e, f] = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:26:31\n   |\n26 |     let [d, e, f] = tri(n - 2)\n   |                               ^ help: add `;` here\n27 |     let [g, h, i] = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:27:31\n   |\n27 |     let [g, h, i] = tri(n - 3)\n   |                               ^ help: add `;` here\n28 |     let [j, k, l] = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:28:31\n   |\n28 |     let [j, k, l] = tri(n - 4)\n   |                               ^ help: add `;` here\n29 |     let [m, n, o] = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:29:31\n   |\n29 |     let [m, n, o] = tri(n - 5)\n   |                               ^ help: add `;` here\n30 |     let [p, q, r] = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:30:31\n   |\n30 |     let [p, q, r] = tri(n - 6)\n   |                               ^ help: add `;` here\n31 |     let [s, t, u] = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:31:31\n   |\n31 |     let [s, t, u] = tri(n - 7)\n   |                               ^ help: add `;` here\n32 |     let [v, w, x] = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keywor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(3);\n  }\n  if n % 2 == 0 {\n    return Vec::new(1 + (n / 2));\n  }\n  return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1));\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp00e2b7yp.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp00e2b7yp.rs:22:12\n    |\n22  |     return Vec::new(3);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp00e2b7yp.rs:25:12\n    |\n25  |     return Vec::new(1 + (n / 2));\n    |            ^^^^^^^^ ----------- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp00e2b7yp.rs:27:30\n   |\n27 |   return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   |                   ---------- ^ ---------- Vec<isize>\n   |                   |\n   |                   Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp00e2b7yp.rs:27:10\n    |\n27  |   return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    |          ^^^^^^^^ ------------------------------------ supplied 1 argument\n    |          |\n    |          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 3, 2, 8)\n  } else {\n    return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpy804d_zi.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpy804d_zi.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmpy804d_zi.rs:23:12\n    |\n23  |     return Vec::new(1, 3, 2, 8)\n    |            ^^^^^^^^ -  -  -  - supplied 4 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpy804d_zi.rs:25:32\n   |\n25 |     return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   |                     ---------- ^ ---------- Vec<isize>\n   |                     |\n   |                     Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpy804d_zi.rs:25:12\n    |\n25  |     return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    |            ^^^^^^^^ ------------------------------------ supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = Vec::new(1, 2, 3)\n    let b = tri(n - 1)\n    let c = tri(n - 2)\n    let d = tri(n - 3)\n    let e = tri(n - 4)\n    let f = tri(n - 5)\n    let g = tri(n - 6)\n    let h = tri(n - 7)\n    let i = tri(n - 8)\n    let j = tri(n - 9)\n    let k = tri(n - 10)\n    let l = tri(n - 11)\n    let m = tri(n - 12)\n    let n = tri(n - 13)\n    let o = tri(n - 14)\n    let p = tri(n - 15)\n    let q = tri(n - 16)\n    let r = tri(n - 17)\n    let s = tri(n - 18)\n    let t = tri(n - 19)\n    let u = tri(n - 20)\n    let v = tri(n - 21)\n    let w = tri(n - 22)\n    let x = tri(n - 23)\n    let y = tri(n - 24)\n    let z = tri(n - 25)\n    let aa = tri(n - 26)\n    let ab = tri(n - 27)\n    let ac = tri(n - 28)\n    let ad = tri(n - 29)\n    let ae = tri(n - 30)\n    let af = tri(n - 31)\n    let ag = tri(n - 32)\n    let ah = tri(n - 33)\n    let ai = tri(n - 34)\n    let aj = tri(n - 35)\n    let ak = tri(n - 36)\n    let al = tri(n - 37)\n    let am = tri(n - 38)\n    let an = tri(n - 39)\n    let a\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpu994_j66.rs:80:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n80 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:25:30\n   |\n25 |     let a = Vec::new(1, 2, 3)\n   |                              ^ help: add `;` here\n26 |     let b = tri(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:26:23\n   |\n26 |     let b = tri(n - 1)\n   |                       ^ help: add `;` here\n27 |     let c = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:27:23\n   |\n27 |     let c = tri(n - 2)\n   |                       ^ help: add `;` here\n28 |     let d = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:28:23\n   |\n28 |     let d = tri(n - 3)\n   |                       ^ help: add `;` here\n29 |     let e = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:29:23\n   |\n29 |     let e = tri(n - 4)\n   |                       ^ help: add `;` here\n30 |     let f = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:30:23\n   |\n30 |     let f = tri(n - 5)\n   |                       ^ help: add `;` here\n31 |     let g = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:31:23\n   |\n31 |     let g = tri(n - 6)\n   |                       ^ help: add `;` here\n32 |     let h = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu994_j66.rs:32:23\n   |\n32 |     let h = tri(n - 7)\n   |                       ^ help: add `;` here\n33 |     let i = tri(n - 8)\n   | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:27:29\n   |\n27 |   let [a, b, c] = tri(n - 1)\n   |                             ^ help: add `;` here\n28 |   let [d, e, f] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:28:29\n   |\n28 |   let [d, e, f] = tri(n - 2)\n   |                             ^ help: add `;` here\n29 |   let [g, h, i] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:29:29\n   |\n29 |   let [g, h, i] = tri(n - 3)\n   |                             ^ help: add `;` here\n30 |   let [j, k, l] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:30:29\n   |\n30 |   let [j, k, l] = tri(n - 4)\n   |                             ^ help: add `;` here\n31 |   let [m, n, o] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:31:29\n   |\n31 |   let [m, n, o] = tri(n - 5)\n   |                             ^ help: add `;` here\n32 |   let [p, q, r] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:32:29\n   |\n32 |   let [p, q, r] = tri(n - 6)\n   |                             ^ help: add `;` here\n33 |   let [s, t, u] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:33:29\n   |\n33 |   let [s, t, u] = tri(n - 7)\n   |                             ^ help: add `;` here\n34 |   let [v, w, x] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:34:29\n   |\n34 |   let [v, w, x] = tri(n - 8)\n   |                             ^ help: add `;` here\n35 |   let [y, z, aa] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:35:30\n   |\n35 |   let [y, z, aa] = tri(n - 9)\n   |                              ^ help: add `;` here\n36 |   let [bb, cc, dd] = tri(n - 10)\n   |   --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n  } else if n == 2 {\n    return Vec::new(2);\n  } else {\n    return Vec::new(3) + tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3snkkk2i.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3snkkk2i.rs:21:12\n    |\n21  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3snkkk2i.rs:23:12\n    |\n23  |     return Vec::new(2);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3snkkk2i.rs:25:12\n    |\n25  |     return Vec::new(3) + tri(n - 1) + tri(n - 2) + tri(n + 1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<_>`\n  --> /tmp/tmp3snkkk2i.rs:25:24\n   |\n25 |     return Vec::new(3) + tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |            ----------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<_>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let a = [1, 1];\n  let b = [1, 1];\n  for i in 0..n {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0369]: cannot add `[{integer}; 2]` to `[{integer}; 2]`\n  --> /tmp/tmpuqk87eqx.rs:21:15\n   |\n21 |     let c = a + b;\n   |             - ^ - [{integer}; 2]\n   |             |\n   |             [{integer}; 2]\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuqk87eqx.rs:25:10\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected `Vec<isize>` because of return type\n...\n25 |   return a;\n   |          ^- help: try using a conversion method: `.to_vec()`\n   |          |\n   |          expected struct `Vec`, found array `[{integer}; 2]`\n   |\n   = note: expected struct `Vec<isize>`\n               found array `[{integer}; 2]`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:27:29\n   |\n27 |   let [a, b, c] = tri(n - 1)\n   |                             ^ help: add `;` here\n28 |   let [d, e, f] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:28:29\n   |\n28 |   let [d, e, f] = tri(n - 2)\n   |                             ^ help: add `;` here\n29 |   let [g, h, i] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:29:29\n   |\n29 |   let [g, h, i] = tri(n - 3)\n   |                             ^ help: add `;` here\n30 |   let [j, k, l] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:30:29\n   |\n30 |   let [j, k, l] = tri(n - 4)\n   |                             ^ help: add `;` here\n31 |   let [m, n, o] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:31:29\n   |\n31 |   let [m, n, o] = tri(n - 5)\n   |                             ^ help: add `;` here\n32 |   let [p, q, r] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:32:29\n   |\n32 |   let [p, q, r] = tri(n - 6)\n   |                             ^ help: add `;` here\n33 |   let [s, t, u] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:33:29\n   |\n33 |   let [s, t, u] = tri(n - 7)\n   |                             ^ help: add `;` here\n34 |   let [v, w, x] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:34:29\n   |\n34 |   let [v, w, x] = tri(n - 8)\n   |                             ^ help: add `;` here\n35 |   let [y, z, aa] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:35:30\n   |\n35 |   let [y, z, aa] = tri(n - 9)\n   |                              ^ help: add `;` here\n36 |   let [bb, cc, dd] = tri(n - 10)\n   |   --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut prev = 0;\n  let mut next = 1;\n  for i in 0..n {\n    result.push_back(prev);\n    prev = next;\n    next = prev + next;\n  }\n  result.push_back(next);\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpol4fdesk.rs:22:12\n   |\n22 |     result.push_back(prev);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpol4fdesk.rs:26:10\n   |\n26 |   result.push_back(next);\n   |          ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp03tvrpfz.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp03tvrpfz.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp03tvrpfz.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp03tvrpfz.rs:25:32\n   |\n25 |     return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   |                     ---------- ^ ---------- Vec<isize>\n   |                     |\n   |                     Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp03tvrpfz.rs:25:12\n    |\n25  |     return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    |            ^^^^^^^^ ------------------------------------ supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(3);\n  }\n  if n == 2 {\n    return Vec::new(1, 2);\n  }\n  return Vec::new(1, 3, 2, 8);\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3pqqc82b.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3pqqc82b.rs:22:12\n    |\n22  |     return Vec::new(3);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 2 arguments were supplied\n   --> /tmp/tmp3pqqc82b.rs:25:12\n    |\n25  |     return Vec::new(1, 2);\n    |            ^^^^^^^^ -  - supplied 2 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmp3pqqc82b.rs:27:10\n    |\n27  |   return Vec::new(1, 3, 2, 8);\n    |          ^^^^^^^^ -  -  -  - supplied 4 arguments\n    |          |\n    |          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in 0..n {\n    let tri_n = (i + 1) / 2;\n    if i % 2 == 0 {\n      result.push(tri_n);\n    } else {\n      result.push(tri_n + tri_n + tri_n);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 3, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpmw8cocf2.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let [a, b, c] = [1, 1, 1];\n  for i in 0..n {\n    let [a, b, c] = [a + b, a, b];\n  }\n  return Vec::from_iter(a, b, c);\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no function or associated item named `from_iter` found for struct `Vec<_, _>` in the current scope\n  --> /tmp/tmp0rzosdem.rs:22:15\n   |\n22 |   return Vec::from_iter(a, b, c);\n   |               ^^^^^^^^^ function or associated item not found in `Vec<_, _>`\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let tri = [0, 1, 1];\n  for i in 0..n {\n    tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[0] + tri[1]];\n  }\n  tri\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpxyqduckf.rs:20:11\n   |\n20 |     tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[0] + tri[1]];\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 4 elements\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxyqduckf.rs:22:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected `Vec<isize>` because of return type\n...\n22 |   tri\n   |   ^^^- help: try using a conversion method: `.to_vec()`\n   |   |\n   |   expected struct `Vec`, found array `[{integer}; 3]`\n   |\n   = note: expected struct `Vec<isize>`\n               found array `[{integer}; 3]`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else if n == 3 {\n    return Vec::new(8)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n - 26)\n    let a1 = a + b + c\n    let b1 = b + d + e\n    let c1 = c + e + f\n    let d1 = d + f + g\n    let e1 = e + g + h\n    let f1 = f + h + i\n    let g1 = g + i + j\n    let h1 = h + j + k\n    let i1 = i + k + l\n    let j1 = j + l + m\n    let k1 = k + m + n\n    let l1 = l + m + o\n    let m1 = m + o + p\n    let n1 = n + p\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpzacpsout.rs:81:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n26 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n67 | }\n   | - ...as it matches this but it has different indentation\n...\n81 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzacpsout.rs:27:23\n   |\n27 |     let a = tri(n - 1)\n   |                       ^ help: add `;` here\n28 |     let b = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzacpsout.rs:28:23\n   |\n28 |     let b = tri(n - 2)\n   |                       ^ help: add `;` here\n29 |     let c = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzacpsout.rs:29:23\n   |\n29 |     let c = tri(n - 3)\n   |                       ^ help: add `;` here\n30 |     let d = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzacpsout.rs:30:23\n   |\n30 |     let d = tri(n - 4)\n   |                       ^ help: add `;` here\n31 |     let e = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzacpsout.rs:31:23\n   |\n31 |     let e = tri(n - 5)\n   |                       ^ help: add `;` here\n32 |     let f = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzacpsout.rs:32:23\n   |\n32 |     let f = tri(n - 6)\n   |                       ^ help: add `;` here\n33 |     let g = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzacpsout.rs:33:23\n   |\n33 |     let g = tri(n - 7)\n   |                       ^ help: add `;` here\n34 |     let h = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzacpsout.rs:34:23\n   |\n34 |     let h = tri(n - 8)\n   |                       ^ help: add `;` here\n35 |     let i = tri(n - 9)\n   |     --- unexpe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptj13f7dv.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptj13f7dv.rs:22:12\n    |\n22  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmptj13f7dv.rs:25:23\n   |\n25 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmptj13f7dv.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in 0..n {\n    if i % 2 == 0 {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp72dej0gz.rs:23:19\n   |\n23 |       result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n   |                   ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp72dej0gz.rs:23:35\n   |\n23 |       result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n   |                                   ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp72dej0gz.rs:23:51\n   |\n23 |       result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n   |                                                   ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = tri(n - 1)\n    let b = tri(n - 2)\n    let c = tri(n - 3)\n    let d = tri(n - 4)\n    let e = tri(n - 5)\n    let f = tri(n - 6)\n    let g = tri(n - 7)\n    let h = tri(n - 8)\n    let i = tri(n - 9)\n    let j = tri(n - 10)\n    let k = tri(n - 11)\n    let l = tri(n - 12)\n    let m = tri(n - 13)\n    let n = tri(n - 14)\n    let o = tri(n - 15)\n    let p = tri(n - 16)\n    let q = tri(n - 17)\n    let r = tri(n - 18)\n    let s = tri(n - 19)\n    let t = tri(n - 20)\n    let u = tri(n - 21)\n    let v = tri(n - 22)\n    let w = tri(n - 23)\n    let x = tri(n - 24)\n    let y = tri(n - 25)\n    let z = tri(n - 26)\n    let aa = tri(n - 27)\n    let ab = tri(n - 28)\n    let ac = tri(n - 29)\n    let ad = tri(n - 30)\n    let ae = tri(n - 31)\n    let af = tri(n - 32)\n    let ag = tri(n - 33)\n    let ah = tri(n - 34)\n    let ai = tri(n - 35)\n    let aj = tri(n - 36)\n    let ak = tri(n - 37)\n    let al = tri(n - 38)\n    let am = tri(n - 39)\n    let an = tri(n - 40)\n    let ao = tri(\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpuhqqy379.rs:80:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n80 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:25:23\n   |\n25 |     let a = tri(n - 1)\n   |                       ^ help: add `;` here\n26 |     let b = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:26:23\n   |\n26 |     let b = tri(n - 2)\n   |                       ^ help: add `;` here\n27 |     let c = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:27:23\n   |\n27 |     let c = tri(n - 3)\n   |                       ^ help: add `;` here\n28 |     let d = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:28:23\n   |\n28 |     let d = tri(n - 4)\n   |                       ^ help: add `;` here\n29 |     let e = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:29:23\n   |\n29 |     let e = tri(n - 5)\n   |                       ^ help: add `;` here\n30 |     let f = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:30:23\n   |\n30 |     let f = tri(n - 6)\n   |                       ^ help: add `;` here\n31 |     let g = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:31:23\n   |\n31 |     let g = tri(n - 7)\n   |                       ^ help: add `;` here\n32 |     let h = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuhqqy379.rs:32:23\n   |\n32 |     let h = tri(n - 8)\n   |                       ^ help: add `;` here\n33 |     let i = tri(n - 9)\n   |     --- unexpe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let tri_vec = Vec::new(n + 1);\n  tri_vec[0] = 1;\n  tri_vec[1] = 3;\n  for i in 1..n {\n    tri_vec[i + 1] = tri_vec[i] + tri_vec[i - 1] + tri_vec[i + 2];\n  }\n  return tri_vec;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpyrk7tqx_.rs:18:17\n    |\n18  |   let tri_vec = Vec::new(n + 1);\n    |                 ^^^^^^^^ ----- supplied 1 argument\n    |                 |\n    |                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpyrk7tqx_.rs:22:5\n   |\n22 |     tri_vec[i + 1] = tri_vec[i] + tri_vec[i - 1] + tri_vec[i + 2];\n   |     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpyrk7tqx_.rs:22:22\n   |\n22 |     tri_vec[i + 1] = tri_vec[i] + tri_vec[i - 1] + tri_vec[i + 2];\n   |                      ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpyrk7tqx_.rs:22:35\n   |\n22 |     tri_vec[i + 1] = tri_vec[i] + tri_vec[i - 1] + tri_vec[i + 2];\n   |                                   ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpyrk7tqx_.rs:22:52\n   |\n22 |     tri_vec[i + 1] = tri_vec[i] + tri_vec[i - 1] + tri_vec[i + 2];\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut res = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  let mut sum = 0;\n  while i < n {\n    if i % 2 == 0 {\n      sum = sum + i;\n      res.push_back(sum);\n      i = i + 1;\n      j = j + 1;\n      k = k + 1;\n    } else {\n      sum = sum + i;\n      res.push_back(sum);\n      i = i + 1;\n      j = j + 1;\n      k = k + 1;\n      sum = sum + j;\n      res.push_back(sum);\n      i = i + 1;\n      j = j + 1;\n      k = k + 1;\n      sum = sum + k;\n      res.push_back(sum);\n      i = i + 1;\n      j = j + 1;\n      k = k + 1;\n    }\n  }\n  return res;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpiwoyuzql.rs:26:11\n   |\n26 |       res.push_back(sum);\n   |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpiwoyuzql.rs:32:11\n   |\n32 |       res.push_back(sum);\n   |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpiwoyuzql.rs:37:11\n   |\n37 |       res.push_back(sum);\n   |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpiwoyuzql.rs:42:11\n   |\n42 |       res.push_back(sum);\n   |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = 1\n    let b = 2\n    let c = 3\n    let res = Vec::new(a, b, c)\n    for i in 0..n - 2 {\n      a, b, c = b, c, a + b + c\n      res = Vec::new(a, b, c)\n    }\n    return res\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2b9xtyfb.rs:25:14\n   |\n25 |     let a = 1\n   |              ^ help: add `;` here\n26 |     let b = 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2b9xtyfb.rs:26:14\n   |\n26 |     let b = 2\n   |              ^ help: add `;` here\n27 |     let c = 3\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2b9xtyfb.rs:27:14\n   |\n27 |     let c = 3\n   |              ^ help: add `;` here\n28 |     let res = Vec::new(a, b, c)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2b9xtyfb.rs:28:32\n   |\n28 |     let res = Vec::new(a, b, c)\n   |                                ^ help: add `;` here\n29 |     for i in 0..n - 2 {\n   |     --- unexpected token\n\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `,`\n  --> /tmp/tmp2b9xtyfb.rs:30:8\n   |\n30 |       a, b, c = b, c, a + b + c\n   |        ^ expected one of 8 possible tokens\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp2b9xtyfb.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp2b9xtyfb.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp2b9xtyfb.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp2b9xtyfb.rs:28:15\n    |\n28  |     let res = Vec:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else if n == 3 {\n    return Vec::new(1, 3, 2, 8)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpj17_tkdu.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpj17_tkdu.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpj17_tkdu.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmpj17_tkdu.rs:25:12\n    |\n25  |     return Vec::new(1, 3, 2, 8)\n    |            ^^^^^^^^ -  -  -  - supplied 4 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpj17_tkdu.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 3)\n    let d = Vec::new(n - 4)\n    let e = Vec::new(n - 5)\n    let f = Vec::new(n - 6)\n    let g = Vec::new(n - 7)\n    let h = Vec::new(n - 8)\n    let i = Vec::new(n - 9)\n    let j = Vec::new(n - 10)\n    let k = Vec::new(n - 11)\n    let l = Vec::new(n - 12)\n    let m = Vec::new(n - 13)\n    let n = Vec::new(n - 14)\n    let o = Vec::new(n - 15)\n    let p = Vec::new(n - 16)\n    let q = Vec::new(n - 17)\n    let r = Vec::new(n - 18)\n    let s = Vec::new(n - 19)\n    let t = Vec::new(n - 20)\n    let u = Vec::new(n - 21)\n    let v = Vec::new(n - 22)\n    let w = Vec::new(n - 23)\n    let x = Vec::new(n - 24)\n    let y = Vec::new(n - 25)\n    let z = Vec::new(n - 26)\n    let aa = Vec::new(n - 27)\n    let ab = Vec::new(n - 28)\n    let ac = Vec::new(n - 29)\n    let ad = Vec::new(n - 30)\n    let ae = Vec::new(n - 31)\n    let af = Vec::new(n - 32)\n    let ag = Vec::new(n - 33)\n    let ah = Vec::new(n - 34)\n    let ai = Vec::new(n -\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpuyn8tv_b.rs:74:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but it has different indentation\n...\n74 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuyn8tv_b.rs:25:28\n   |\n25 |     let a = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n26 |     let b = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuyn8tv_b.rs:26:28\n   |\n26 |     let b = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n27 |     let c = Vec::new(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuyn8tv_b.rs:27:28\n   |\n27 |     let c = Vec::new(n - 3)\n   |                            ^ help: add `;` here\n28 |     let d = Vec::new(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuyn8tv_b.rs:28:28\n   |\n28 |     let d = Vec::new(n - 4)\n   |                            ^ help: add `;` here\n29 |     let e = Vec::new(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuyn8tv_b.rs:29:28\n   |\n29 |     let e = Vec::new(n - 5)\n   |                            ^ help: add `;` here\n30 |     let f = Vec::new(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuyn8tv_b.rs:30:28\n   |\n30 |     let f = Vec::new(n - 6)\n   |                            ^ help: add `;` here\n31 |     let g = Vec::new(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuyn8tv_b.rs:31:28\n   |\n31 |     let g = Vec::new(n - 7)\n   |                            ^ help: add `;` here\n32 |     let h = Vec::new(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuyn8tv_b.rs:32:28\n   |\n32 |     let h = V",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 1)\n    let d = Vec::new(n - 1)\n    let e = Vec::new(n - 1)\n    let f = Vec::new(n - 1)\n    let g = Vec::new(n - 1)\n    let h = Vec::new(n - 1)\n    let i = Vec::new(n - 1)\n    let j = Vec::new(n - 1)\n    let k = Vec::new(n - 1)\n    let l = Vec::new(n - 1)\n    let m = Vec::new(n - 1)\n    let n = Vec::new(n - 1)\n    let o = Vec::new(n - 1)\n    let p = Vec::new(n - 1)\n    let q = Vec::new(n - 1)\n    let r = Vec::new(n - 1)\n    let s = Vec::new(n - 1)\n    let t = Vec::new(n - 1)\n    let u = Vec::new(n - 1)\n    let v = Vec::new(n - 1)\n    let w = Vec::new(n - 1)\n    let x = Vec::new(n - 1)\n    let y = Vec::new(n - 1)\n    let z = Vec::new(n - 1)\n    let a1 = Vec::new(n - 1)\n    let b1 = Vec::new(n - 1)\n    let c1 = Vec::new(n - 1)\n    let d1 = Vec::new(n - 1)\n    let e1 = Vec::new(n - 1)\n    let f1 = Vec::new(n - 1)\n    let g1 = Vec::new(n - 1)\n    let h1 = Vec::new(n - 1)\n    let i1 =\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwgfan5at.rs:74:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but it has different indentation\n...\n74 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwgfan5at.rs:25:28\n   |\n25 |     let a = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n26 |     let b = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwgfan5at.rs:26:28\n   |\n26 |     let b = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n27 |     let c = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwgfan5at.rs:27:28\n   |\n27 |     let c = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n28 |     let d = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwgfan5at.rs:28:28\n   |\n28 |     let d = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n29 |     let e = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwgfan5at.rs:29:28\n   |\n29 |     let e = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n30 |     let f = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwgfan5at.rs:30:28\n   |\n30 |     let f = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n31 |     let g = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwgfan5at.rs:31:28\n   |\n31 |     let g = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n32 |     let h = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwgfan5at.rs:32:28\n   |\n32 |     let h = V",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    let [j, k, l] = tri(n - 4)\n    let [m, n, o] = tri(n - 5)\n    let [p, q, r] = tri(n - 6)\n    let [s, t, u] = tri(n - 7)\n    let [v, w, x] = tri(n - 8)\n    let [y, z, aa] = tri(n - 9)\n    let [bb, cc, dd] = tri(n - 10)\n    let [ee, ff, gg] = tri(n - 11)\n    let [hh, ii, jj] = tri(n - 12)\n    let [kk, ll, mm] = tri(n - 13)\n    let [nn, oo, pp] = tri(n - 14)\n    let [qq, rr, ss] = tri(n - 15)\n    let [tt, uu, vv] = tri(n - 16)\n    let [ww, xx, yy] = tri(n - 17)\n    let [zz, aa, bb] = tri(n - 18)\n    let [cc, dd, ee] = tri(n - 19)\n    let [ff, gg, hh] = tri(n - 20)\n    let [ii, jj, kk] = tri(n - 21)\n    let [ll, mm, nn] = tri(n - 22)\n    let [oo, pp, qq] = tri(n - 23)\n    let [rr, ss, tt] = tri(n - 24)\n    let [uu, vv, ww] = tri(n - 25)\n    let [xx, y\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpzbq9a3rr.rs:65:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n51 | }\n   | - ...as it matches this but it has different indentation\n...\n65 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzbq9a3rr.rs:25:31\n   |\n25 |     let [a, b, c] = tri(n - 1)\n   |                               ^ help: add `;` here\n26 |     let [d, e, f] = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzbq9a3rr.rs:26:31\n   |\n26 |     let [d, e, f] = tri(n - 2)\n   |                               ^ help: add `;` here\n27 |     let [g, h, i] = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzbq9a3rr.rs:27:31\n   |\n27 |     let [g, h, i] = tri(n - 3)\n   |                               ^ help: add `;` here\n28 |     let [j, k, l] = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzbq9a3rr.rs:28:31\n   |\n28 |     let [j, k, l] = tri(n - 4)\n   |                               ^ help: add `;` here\n29 |     let [m, n, o] = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzbq9a3rr.rs:29:31\n   |\n29 |     let [m, n, o] = tri(n - 5)\n   |                               ^ help: add `;` here\n30 |     let [p, q, r] = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzbq9a3rr.rs:30:31\n   |\n30 |     let [p, q, r] = tri(n - 6)\n   |                               ^ help: add `;` here\n31 |     let [s, t, u] = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzbq9a3rr.rs:31:31\n   |\n31 |     let [s, t, u] = tri(n - 7)\n   |                               ^ help: add `;` here\n32 |     let [v, w, x] = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keywor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    let [j, k, l] = tri(n - 4)\n    let [m, n, o] = tri(n - 5)\n    let [p, q, r] = tri(n - 6)\n    let [s, t, u] = tri(n - 7)\n    let [v, w, x] = tri(n - 8)\n    let [y, z, aa] = tri(n - 9)\n    let [bb, cc, dd] = tri(n - 10)\n    let [ee, ff, gg] = tri(n - 11)\n    let [hh, ii, jj] = tri(n - 12)\n    let [kk, ll, mm] = tri(n - 13)\n    let [nn, oo, pp] = tri(n - 14)\n    let [qq, rr, ss] = tri(n - 15)\n    let [tt, uu, vv] = tri(n - 16)\n    let [ww, xx, yy] = tri(n - 17)\n    let [zz, aa, bb] = tri(n - 18)\n    let [cc, dd, ee] = tri(n - 19)\n    let [ff, gg, hh] = tri(n - 20)\n    let [ii, jj, kk] = tri(n - 21)\n    let [ll, mm, nn] = tri(n - 22)\n    let [oo, pp, qq] = tri(n - 23)\n    let [rr, ss, tt] = tri(n - 24)\n    let [uu, vv, ww] = tri(n - 25)\n    let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpjb03_23i.rs:65:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n51 | }\n   | - ...as it matches this but it has different indentation\n...\n65 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:25:31\n   |\n25 |     let [a, b, c] = tri(n - 1)\n   |                               ^ help: add `;` here\n26 |     let [d, e, f] = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:26:31\n   |\n26 |     let [d, e, f] = tri(n - 2)\n   |                               ^ help: add `;` here\n27 |     let [g, h, i] = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:27:31\n   |\n27 |     let [g, h, i] = tri(n - 3)\n   |                               ^ help: add `;` here\n28 |     let [j, k, l] = tri(n - 4)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:28:31\n   |\n28 |     let [j, k, l] = tri(n - 4)\n   |                               ^ help: add `;` here\n29 |     let [m, n, o] = tri(n - 5)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:29:31\n   |\n29 |     let [m, n, o] = tri(n - 5)\n   |                               ^ help: add `;` here\n30 |     let [p, q, r] = tri(n - 6)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:30:31\n   |\n30 |     let [p, q, r] = tri(n - 6)\n   |                               ^ help: add `;` here\n31 |     let [s, t, u] = tri(n - 7)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjb03_23i.rs:31:31\n   |\n31 |     let [s, t, u] = tri(n - 7)\n   |                               ^ help: add `;` here\n32 |     let [v, w, x] = tri(n - 8)\n   |     --- unexpected token\n\nerror: expected `;`, found keywor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in 0..n {\n    if i % 2 == 0 {\n      result.push(1 + (i / 2));\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpftt8mgp8.rs:23:19\n   |\n23 |       result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n   |                   ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpftt8mgp8.rs:23:35\n   |\n23 |       result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n   |                                   ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpftt8mgp8.rs:23:51\n   |\n23 |       result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n   |                                                   ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:27:29\n   |\n27 |   let [a, b, c] = tri(n - 1)\n   |                             ^ help: add `;` here\n28 |   let [d, e, f] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:28:29\n   |\n28 |   let [d, e, f] = tri(n - 2)\n   |                             ^ help: add `;` here\n29 |   let [g, h, i] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:29:29\n   |\n29 |   let [g, h, i] = tri(n - 3)\n   |                             ^ help: add `;` here\n30 |   let [j, k, l] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:30:29\n   |\n30 |   let [j, k, l] = tri(n - 4)\n   |                             ^ help: add `;` here\n31 |   let [m, n, o] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:31:29\n   |\n31 |   let [m, n, o] = tri(n - 5)\n   |                             ^ help: add `;` here\n32 |   let [p, q, r] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:32:29\n   |\n32 |   let [p, q, r] = tri(n - 6)\n   |                             ^ help: add `;` here\n33 |   let [s, t, u] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:33:29\n   |\n33 |   let [s, t, u] = tri(n - 7)\n   |                             ^ help: add `;` here\n34 |   let [v, w, x] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:34:29\n   |\n34 |   let [v, w, x] = tri(n - 8)\n   |                             ^ help: add `;` here\n35 |   let [y, z, aa] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:35:30\n   |\n35 |   let [y, z, aa] = tri(n - 9)\n   |                              ^ help: add `;` here\n36 |   let [bb, cc, dd] = tri(n - 10)\n   |   --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu0zeiggw.rs:19:12\n    |\n19  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu0zeiggw.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu0zeiggw.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpu0zeiggw.rs:25:32\n   |\n25 |     return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   |                     ---------- ^ ---------- Vec<isize>\n   |                     |\n   |                     Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu0zeiggw.rs:25:12\n    |\n25  |     return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    |            ^^^^^^^^ ------------------------------------ supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n  } else if n == 2 {\n    return Vec::new(2);\n  } else {\n    let a = Vec::new(n - 1);\n    let b = Vec::new(n - 2);\n    let c = Vec::new(n - 1);\n    for i in 0..n {\n      c = a + b + c;\n      a = b;\n      b = c;\n    }\n    return c;\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3a4eo7r4.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3a4eo7r4.rs:21:12\n    |\n21  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3a4eo7r4.rs:23:12\n    |\n23  |     return Vec::new(2);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3a4eo7r4.rs:25:13\n    |\n25  |     let a = Vec::new(n - 1);\n    |             ^^^^^^^^ ----- supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3a4eo7r4.rs:26:13\n    |\n26  |     let b = Vec::new(n - 2);\n    |             ^^^^^^^^ ----- supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3a4eo7r4.rs:27:13\n    |\n27  |     let c = Vec::new(n - 1);\n    |             ^^^^^^^^ ----- supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<_>`\n  --> /tmp/tmp3a4eo7r4.rs:29:13\n   |\n29 |       c = a + b + c;\n   |           - ^ - Vec<_>\n   |           |\n   |           Vec<_>\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed exp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = Vec::new(1, 2, 3)\n    let b = Vec::new(1, 2, 3)\n    for i in 0..n - 2 {\n      b = Vec::new(a[0] + a[1] + a[2], a[1] + a[2] + a[3], a[2] + a[3] + a[4])\n      a = b\n    }\n    return b\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpspwt0h6a.rs:25:30\n   |\n25 |     let a = Vec::new(1, 2, 3)\n   |                              ^ help: add `;` here\n26 |     let b = Vec::new(1, 2, 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpspwt0h6a.rs:26:30\n   |\n26 |     let b = Vec::new(1, 2, 3)\n   |                              ^ help: add `;` here\n27 |     for i in 0..n - 2 {\n   |     --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpspwt0h6a.rs:28:79\n   |\n28 |       b = Vec::new(a[0] + a[1] + a[2], a[1] + a[2] + a[3], a[2] + a[3] + a[4])\n   |                                                                               ^ help: add `;` here\n29 |       a = b\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpspwt0h6a.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpspwt0h6a.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpspwt0h6a.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpspwt0h6a.rs:25:13\n    |\n25  |     let a = Vec::new(1, 2, 3)\n    |             ^^^^^^^^ -  -  - supplied 3 arguments\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0);\n    } else if n == 1 {\n        return Vec::new(3);\n    } else if n == 2 {\n        return Vec::new(1, 2, 3);\n    } else {\n        let a = Vec::new(1, 2, 3);\n        let b = Vec::new(1, 2, 3);\n        let c = Vec::new(1, 2, 3);\n        for i in 0..n - 2 {\n            a = a.plus(b);\n            b = b.plus(c);\n            c = c.plus(a);\n        }\n        return c;\n    }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpieepe8ri.rs:19:16\n    |\n19  |         return Vec::new(0);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpieepe8ri.rs:21:16\n    |\n21  |         return Vec::new(3);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpieepe8ri.rs:23:16\n    |\n23  |         return Vec::new(1, 2, 3);\n    |                ^^^^^^^^ -  -  - supplied 3 arguments\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpieepe8ri.rs:25:17\n    |\n25  |         let a = Vec::new(1, 2, 3);\n    |                 ^^^^^^^^ -  -  - supplied 3 arguments\n    |                 |\n    |                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpieepe8ri.rs:26:17\n    |\n26  |         let b = Vec::new(1, 2, 3);\n    |                 ^^^^^^^^ -  -  - supplied 3 arguments\n    |                 |\n    |                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpieepe8ri.rs:27:17\n    |\n27  |         let c = Vec::new(1, 2, 3);\n    |                 ^^^^^^^^ -  -  - supplied 3 arguments\n    |                 |\n    |                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `plus` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpieepe8ri.rs:29:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:27:29\n   |\n27 |   let [a, b, c] = tri(n - 1)\n   |                             ^ help: add `;` here\n28 |   let [d, e, f] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:28:29\n   |\n28 |   let [d, e, f] = tri(n - 2)\n   |                             ^ help: add `;` here\n29 |   let [g, h, i] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:29:29\n   |\n29 |   let [g, h, i] = tri(n - 3)\n   |                             ^ help: add `;` here\n30 |   let [j, k, l] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:30:29\n   |\n30 |   let [j, k, l] = tri(n - 4)\n   |                             ^ help: add `;` here\n31 |   let [m, n, o] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:31:29\n   |\n31 |   let [m, n, o] = tri(n - 5)\n   |                             ^ help: add `;` here\n32 |   let [p, q, r] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:32:29\n   |\n32 |   let [p, q, r] = tri(n - 6)\n   |                             ^ help: add `;` here\n33 |   let [s, t, u] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:33:29\n   |\n33 |   let [s, t, u] = tri(n - 7)\n   |                             ^ help: add `;` here\n34 |   let [v, w, x] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:34:29\n   |\n34 |   let [v, w, x] = tri(n - 8)\n   |                             ^ help: add `;` here\n35 |   let [y, z, aa] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:35:30\n   |\n35 |   let [y, z, aa] = tri(n - 9)\n   |                              ^ help: add `;` here\n36 |   let [bb, cc, dd] = tri(n - 10)\n   |   --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  if n % 2 == 0 {\n    return Vec::new(2, 1, 3, 2, 8)\n  }\n  return Vec::new(3, 1, 3, 2, 8)\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1ydhsbcl.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1ydhsbcl.rs:22:12\n    |\n22  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 5 arguments were supplied\n   --> /tmp/tmp1ydhsbcl.rs:25:12\n    |\n25  |     return Vec::new(2, 1, 3, 2, 8)\n    |            ^^^^^^^^ -  -  -  -  - supplied 5 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 5 arguments were supplied\n   --> /tmp/tmp1ydhsbcl.rs:27:10\n    |\n27  |   return Vec::new(3, 1, 3, 2, 8)\n    |          ^^^^^^^^ -  -  -  -  - supplied 5 arguments\n    |          |\n    |          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz] = tri(n - 26)\n  let [aa, bb, cc]\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpk_bxmmm6.rs:24:29\n   |\n24 |   let [a, b, c] = tri(n - 1)\n   |                             ^ help: add `;` here\n25 |   let [d, e, f] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk_bxmmm6.rs:25:29\n   |\n25 |   let [d, e, f] = tri(n - 2)\n   |                             ^ help: add `;` here\n26 |   let [g, h, i] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk_bxmmm6.rs:26:29\n   |\n26 |   let [g, h, i] = tri(n - 3)\n   |                             ^ help: add `;` here\n27 |   let [j, k, l] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk_bxmmm6.rs:27:29\n   |\n27 |   let [j, k, l] = tri(n - 4)\n   |                             ^ help: add `;` here\n28 |   let [m, n, o] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk_bxmmm6.rs:28:29\n   |\n28 |   let [m, n, o] = tri(n - 5)\n   |                             ^ help: add `;` here\n29 |   let [p, q, r] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk_bxmmm6.rs:29:29\n   |\n29 |   let [p, q, r] = tri(n - 6)\n   |                             ^ help: add `;` here\n30 |   let [s, t, u] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk_bxmmm6.rs:30:29\n   |\n30 |   let [s, t, u] = tri(n - 7)\n   |                             ^ help: add `;` here\n31 |   let [v, w, x] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk_bxmmm6.rs:31:29\n   |\n31 |   let [v, w, x] = tri(n - 8)\n   |                             ^ help: add `;` here\n32 |   let [y, z, aa] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk_bxmmm6.rs:32:30\n   |\n32 |   let [y, z, aa] = tri(n - 9)\n   |                              ^ help: add `;` here\n33 |   let [bb, cc, dd] = tri(n - 10)\n   |   --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current = 0;\n  let mut previous = 0;\n  let mut next = 1;\n  for i in 0..n {\n    result.push_back(current);\n    current = previous + current;\n    previous = next;\n    next = current + previous;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmppqlyc07v.rs:23:12\n   |\n23 |     result.push_back(current);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else if n == 3 {\n    return Vec::new(3)\n  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps3kmx1x9.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps3kmx1x9.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps3kmx1x9.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps3kmx1x9.rs:25:12\n    |\n25  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps3kmx1x9.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps3kmx1x9.rs:29:23\n   |\n29 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else if n == 3 {\n    return Vec::new(3, 1, 2, 8)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    return Vec::new(a + b + c, b + d + e, c + e + f, d + f + g, e + g + h, f + h + i)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppr3aixcl.rs:27:31\n   |\n27 |     let [a, b, c] = tri(n - 1)\n   |                               ^ help: add `;` here\n28 |     let [d, e, f] = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmppr3aixcl.rs:28:31\n   |\n28 |     let [d, e, f] = tri(n - 2)\n   |                               ^ help: add `;` here\n29 |     let [g, h, i] = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmppr3aixcl.rs:29:31\n   |\n29 |     let [g, h, i] = tri(n - 3)\n   |                               ^ help: add `;` here\n30 |     return Vec::new(a + b + c, b + d + e, c + e + f, d + f + g, e + g + h, f + h + i)\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmppr3aixcl.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmppr3aixcl.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmppr3aixcl.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmppr3aixcl.rs:25:12\n    |\n25  |     return Vec::new(3, 1, 2, 8)\n    |            ^^^^^^^^ -  -  -  - supplied 4 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut fib = Vec::new();\n  let mut tri = Vec::new();\n  let mut fib_prev = 0;\n  let mut tri_prev = 0;\n  let mut fib_prev_prev = 0;\n  let mut tri_prev_prev = 0;\n  let mut fib_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev = 0;\n  let mut fib_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev = 0;\n  let mut fib_prev_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev_prev = 0;\n  let mut fib_prev_prev_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev_prev_prev = 0;\n  let mut fib_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut fib_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut fib_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut fib_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut fib_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut fib_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut tri_prev_prev_prev\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpjm7jjq3z.rs:44:29\n   |\n44 |   let mut tri_prev_prev_prev\n   |                             ^ help: add `;` here\n45 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjm7jjq3z.rs:17:21\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |    ---              ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(1)\n    let b = Vec::new(1)\n    let c = Vec::new(1)\n    for i in 0..n {\n      let a_ = a.pop()\n      let b_ = b.pop()\n      let c_ = c.pop()\n      let n_ = n - i\n      let tri_ = (a_ + b_) + c_\n      a = Vec::new(tri_)\n      b = Vec::new(tri_)\n      c = Vec::new(tri_)\n    }\n    return a\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpp169xdrt.rs:25:24\n   |\n25 |     let a = Vec::new(1)\n   |                        ^ help: add `;` here\n26 |     let b = Vec::new(1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp169xdrt.rs:26:24\n   |\n26 |     let b = Vec::new(1)\n   |                        ^ help: add `;` here\n27 |     let c = Vec::new(1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpp169xdrt.rs:27:24\n   |\n27 |     let c = Vec::new(1)\n   |                        ^ help: add `;` here\n28 |     for i in 0..n {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp169xdrt.rs:29:23\n   |\n29 |       let a_ = a.pop()\n   |                       ^ help: add `;` here\n30 |       let b_ = b.pop()\n   |       --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp169xdrt.rs:30:23\n   |\n30 |       let b_ = b.pop()\n   |                       ^ help: add `;` here\n31 |       let c_ = c.pop()\n   |       --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp169xdrt.rs:31:23\n   |\n31 |       let c_ = c.pop()\n   |                       ^ help: add `;` here\n32 |       let n_ = n - i\n   |       --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp169xdrt.rs:32:21\n   |\n32 |       let n_ = n - i\n   |                     ^ help: add `;` here\n33 |       let tri_ = (a_ + b_) + c_\n   |       --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpp169xdrt.rs:33:32\n   |\n33 |       let tri_ = (a_ + b_) + c_\n   |                                ^ help: add `;` here\n34 |       a = Vec::new(tri_)\n   |       - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpp169xdrt.rs:34:25\n   |\n34 |       a = Vec::new(tri_)\n   |                         ^ help: add `;` here\n35 |       b = Vec::new(tri_)\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpp169xdrt.rs:35:25\n   |\n35 |       b = Vec::new(tri_)\n   |       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n % 2 == 0 {\n    return Vec::new(1 + (n / 2));\n  }\n  return Vec::new(\n    tri(n - 1) + tri(n - 2) + tri(n + 1)\n  );\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx30jakjh.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx30jakjh.rs:22:12\n    |\n22  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx30jakjh.rs:25:12\n    |\n25  |     return Vec::new(1 + (n / 2));\n    |            ^^^^^^^^ ----------- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpx30jakjh.rs:28:16\n   |\n28 |     tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |     ---------- ^ ---------- Vec<isize>\n   |     |\n   |     Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx30jakjh.rs:27:10\n    |\n27  |   return Vec::new(\n    |          ^^^^^^^^ expected 0 arguments\n28  |     tri(n - 1) + tri(n - 2) + tri(n + 1)\n    |     ------------------------------------ supplied 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let tri_vec = Vec::new(n + 1);\n    tri_vec[0] = 1;\n    tri_vec[1] = 3;\n    if n == 0 {\n        return tri_vec;\n    }\n    for i in 0..n - 1 {\n        tri_vec[i + 2] = tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2];\n    }\n    return tri_vec;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz7s3mp8x.rs:18:19\n    |\n18  |     let tri_vec = Vec::new(n + 1);\n    |                   ^^^^^^^^ ----- supplied 1 argument\n    |                   |\n    |                   expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpz7s3mp8x.rs:25:9\n   |\n25 |         tri_vec[i + 2] = tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2];\n   |         ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpz7s3mp8x.rs:25:26\n   |\n25 |         tri_vec[i + 2] = tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2];\n   |                          ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpz7s3mp8x.rs:25:39\n   |\n25 |         tri_vec[i + 2] = tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2];\n   |                                       ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpz7s3mp8x.rs:25:56\n   |\n25 |         tri_vec[i + 2] = tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2];\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  if n == 2 {\n    return Vec::new(1, 2, 3)\n  }\n  if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n + 1)\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpmazrcthn.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpmazrcthn.rs:22:12\n    |\n22  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpmazrcthn.rs:25:12\n    |\n25  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpmazrcthn.rs:28:23\n   |\n28 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpmazrcthn.rs:30:21\n   |\n30 |   return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |          ---------- ^ ---------- Vec<isize>\n   |          |\n   |          Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    return Vec::new(1 + (n / 2), tri(n - 1), tri(n - 2), tri(n + 1))\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwv77qw2l.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwv77qw2l.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwv77qw2l.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmpwv77qw2l.rs:25:12\n    |\n25  |     return Vec::new(1 + (n / 2), tri(n - 1), tri(n - 2), tri(n + 1))\n    |            ^^^^^^^^ -----------  ----------  ----------  ---------- supplied 4 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  let [a, b] = tri(n - 1)\n  let [c, d] = tri(n - 2)\n  let [e, f] = tri(n - 3)\n  let [g, h] = tri(n - 4)\n  let [i, j] = tri(n - 5)\n  let [k, l] = tri(n - 6)\n  let [m, n] = tri(n - 7)\n  let [o, p] = tri(n - 8)\n  let [q, r] = tri(n - 9)\n  let [s, t] = tri(n - 10)\n  let [u, v] = tri(n - 11)\n  let [w, x] = tri(n - 12)\n  let [y, z] = tri(n - 13)\n  let [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(n + 1)\n  let [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(n + 1)\n  let [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(n + 1)\n  let [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] =\n    Vec::new(n + 1)\n  let [a, b,\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:24:26\n   |\n24 |   let [a, b] = tri(n - 1)\n   |                          ^ help: add `;` here\n25 |   let [c, d] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:25:26\n   |\n25 |   let [c, d] = tri(n - 2)\n   |                          ^ help: add `;` here\n26 |   let [e, f] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:26:26\n   |\n26 |   let [e, f] = tri(n - 3)\n   |                          ^ help: add `;` here\n27 |   let [g, h] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:27:26\n   |\n27 |   let [g, h] = tri(n - 4)\n   |                          ^ help: add `;` here\n28 |   let [i, j] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:28:26\n   |\n28 |   let [i, j] = tri(n - 5)\n   |                          ^ help: add `;` here\n29 |   let [k, l] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:29:26\n   |\n29 |   let [k, l] = tri(n - 6)\n   |                          ^ help: add `;` here\n30 |   let [m, n] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:30:26\n   |\n30 |   let [m, n] = tri(n - 7)\n   |                          ^ help: add `;` here\n31 |   let [o, p] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:31:26\n   |\n31 |   let [o, p] = tri(n - 8)\n   |                          ^ help: add `;` here\n32 |   let [q, r] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:32:26\n   |\n32 |   let [q, r] = tri(n - 9)\n   |                          ^ help: add `;` here\n33 |   let [s, t] = tri(n - 10)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl91xtd00.rs:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n  } else {\n    let a = Vec::new(0);\n    let b = Vec::new(1);\n    let c = Vec::new(0);\n    for i in 0..n {\n      c = a + b;\n      a = b;\n      b = c;\n    }\n    return c;\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpj57jveo9.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpj57jveo9.rs:21:12\n    |\n21  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpj57jveo9.rs:23:13\n    |\n23  |     let a = Vec::new(0);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpj57jveo9.rs:24:13\n    |\n24  |     let b = Vec::new(1);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpj57jveo9.rs:25:13\n    |\n25  |     let c = Vec::new(0);\n    |             ^^^^^^^^ - supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<_>`\n  --> /tmp/tmpj57jveo9.rs:27:13\n   |\n27 |       c = a + b;\n   |           - ^ - Vec<_>\n   |           |\n   |           Vec<_>\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  let mut sum = 0;\n  while i < n {\n    if i % 2 == 0 {\n      sum = result[i - 1] + result[i - 2] + result[i + 1];\n    } else {\n      sum = result[i - 1] + result[i - 2] + result[i + 1] + result[i - 1];\n    }\n    result.push_back(sum);\n    i = i + 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp2g4scdi6.rs:25:13\n   |\n25 |       sum = result[i - 1] + result[i - 2] + result[i + 1];\n   |             ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp2g4scdi6.rs:25:29\n   |\n25 |       sum = result[i - 1] + result[i - 2] + result[i + 1];\n   |                             ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp2g4scdi6.rs:25:45\n   |\n25 |       sum = result[i - 1] + result[i - 2] + result[i + 1];\n   |                                             ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp2g4scdi6.rs:27:13\n   |\n27 |       sum = result[i - 1] + result[i - 2] + result[i + 1] + result[i - 1];\n   |             ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = 1\n    let b = 1\n    let c = 2\n    for i in 0..n - 2 {\n      a = b + c\n      b = c\n      c = a\n    }\n    return Vec::new(a)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmptybw162j.rs:25:14\n   |\n25 |     let a = 1\n   |              ^ help: add `;` here\n26 |     let b = 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmptybw162j.rs:26:14\n   |\n26 |     let b = 1\n   |              ^ help: add `;` here\n27 |     let c = 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptybw162j.rs:27:14\n   |\n27 |     let c = 2\n   |              ^ help: add `;` here\n28 |     for i in 0..n - 2 {\n   |     --- unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmptybw162j.rs:29:16\n   |\n29 |       a = b + c\n   |                ^ help: add `;` here\n30 |       b = c\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmptybw162j.rs:30:12\n   |\n30 |       b = c\n   |            ^ help: add `;` here\n31 |       c = a\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptybw162j.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptybw162j.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptybw162j.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptybw162j.rs:33:12\n    |\n33  |     return Vec::new(a)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(1);\n  } else if n == 2 {\n    return Vec::new(2);\n  } else {\n    let a = Vec::new(n - 1);\n    let b = Vec::new(n - 2);\n    let c = Vec::new(n - 1);\n    c[0] = 1;\n    for i in 0..n - 3 {\n      c[i + 1] = a[i] + b[i] + c[i];\n    }\n    return c;\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq8ba1zq0.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq8ba1zq0.rs:21:12\n    |\n21  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq8ba1zq0.rs:23:12\n    |\n23  |     return Vec::new(2);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq8ba1zq0.rs:25:13\n    |\n25  |     let a = Vec::new(n - 1);\n    |             ^^^^^^^^ ----- supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq8ba1zq0.rs:26:13\n    |\n26  |     let b = Vec::new(n - 2);\n    |             ^^^^^^^^ ----- supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq8ba1zq0.rs:27:13\n    |\n27  |     let c = Vec::new(n - 1);\n    |             ^^^^^^^^ ----- supplied 1 argument\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq8ba1zq0.rs:30:7\n   |\n30 |       c[i + 1] = a[i] + b[i] + c[i];\n   |       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `Sl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut a = 1;\n  let mut b = 1;\n  let mut c = 1;\n  for i in 0..n {\n    let next = a + b + c;\n    a = b;\n    b = c;\n    c = next;\n    result.push(next);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[3, 5, 9]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpfz3uk30i.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let [a, b, c] = tri(n - 1)\n    let [d, e, f] = tri(n - 2)\n    let [g, h, i] = tri(n - 3)\n    return Vec::new(a + b + c, d + e + f, g + h + i)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl5knjs1p.rs:25:31\n   |\n25 |     let [a, b, c] = tri(n - 1)\n   |                               ^ help: add `;` here\n26 |     let [d, e, f] = tri(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl5knjs1p.rs:26:31\n   |\n26 |     let [d, e, f] = tri(n - 2)\n   |                               ^ help: add `;` here\n27 |     let [g, h, i] = tri(n - 3)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpl5knjs1p.rs:27:31\n   |\n27 |     let [g, h, i] = tri(n - 3)\n   |                               ^ help: add `;` here\n28 |     return Vec::new(a + b + c, d + e + f, g + h + i)\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpl5knjs1p.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpl5knjs1p.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpl5knjs1p.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpl5knjs1p.rs:25:9\n   |\n25 |     let [a, b, c] = tri(n - 1)\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpl5knjs1p.rs:26:9\n   |\n26 |     let [d, e, f] =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0);\n    }\n    if n == 1 {\n        return Vec::new(1);\n    }\n    if n == 2 {\n        return Vec::new(2);\n    }\n    if n % 2 == 0 {\n        return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpl9t53kai.rs:19:16\n    |\n19  |         return Vec::new(0);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpl9t53kai.rs:22:16\n    |\n22  |         return Vec::new(1);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpl9t53kai.rs:25:16\n    |\n25  |         return Vec::new(2);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpl9t53kai.rs:28:27\n   |\n28 |         return tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |                ---------- ^ ---------- Vec<isize>\n   |                |\n   |                Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpl9t53kai.rs:30:23\n   |\n30 |     return tri(n - 1) + tri(n - 2) + tri(n + 1);\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(3);\n  } else if n == 2 {\n    return Vec::new(1, 3, 2);\n  } else {\n    let a = 1;\n    let b = 1;\n    let c = 1;\n    for i in 0..n {\n      let d = a + b + c;\n      a = b;\n      b = c;\n      c = d;\n    }\n    return Vec::new(c, a, b);\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1ufg_p4c.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1ufg_p4c.rs:21:12\n    |\n21  |     return Vec::new(3);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp1ufg_p4c.rs:23:12\n    |\n23  |     return Vec::new(1, 3, 2);\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp1ufg_p4c.rs:34:12\n    |\n34  |     return Vec::new(c, a, b);\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut res = Vec::new();\n  let mut acc = 0;\n  let mut prev = 0;\n  let mut next = 1;\n  for i in 0..n {\n    acc = prev + next;\n    prev = next;\n    next = acc;\n    res.push(acc);\n  }\n  return res;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpfwyfn8gs.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 1)\n    let d = Vec::new(n - 1)\n    let e = Vec::new(n - 1)\n    let f = Vec::new(n - 1)\n    let g = Vec::new(n - 1)\n    let h = Vec::new(n - 1)\n    let i = Vec::new(n - 1)\n    let j = Vec::new(n - 1)\n    let k = Vec::new(n - 1)\n    let l = Vec::new(n - 1)\n    let m = Vec::new(n - 1)\n    let n = Vec::new(n - 1)\n    let o = Vec::new(n - 1)\n    let p = Vec::new(n - 1)\n    let q = Vec::new(n - 1)\n    let r = Vec::new(n - 1)\n    let s = Vec::new(n - 1)\n    let t = Vec::new(n - 1)\n    let u = Vec::new(n - 1)\n    let v = Vec::new(n - 1)\n    let w = Vec::new(n - 1)\n    let x = Vec::new(n - 1)\n    let y = Vec::new(n - 1)\n    let z = Vec::new(n - 1)\n    let a1 = Vec::new(n - 1)\n    let b1 = Vec::new(n - 1)\n    let c1 = Vec::new(n - 1)\n    let d1 = Vec::new(n - 1)\n    let e1 = Vec::new(n - 1)\n    let f1 = Vec::new(n - 1)\n    let g1 = Vec::new(n - 1)\n    let h1 = Vec::new(n - 1)\n    let i1 =\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpysrxk5s5.rs:74:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but it has different indentation\n...\n74 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:25:28\n   |\n25 |     let a = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n26 |     let b = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:26:28\n   |\n26 |     let b = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n27 |     let c = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:27:28\n   |\n27 |     let c = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n28 |     let d = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:28:28\n   |\n28 |     let d = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n29 |     let e = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:29:28\n   |\n29 |     let e = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n30 |     let f = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:30:28\n   |\n30 |     let f = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n31 |     let g = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:31:28\n   |\n31 |     let g = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n32 |     let h = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpysrxk5s5.rs:32:28\n   |\n32 |     let h = V",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = 1\n    let b = 1\n    let c = 2\n    for i in 0..n {\n      let t = a + b + c\n      a = b\n      b = c\n      c = t\n    }\n    return Vec::new(c)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp91x_ohut.rs:25:14\n   |\n25 |     let a = 1\n   |              ^ help: add `;` here\n26 |     let b = 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp91x_ohut.rs:26:14\n   |\n26 |     let b = 1\n   |              ^ help: add `;` here\n27 |     let c = 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp91x_ohut.rs:27:14\n   |\n27 |     let c = 2\n   |              ^ help: add `;` here\n28 |     for i in 0..n {\n   |     --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmp91x_ohut.rs:29:24\n   |\n29 |       let t = a + b + c\n   |                        ^ help: add `;` here\n30 |       a = b\n   |       - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmp91x_ohut.rs:30:12\n   |\n30 |       a = b\n   |            ^ help: add `;` here\n31 |       b = c\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmp91x_ohut.rs:31:12\n   |\n31 |       b = c\n   |            ^ help: add `;` here\n32 |       c = t\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp91x_ohut.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp91x_ohut.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp91x_ohut.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was suppli",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  } else if n == 1 {\n    return Vec::new(3);\n  } else if n == 2 {\n    return Vec::new(1, 2, 3);\n  } else {\n    let a = Vec::new(1, 2, 3);\n    let b = Vec::new(1, 2, 3);\n    for i in 0..n - 2 {\n      b = Vec::new(a[0] + a[1] + a[2], a[1] + a[2] + a[3], a[2] + a[3] + a[4]);\n      a = b;\n    }\n    return b;\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp913l7ppz.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp913l7ppz.rs:21:12\n    |\n21  |     return Vec::new(3);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp913l7ppz.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3);\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp913l7ppz.rs:25:13\n    |\n25  |     let a = Vec::new(1, 2, 3);\n    |             ^^^^^^^^ -  -  - supplied 3 arguments\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp913l7ppz.rs:26:13\n    |\n26  |     let b = Vec::new(1, 2, 3);\n    |             ^^^^^^^^ -  -  - supplied 3 arguments\n    |             |\n    |             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp913l7ppz.rs:28:11\n    |\n28  |       b = Vec::new(a[0] + a[1] + a[2], a[1] + a[2] + a[3], a[2] + a[3] + a[4]);\n    |           ^^^^^^^^ ------------------  ------------------  ------------------ supplied 3 arguments\n    |           |\n    |           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(1)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else if n == 3 {\n    return Vec::new(8)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpncrc8zwi.rs:19:12\n    |\n19  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpncrc8zwi.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpncrc8zwi.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpncrc8zwi.rs:25:12\n    |\n25  |     return Vec::new(8)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpncrc8zwi.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut res = Vec::new();\n  let mut sum = 0;\n  for i in 0..n {\n    if i % 2 == 0 {\n      sum += 1;\n    } else {\n      sum += 2;\n    }\n    res.push(sum);\n  }\n  return res;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 3, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpk5rxgvmf.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n == 2 {\n    return Vec::new(2);\n  }\n  let a = Vec::new(3);\n  let b = Vec::new(1);\n  let c = Vec::new(2);\n  for i in 0..n {\n    let t = a + b + c;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return c;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu4kll_en.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu4kll_en.rs:22:12\n    |\n22  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu4kll_en.rs:25:12\n    |\n25  |     return Vec::new(2);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu4kll_en.rs:27:11\n    |\n27  |   let a = Vec::new(3);\n    |           ^^^^^^^^ - supplied 1 argument\n    |           |\n    |           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu4kll_en.rs:28:11\n    |\n28  |   let b = Vec::new(1);\n    |           ^^^^^^^^ - supplied 1 argument\n    |           |\n    |           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu4kll_en.rs:29:11\n    |\n29  |   let c = Vec::new(2);\n    |           ^^^^^^^^ - supplied 1 argument\n    |           |\n    |           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<_>`\n  --> /tmp/tmpu4kll_en.rs:31:15\n   |\n31 |     let t = a + b + c;\n   |             - ^ - Vec<_>\n   |             |\n   |             Vec<_>\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more inform",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return Vec::new(0);\n    }\n    if n == 1 {\n        return Vec::new(3);\n    }\n    if n == 2 {\n        return Vec::new(1, 2);\n    }\n    let [a, b, c] = tri(n - 1);\n    let [d, e, f] = tri(n - 2);\n    let [g, h, i] = tri(n - 3);\n    let [j, k, l] = tri(n - 4);\n    let [m, n, o] = tri(n - 5);\n    let [p, q, r] = tri(n - 6);\n    let [s, t, u] = tri(n - 7);\n    let [v, w, x] = tri(n - 8);\n    let [y, z, aa] = tri(n - 9);\n    let [bb, cc, dd] = tri(n - 10);\n    let [ee, ff, gg] = tri(n - 11);\n    let [hh, ii, jj] = tri(n - 12);\n    let [kk, ll, mm] = tri(n - 13);\n    let [nn, oo, pp] = tri(n - 14);\n    let [qq, rr, ss] = tri(n - 15);\n    let [tt, uu, vv] = tri(n - 16);\n    let [ww, xx, yy] = tri(n - 17);\n    let [zz, aa, bb] = tri(n - 18);\n    let [cc, dd, ee] = tri(n - 19);\n    let [ff, gg, hh] = tri(n - 20);\n    let [ii, jj, kk] = tri(n - 21);\n    let [ll, mm, nn] = tri(n - 22);\n    let [oo, pp, qq] = tri(n - 23);\n    let [rr, ss, tt] = tri(n - 24);\n    let [uu, vv, ww] = tri(n - 25);\n    let [xx, yy,\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected one of `:`, `;`, `=`, or `|`, found `}`\n  --> /tmp/tmpufvl6ykh.rs:53:1\n   |\n53 | }\n   | ^ expected one of `:`, `;`, `=`, or `|`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpufvl6ykh.rs:52:9\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - closing delimiter possibly meant for this\n...\n52 |     let [xx, yy,\n   |         ^ unclosed delimiter\n53 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpufvl6ykh.rs:19:16\n    |\n19  |         return Vec::new(0);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpufvl6ykh.rs:22:16\n    |\n22  |         return Vec::new(3);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 2 arguments were supplied\n   --> /tmp/tmpufvl6ykh.rs:25:16\n    |\n25  |         return Vec::new(1, 2);\n    |                ^^^^^^^^ -  - supplied 2 arguments\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpufvl6ykh.rs:27:9\n   |\n27 |     let [a, b, c] = tri(n - 1);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpufvl6ykh.rs:28:9\n   |\n28 |     let [d, e, f] = tri(n - 2);\n   |         ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 2)[..]`\n   |         |\n   |         pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut acc = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n            acc = acc + 1;\n        } else {\n            acc = acc + 2;\n        }\n        res.push(acc);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 3, 4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpem9k74i9.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  if n == 2 {\n    return Vec::new(1, 2, 3)\n  }\n  return Vec::new(1, 1 + (n / 2), 1 + (n / 2) + (n % 2), 1 + (n / 2) + (n % 2) + (n % 2))\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcc4ao_b9.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcc4ao_b9.rs:22:12\n    |\n22  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpcc4ao_b9.rs:25:12\n    |\n25  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmpcc4ao_b9.rs:27:10\n    |\n27  |   return Vec::new(1, 1 + (n / 2), 1 + (n / 2) + (n % 2), 1 + (n / 2) + (n % 2) + (n % 2))\n    |          ^^^^^^^^ -  -----------  ---------------------  ------------------------------- supplied 4 arguments\n    |          |\n    |          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(3);\n  }\n  if n % 2 == 0 {\n    return Vec::new(1 + (n / 2));\n  }\n  return Vec::new(\n    tri(n - 1) + tri(n - 2) + tri(n + 1)\n  );\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxgggo7yg.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxgggo7yg.rs:22:12\n    |\n22  |     return Vec::new(3);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxgggo7yg.rs:25:12\n    |\n25  |     return Vec::new(1 + (n / 2));\n    |            ^^^^^^^^ ----------- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpxgggo7yg.rs:28:16\n   |\n28 |     tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |     ---------- ^ ---------- Vec<isize>\n   |     |\n   |     Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxgggo7yg.rs:27:10\n    |\n27  |   return Vec::new(\n    |          ^^^^^^^^ expected 0 arguments\n28  |     tri(n - 1) + tri(n - 2) + tri(n + 1)\n    |     ------------------------------------ supplied 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let a = [1, 1];\n  let b = [1, 0];\n  for i in 0..n {\n    a = a.map(x => x + b.map(y => y / 2));\n    b = b.map(x => x + a.map(y => y / 2));\n  }\n  return a.map(x => x + b.map(y => y / 2));\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmppn11atqt.rs:21:17\n   |\n21 |     a = a.map(x => x + b.map(y => y / 2));\n   |                 ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  let mut current = 1;\n  for i in 0..n {\n    let next = current + last;\n    result.push(next);\n    last = current;\n    current = next;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp6ggsff1n.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:27:29\n   |\n27 |   let [a, b, c] = tri(n - 1)\n   |                             ^ help: add `;` here\n28 |   let [d, e, f] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:28:29\n   |\n28 |   let [d, e, f] = tri(n - 2)\n   |                             ^ help: add `;` here\n29 |   let [g, h, i] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:29:29\n   |\n29 |   let [g, h, i] = tri(n - 3)\n   |                             ^ help: add `;` here\n30 |   let [j, k, l] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:30:29\n   |\n30 |   let [j, k, l] = tri(n - 4)\n   |                             ^ help: add `;` here\n31 |   let [m, n, o] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:31:29\n   |\n31 |   let [m, n, o] = tri(n - 5)\n   |                             ^ help: add `;` here\n32 |   let [p, q, r] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:32:29\n   |\n32 |   let [p, q, r] = tri(n - 6)\n   |                             ^ help: add `;` here\n33 |   let [s, t, u] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:33:29\n   |\n33 |   let [s, t, u] = tri(n - 7)\n   |                             ^ help: add `;` here\n34 |   let [v, w, x] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:34:29\n   |\n34 |   let [v, w, x] = tri(n - 8)\n   |                             ^ help: add `;` here\n35 |   let [y, z, aa] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:35:30\n   |\n35 |   let [y, z, aa] = tri(n - 9)\n   |                              ^ help: add `;` here\n36 |   let [bb, cc, dd] = tri(n - 10)\n   |   --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  return Vec::new(1 + (n / 2), tri(n - 1), tri(n - 2), tri(n + 1))\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6rm1bpnk.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6rm1bpnk.rs:22:12\n    |\n22  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6rm1bpnk.rs:25:12\n    |\n25  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmp6rm1bpnk.rs:27:10\n    |\n27  |   return Vec::new(1 + (n / 2), tri(n - 1), tri(n - 2), tri(n + 1))\n    |          ^^^^^^^^ -----------  ----------  ----------  ---------- supplied 4 arguments\n    |          |\n    |          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else if n == 3 {\n    return Vec::new(3, 1, 2, 8)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm2chy_z2.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm2chy_z2.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpm2chy_z2.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmpm2chy_z2.rs:25:12\n    |\n25  |     return Vec::new(3, 1, 2, 8)\n    |            ^^^^^^^^ -  -  -  - supplied 4 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpm2chy_z2.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293174,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps6sb8tgy.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps6sb8tgy.rs:25:23\n   |\n25 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps6sb8tgy.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  let [a, b] = tri(n - 1)\n  let [c, d] = tri(n - 2)\n  let [e, f] = tri(n - 3)\n  let [g, h] = tri(n - 4)\n  let [i, j] = tri(n - 5)\n  let [k, l] = tri(n - 6)\n  let [m, n] = tri(n - 7)\n  let [o, p] = tri(n - 8)\n  let [q, r] = tri(n - 9)\n  let [s, t] = tri(n - 10)\n  let [u, v] = tri(n - 11)\n  let [w, x] = tri(n - 12)\n  let [y, z] = tri(n - 13)\n  let [aa, ab] = tri(n - 14)\n  let [ac, ad] = tri(n - 15)\n  let [ae, af] = tri(n - 16)\n  let [ag, ah] = tri(n - 17)\n  let [ai, aj] = tri(n - 18)\n  let [ak, al] = tri(n - 19)\n  let [am, an] = tri(n - 20)\n  let [ao, ap] = tri(n - 21)\n  let [aq, ar] = tri(n - 22)\n  let [as, at] = tri(n - 23)\n  let [au, av] = tri(n - 24)\n  let [aw, ax] = tri(n - 25)\n  let [ay, az] = tri(n - 26)\n  let [ba, bb] = tri(n - 27)\n  let [bc, bd] = tri(n - 28)\n  let [be, bf] = tri(n - 29)\n  let [bg, bh] = tri(n - 30)\n  let [bi, bj] = tri(n - 31)\n  let [\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7si52cp6.rs:24:26\n   |\n24 |   let [a, b] = tri(n - 1)\n   |                          ^ help: add `;` here\n25 |   let [c, d] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7si52cp6.rs:25:26\n   |\n25 |   let [c, d] = tri(n - 2)\n   |                          ^ help: add `;` here\n26 |   let [e, f] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7si52cp6.rs:26:26\n   |\n26 |   let [e, f] = tri(n - 3)\n   |                          ^ help: add `;` here\n27 |   let [g, h] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7si52cp6.rs:27:26\n   |\n27 |   let [g, h] = tri(n - 4)\n   |                          ^ help: add `;` here\n28 |   let [i, j] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7si52cp6.rs:28:26\n   |\n28 |   let [i, j] = tri(n - 5)\n   |                          ^ help: add `;` here\n29 |   let [k, l] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7si52cp6.rs:29:26\n   |\n29 |   let [k, l] = tri(n - 6)\n   |                          ^ help: add `;` here\n30 |   let [m, n] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7si52cp6.rs:30:26\n   |\n30 |   let [m, n] = tri(n - 7)\n   |                          ^ help: add `;` here\n31 |   let [o, p] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7si52cp6.rs:31:26\n   |\n31 |   let [o, p] = tri(n - 8)\n   |                          ^ help: add `;` here\n32 |   let [q, r] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7si52cp6.rs:32:26\n   |\n32 |   let [q, r] = tri(n - 9)\n   |                          ^ help: add `;` here\n33 |   let [s, t] = tri(n - 10)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7si52cp6.rs:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let tri_vec = [0, 1, 3];\n  for i in 0..n {\n    tri_vec.push(tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2]);\n  }\n  return tri_vec;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push` found for array `[{integer}; 3]` in the current scope\n  --> /tmp/tmphyl6r31t.rs:20:13\n   |\n20 |     tri_vec.push(tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2]);\n   |             ^^^^ method not found in `[{integer}; 3]`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphyl6r31t.rs:20:18\n   |\n20 |     tri_vec.push(tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2]);\n   |                  ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphyl6r31t.rs:20:31\n   |\n20 |     tri_vec.push(tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2]);\n   |                               ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphyl6r31t.rs:20:48\n   |\n20 |     tri_vec.push(tri_vec[i] + tri_vec[i + 1] + tri_vec[i + 2]);\n   |                                                ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphyl6r31t.rs:22:10\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected `Vec<isize>` because of return type\n...\n22 |   return tri_vec;\n   |    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  if n == 2 {\n    return Vec::new(2)\n  }\n  let [a, b, c] = tri(n - 1)\n  let [d, e, f] = tri(n - 2)\n  let [g, h, i] = tri(n - 3)\n  let [j, k, l] = tri(n - 4)\n  let [m, n, o] = tri(n - 5)\n  let [p, q, r] = tri(n - 6)\n  let [s, t, u] = tri(n - 7)\n  let [v, w, x] = tri(n - 8)\n  let [y, z, aa] = tri(n - 9)\n  let [bb, cc, dd] = tri(n - 10)\n  let [ee, ff, gg] = tri(n - 11)\n  let [hh, ii, jj] = tri(n - 12)\n  let [kk, ll, mm] = tri(n - 13)\n  let [nn, oo, pp] = tri(n - 14)\n  let [qq, rr, ss] = tri(n - 15)\n  let [tt, uu, vv] = tri(n - 16)\n  let [ww, xx, yy] = tri(n - 17)\n  let [zz, aa, bb] = tri(n - 18)\n  let [cc, dd, ee] = tri(n - 19)\n  let [ff, gg, hh] = tri(n - 20)\n  let [ii, jj, kk] = tri(n - 21)\n  let [ll, mm, nn] = tri(n - 22)\n  let [oo, pp, qq] = tri(n - 23)\n  let [rr, ss, tt] = tri(n - 24)\n  let [uu, vv, ww] = tri(n - 25)\n  let [xx, yy, zz\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:27:29\n   |\n27 |   let [a, b, c] = tri(n - 1)\n   |                             ^ help: add `;` here\n28 |   let [d, e, f] = tri(n - 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:28:29\n   |\n28 |   let [d, e, f] = tri(n - 2)\n   |                             ^ help: add `;` here\n29 |   let [g, h, i] = tri(n - 3)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:29:29\n   |\n29 |   let [g, h, i] = tri(n - 3)\n   |                             ^ help: add `;` here\n30 |   let [j, k, l] = tri(n - 4)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:30:29\n   |\n30 |   let [j, k, l] = tri(n - 4)\n   |                             ^ help: add `;` here\n31 |   let [m, n, o] = tri(n - 5)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:31:29\n   |\n31 |   let [m, n, o] = tri(n - 5)\n   |                             ^ help: add `;` here\n32 |   let [p, q, r] = tri(n - 6)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:32:29\n   |\n32 |   let [p, q, r] = tri(n - 6)\n   |                             ^ help: add `;` here\n33 |   let [s, t, u] = tri(n - 7)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:33:29\n   |\n33 |   let [s, t, u] = tri(n - 7)\n   |                             ^ help: add `;` here\n34 |   let [v, w, x] = tri(n - 8)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:34:29\n   |\n34 |   let [v, w, x] = tri(n - 8)\n   |                             ^ help: add `;` here\n35 |   let [y, z, aa] = tri(n - 9)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsmfpo5il.rs:35:30\n   |\n35 |   let [y, z, aa] = tri(n - 9)\n   |                              ^ help: add `;` here\n36 |   let [bb, cc, dd] = tri(n - 10)\n   |   --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(n - 1)\n    let b = Vec::new(n - 2)\n    let c = Vec::new(n - 1)\n    let d = Vec::new(n - 2)\n    let e = Vec::new(n - 1)\n    let f = Vec::new(n - 2)\n    let g = Vec::new(n - 1)\n    let h = Vec::new(n - 2)\n    let i = Vec::new(n - 1)\n    let j = Vec::new(n - 2)\n    let k = Vec::new(n - 1)\n    let l = Vec::new(n - 2)\n    let m = Vec::new(n - 1)\n    let n = Vec::new(n - 2)\n    let o = Vec::new(n - 1)\n    let p = Vec::new(n - 2)\n    let q = Vec::new(n - 1)\n    let r = Vec::new(n - 2)\n    let s = Vec::new(n - 1)\n    let t = Vec::new(n - 2)\n    let u = Vec::new(n - 1)\n    let v = Vec::new(n - 2)\n    let w = Vec::new(n - 1)\n    let x = Vec::new(n - 2)\n    let y = Vec::new(n - 1)\n    let z = Vec::new(n - 2)\n    let a1 = Vec::new(n - 1)\n    let b1 = Vec::new(n - 2)\n    let c1 = Vec::new(n - 1)\n    let d1 = Vec::new(n - 2)\n    let e1 = Vec::new(n - 1)\n    let f1 = Vec::new(n - 2)\n    let g1 = Vec::new(n - 1)\n    let h1 = Vec::new(n - 2)\n    let i1 =\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpk7f36uu0.rs:74:3\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - unclosed delimiter\n...\n24 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but it has different indentation\n...\n74 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:25:28\n   |\n25 |     let a = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n26 |     let b = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:26:28\n   |\n26 |     let b = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n27 |     let c = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:27:28\n   |\n27 |     let c = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n28 |     let d = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:28:28\n   |\n28 |     let d = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n29 |     let e = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:29:28\n   |\n29 |     let e = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n30 |     let f = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:30:28\n   |\n30 |     let f = Vec::new(n - 2)\n   |                            ^ help: add `;` here\n31 |     let g = Vec::new(n - 1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:31:28\n   |\n31 |     let g = Vec::new(n - 1)\n   |                            ^ help: add `;` here\n32 |     let h = Vec::new(n - 2)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk7f36uu0.rs:32:28\n   |\n32 |     let h = V",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in 0..n {\n    if i % 2 == 0 {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp72dej0gz.rs:23:19\n   |\n23 |       result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n   |                   ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp72dej0gz.rs:23:35\n   |\n23 |       result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n   |                                   ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp72dej0gz.rs:23:51\n   |\n23 |       result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n   |                                                   ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let tri = [0, 1, 3];\n    for i in 0..n {\n        tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[0] + tri[1]];\n    }\n    return tri;\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp0ecy_8sm.rs:20:15\n   |\n20 |         tri = [tri[0] + tri[1] + tri[2], tri[1], tri[0] + tri[2], tri[0] + tri[1]];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 4 elements\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0ecy_8sm.rs:22:12\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                     ---------- expected `Vec<isize>` because of return type\n...\n22 |     return tri;\n   |            ^^^- help: try using a conversion method: `.to_vec()`\n   |            |\n   |            expected struct `Vec`, found array `[{integer}; 3]`\n   |\n   = note: expected struct `Vec<isize>`\n               found array `[{integer}; 3]`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n == 2 {\n    return Vec::new(2);\n  }\n  let [a, b, c] = tri(n - 1);\n  let [d, e, f] = tri(n - 2);\n  let [g, h, i] = tri(n - 3);\n  let [j, k, l] = tri(n - 4);\n  let [m, n, o] = tri(n - 5);\n  let [p, q, r] = tri(n - 6);\n  let [s, t, u] = tri(n - 7);\n  let [v, w, x] = tri(n - 8);\n  let [y, z, aa] = tri(n - 9);\n  let [bb, cc, dd] = tri(n - 10);\n  let [ee, ff, gg] = tri(n - 11);\n  let [hh, ii, jj] = tri(n - 12);\n  let [kk, ll, mm] = tri(n - 13);\n  let [nn, oo, pp] = tri(n - 14);\n  let [qq, rr, ss] = tri(n - 15);\n  let [tt, uu, vv] = tri(n - 16);\n  let [ww, xx, yy] = tri(n - 17);\n  let [zz, aaa, bbb] = tri(n - 18);\n  let [ccc, ddd, eee] = tri(n - 19);\n  let [fff, ggg, hhh] = tri(n - 20);\n  let [ii, jj, kk] = tri(n - 21);\n  let [ll, mm, nn] = tri(n - 22);\n  let [oo, pp, qq] = tri(n - 23);\n  let [rr, ss, tt] = tri(n - 24);\n  let [uu, vv, ww] = tri(n - 25);\n  let [xx, yy,\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected one of `:`, `;`, `=`, or `|`, found `}`\n  --> /tmp/tmpm8xvxzd2.rs:53:1\n   |\n53 | }\n   | ^ expected one of `:`, `;`, `=`, or `|`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpm8xvxzd2.rs:52:7\n   |\n17 | fn tri(n: isize) -> Vec<isize> {\n   |                                - closing delimiter possibly meant for this\n...\n52 |   let [xx, yy,\n   |       ^ unclosed delimiter\n53 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm8xvxzd2.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm8xvxzd2.rs:22:12\n    |\n22  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm8xvxzd2.rs:25:12\n    |\n25  |     return Vec::new(2);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpm8xvxzd2.rs:27:7\n   |\n27 |   let [a, b, c] = tri(n - 1);\n   |       ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 1)[..]`\n   |       |\n   |       pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpm8xvxzd2.rs:28:7\n   |\n28 |   let [d, e, f] = tri(n - 2);\n   |       ^^^^^^^^^   ---------- help: consider slicing here: `tri(n - 2)[..]`\n   |       |\n   |       pattern cannot match with input type `Vec<isize>`\n\nerror[E0529]: expected an array or slice, found `Vec<isize>`\n  --> /tmp/tmpm8xvxzd2.rs:29:7\n   |\n29 |   let [g, h, i] = tri(n - 3);\n   |       ^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else if n == 3 {\n    return Vec::new(3)\n  } else if n % 2 == 0 {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  } else {\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps3kmx1x9.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps3kmx1x9.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps3kmx1x9.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmps3kmx1x9.rs:25:12\n    |\n25  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps3kmx1x9.rs:27:23\n   |\n27 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmps3kmx1x9.rs:29:23\n   |\n29 |     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |            ---------- ^ ---------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n == 2 {\n    return Vec::new(2)\n  } else {\n    let a = Vec::new(1)\n    let b = Vec::new(1)\n    let c = Vec::new(1)\n    for i in 0..n {\n      let t = a + b\n      a = b\n      b = c\n      c = t\n    }\n    return c\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpo1tjwg4l.rs:25:24\n   |\n25 |     let a = Vec::new(1)\n   |                        ^ help: add `;` here\n26 |     let b = Vec::new(1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo1tjwg4l.rs:26:24\n   |\n26 |     let b = Vec::new(1)\n   |                        ^ help: add `;` here\n27 |     let c = Vec::new(1)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpo1tjwg4l.rs:27:24\n   |\n27 |     let c = Vec::new(1)\n   |                        ^ help: add `;` here\n28 |     for i in 0..n {\n   |     --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpo1tjwg4l.rs:29:20\n   |\n29 |       let t = a + b\n   |                    ^ help: add `;` here\n30 |       a = b\n   |       - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpo1tjwg4l.rs:30:12\n   |\n30 |       a = b\n   |            ^ help: add `;` here\n31 |       b = c\n   |       - unexpected token\n\nerror: expected `;`, found `c`\n  --> /tmp/tmpo1tjwg4l.rs:31:12\n   |\n31 |       b = c\n   |            ^ help: add `;` here\n32 |       c = t\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpo1tjwg4l.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpo1tjwg4l.rs:21:12\n    |\n21  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpo1tjwg4l.rs:23:12\n    |\n23  |     return Vec::new(2)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    let a = 1 + n / 2\n    let b = a - 1\n    let c = a + 1\n    return Vec::new(a, b, c)\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph79v58rt.rs:25:22\n   |\n25 |     let a = 1 + n / 2\n   |                      ^ help: add `;` here\n26 |     let b = a - 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph79v58rt.rs:26:18\n   |\n26 |     let b = a - 1\n   |                  ^ help: add `;` here\n27 |     let c = a + 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmph79v58rt.rs:27:18\n   |\n27 |     let c = a + 1\n   |                  ^ help: add `;` here\n28 |     return Vec::new(a, b, c)\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph79v58rt.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph79v58rt.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmph79v58rt.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmph79v58rt.rs:28:12\n    |\n28  |     return Vec::new(a, b, c)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(3)\n  } else if n == 2 {\n    return Vec::new(1, 2, 3)\n  } else {\n    return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  }\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp03tvrpfz.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp03tvrpfz.rs:21:12\n    |\n21  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp03tvrpfz.rs:23:12\n    |\n23  |     return Vec::new(1, 2, 3)\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp03tvrpfz.rs:25:32\n   |\n25 |     return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   |                     ---------- ^ ---------- Vec<isize>\n   |                     |\n   |                     Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp03tvrpfz.rs:25:12\n    |\n25  |     return Vec::new(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    |            ^^^^^^^^ ------------------------------------ supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(3)\n  }\n  if n % 2 == 0 {\n    return Vec::new(1 + (n / 2))\n  }\n  return Vec::new(\n    tri(n - 1) + tri(n - 2) + tri(n + 1)\n  )\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5py1kt0v.rs:19:12\n    |\n19  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5py1kt0v.rs:22:12\n    |\n22  |     return Vec::new(3)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5py1kt0v.rs:25:12\n    |\n25  |     return Vec::new(1 + (n / 2))\n    |            ^^^^^^^^ ----------- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp5py1kt0v.rs:28:16\n   |\n28 |     tri(n - 1) + tri(n - 2) + tri(n + 1)\n   |     ---------- ^ ---------- Vec<isize>\n   |     |\n   |     Vec<isize>\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5py1kt0v.rs:27:10\n    |\n27  |   return Vec::new(\n    |          ^^^^^^^^ expected 0 arguments\n28  |     tri(n - 1) + tri(n - 2) + tri(n + 1)\n    |     ------------------------------------ supplied 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  if n == 1 {\n    return Vec::new(1);\n  }\n  if n % 2 == 0 {\n    return Vec::new(1, 2, 3);\n  }\n  return Vec::new(1, 3, 2, 8);\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n",
      "timestamp": 1664293175,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1k18jijg.rs:19:12\n    |\n19  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1k18jijg.rs:22:12\n    |\n22  |     return Vec::new(1);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmp1k18jijg.rs:25:12\n    |\n25  |     return Vec::new(1, 2, 3);\n    |            ^^^^^^^^ -  -  - supplied 3 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 4 arguments were supplied\n   --> /tmp/tmp1k18jijg.rs:27:10\n    |\n27  |   return Vec::new(1, 3, 2, 8);\n    |          ^^^^^^^^ -  -  -  - supplied 4 arguments\n    |          |\n    |          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}