{
  "name": "HumanEval_16_count_distinct_characters",
  "language": "rs",
  "prompt": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n",
  "tests": "}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (c in chars) {\n    count += 1 if chars.find(c) == -1 else 0;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpf6qekdw2.rs:9:10\n  |\n9 |   for (c in chars) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpf6qekdw2.rs:9:7\n  |\n9 |   for (c in chars) {\n  |       ^          ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (c in chars) {\n9 +   for c in chars {\n  | \n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmpf6qekdw2.rs:10:16\n   |\n10 |     count += 1 if chars.find(c) == -1 else 0;\n   |                ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    let c = chars[i];\n    if (chars.indexOf(c.toLower()) == -1 && chars.indexOf(c.toUpper()) == -1) {\n      count++;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmprr0raj1x.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmprr0raj1x.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmprr0raj1x.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmprr0raj1x.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmprr0raj1x.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    if (chars.count(c) > 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpzqllxctl.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpzqllxctl.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpzqllxctl.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpzqllxctl.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzqllxctl.rs:10:8\n   |\n10 |     if (chars.count(c) > 1) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (chars.count(c) > 1) {\n10 +     if chars.count(c) > 1 {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpzqllxctl.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpzqllxctl.rs:10:15\n    |\n10  |     if (chars.count(c) > 1) {\n    |               ^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if chars.get(i) == c.to_lower() {\n      continue;\n    }\n    count += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmp1ew7cbhr.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmp1ew7cbhr.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `get` found for struct `Chars` in the current scope\n  --> /tmp/tmp1ew7cbhr.rs:11:14\n   |\n11 |     if chars.get(i) == c.to_lower() {\n   |              ^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Vec<isize> = []\n  for c in string.chars() {\n    chars.push(c)\n  }\n  return chars.length()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpl8_k430d.rs:7:29\n  |\n7 |   let chars: Vec<isize> = []\n  |                             ^ help: add `;` here\n8 |   for c in string.chars() {\n  |   --- unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpl8_k430d.rs:7:27\n  |\n7 |   let chars: Vec<isize> = []\n  |              ----------   ^^- help: try using a conversion method: `.to_vec()`\n  |              |            |\n  |              |            expected struct `Vec`, found array of 0 elements\n  |              expected due to this\n  |\n  = note: expected struct `Vec<isize>`\n              found array `[_; 0]`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpl8_k430d.rs:9:16\n  |\n9 |     chars.push(c)\n  |                ^ expected `isize`, found `char`\n\nerror[E0599]: no method named `length` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpl8_k430d.rs:11:16\n   |\n11 |   return chars.length()\n   |                ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Set[char] = Set.empty()\n  for c in string.chars() {\n    chars = chars.add(c)\n  }\n  return chars.size\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n --> /tmp/tmpxmaicfsj.rs:7:17\n  |\n7 |   let chars: Set[char] = Set.empty()\n  |                 ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = from(chars).fold(0, (acc, c) => acc + 1);\n  return hash;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpfjmmzhpi.rs:8:43\n  |\n8 |   let hash = from(chars).fold(0, (acc, c) => acc + 1);\n  |                                           ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c of chars) {\n    if (!chars.contains(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpaq5c0saz.rs:9:8\n  |\n9 |   for (let c of chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpaq5c0saz.rs:9:12\n  |\n9 |   for (let c of chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n --> /tmp/tmpaq5c0saz.rs:9:14\n  |\n9 |   for (let c of chars) {\n  |             -^^ expected one of `)`, `,`, `@`, or `|`\n  |             |\n  |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n --> /tmp/tmpaq5c0saz.rs:9:17\n  |\n9 |   for (let c of chars) {\n  |                -^^^^^ expected one of `)`, `,`, `@`, or `|`\n  |                |\n  |                help: missing `,`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpaq5c0saz.rs:9:23\n  |\n9 |   for (let c of chars) {\n  |                       ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpaq5c0saz.rs:14:3\n   |\n14 |   return count;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n14 |   { return count; }\n   |   +               +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c of chars) {\n    count += 1 if c.is_upper() else 0;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpg0tzad6i.rs:9:8\n  |\n9 |   for (let c of chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpg0tzad6i.rs:9:12\n  |\n9 |   for (let c of chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n --> /tmp/tmpg0tzad6i.rs:9:14\n  |\n9 |   for (let c of chars) {\n  |             -^^ expected one of `)`, `,`, `@`, or `|`\n  |             |\n  |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n --> /tmp/tmpg0tzad6i.rs:9:17\n  |\n9 |   for (let c of chars) {\n  |                -^^^^^ expected one of `)`, `,`, `@`, or `|`\n  |                |\n  |                help: missing `,`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpg0tzad6i.rs:9:23\n  |\n9 |   for (let c of chars) {\n  |                       ^ help: try adding `in` here\n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmpg0tzad6i.rs:10:16\n   |\n10 |     count += 1 if c.is_upper() else 0;\n   |                ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpg0tzad6i.rs:12:3\n   |\n12 |   return count;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n12 |   { return count; }\n   |   +               +\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c of chars) {\n    if (chars.count(c) == 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwxd6pk4p.rs:9:8\n  |\n9 |   for (let c of chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpwxd6pk4p.rs:9:12\n  |\n9 |   for (let c of chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n --> /tmp/tmpwxd6pk4p.rs:9:14\n  |\n9 |   for (let c of chars) {\n  |             -^^ expected one of `)`, `,`, `@`, or `|`\n  |             |\n  |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n --> /tmp/tmpwxd6pk4p.rs:9:17\n  |\n9 |   for (let c of chars) {\n  |                -^^^^^ expected one of `)`, `,`, `@`, or `|`\n  |                |\n  |                help: missing `,`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwxd6pk4p.rs:9:23\n  |\n9 |   for (let c of chars) {\n  |                       ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwxd6pk4p.rs:14:3\n   |\n14 |   return count;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n14 |   { return count; }\n   |   +               +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c of chars) {\n    count += 1 if c.is_upper() {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpd0cpf2p4.rs:9:8\n  |\n9 |   for (let c of chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpd0cpf2p4.rs:9:12\n  |\n9 |   for (let c of chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n --> /tmp/tmpd0cpf2p4.rs:9:14\n  |\n9 |   for (let c of chars) {\n  |             -^^ expected one of `)`, `,`, `@`, or `|`\n  |             |\n  |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n --> /tmp/tmpd0cpf2p4.rs:9:17\n  |\n9 |   for (let c of chars) {\n  |                -^^^^^ expected one of `)`, `,`, `@`, or `|`\n  |                |\n  |                help: missing `,`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpd0cpf2p4.rs:9:23\n  |\n9 |   for (let c of chars) {\n  |                       ^ help: try adding `in` here\n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmpd0cpf2p4.rs:10:16\n   |\n10 |     count += 1 if c.is_upper() {\n   |                ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpd0cpf2p4.rs:14:3\n   |\n14 |   return count;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n14 |   { return count; }\n   |   +               +\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if chars.get(i) == c.to_lower() {\n      continue;\n    }\n    count += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmp1ew7cbhr.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmp1ew7cbhr.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `get` found for struct `Chars` in the current scope\n  --> /tmp/tmp1ew7cbhr.rs:11:14\n   |\n11 |     if chars.get(i) == c.to_lower() {\n   |              ^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.has_at(c, i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpjnimubpo.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpjnimubpo.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpjnimubpo.rs:11:15\n   |\n11 |     if !chars.has_at(c, i) {\n   |               ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..string.length() {\n    let c = chars[i];\n    if (chars.find(c.to_lower()) == -1 && chars.find(c.to_upper()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzmg9f9kw.rs:11:8\n   |\n11 |     if (chars.find(c.to_lower()) == -1 && chars.find(c.to_upper()) == -1) {\n   |        ^                                                                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (chars.find(c.to_lower()) == -1 && chars.find(c.to_upper()) == -1) {\n11 +     if chars.find(c.to_lower()) == -1 && chars.find(c.to_upper()) == -1 {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpzmg9f9kw.rs:9:22\n  |\n9 |   for i in 0..string.length() {\n  |                      ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpzmg9f9kw.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzmg9f9kw.rs:11:37\n   |\n11 |     if (chars.find(c.to_lower()) == -1 && chars.find(c.to_upper()) == -1) {\n   |                                     ^^ expected enum `Option`, found integer\n   |\n   = note: expected enum `Option<char>`\n              found type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzmg9f9kw.rs:11:71\n   |\n11 |     if (chars.find(c.to_lower()) == -1 && chars.find(c.to_upper()) == -1) {\n   |                                                                       ^^ expected enum `Option`, found integer\n   |\n   = note: expected enum `Option<char>`\n              found type `{integer}`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..string.length() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpnek3whnx.rs:9:22\n  |\n9 |   for i in 0..string.length() {\n  |                      ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpnek3whnx.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpnek3whnx.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    if (!chars.has_at(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpypixtoup.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpypixtoup.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpypixtoup.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpypixtoup.rs:10:8\n   |\n10 |     if (!chars.has_at(c)) {\n   |        ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (!chars.has_at(c)) {\n10 +     if !chars.has_at(c) {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpypixtoup.rs:10:16\n   |\n10 |     if (!chars.has_at(c)) {\n   |                ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = from(chars).map(|c| c.to_lower()).fold(0, (acc, c) => acc + 1);\n  return hash;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp3m4fa6nv.rs:8:65\n  |\n8 |   let hash = from(chars).map(|c| c.to_lower()).fold(0, (acc, c) => acc + 1);\n  |                                                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let char = chars[i];\n    if (!chars.includes(char.toLower())) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpp2uz8pfp.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpp2uz8pfp.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpp2uz8pfp.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpp2uz8pfp.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpp2uz8pfp.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    if (chars.find(c.to_lower()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp6fffs0ji.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmp6fffs0ji.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmp6fffs0ji.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmp6fffs0ji.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6fffs0ji.rs:10:8\n   |\n10 |     if (chars.find(c.to_lower()) == -1) {\n   |        ^                              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (chars.find(c.to_lower()) == -1) {\n10 +     if chars.find(c.to_lower()) == -1 {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmp6fffs0ji.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6fffs0ji.rs:10:37\n   |\n10 |     if (chars.find(c.to_lower()) == -1) {\n   |                                     ^^ expected enum `Option`, found integer\n   |\n   = note: expected enum `Option<char>`\n              found type `{integer}`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..string.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmp8y93zime.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmp8y93zime.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Set[char] = Set.empty()\n  for c in string.chars() {\n    chars = chars.add(c)\n  }\n  return chars.size\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n --> /tmp/tmpxmaicfsj.rs:7:17\n  |\n7 |   let chars: Set[char] = Set.empty()\n  |                 ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c of chars) {\n    if (chars.count(c) == 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwxd6pk4p.rs:9:8\n  |\n9 |   for (let c of chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpwxd6pk4p.rs:9:12\n  |\n9 |   for (let c of chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n --> /tmp/tmpwxd6pk4p.rs:9:14\n  |\n9 |   for (let c of chars) {\n  |             -^^ expected one of `)`, `,`, `@`, or `|`\n  |             |\n  |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n --> /tmp/tmpwxd6pk4p.rs:9:17\n  |\n9 |   for (let c of chars) {\n  |                -^^^^^ expected one of `)`, `,`, `@`, or `|`\n  |                |\n  |                help: missing `,`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwxd6pk4p.rs:9:23\n  |\n9 |   for (let c of chars) {\n  |                       ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwxd6pk4p.rs:14:3\n   |\n14 |   return count;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n14 |   { return count; }\n   |   +               +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (c in chars) {\n    if (chars.count(c) == 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmp571dsivs.rs:9:10\n  |\n9 |   for (c in chars) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmp571dsivs.rs:9:7\n  |\n9 |   for (c in chars) {\n  |       ^          ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (c in chars) {\n9 +   for c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp571dsivs.rs:10:8\n   |\n10 |     if (chars.count(c) == 1) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (chars.count(c) == 1) {\n10 +     if chars.count(c) == 1 {\n   | \n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp571dsivs.rs:10:15\n    |\n10  |     if (chars.count(c) == 1) {\n    |               ^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = from(chars).map(|c| c.to_lower()).hash_map();\n  return hash.size;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `from` in this scope\n --> /tmp/tmp9wdvmktn.rs:8:14\n  |\n8 |   let hash = from(chars).map(|c| c.to_lower()).hash_map();\n  |              ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..string.length() {\n    let c = chars[i];\n    if !chars.contains(c.to_lower()) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmp1qekhmzp.rs:9:22\n  |\n9 |   for i in 0..string.length() {\n  |                      ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmp1qekhmzp.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmp1qekhmzp.rs:11:15\n   |\n11 |     if !chars.contains(c.to_lower()) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.has_at(c, i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpjnimubpo.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpjnimubpo.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpjnimubpo.rs:11:15\n   |\n11 |     if !chars.has_at(c, i) {\n   |               ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.has_at(c, i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpjnimubpo.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpjnimubpo.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpjnimubpo.rs:11:15\n   |\n11 |     if !chars.has_at(c, i) {\n   |               ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    if (chars.count(c) > 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpzqllxctl.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpzqllxctl.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpzqllxctl.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpzqllxctl.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzqllxctl.rs:10:8\n   |\n10 |     if (chars.count(c) > 1) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (chars.count(c) > 1) {\n10 +     if chars.count(c) > 1 {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpzqllxctl.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpzqllxctl.rs:10:15\n    |\n10  |     if (chars.count(c) > 1) {\n    |               ^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if chars.find(c.to_lower()) == -1 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpkakhwh7v.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpkakhwh7v.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkakhwh7v.rs:11:36\n   |\n11 |     if chars.find(c.to_lower()) == -1 {\n   |                                    ^^ expected enum `Option`, found integer\n   |\n   = note: expected enum `Option<char>`\n              found type `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Set[char] = Set.empty()\n  for c in string {\n    chars = chars.add(c)\n  }\n  return chars.size\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n --> /tmp/tmp9ip86jz6.rs:7:17\n  |\n7 |   let chars: Set[char] = Set.empty()\n  |                 ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: &'static str = string.chars();\n  let count: usize = 0;\n  for i in 0..string.len() {\n    let ch = chars[i];\n    if !ch.is_upper() && !ch.is_lower() {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpq7d4c_1s.rs:7:29\n  |\n7 |   let chars: &'static str = string.chars();\n  |              ------------   ^^^^^^^^^^^^^^ expected `&str`, found struct `Chars`\n  |              |\n  |              expected due to this\n\nerror[E0277]: the type `str` cannot be indexed by `usize`\n  --> /tmp/tmpq7d4c_1s.rs:10:14\n   |\n10 |     let ch = chars[i];\n   |              ^^^^^^^^ string indices are ranges of `usize`\n   |\n   = help: the trait `SliceIndex<str>` is not implemented for `usize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<usize>` for `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq7d4c_1s.rs:15:10\n   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |                                                 ----- expected `isize` because of return type\n...\n15 |   return count;\n   |          ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n15 |   return count.try_into().unwrap();\n   |               ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = HashMap<isize, isize>();\n  let count = 0;\n  for (let i = 0; i < chars.len(); i += 1) {\n    let c = chars[i];\n    let c_lower = c.to_lower();\n    let c_upper = c.to_upper();\n    let c_lower_hash = hash.get(c_lower);\n    let c_upper_hash = hash.get(c_upper);\n    if (c_lower_hash == 0) {\n      hash.set(c_lower, 1);\n    } else {\n      hash.set(c_lower, c_lower_hash + 1);\n    }\n    if (c_upper_hash == 0) {\n      hash.set(c_upper, 1);\n    } else {\n      hash.set(c_upper, c_upper_hash + 1);\n    }\n    count += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n --> /tmp/tmpzbieyqd8.rs:8:27\n  |\n8 |   let hash = HashMap<isize, isize>();\n  |                           ^ expected one of 8 possible tokens\n  |\nhelp: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n  |\n8 |   let hash = HashMap::<isize, isize>();\n  |                     ++\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpzbieyqd8.rs:10:8\n   |\n10 |   for (let i = 0; i < chars.len(); i += 1) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpzbieyqd8.rs:10:12\n   |\n10 |   for (let i = 0; i < chars.len(); i += 1) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpzbieyqd8.rs:10:14\n   |\n10 |   for (let i = 0; i < chars.len(); i += 1) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpzbieyqd8.rs:10:13\n   |\n10 |   for (let i = 0; i < chars.len(); i += 1) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpzbieyqd8.rs:10:14\n   |\n10 |   for (let i = 0; i < chars.len(); i += 1) {\n   |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Set[char] = Set.empty()\n  for c in string.chars() {\n    chars = chars.add(c)\n  }\n  return chars.size\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n --> /tmp/tmpxmaicfsj.rs:7:17\n  |\n7 |   let chars: Set[char] = Set.empty()\n  |                 ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Set[char] = Set.empty()\n  for c in string.chars() {\n    chars = chars.add(c)\n  }\n  return chars.size\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n --> /tmp/tmpxmaicfsj.rs:7:17\n  |\n7 |   let chars: Set[char] = Set.empty()\n  |                 ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.find(c.toLower()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp2nlbws4o.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp2nlbws4o.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp2nlbws4o.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp2nlbws4o.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp2nlbws4o.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = from(chars).fold(0, (acc, c) => acc + 1);\n  return hash;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpfjmmzhpi.rs:8:43\n  |\n8 |   let hash = from(chars).fold(0, (acc, c) => acc + 1);\n  |                                           ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (!chars.includes(c.toLower())) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmptrom9sov.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmptrom9sov.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmptrom9sov.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmptrom9sov.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmptrom9sov.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let mut chars = 0;\n  let mut count = 0;\n  let mut last = 0;\n  let mut last_count = 0;\n  for i in string.as_bytes() {\n    let c = bytes::index(i, 1);\n    if c == 0 {\n      chars += 1;\n      last_count = count;\n      count = 0;\n      last = 0;\n    } else {\n      count += 1;\n    }\n  }\n  chars += last_count;\n  return chars;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared crate or module `bytes`\n  --> /tmp/tmpt8cxd25p.rs:12:13\n   |\n12 |     let c = bytes::index(i, 1);\n   |             ^^^^^ use of undeclared crate or module `bytes`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = chars.map(|c| c.to_lower()).fold(0, |acc, c| acc + 1);\n  return hash.length();\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_lower` found for type `char` in the current scope\n --> /tmp/tmpzuw9tz1a.rs:8:30\n  |\n8 |   let hash = chars.map(|c| c.to_lower()).fold(0, |acc, c| acc + 1);\n  |                              ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror[E0599]: no method named `length` found for type `{integer}` in the current scope\n --> /tmp/tmpzuw9tz1a.rs:9:15\n  |\n9 |   return hash.length();\n  |               ^^^^^^ method not found in `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let mut chars = 0;\n  let mut count = 0;\n  for i in string.iter() {\n    chars += 1;\n    if chars == 1 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for struct `String` in the current scope\n --> /tmp/tmpdl3pjrgx.rs:9:19\n  |\n9 |   for i in string.iter() {\n  |                   ^^^^ method not found in `String`\n  |\nhelp: because of the in-memory representation of `&str`, to obtain an `Iterator` over each of its codepoint use method `chars`\n  |\n9 |   for i in string.chars() {\n  |                   ~~~~~\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..string.length() {\n    let c = chars[i];\n    if (chars.find(c.to_lower()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnpog_qjx.rs:11:8\n   |\n11 |     if (chars.find(c.to_lower()) == -1) {\n   |        ^                              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (chars.find(c.to_lower()) == -1) {\n11 +     if chars.find(c.to_lower()) == -1 {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpnpog_qjx.rs:9:22\n  |\n9 |   for i in 0..string.length() {\n  |                      ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpnpog_qjx.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnpog_qjx.rs:11:37\n   |\n11 |     if (chars.find(c.to_lower()) == -1) {\n   |                                     ^^ expected enum `Option`, found integer\n   |\n   = note: expected enum `Option<char>`\n              found type `{integer}`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    if (!chars.has_at(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpypixtoup.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpypixtoup.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpypixtoup.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpypixtoup.rs:10:8\n   |\n10 |     if (!chars.has_at(c)) {\n   |        ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (!chars.has_at(c)) {\n10 +     if !chars.has_at(c) {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpypixtoup.rs:10:16\n   |\n10 |     if (!chars.has_at(c)) {\n   |                ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    if (chars.count(c) == 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpkjrxwo9q.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpkjrxwo9q.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpkjrxwo9q.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpkjrxwo9q.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkjrxwo9q.rs:10:8\n   |\n10 |     if (chars.count(c) == 1) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (chars.count(c) == 1) {\n10 +     if chars.count(c) == 1 {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpkjrxwo9q.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpkjrxwo9q.rs:10:15\n    |\n10  |     if (chars.count(c) == 1) {\n    |               ^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.find(c.toLower()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp2nlbws4o.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp2nlbws4o.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp2nlbws4o.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp2nlbws4o.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp2nlbws4o.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = HashMap<isize, isize>::new();\n  for (let i = 0; i < chars.length; i++) {\n    let ch = chars[i];\n    let count = hash.get(ch);\n    if (count == 0) {\n      hash.set(ch, 1);\n    } else {\n      hash.set(ch, count + 1);\n    }\n  }\n  return hash.size;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n --> /tmp/tmp70x_o9dm.rs:8:27\n  |\n8 |   let hash = HashMap<isize, isize>::new();\n  |                           ^ expected one of 8 possible tokens\n  |\nhelp: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n  |\n8 |   let hash = HashMap::<isize, isize>::new();\n  |                     ++\n\nerror: expected identifier, found keyword `let`\n --> /tmp/tmp70x_o9dm.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp70x_o9dm.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp70x_o9dm.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp70x_o9dm.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp70x_o9dm.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..string.length() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpnek3whnx.rs:9:22\n  |\n9 |   for i in 0..string.length() {\n  |                      ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpnek3whnx.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpnek3whnx.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = from_iter(chars).map(|c| c.to_lower()).hash_map();\n  return hash.size;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `from_iter` in this scope\n --> /tmp/tmp6qx8luh2.rs:8:14\n  |\n8 |   let hash = from_iter(chars).map(|c| c.to_lower()).hash_map();\n  |              ^^^^^^^^^ not found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::async_iter::from_iter;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    if (!chars.has_at(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpypixtoup.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpypixtoup.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpypixtoup.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpypixtoup.rs:10:8\n   |\n10 |     if (!chars.has_at(c)) {\n   |        ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (!chars.has_at(c)) {\n10 +     if !chars.has_at(c) {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpypixtoup.rs:10:16\n   |\n10 |     if (!chars.has_at(c)) {\n   |                ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = HashMap<isize, isize>();\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    let count = hash.get(c);\n    if (count == 0) {\n      hash.set(c, 1);\n    } else {\n      hash.set(c, count + 1);\n    }\n  }\n  return hash.size;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n --> /tmp/tmpv3u7426g.rs:8:27\n  |\n8 |   let hash = HashMap<isize, isize>();\n  |                           ^ expected one of 8 possible tokens\n  |\nhelp: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n  |\n8 |   let hash = HashMap::<isize, isize>();\n  |                     ++\n\nerror: expected identifier, found keyword `let`\n --> /tmp/tmpv3u7426g.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpv3u7426g.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpv3u7426g.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpv3u7426g.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpv3u7426g.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.has_at(c, i + 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpi0jrh760.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpi0jrh760.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpi0jrh760.rs:11:15\n   |\n11 |     if !chars.has_at(c, i + 1) {\n   |               ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let mut chars = 0;\n  let mut count = 0;\n  let mut seen = 0;\n  let mut seen_lower = 0;\n  let mut seen_upper = 0;\n  let mut seen_lower_upper = 0;\n  let mut seen_lower_upper_lower = 0;\n  let mut seen_lower_upper_lower_upper = 0;\n  let mut seen_lower_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper_lower_upper = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpmgmuyedy.rs:28:111\n   |\n28 |   let mut seen_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper\n   |                                                                                                               ^ help: add `;` here\n29 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmgmuyedy.rs:6:49\n  |\n6 | fn count_distinct_characters(string: String) -> isize {\n  |    -------------------------                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: &'static str = string.chars();\n  let count: usize = 0;\n  for i in 0..string.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpuqfy8v49.rs:7:29\n  |\n7 |   let chars: &'static str = string.chars();\n  |              ------------   ^^^^^^^^^^^^^^ expected `&str`, found struct `Chars`\n  |              |\n  |              expected due to this\n\nerror[E0277]: the type `str` cannot be indexed by `usize`\n  --> /tmp/tmpuqfy8v49.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^ string indices are ranges of `usize`\n   |\n   = help: the trait `SliceIndex<str>` is not implemented for `usize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<usize>` for `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuqfy8v49.rs:15:10\n   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |                                                 ----- expected `isize` because of return type\n...\n15 |   return count;\n   |          ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n15 |   return count.try_into().unwrap();\n   |               ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (!chars.includes(c.toLower())) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmptrom9sov.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmptrom9sov.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmptrom9sov.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmptrom9sov.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmptrom9sov.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = chars.map(|c| c.to_lower()).fold(0, (acc, c) => acc + 1);\n  return hash.length;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp7ctjmyly.rs:8:59\n  |\n8 |   let hash = chars.map(|c| c.to_lower()).fold(0, (acc, c) => acc + 1);\n  |                                                           ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.has_at(c, i + 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpi0jrh760.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpi0jrh760.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpi0jrh760.rs:11:15\n   |\n11 |     if !chars.has_at(c, i + 1) {\n   |               ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (!chars.includes(c.toLower())) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmptrom9sov.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmptrom9sov.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmptrom9sov.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmptrom9sov.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmptrom9sov.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.find(c.toLower()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp2nlbws4o.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp2nlbws4o.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp2nlbws4o.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp2nlbws4o.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp2nlbws4o.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Set[char] = Set.empty()\n  for c in string {\n    chars = chars.add(c)\n  }\n  return chars.size\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n --> /tmp/tmp9ip86jz6.rs:7:17\n  |\n7 |   let chars: Set[char] = Set.empty()\n  |                 ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.find(c.toLower()) == -1 && chars.find(c.toUpper()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpbfk8a8kx.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpbfk8a8kx.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpbfk8a8kx.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpbfk8a8kx.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpbfk8a8kx.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.has_at(c, i + 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpi0jrh760.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpi0jrh760.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpi0jrh760.rs:11:15\n   |\n11 |     if !chars.has_at(c, i + 1) {\n   |               ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if chars.find(c.to_lower()) == -1 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpkakhwh7v.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpkakhwh7v.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkakhwh7v.rs:11:36\n   |\n11 |     if chars.find(c.to_lower()) == -1 {\n   |                                    ^^ expected enum `Option`, found integer\n   |\n   = note: expected enum `Option<char>`\n              found type `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c of chars) {\n    if (chars.count(c) == 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwxd6pk4p.rs:9:8\n  |\n9 |   for (let c of chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpwxd6pk4p.rs:9:12\n  |\n9 |   for (let c of chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n --> /tmp/tmpwxd6pk4p.rs:9:14\n  |\n9 |   for (let c of chars) {\n  |             -^^ expected one of `)`, `,`, `@`, or `|`\n  |             |\n  |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n --> /tmp/tmpwxd6pk4p.rs:9:17\n  |\n9 |   for (let c of chars) {\n  |                -^^^^^ expected one of `)`, `,`, `@`, or `|`\n  |                |\n  |                help: missing `,`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwxd6pk4p.rs:9:23\n  |\n9 |   for (let c of chars) {\n  |                       ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwxd6pk4p.rs:14:3\n   |\n14 |   return count;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n14 |   { return count; }\n   |   +               +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = HashMap<isize, isize>();\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    let count = hash.get(c);\n    if (count == null) {\n      count = 0;\n    }\n    hash.set(c, count + 1);\n  }\n  return hash.size;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n --> /tmp/tmpfjvp6pyb.rs:8:27\n  |\n8 |   let hash = HashMap<isize, isize>();\n  |                           ^ expected one of 8 possible tokens\n  |\nhelp: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n  |\n8 |   let hash = HashMap::<isize, isize>();\n  |                     ++\n\nerror: expected identifier, found keyword `let`\n --> /tmp/tmpfjvp6pyb.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpfjvp6pyb.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpfjvp6pyb.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpfjvp6pyb.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpfjvp6pyb.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    if (!chars.has_at(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpypixtoup.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpypixtoup.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpypixtoup.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpypixtoup.rs:10:8\n   |\n10 |     if (!chars.has_at(c)) {\n   |        ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (!chars.has_at(c)) {\n10 +     if !chars.has_at(c) {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpypixtoup.rs:10:16\n   |\n10 |     if (!chars.has_at(c)) {\n   |                ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (c in chars) {\n    if (!chars.has_at(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpi84rd1b7.rs:9:10\n  |\n9 |   for (c in chars) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpi84rd1b7.rs:9:7\n  |\n9 |   for (c in chars) {\n  |       ^          ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (c in chars) {\n9 +   for c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpi84rd1b7.rs:10:8\n   |\n10 |     if (!chars.has_at(c)) {\n   |        ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (!chars.has_at(c)) {\n10 +     if !chars.has_at(c) {\n   | \n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpi84rd1b7.rs:10:16\n   |\n10 |     if (!chars.has_at(c)) {\n   |                ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (!chars.includes(c.toLower())) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmptrom9sov.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmptrom9sov.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmptrom9sov.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmptrom9sov.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmptrom9sov.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (c in chars) {\n    if (!chars.has_at(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpi84rd1b7.rs:9:10\n  |\n9 |   for (c in chars) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpi84rd1b7.rs:9:7\n  |\n9 |   for (c in chars) {\n  |       ^          ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (c in chars) {\n9 +   for c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpi84rd1b7.rs:10:8\n   |\n10 |     if (!chars.has_at(c)) {\n   |        ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (!chars.has_at(c)) {\n10 +     if !chars.has_at(c) {\n   | \n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpi84rd1b7.rs:10:16\n   |\n10 |     if (!chars.has_at(c)) {\n   |                ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (c.is_upper() && chars[i + 1].is_upper()) {\n      continue;\n    }\n    count += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpedcpmsdy.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpedcpmsdy.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpedcpmsdy.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpedcpmsdy.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpedcpmsdy.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let ch = chars[i];\n    if (!ch.is_upper() && !ch.is_lower()) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmplfgpg2hx.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmplfgpg2hx.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmplfgpg2hx.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmplfgpg2hx.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmplfgpg2hx.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if chars.index(c) == i {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpnl3c23xl.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpnl3c23xl.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `index` found for struct `Chars` in the current scope\n  --> /tmp/tmpnl3c23xl.rs:11:14\n   |\n11 |     if chars.index(c) == i {\n   |              ^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..string.length() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpnek3whnx.rs:9:22\n  |\n9 |   for i in 0..string.length() {\n  |                      ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpnek3whnx.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpnek3whnx.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Set[char] = Set.empty()\n  for c in string {\n    chars = chars.add(c)\n  }\n  return chars.size\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n --> /tmp/tmp9ip86jz6.rs:7:17\n  |\n7 |   let chars: Set[char] = Set.empty()\n  |                 ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let mut chars = 0;\n  let mut count = 0;\n  let mut found = false;\n  let mut last = 0;\n  for i in string.iter() {\n    if found {\n      chars += 1;\n      if i.to_lower() != last.to_lower() {\n        count += 1;\n      }\n      last = i;\n    } else {\n      found = true;\n      last = i;\n    }\n  }\n  chars += 1;\n  count += 1;\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for struct `String` in the current scope\n  --> /tmp/tmpomic4u2u.rs:11:19\n   |\n11 |   for i in string.iter() {\n   |                   ^^^^ method not found in `String`\n   |\nhelp: because of the in-memory representation of `&str`, to obtain an `Iterator` over each of its codepoint use method `chars`\n   |\n11 |   for i in string.chars() {\n   |                   ~~~~~\n\nerror[E0599]: no method named `to_lower` found for type `{integer}` in the current scope\n  --> /tmp/tmpomic4u2u.rs:14:31\n   |\n14 |       if i.to_lower() != last.to_lower() {\n   |                               ^^^^^^^^ method not found in `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (c in chars) {\n    count += 1 if chars.contains(c) else 0;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpo74sfsf4.rs:9:10\n  |\n9 |   for (c in chars) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpo74sfsf4.rs:9:7\n  |\n9 |   for (c in chars) {\n  |       ^          ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (c in chars) {\n9 +   for c in chars {\n  | \n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmpo74sfsf4.rs:10:16\n   |\n10 |     count += 1 if chars.contains(c) else 0;\n   |                ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Set[char] = Set.empty()\n  for c in string {\n    chars = chars.add(c)\n  }\n  return chars.size\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n --> /tmp/tmp9ip86jz6.rs:7:17\n  |\n7 |   let chars: Set[char] = Set.empty()\n  |                 ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Vec<char> = []\n  for c in string.chars() {\n    chars.push(c)\n  }\n  return chars.length()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpjz53vnuh.rs:7:28\n  |\n7 |   let chars: Vec<char> = []\n  |                            ^ help: add `;` here\n8 |   for c in string.chars() {\n  |   --- unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjz53vnuh.rs:7:26\n  |\n7 |   let chars: Vec<char> = []\n  |              ---------   ^^- help: try using a conversion method: `.to_vec()`\n  |              |           |\n  |              |           expected struct `Vec`, found array of 0 elements\n  |              expected due to this\n  |\n  = note: expected struct `Vec<char>`\n              found array `[_; 0]`\n\nerror[E0599]: no method named `length` found for struct `Vec<char>` in the current scope\n  --> /tmp/tmpjz53vnuh.rs:11:16\n   |\n11 |   return chars.length()\n   |                ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    if (!chars.has_at(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpypixtoup.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpypixtoup.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpypixtoup.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpypixtoup.rs:10:8\n   |\n10 |     if (!chars.has_at(c)) {\n   |        ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (!chars.has_at(c)) {\n10 +     if !chars.has_at(c) {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpypixtoup.rs:10:16\n   |\n10 |     if (!chars.has_at(c)) {\n   |                ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = HashMap<isize, isize>();\n  for (let i = 0; i < chars.len(); i += 1) {\n    let c = chars[i];\n    let count = hash.get(c)\n    if (count == 0) {\n      hash.set(c, 1);\n    } else {\n      hash.set(c, count + 1);\n    }\n  }\n  return hash.len();\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n --> /tmp/tmpcehouam2.rs:8:27\n  |\n8 |   let hash = HashMap<isize, isize>();\n  |                           ^ expected one of 8 possible tokens\n  |\nhelp: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n  |\n8 |   let hash = HashMap::<isize, isize>();\n  |                     ++\n\nerror: expected identifier, found keyword `let`\n --> /tmp/tmpcehouam2.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.len(); i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpcehouam2.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.len(); i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpcehouam2.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.len(); i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpcehouam2.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.len(); i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpcehouam2.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.len(); i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let ch = chars[i];\n    if !chars.contains(ch) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpw8o7xboc.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpw8o7xboc.rs:10:14\n   |\n10 |     let ch = chars[i];\n   |              ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpw8o7xboc.rs:11:15\n   |\n11 |     if !chars.contains(ch) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.has_at(c, i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpjnimubpo.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpjnimubpo.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpjnimubpo.rs:11:15\n   |\n11 |     if !chars.has_at(c, i) {\n   |               ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..string.length() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpnek3whnx.rs:9:22\n  |\n9 |   for i in 0..string.length() {\n  |                      ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpnek3whnx.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpnek3whnx.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let mut count = 0;\n  let mut seen = 0;\n  for _ in string.chars() {\n    if seen == 0 {\n      count += 1;\n    }\n    seen += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `5`', /tmp/tmpt6wz4zp4.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..string.length() {\n    let c = chars[i];\n    if (chars.find(c.to_lower()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnpog_qjx.rs:11:8\n   |\n11 |     if (chars.find(c.to_lower()) == -1) {\n   |        ^                              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (chars.find(c.to_lower()) == -1) {\n11 +     if chars.find(c.to_lower()) == -1 {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpnpog_qjx.rs:9:22\n  |\n9 |   for i in 0..string.length() {\n  |                      ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpnpog_qjx.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnpog_qjx.rs:11:37\n   |\n11 |     if (chars.find(c.to_lower()) == -1) {\n   |                                     ^^ expected enum `Option`, found integer\n   |\n   = note: expected enum `Option<char>`\n              found type `{integer}`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let ch = chars[i];\n    if !chars.contains(ch) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpw8o7xboc.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpw8o7xboc.rs:10:14\n   |\n10 |     let ch = chars[i];\n   |              ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpw8o7xboc.rs:11:15\n   |\n11 |     if !chars.contains(ch) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.has_at(c, i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpjnimubpo.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpjnimubpo.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpjnimubpo.rs:11:15\n   |\n11 |     if !chars.has_at(c, i) {\n   |               ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let mut count = 0;\n  let mut seen = 0;\n  for _ in string.iter() {\n    if seen == 0 {\n      count += 1;\n    }\n    seen += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for struct `String` in the current scope\n --> /tmp/tmpgtwpqgr2.rs:9:19\n  |\n9 |   for _ in string.iter() {\n  |                   ^^^^ method not found in `String`\n  |\nhelp: because of the in-memory representation of `&str`, to obtain an `Iterator` over each of its codepoint use method `chars`\n  |\n9 |   for _ in string.chars() {\n  |                   ~~~~~\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let mut count = 0;\n  let mut found = false;\n  for _ in string.chars() {\n    if found {\n      count += 1;\n    } else {\n      found = true;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `5`', /tmp/tmpa7r9i0sk.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    count += 1 if chars.contains(c) else 0;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpc4u1q83e.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpc4u1q83e.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpc4u1q83e.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpc4u1q83e.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmpc4u1q83e.rs:10:16\n   |\n10 |     count += 1 if chars.contains(c) else 0;\n   |                ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0308]: mismatched types\n --> /tmp/tmpc4u1q83e.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (c in chars) {\n    if (!chars.has_at(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpi84rd1b7.rs:9:10\n  |\n9 |   for (c in chars) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpi84rd1b7.rs:9:7\n  |\n9 |   for (c in chars) {\n  |       ^          ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (c in chars) {\n9 +   for c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpi84rd1b7.rs:10:8\n   |\n10 |     if (!chars.has_at(c)) {\n   |        ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (!chars.has_at(c)) {\n10 +     if !chars.has_at(c) {\n   | \n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpi84rd1b7.rs:10:16\n   |\n10 |     if (!chars.has_at(c)) {\n   |                ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c of chars) {\n    if (chars.count(c) == 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwxd6pk4p.rs:9:8\n  |\n9 |   for (let c of chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpwxd6pk4p.rs:9:12\n  |\n9 |   for (let c of chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n --> /tmp/tmpwxd6pk4p.rs:9:14\n  |\n9 |   for (let c of chars) {\n  |             -^^ expected one of `)`, `,`, `@`, or `|`\n  |             |\n  |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n --> /tmp/tmpwxd6pk4p.rs:9:17\n  |\n9 |   for (let c of chars) {\n  |                -^^^^^ expected one of `)`, `,`, `@`, or `|`\n  |                |\n  |                help: missing `,`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwxd6pk4p.rs:9:23\n  |\n9 |   for (let c of chars) {\n  |                       ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwxd6pk4p.rs:14:3\n   |\n14 |   return count;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n14 |   { return count; }\n   |   +               +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c of chars) {\n    count += 1 if c.is_upper() {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpd0cpf2p4.rs:9:8\n  |\n9 |   for (let c of chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpd0cpf2p4.rs:9:12\n  |\n9 |   for (let c of chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n --> /tmp/tmpd0cpf2p4.rs:9:14\n  |\n9 |   for (let c of chars) {\n  |             -^^ expected one of `)`, `,`, `@`, or `|`\n  |             |\n  |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n --> /tmp/tmpd0cpf2p4.rs:9:17\n  |\n9 |   for (let c of chars) {\n  |                -^^^^^ expected one of `)`, `,`, `@`, or `|`\n  |                |\n  |                help: missing `,`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpd0cpf2p4.rs:9:23\n  |\n9 |   for (let c of chars) {\n  |                       ^ help: try adding `in` here\n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmpd0cpf2p4.rs:10:16\n   |\n10 |     count += 1 if c.is_upper() {\n   |                ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpd0cpf2p4.rs:14:3\n   |\n14 |   return count;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n14 |   { return count; }\n   |   +               +\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let mut count = 0;\n  let mut seen = 0;\n  for _ in string.iter() {\n    if seen == 0 {\n      count += 1;\n    }\n    seen += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for struct `String` in the current scope\n --> /tmp/tmpgtwpqgr2.rs:9:19\n  |\n9 |   for _ in string.iter() {\n  |                   ^^^^ method not found in `String`\n  |\nhelp: because of the in-memory representation of `&str`, to obtain an `Iterator` over each of its codepoint use method `chars`\n  |\n9 |   for _ in string.chars() {\n  |                   ~~~~~\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Vec<char> = string.chars();\n  let count: usize = 0;\n  for (let i = 0; i < chars.len; i += 1) {\n    let ch = chars[i];\n    if (chars.contains(ch.to_lower())) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmphjcpezxo.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.len; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmphjcpezxo.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.len; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmphjcpezxo.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.len; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmphjcpezxo.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.len; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmphjcpezxo.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.len; i += 1) {\n  |              ^ expected expression\n\nerror[E0308]: mismatched types\n --> /tmp/tmphjcpezxo.rs:7:26\n  |\n7 |   let chars: Vec<char> = string.chars();\n  |              ---------   ^^^^^^^^^^^^^^ expected struct `Vec`, found struct `Chars`\n  |              |\n  |              expected due to this\n  |\n  = note: expected struct `Vec<char>`\n             found struct `Chars<'_>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.has_at(c, i + 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpi0jrh760.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpi0jrh760.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpi0jrh760.rs:11:15\n   |\n11 |     if !chars.has_at(c, i + 1) {\n   |               ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.len(); i += 1) {\n    let c = chars[i];\n    if (chars.find(c.to_lower()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpr6wr0k7w.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.len(); i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpr6wr0k7w.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.len(); i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpr6wr0k7w.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.len(); i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpr6wr0k7w.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.len(); i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpr6wr0k7w.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.len(); i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = HashMap<isize, isize>();\n  for (let i = 0; i < chars.length; i += 1) {\n    let ch = chars[i];\n    let count = hash.get(ch);\n    if (count == 0) {\n      hash.set(ch, 1);\n    } else {\n      hash.set(ch, count + 1);\n    }\n  }\n  return hash.size;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n --> /tmp/tmptxfp4_69.rs:8:27\n  |\n8 |   let hash = HashMap<isize, isize>();\n  |                           ^ expected one of 8 possible tokens\n  |\nhelp: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n  |\n8 |   let hash = HashMap::<isize, isize>();\n  |                     ++\n\nerror: expected identifier, found keyword `let`\n --> /tmp/tmptxfp4_69.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmptxfp4_69.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmptxfp4_69.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmptxfp4_69.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmptxfp4_69.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c.toLower()) == -1 && chars.indexOf(c.toUpper()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpm26_4t3o.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpm26_4t3o.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpm26_4t3o.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpm26_4t3o.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpm26_4t3o.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    if (!chars.has_at(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpypixtoup.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpypixtoup.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpypixtoup.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpypixtoup.rs:10:8\n   |\n10 |     if (!chars.has_at(c)) {\n   |        ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (!chars.has_at(c)) {\n10 +     if !chars.has_at(c) {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpypixtoup.rs:10:16\n   |\n10 |     if (!chars.has_at(c)) {\n   |                ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (!chars.includes(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmptb8u_p0u.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmptb8u_p0u.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmptb8u_p0u.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmptb8u_p0u.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmptb8u_p0u.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = Set.create();\n  for (c in chars) {\n    hash.add(c);\n  }\n  return hash.size;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpbyy7ixve.rs:9:10\n  |\n9 |   for (c in chars) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpbyy7ixve.rs:9:7\n  |\n9 |   for (c in chars) {\n  |       ^          ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (c in chars) {\n9 +   for c in chars {\n  | \n\nerror[E0425]: cannot find value `Set` in this scope\n --> /tmp/tmpbyy7ixve.rs:8:14\n  |\n8 |   let hash = Set.create();\n  |              ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.has_at(c, i + 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpi0jrh760.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpi0jrh760.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpi0jrh760.rs:11:15\n   |\n11 |     if !chars.has_at(c, i + 1) {\n   |               ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..string.len() {\n    let c = chars[i];\n    if !chars.has_at(c, i + 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpbiu0nksi.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpbiu0nksi.rs:11:15\n   |\n11 |     if !chars.has_at(c, i + 1) {\n   |               ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..string.len() {\n    let c = chars[i];\n    if !chars.has_at(c, i + 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpbiu0nksi.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpbiu0nksi.rs:11:15\n   |\n11 |     if !chars.has_at(c, i + 1) {\n   |               ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.find(c.toLower()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp2nlbws4o.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp2nlbws4o.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp2nlbws4o.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp2nlbws4o.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp2nlbws4o.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    let c = chars[i];\n    if (chars.index(c) == i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpyqngugmz.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpyqngugmz.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpyqngugmz.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpyqngugmz.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpyqngugmz.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = HashMap<isize, isize>();\n  for (let i = 0; i < chars.length; i++) {\n    let c = chars[i];\n    let count = hash.get(c);\n    if (count == 0) {\n      hash.set(c, 1);\n    } else {\n      hash.set(c, count + 1);\n    }\n  }\n  return hash.size;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n --> /tmp/tmpo8semcc_.rs:8:27\n  |\n8 |   let hash = HashMap<isize, isize>();\n  |                           ^ expected one of 8 possible tokens\n  |\nhelp: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n  |\n8 |   let hash = HashMap::<isize, isize>();\n  |                     ++\n\nerror: expected identifier, found keyword `let`\n --> /tmp/tmpo8semcc_.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpo8semcc_.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpo8semcc_.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpo8semcc_.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpo8semcc_.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i++) {\n    let c = chars[i];\n    if (chars.indexOf(c.toLower()) == -1 && chars.indexOf(c.toUpper()) == -1) {\n      count++;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmprr0raj1x.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmprr0raj1x.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmprr0raj1x.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmprr0raj1x.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmprr0raj1x.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let mut chars = 0;\n  let mut count = 0;\n  let mut last = 0;\n  let mut last_count = 0;\n  let mut last_char = 0;\n  let mut last_char_count = 0;\n  let mut last_char_index = 0;\n  let mut last_char_index_count = 0;\n  let mut last_char_index_index = 0;\n  let mut last_char_index_index_count = 0;\n  let mut last_char_index_index_index = 0;\n  let mut last_char_index_index_index_count = 0;\n  let mut last_char_index_index_index_index = 0;\n  let mut last_char_index_index_index_index_count = 0;\n  let mut last_char_index_index_index_index_index = 0;\n  let mut last_char_index_index_index_index_index_count = 0;\n  let mut last_char_index_index_index_index_index_index = 0;\n  let mut last_char_index_index_index_index_index_index_count = 0;\n  let mut last_char_index_index_index_index_index_index_index = 0;\n  let mut last_char_index_index_index_index_index_index_index_count = 0;\n  let mut last_char_index_index_index_index_index_index_index_index = 0;\n  let mut last_char_index_index_index_index_index_index_index_index_count = 0;\n  let mut last_char_index_index_index_index_index_index_index_index_index = 0;\n  let mut last_char_index_index_index_index_index_index_index_index_index_count = 0;\n  let mut last_char_index_index_index_index_index_index_index_index_index_index = 0;\n  let mut last_char_index_index_index_index_index_index_index_index_index_index_count = 0;\n  let mut last_char_index_index_index_index_index\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpfbk2bu6w.rs:33:50\n   |\n33 |   let mut last_char_index_index_index_index_index\n   |                                                  ^ help: add `;` here\n34 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfbk2bu6w.rs:6:49\n  |\n6 | fn count_distinct_characters(string: String) -> isize {\n  |    -------------------------                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Set[char] = Set.empty()\n  for c in string {\n    chars = chars.add(c)\n  }\n  return chars.size\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n --> /tmp/tmp9ip86jz6.rs:7:17\n  |\n7 |   let chars: Set[char] = Set.empty()\n  |                 ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let mut count = 0;\n  for _ in string.chars() {\n    count += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `13`,\n right: `5`', /tmp/tmpzi2vigj2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c of chars) {\n    if (chars.count(c) == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpsv5kz0fc.rs:9:8\n  |\n9 |   for (let c of chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpsv5kz0fc.rs:9:12\n  |\n9 |   for (let c of chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n --> /tmp/tmpsv5kz0fc.rs:9:14\n  |\n9 |   for (let c of chars) {\n  |             -^^ expected one of `)`, `,`, `@`, or `|`\n  |             |\n  |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n --> /tmp/tmpsv5kz0fc.rs:9:17\n  |\n9 |   for (let c of chars) {\n  |                -^^^^^ expected one of `)`, `,`, `@`, or `|`\n  |                |\n  |                help: missing `,`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpsv5kz0fc.rs:9:23\n  |\n9 |   for (let c of chars) {\n  |                       ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpsv5kz0fc.rs:14:3\n   |\n14 |   return count;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n14 |   { return count; }\n   |   +               +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Set[char] = Set.empty()\n  for c in string {\n    chars = chars.add(c)\n  }\n  return chars.size\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n --> /tmp/tmp9ip86jz6.rs:7:17\n  |\n7 |   let chars: Set[char] = Set.empty()\n  |                 ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c.toLower()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpowl7padg.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpowl7padg.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpowl7padg.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpowl7padg.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpowl7padg.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if chars.find(c.to_lower()) == -1 && chars.find(c.to_upper()) == -1 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpqsd42urf.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpqsd42urf.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqsd42urf.rs:11:36\n   |\n11 |     if chars.find(c.to_lower()) == -1 && chars.find(c.to_upper()) == -1 {\n   |                                    ^^ expected enum `Option`, found integer\n   |\n   = note: expected enum `Option<char>`\n              found type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqsd42urf.rs:11:70\n   |\n11 |     if chars.find(c.to_lower()) == -1 && chars.find(c.to_upper()) == -1 {\n   |                                                                      ^^ expected enum `Option`, found integer\n   |\n   = note: expected enum `Option<char>`\n              found type `{integer}`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let ch = chars[i];\n    if !ch.is_upper() {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpmnt_i8x9.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpmnt_i8x9.rs:10:14\n   |\n10 |     let ch = chars[i];\n   |              ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Vec<char> = string.chars();\n  let count: usize = 0;\n  for i in 0..chars.len() {\n    let ch = chars[i];\n    if !chars.contains(ch) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpq5pog3jz.rs:7:26\n  |\n7 |   let chars: Vec<char> = string.chars();\n  |              ---------   ^^^^^^^^^^^^^^ expected struct `Vec`, found struct `Chars`\n  |              |\n  |              expected due to this\n  |\n  = note: expected struct `Vec<char>`\n             found struct `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq5pog3jz.rs:11:24\n   |\n11 |     if !chars.contains(ch) {\n   |                        ^^\n   |                        |\n   |                        expected `&char`, found `char`\n   |                        help: consider borrowing here: `&ch`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq5pog3jz.rs:15:10\n   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |                                                 ----- expected `isize` because of return type\n...\n15 |   return count;\n   |          ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n15 |   return count.try_into().unwrap();\n   |               ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (c in chars) {\n    if (!chars.has_at(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpi84rd1b7.rs:9:10\n  |\n9 |   for (c in chars) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpi84rd1b7.rs:9:7\n  |\n9 |   for (c in chars) {\n  |       ^          ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (c in chars) {\n9 +   for c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpi84rd1b7.rs:10:8\n   |\n10 |     if (!chars.has_at(c)) {\n   |        ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (!chars.has_at(c)) {\n10 +     if !chars.has_at(c) {\n   | \n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpi84rd1b7.rs:10:16\n   |\n10 |     if (!chars.has_at(c)) {\n   |                ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let mut count = 0;\n  for _ in string.iter() {\n    count += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for struct `String` in the current scope\n --> /tmp/tmp9d8xykq1.rs:8:19\n  |\n8 |   for _ in string.iter() {\n  |                   ^^^^ method not found in `String`\n  |\nhelp: because of the in-memory representation of `&str`, to obtain an `Iterator` over each of its codepoint use method `chars`\n  |\n8 |   for _ in string.chars() {\n  |                   ~~~~~\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let mut count = 0;\n  let mut seen = 0;\n  let mut seen_lower = 0;\n  let mut seen_upper = 0;\n  let mut seen_lower_lower = 0;\n  let mut seen_upper_lower = 0;\n  let mut seen_lower_upper = 0;\n  let mut seen_upper_upper = 0;\n  let mut seen_lower_upper_lower = 0;\n  let mut seen_upper_lower_lower = 0;\n  let mut seen_lower_upper_upper = 0;\n  let mut seen_upper_lower_upper = 0;\n  let mut seen_lower_upper_upper_lower = 0;\n  let mut seen_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_upper_lower = 0;\n  let mut seen_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_upper_lower = 0;\n  let mut seen_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_upper_lower = 0;\n  let mut seen_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_upper_lower = 0;\n  let mut seen_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_upper_lower = 0;\n  let mut seen_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_upper_lower = 0;\n  let mut seen_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_upper_lower = 0;\n  let mut seen_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_upper_lower = 0;\n  let mut seen_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_upper_lower = 0;\n  let mut seen_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_upper_lower = 0;\n  let mut seen_upper_lower_upper_lower = 0;\n  let mut seen_lower_upper_upper_lower = 0;\n  let mut seen\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpmrlyaota.rs:42:15\n   |\n42 |   let mut seen\n   |               ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmrlyaota.rs:6:49\n  |\n6 | fn count_distinct_characters(string: String) -> isize {\n  |    -------------------------                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let ch = chars[i];\n    if (chars.indexOf(ch.toLower()) == -1 && chars.indexOf(ch.toUpper()) == -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp2ag76d6b.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp2ag76d6b.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp2ag76d6b.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp2ag76d6b.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp2ag76d6b.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: &'static str = string.chars();\n  let count: usize = 0;\n  for i in 0..string.length() {\n    if !chars.contains(string[i].to_lower()) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpjhyzhcli.rs:7:29\n  |\n7 |   let chars: &'static str = string.chars();\n  |              ------------   ^^^^^^^^^^^^^^ expected `&str`, found struct `Chars`\n  |              |\n  |              expected due to this\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpjhyzhcli.rs:9:22\n  |\n9 |   for i in 0..string.length() {\n  |                      ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpjhyzhcli.rs:10:24\n   |\n10 |     if !chars.contains(string[i].to_lower()) {\n   |                        ^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjhyzhcli.rs:14:10\n   |\n6  | fn count_distinct_characters(string: String) -> isize {\n   |                                                 ----- expected `isize` because of return type\n...\n14 |   return count;\n   |          ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n14 |   return count.try_into().unwrap();\n   |               ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    if (!chars.has_at(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpypixtoup.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpypixtoup.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpypixtoup.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpypixtoup.rs:10:8\n   |\n10 |     if (!chars.has_at(c)) {\n   |        ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (!chars.has_at(c)) {\n10 +     if !chars.has_at(c) {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpypixtoup.rs:10:16\n   |\n10 |     if (!chars.has_at(c)) {\n   |                ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = from(chars).map(|c| c.to_lower()).hash_map();\n  return from(hash).keys().length;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `from` in this scope\n --> /tmp/tmplh2rlfot.rs:8:14\n  |\n8 |   let hash = from(chars).map(|c| c.to_lower()).hash_map();\n  |              ^^^^ not found in this scope\n\nerror[E0425]: cannot find function `from` in this scope\n --> /tmp/tmplh2rlfot.rs:9:10\n  |\n9 |   return from(hash).keys().length;\n  |          ^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = from(chars).fold(0, (acc, char) => acc + char.to_lower());\n  return hash.length();\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp2kc4qf5_.rs:8:46\n  |\n8 |   let hash = from(chars).fold(0, (acc, char) => acc + char.to_lower());\n  |                                              ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = chars.map(|c| c.to_lower()).fold(0, (acc, c) => acc + 1);\n  return hash.length;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp7ctjmyly.rs:8:59\n  |\n8 |   let hash = chars.map(|c| c.to_lower()).fold(0, (acc, c) => acc + 1);\n  |                                                           ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c in chars) {\n    if (!chars.has_at(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpypixtoup.rs:9:8\n  |\n9 |   for (let c in chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpypixtoup.rs:9:12\n  |\n9 |   for (let c in chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpypixtoup.rs:9:14\n  |\n9 |   for (let c in chars) {\n  |              ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^              ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n9 -   for (let c in chars) {\n9 +   for let c in chars {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpypixtoup.rs:10:8\n   |\n10 |     if (!chars.has_at(c)) {\n   |        ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (!chars.has_at(c)) {\n10 +     if !chars.has_at(c) {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpypixtoup.rs:9:7\n  |\n9 |   for (let c in chars) {\n  |       ^^^^^^    ----- this expression has type `Option<char>`\n  |       |\n  |       expected `char`, found tuple\n  |\n  = note: expected type `char`\n            found tuple `(_, _)`\n\nerror[E0599]: no method named `has_at` found for struct `Chars` in the current scope\n  --> /tmp/tmpypixtoup.rs:10:16\n   |\n10 |     if (!chars.has_at(c)) {\n   |                ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let c of chars) {\n    if (!chars.contains(c)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpaq5c0saz.rs:9:8\n  |\n9 |   for (let c of chars) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpaq5c0saz.rs:9:12\n  |\n9 |   for (let c of chars) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n --> /tmp/tmpaq5c0saz.rs:9:14\n  |\n9 |   for (let c of chars) {\n  |             -^^ expected one of `)`, `,`, `@`, or `|`\n  |             |\n  |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n --> /tmp/tmpaq5c0saz.rs:9:17\n  |\n9 |   for (let c of chars) {\n  |                -^^^^^ expected one of `)`, `,`, `@`, or `|`\n  |                |\n  |                help: missing `,`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpaq5c0saz.rs:9:23\n  |\n9 |   for (let c of chars) {\n  |                       ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpaq5c0saz.rs:14:3\n   |\n14 |   return count;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n14 |   { return count; }\n   |   +               +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for (let i = 0; i < chars.length; i += 1) {\n    let c = chars[i];\n    if (chars.indexOf(c) === i) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpy6rxki7l.rs:9:8\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpy6rxki7l.rs:9:12\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpy6rxki7l.rs:9:13\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpy6rxki7l.rs:9:14\n  |\n9 |   for (let i = 0; i < chars.length; i += 1) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars: Set[char] = Set.empty()\n  for c in string {\n    chars = chars.add(c)\n  }\n  return chars.size\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n --> /tmp/tmp9ip86jz6.rs:7:17\n  |\n7 |   let chars: Set[char] = Set.empty()\n  |                 ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let hash = from(chars).map(|c| c.to_lower()).fold(0, |acc, c| acc + 1);\n  return hash;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `from` in this scope\n --> /tmp/tmp4sg4v242.rs:8:14\n  |\n8 |   let hash = from(chars).map(|c| c.to_lower()).fold(0, |acc, c| acc + 1);\n  |              ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(String::from(\"xyzXYZ\"))\n/// 3\n/// >>> count_distinct_characters(String::from(\"Jerry\"))\n/// 4\nfn count_distinct_characters(string: String) -> isize {\n  let chars = string.chars();\n  let count = 0;\n  for i in 0..chars.len() {\n    let c = chars[i];\n    if !chars.contains(c) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n",
      "timestamp": 1664292727,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n --> /tmp/tmpfoyuj21d.rs:9:21\n  |\n9 |   for i in 0..chars.len() {\n  |                     ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpfoyuj21d.rs:10:13\n   |\n10 |     let c = chars[i];\n   |             ^^^^^^^^\n\nerror[E0599]: no method named `contains` found for struct `Chars` in the current scope\n  --> /tmp/tmpfoyuj21d.rs:11:15\n   |\n11 |     if !chars.contains(c) {\n   |               ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}