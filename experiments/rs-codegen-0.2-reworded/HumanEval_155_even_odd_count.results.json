{
  "name": "HumanEval_155_even_odd_count",
  "language": "rs",
  "prompt": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n",
  "tests": "}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even_count = 0;\n    let odd_count = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n        n /= 2;\n    }\n    return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpsokq1pnw.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsokq1pnw.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmpsokq1pnw.rs:13:13\n   |\n8  |     let even_count = 0;\n   |         ----------\n   |         |\n   |         first assignment to `even_count`\n   |         help: consider making this binding mutable: `mut even_count`\n...\n13 |             even_count += 1;\n   |             ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmpsokq1pnw.rs:15:13\n   |\n9  |     let odd_count = 0;\n   |         ---------\n   |         |\n   |         first assignment to `odd_count`\n   |         help: consider making this binding mutable: `mut odd_count`\n...\n15 |             odd_count += 1;\n   |             ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmpsokq1pnw.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp9b03gha1.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9b03gha1.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp9b03gha1.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp9b03gha1.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp9b03gha1.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpgfqtdasx.rs:10:9\n   |\n10 |   while (num > 0) {\n   |         ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -   while (num > 0) {\n10 +   while num > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgfqtdasx.rs:11:8\n   |\n11 |     if (num % 2 == 0) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n11 -     if (num % 2 == 0) {\n11 +     if num % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpgfqtdasx.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpgfqtdasx.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpgfqtdasx.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even_count = 0;\n    let odd_count = 0;\n    let curr_num = num;\n    while (curr_num > 0) {\n        let digit = curr_num % 10;\n        if (digit % 2 == 0) {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n        curr_num /= 10;\n    }\n    return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmprwzo4lhj.rs:11:11\n   |\n11 |     while (curr_num > 0) {\n   |           ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (curr_num > 0) {\n11 +     while curr_num > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprwzo4lhj.rs:13:12\n   |\n13 |         if (digit % 2 == 0) {\n   |            ^              ^\n   |\nhelp: remove these parentheses\n   |\n13 -         if (digit % 2 == 0) {\n13 +         if digit % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmprwzo4lhj.rs:14:13\n   |\n8  |     let even_count = 0;\n   |         ----------\n   |         |\n   |         first assignment to `even_count`\n   |         help: consider making this binding mutable: `mut even_count`\n...\n14 |             even_count += 1;\n   |             ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmprwzo4lhj.rs:16:13\n   |\n9  |     let odd_count = 0;\n   |         ---------\n   |         |\n   |         first assignment to `odd_count`\n   |         help: consider making this binding mutable: `mut odd_count`\n...\n16 |             odd_count += 1;\n   |             ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `curr_num`\n  --> /tmp/tmprwzo4lhj.rs:18:9\n   |\n10 |     let curr_num = num;\n   |         --------\n   |         |\n   |         first assignment to `curr_num`\n   |         help: consider making this binding mutable: `mut curr_num`\n...\n18 |         curr_num /= 10;\n   |         ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    for i in num.iter().next() {\n        if i % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmp8dfcx8em.rs:10:18\n   |\n10 |     for i in num.iter().next() {\n   |                  ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp9b03gha1.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9b03gha1.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp9b03gha1.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp9b03gha1.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp9b03gha1.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even_count = 0;\n  let odd_count = 0;\n  for i in num {\n    if i % 2 == 0 {\n      even_count += 1;\n    } else {\n      odd_count += 1;\n    }\n  }\n  return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmpw4zk1u9h.rs:10:12\n   |\n10 |   for i in num {\n   |            ^^^ `isize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `isize`\n   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n   = note: required because of the requirements on the impl of `IntoIterator` for `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even_count = 0;\n    let odd_count = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n        num /= 2;\n    }\n    return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmp4bx7f85h.rs:12:13\n   |\n8  |     let even_count = 0;\n   |         ----------\n   |         |\n   |         first assignment to `even_count`\n   |         help: consider making this binding mutable: `mut even_count`\n...\n12 |             even_count += 1;\n   |             ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmp4bx7f85h.rs:14:13\n   |\n9  |     let odd_count = 0;\n   |         ---------\n   |         |\n   |         first assignment to `odd_count`\n   |         help: consider making this binding mutable: `mut odd_count`\n...\n14 |             odd_count += 1;\n   |             ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4bx7f85h.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().next() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpe_2dn01r.rs:10:16\n   |\n10 |   for i in num.iter().next() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even_count = 0;\n    let odd_count = 0;\n    let num_str = num.to_string();\n    for i in num_str.iter() {\n        if i == '0' {\n            even_count += 1;\n        } else if i == '1' {\n            odd_count += 1;\n        }\n    }\n    return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for struct `String` in the current scope\n  --> /tmp/tmpap58n73x.rs:11:22\n   |\n11 |     for i in num_str.iter() {\n   |                      ^^^^ method not found in `String`\n   |\nhelp: because of the in-memory representation of `&str`, to obtain an `Iterator` over each of its codepoint use method `chars`\n   |\n11 |     for i in num_str.chars() {\n   |                      ~~~~~\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp9b03gha1.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9b03gha1.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp9b03gha1.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp9b03gha1.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp9b03gha1.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpgfqtdasx.rs:10:9\n   |\n10 |   while (num > 0) {\n   |         ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -   while (num > 0) {\n10 +   while num > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgfqtdasx.rs:11:8\n   |\n11 |     if (num % 2 == 0) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n11 -     if (num % 2 == 0) {\n11 +     if num % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpgfqtdasx.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpgfqtdasx.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpgfqtdasx.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp9b03gha1.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9b03gha1.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp9b03gha1.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp9b03gha1.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp9b03gha1.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even_count = 0;\n    let odd_count = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n        num /= 2;\n    }\n    return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmp4bx7f85h.rs:12:13\n   |\n8  |     let even_count = 0;\n   |         ----------\n   |         |\n   |         first assignment to `even_count`\n   |         help: consider making this binding mutable: `mut even_count`\n...\n12 |             even_count += 1;\n   |             ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmp4bx7f85h.rs:14:13\n   |\n9  |     let odd_count = 0;\n   |         ---------\n   |         |\n   |         first assignment to `odd_count`\n   |         help: consider making this binding mutable: `mut odd_count`\n...\n14 |             odd_count += 1;\n   |             ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp4bx7f85h.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().rev() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpru2jcil4.rs:10:16\n   |\n10 |   for i in num.iter().rev() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even_count = 0;\n    let odd_count = 0;\n    for i in num.iter().next() {\n        if i % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmppoos_nkd.rs:10:18\n   |\n10 |     for i in num.iter().next() {\n   |                  ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().rev() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpru2jcil4.rs:10:16\n   |\n10 |   for i in num.iter().rev() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().rev() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpru2jcil4.rs:10:16\n   |\n10 |   for i in num.iter().rev() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpgfqtdasx.rs:10:9\n   |\n10 |   while (num > 0) {\n   |         ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -   while (num > 0) {\n10 +   while num > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgfqtdasx.rs:11:8\n   |\n11 |     if (num % 2 == 0) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n11 -     if (num % 2 == 0) {\n11 +     if num % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpgfqtdasx.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpgfqtdasx.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpgfqtdasx.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp9b03gha1.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9b03gha1.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp9b03gha1.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp9b03gha1.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp9b03gha1.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even_count = 0;\n  let odd_count = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even_count += 1;\n    } else {\n      odd_count += 1;\n    }\n    n /= 2;\n  }\n  return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpq7eflz_h.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpq7eflz_h.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmpq7eflz_h.rs:13:7\n   |\n8  |   let even_count = 0;\n   |       ----------\n   |       |\n   |       first assignment to `even_count`\n   |       help: consider making this binding mutable: `mut even_count`\n...\n13 |       even_count += 1;\n   |       ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmpq7eflz_h.rs:15:7\n   |\n9  |   let odd_count = 0;\n   |       ---------\n   |       |\n   |       first assignment to `odd_count`\n   |       help: consider making this binding mutable: `mut odd_count`\n...\n15 |       odd_count += 1;\n   |       ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmpq7eflz_h.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even_count = 0;\n  let odd_count = 0;\n  let curr = num;\n  while (curr > 0) {\n    if (curr % 2 == 0) {\n      even_count += 1;\n    } else {\n      odd_count += 1;\n    }\n    curr /= 10;\n  }\n  return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpbs9lo0_e.rs:11:9\n   |\n11 |   while (curr > 0) {\n   |         ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (curr > 0) {\n11 +   while curr > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbs9lo0_e.rs:12:8\n   |\n12 |     if (curr % 2 == 0) {\n   |        ^             ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (curr % 2 == 0) {\n12 +     if curr % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmpbs9lo0_e.rs:13:7\n   |\n8  |   let even_count = 0;\n   |       ----------\n   |       |\n   |       first assignment to `even_count`\n   |       help: consider making this binding mutable: `mut even_count`\n...\n13 |       even_count += 1;\n   |       ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmpbs9lo0_e.rs:15:7\n   |\n9  |   let odd_count = 0;\n   |       ---------\n   |       |\n   |       first assignment to `odd_count`\n   |       help: consider making this binding mutable: `mut odd_count`\n...\n15 |       odd_count += 1;\n   |       ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `curr`\n  --> /tmp/tmpbs9lo0_e.rs:17:5\n   |\n10 |   let curr = num;\n   |       ----\n   |       |\n   |       first assignment to `curr`\n   |       help: consider making this binding mutable: `mut curr`\n...\n17 |     curr /= 10;\n   |     ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().rev() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpru2jcil4.rs:10:16\n   |\n10 |   for i in num.iter().rev() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp9b03gha1.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9b03gha1.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp9b03gha1.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp9b03gha1.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp9b03gha1.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while n > 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmppj03z9it.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmppj03z9it.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmppj03z9it.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even_count = 0;\n  let odd_count = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even_count += 1;\n    } else {\n      odd_count += 1;\n    }\n    num /= 2;\n  }\n  return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmpnwa9fwwd.rs:12:7\n   |\n8  |   let even_count = 0;\n   |       ----------\n   |       |\n   |       first assignment to `even_count`\n   |       help: consider making this binding mutable: `mut even_count`\n...\n12 |       even_count += 1;\n   |       ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmpnwa9fwwd.rs:14:7\n   |\n9  |   let odd_count = 0;\n   |       ---------\n   |       |\n   |       first assignment to `odd_count`\n   |       help: consider making this binding mutable: `mut odd_count`\n...\n14 |       odd_count += 1;\n   |       ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpnwa9fwwd.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    for i in num.iter().next() {\n        if i % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmp8dfcx8em.rs:10:18\n   |\n10 |     for i in num.iter().next() {\n   |                  ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpgfqtdasx.rs:10:9\n   |\n10 |   while (num > 0) {\n   |         ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -   while (num > 0) {\n10 +   while num > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgfqtdasx.rs:11:8\n   |\n11 |     if (num % 2 == 0) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n11 -     if (num % 2 == 0) {\n11 +     if num % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpgfqtdasx.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpgfqtdasx.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpgfqtdasx.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even_count = 0;\n  let odd_count = 0;\n  let curr_num = num;\n  while curr_num > 0 {\n    if curr_num % 2 == 0 {\n      even_count += 1;\n    } else {\n      odd_count += 1;\n    }\n    curr_num /= 10;\n  }\n  return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmpoxrb2hk5.rs:13:7\n   |\n8  |   let even_count = 0;\n   |       ----------\n   |       |\n   |       first assignment to `even_count`\n   |       help: consider making this binding mutable: `mut even_count`\n...\n13 |       even_count += 1;\n   |       ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmpoxrb2hk5.rs:15:7\n   |\n9  |   let odd_count = 0;\n   |       ---------\n   |       |\n   |       first assignment to `odd_count`\n   |       help: consider making this binding mutable: `mut odd_count`\n...\n15 |       odd_count += 1;\n   |       ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `curr_num`\n  --> /tmp/tmpoxrb2hk5.rs:17:5\n   |\n10 |   let curr_num = num;\n   |       --------\n   |       |\n   |       first assignment to `curr_num`\n   |       help: consider making this binding mutable: `mut curr_num`\n...\n17 |     curr_num /= 10;\n   |     ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even_count = 0;\n    let odd_count = 0;\n    let curr_num = num;\n    while curr_num > 0 {\n        if curr_num % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n        curr_num /= 10;\n    }\n    return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmp3nhprku5.rs:13:13\n   |\n8  |     let even_count = 0;\n   |         ----------\n   |         |\n   |         first assignment to `even_count`\n   |         help: consider making this binding mutable: `mut even_count`\n...\n13 |             even_count += 1;\n   |             ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmp3nhprku5.rs:15:13\n   |\n9  |     let odd_count = 0;\n   |         ---------\n   |         |\n   |         first assignment to `odd_count`\n   |         help: consider making this binding mutable: `mut odd_count`\n...\n15 |             odd_count += 1;\n   |             ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `curr_num`\n  --> /tmp/tmp3nhprku5.rs:17:9\n   |\n10 |     let curr_num = num;\n   |         --------\n   |         |\n   |         first assignment to `curr_num`\n   |         help: consider making this binding mutable: `mut curr_num`\n...\n17 |         curr_num /= 10;\n   |         ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().rev() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpru2jcil4.rs:10:16\n   |\n10 |   for i in num.iter().rev() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().rev() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpru2jcil4.rs:10:16\n   |\n10 |   for i in num.iter().rev() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    for i in num.iter().next() {\n        if i % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmp8dfcx8em.rs:10:18\n   |\n10 |     for i in num.iter().next() {\n   |                  ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().rev() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpru2jcil4.rs:10:16\n   |\n10 |   for i in num.iter().rev() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even_count = 0;\n  let odd_count = 0;\n  let num_str = String(num);\n  for i in num_str.iter() {\n    if i == '0' {\n      even_count += 1;\n    } else if i == '1' {\n      odd_count += 1;\n    }\n  }\n  return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0423]: expected function, tuple struct or tuple variant, found struct `String`\n   --> /tmp/tmpqrg8bf8i.rs:10:17\n    |\n10  |     let num_str = String(num);\n    |                   ^^^^^^^^^^^ help: use struct literal syntax instead: `String { vec: val }`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even_count = 0;\n  let odd_count = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even_count += 1;\n    } else {\n      odd_count += 1;\n    }\n    num /= 2;\n  }\n  return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmpnwa9fwwd.rs:12:7\n   |\n8  |   let even_count = 0;\n   |       ----------\n   |       |\n   |       first assignment to `even_count`\n   |       help: consider making this binding mutable: `mut even_count`\n...\n12 |       even_count += 1;\n   |       ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmpnwa9fwwd.rs:14:7\n   |\n9  |   let odd_count = 0;\n   |       ---------\n   |       |\n   |       first assignment to `odd_count`\n   |       help: consider making this binding mutable: `mut odd_count`\n...\n14 |       odd_count += 1;\n   |       ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpnwa9fwwd.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp9b03gha1.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9b03gha1.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp9b03gha1.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp9b03gha1.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp9b03gha1.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().rev() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpru2jcil4.rs:10:16\n   |\n10 |   for i in num.iter().rev() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even_count = 0;\n  let odd_count = 0;\n  let curr_digit = num % 10;\n  while (num > 0) {\n    if (curr_digit % 2 == 0) {\n      even_count += 1;\n    } else {\n      odd_count += 1;\n    }\n    curr_digit = num % 10;\n    num /= 10;\n  }\n  return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp5hwfa74q.rs:11:9\n   |\n11 |   while (num > 0) {\n   |         ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (num > 0) {\n11 +   while num > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5hwfa74q.rs:12:8\n   |\n12 |     if (curr_digit % 2 == 0) {\n   |        ^                   ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (curr_digit % 2 == 0) {\n12 +     if curr_digit % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmp5hwfa74q.rs:13:7\n   |\n8  |   let even_count = 0;\n   |       ----------\n   |       |\n   |       first assignment to `even_count`\n   |       help: consider making this binding mutable: `mut even_count`\n...\n13 |       even_count += 1;\n   |       ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmp5hwfa74q.rs:15:7\n   |\n9  |   let odd_count = 0;\n   |       ---------\n   |       |\n   |       first assignment to `odd_count`\n   |       help: consider making this binding mutable: `mut odd_count`\n...\n15 |       odd_count += 1;\n   |       ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `curr_digit`\n  --> /tmp/tmp5hwfa74q.rs:17:5\n   |\n10 |   let curr_digit = num % 10;\n   |       ----------\n   |       |\n   |       first assignment to `curr_digit`\n   |       help: consider making this binding mutable: `mut curr_digit`\n...\n17 |     curr_digit = num % 10;\n   |     ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp5hwfa74q.rs:18:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n18 |     num /= 10;\n   |     ^^^^^^^^^ cannot assign to immutable argument\n\nerror: abo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp9b03gha1.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9b03gha1.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp9b03gha1.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp9b03gha1.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp9b03gha1.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even_count = 0;\n    let odd_count = 0;\n    let curr_num = num;\n    while curr_num > 0 {\n        if curr_num % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n        curr_num /= 10;\n    }\n    return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmp3nhprku5.rs:13:13\n   |\n8  |     let even_count = 0;\n   |         ----------\n   |         |\n   |         first assignment to `even_count`\n   |         help: consider making this binding mutable: `mut even_count`\n...\n13 |             even_count += 1;\n   |             ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmp3nhprku5.rs:15:13\n   |\n9  |     let odd_count = 0;\n   |         ---------\n   |         |\n   |         first assignment to `odd_count`\n   |         help: consider making this binding mutable: `mut odd_count`\n...\n15 |             odd_count += 1;\n   |             ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `curr_num`\n  --> /tmp/tmp3nhprku5.rs:17:9\n   |\n10 |     let curr_num = num;\n   |         --------\n   |         |\n   |         first assignment to `curr_num`\n   |         help: consider making this binding mutable: `mut curr_num`\n...\n17 |         curr_num /= 10;\n   |         ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp9b03gha1.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9b03gha1.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp9b03gha1.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp9b03gha1.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp9b03gha1.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().rev() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpru2jcil4.rs:10:16\n   |\n10 |   for i in num.iter().rev() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().next() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpe_2dn01r.rs:10:16\n   |\n10 |   for i in num.iter().next() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    for i in num.iter().next() {\n        if i % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmp8dfcx8em.rs:10:18\n   |\n10 |     for i in num.iter().next() {\n   |                  ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().next() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpe_2dn01r.rs:10:16\n   |\n10 |   for i in num.iter().next() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().next() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpe_2dn01r.rs:10:16\n   |\n10 |   for i in num.iter().next() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpgfqtdasx.rs:10:9\n   |\n10 |   while (num > 0) {\n   |         ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -   while (num > 0) {\n10 +   while num > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgfqtdasx.rs:11:8\n   |\n11 |     if (num % 2 == 0) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n11 -     if (num % 2 == 0) {\n11 +     if num % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpgfqtdasx.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpgfqtdasx.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpgfqtdasx.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().next() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpe_2dn01r.rs:10:16\n   |\n10 |   for i in num.iter().next() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even_count = 0;\n  let odd_count = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even_count += 1;\n    } else {\n      odd_count += 1;\n    }\n    n /= 2;\n  }\n  return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpq7eflz_h.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpq7eflz_h.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmpq7eflz_h.rs:13:7\n   |\n8  |   let even_count = 0;\n   |       ----------\n   |       |\n   |       first assignment to `even_count`\n   |       help: consider making this binding mutable: `mut even_count`\n...\n13 |       even_count += 1;\n   |       ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmpq7eflz_h.rs:15:7\n   |\n9  |   let odd_count = 0;\n   |       ---------\n   |       |\n   |       first assignment to `odd_count`\n   |       help: consider making this binding mutable: `mut odd_count`\n...\n15 |       odd_count += 1;\n   |       ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmpq7eflz_h.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even_count = 0;\n  let odd_count = 0;\n  let curr_num = num;\n  while (curr_num > 0) {\n    if (curr_num % 2 == 0) {\n      even_count += 1;\n    } else {\n      odd_count += 1;\n    }\n    curr_num /= 2;\n  }\n  return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp4j5jdy77.rs:11:9\n   |\n11 |   while (curr_num > 0) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (curr_num > 0) {\n11 +   while curr_num > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4j5jdy77.rs:12:8\n   |\n12 |     if (curr_num % 2 == 0) {\n   |        ^                 ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (curr_num % 2 == 0) {\n12 +     if curr_num % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmp4j5jdy77.rs:13:7\n   |\n8  |   let even_count = 0;\n   |       ----------\n   |       |\n   |       first assignment to `even_count`\n   |       help: consider making this binding mutable: `mut even_count`\n...\n13 |       even_count += 1;\n   |       ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmp4j5jdy77.rs:15:7\n   |\n9  |   let odd_count = 0;\n   |       ---------\n   |       |\n   |       first assignment to `odd_count`\n   |       help: consider making this binding mutable: `mut odd_count`\n...\n15 |       odd_count += 1;\n   |       ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `curr_num`\n  --> /tmp/tmp4j5jdy77.rs:17:5\n   |\n10 |   let curr_num = num;\n   |       --------\n   |       |\n   |       first assignment to `curr_num`\n   |       help: consider making this binding mutable: `mut curr_num`\n...\n17 |     curr_num /= 2;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().rev() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpru2jcil4.rs:10:16\n   |\n10 |   for i in num.iter().rev() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  for i in num.iter().next() {\n    if i % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpe_2dn01r.rs:10:16\n   |\n10 |   for i in num.iter().next() {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpgfqtdasx.rs:10:9\n   |\n10 |   while (num > 0) {\n   |         ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -   while (num > 0) {\n10 +   while num > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgfqtdasx.rs:11:8\n   |\n11 |     if (num % 2 == 0) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n11 -     if (num % 2 == 0) {\n11 +     if num % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpgfqtdasx.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpgfqtdasx.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpgfqtdasx.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    for i in num.iter().next() {\n        if i % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for type `isize` in the current scope\n  --> /tmp/tmp8dfcx8em.rs:10:18\n   |\n10 |     for i in num.iter().next() {\n   |                  ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let curr = num;\n  while (curr > 0) {\n    if (curr % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    curr /= 10;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmparx4sebi.rs:11:9\n   |\n11 |   while (curr > 0) {\n   |         ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (curr > 0) {\n11 +   while curr > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmparx4sebi.rs:12:8\n   |\n12 |     if (curr % 2 == 0) {\n   |        ^             ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (curr % 2 == 0) {\n12 +     if curr % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmparx4sebi.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmparx4sebi.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `curr`\n  --> /tmp/tmparx4sebi.rs:17:5\n   |\n10 |   let curr = num;\n   |       ----\n   |       |\n   |       first assignment to `curr`\n   |       help: consider making this binding mutable: `mut curr`\n...\n17 |     curr /= 10;\n   |     ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp9b03gha1.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9b03gha1.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp9b03gha1.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp9b03gha1.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp9b03gha1.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp9b03gha1.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9b03gha1.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp9b03gha1.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp9b03gha1.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp9b03gha1.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even_count = 0;\n  let odd_count = 0;\n  let num_str = num.to_string();\n  for (let i = 0; i < num_str.length; i++) {\n    if (num_str[i] % 2 == 0) {\n      even_count += 1;\n    } else {\n      odd_count += 1;\n    }\n  }\n  return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpe0qy9plu.rs:11:8\n   |\n11 |   for (let i = 0; i < num_str.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpe0qy9plu.rs:11:12\n   |\n11 |   for (let i = 0; i < num_str.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpe0qy9plu.rs:11:14\n   |\n11 |   for (let i = 0; i < num_str.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpe0qy9plu.rs:11:13\n   |\n11 |   for (let i = 0; i < num_str.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpe0qy9plu.rs:11:14\n   |\n11 |   for (let i = 0; i < num_str.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    while num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp8h8p_u42.rs:12:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n12 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp8h8p_u42.rs:14:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n14 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp8h8p_u42.rs:16:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  let n = num;\n  while (n > 0) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    n /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp_vwehe8y.rs:11:9\n   |\n11 |   while (n > 0) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (n > 0) {\n11 +   while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_vwehe8y.rs:12:8\n   |\n12 |     if (n % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (n % 2 == 0) {\n12 +     if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp_vwehe8y.rs:13:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n13 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp_vwehe8y.rs:15:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n15 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp_vwehe8y.rs:17:5\n   |\n10 |   let n = num;\n   |       -\n   |       |\n   |       first assignment to `n`\n   |       help: consider making this binding mutable: `mut n`\n...\n17 |     n /= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even_count = 0;\n  let odd_count = 0;\n  let curr_num = num;\n  while (curr_num > 0) {\n    if (curr_num % 2 == 0) {\n      even_count += 1;\n    } else {\n      odd_count += 1;\n    }\n    curr_num /= 10;\n  }\n  return (even_count, odd_count);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpd3dxzgvo.rs:11:9\n   |\n11 |   while (curr_num > 0) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   while (curr_num > 0) {\n11 +   while curr_num > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpd3dxzgvo.rs:12:8\n   |\n12 |     if (curr_num % 2 == 0) {\n   |        ^                 ^\n   |\nhelp: remove these parentheses\n   |\n12 -     if (curr_num % 2 == 0) {\n12 +     if curr_num % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even_count`\n  --> /tmp/tmpd3dxzgvo.rs:13:7\n   |\n8  |   let even_count = 0;\n   |       ----------\n   |       |\n   |       first assignment to `even_count`\n   |       help: consider making this binding mutable: `mut even_count`\n...\n13 |       even_count += 1;\n   |       ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd_count`\n  --> /tmp/tmpd3dxzgvo.rs:15:7\n   |\n9  |   let odd_count = 0;\n   |       ---------\n   |       |\n   |       first assignment to `odd_count`\n   |       help: consider making this binding mutable: `mut odd_count`\n...\n15 |       odd_count += 1;\n   |       ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `curr_num`\n  --> /tmp/tmpd3dxzgvo.rs:17:5\n   |\n10 |   let curr_num = num;\n   |       --------\n   |       |\n   |       first assignment to `curr_num`\n   |       help: consider making this binding mutable: `mut curr_num`\n...\n17 |     curr_num /= 10;\n   |     ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n    let even = 0;\n    let odd = 0;\n    let n = num;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        n /= 2;\n    }\n    return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp9b03gha1.rs:11:11\n   |\n11 |     while (n > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     while (n > 0) {\n11 +     while n > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9b03gha1.rs:12:12\n   |\n12 |         if (n % 2 == 0) {\n   |            ^          ^\n   |\nhelp: remove these parentheses\n   |\n12 -         if (n % 2 == 0) {\n12 +         if n % 2 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmp9b03gha1.rs:13:13\n   |\n8  |     let even = 0;\n   |         ----\n   |         |\n   |         first assignment to `even`\n   |         help: consider making this binding mutable: `mut even`\n...\n13 |             even += 1;\n   |             ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmp9b03gha1.rs:15:13\n   |\n9  |     let odd = 0;\n   |         ---\n   |         |\n   |         first assignment to `odd`\n   |         help: consider making this binding mutable: `mut odd`\n...\n15 |             odd += 1;\n   |             ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmp9b03gha1.rs:17:9\n   |\n10 |     let n = num;\n   |         -\n   |         |\n   |         first assignment to `n`\n   |         help: consider making this binding mutable: `mut n`\n...\n17 |         n /= 2;\n   |         ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n/// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize) {\n  let even = 0;\n  let odd = 0;\n  while num > 0 {\n    if num % 2 == 0 {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 2;\n  }\n  return (even, odd);\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n",
      "timestamp": 1664292530,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `even`\n  --> /tmp/tmpemfcz4l4.rs:12:7\n   |\n8  |   let even = 0;\n   |       ----\n   |       |\n   |       first assignment to `even`\n   |       help: consider making this binding mutable: `mut even`\n...\n12 |       even += 1;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `odd`\n  --> /tmp/tmpemfcz4l4.rs:14:7\n   |\n9  |   let odd = 0;\n   |       ---\n   |       |\n   |       first assignment to `odd`\n   |       help: consider making this binding mutable: `mut odd`\n...\n14 |       odd += 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpemfcz4l4.rs:16:5\n   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                   --- help: consider making this binding mutable: `mut num`\n...\n16 |     num /= 2;\n   |     ^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}