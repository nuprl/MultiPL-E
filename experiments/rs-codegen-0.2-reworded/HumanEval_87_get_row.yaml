name: HumanEval_87_get_row
language: rs
prompt: "/// You are given a 2 dimensional data, as a nested vectors,\n/// which is\
  \ similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the vector,\n\
  /// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1, 2, 3, 4, 5,\
  \ 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0, 0), (1,\
  \ 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// Vec::<(isize, isize)>::new()\n\
  /// >>> get_row(vec![vec![], vec![1], vec![1, 2, 3]], 3)\n/// vec![(2, 2)]\nfn get_row(lst:\
  \ Vec<Vec<isize>>, x: isize) -> Vec<(isize, isize)> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!(candidate(vec![vec![1,\
  \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0,\
  \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]);\n    assert_eq!(candidate(vec![vec![1, 2,\
  \ 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4,\
  \ 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6]], 2), vec![(0, 1), (1, 1),\
  \ (2, 1), (3, 1), (4, 1), (5, 1)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3,\
  \ 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 1, 3, 4, 5, 6], vec![1, 2, 1, 4, 5,\
  \ 6], vec![1, 2, 3, 1, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1),\
  \ vec![(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5,\
  \ 0), (6, 5), (6, 0)]);\n    assert_eq!(candidate(Vec::<Vec<isize>>::new(), 1),\
  \ Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![1]], 2), Vec::<(isize,\
  \ isize)>::new());\n    assert_eq!(candidate(vec![vec![], vec![1], vec![1, 2, 3]],\
  \ 3), vec![(2, 2)]);\n}\n"
completions: ["    let rows = lst.map((row) => row.map((col, i) => i));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map((row)\
    \ => row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map((row)\
    \ => row.map((col, i) => i));\n    let coordinates = sorted_coordinates.filter((row)\
    \ => row[0] == x);\n    let coordinates_by_row = coordinates.map((row) => row.map((col,\
    \ i) => i));\n    let coordinates_by_row_sorted = coordinates_by_row.sort((a,\
    \ b) => b[1] - a[1]);\n    let coordinates_by_row_sorted_filtered = coordinates_by_row_sorted.filter((row)\
    \ => row[1] == x);\n    let coordinates_by_row_sorted_filtered_sorted = coordinates_by_row_sorted_filtered.sort((a,\
    \ b) => a[0] - b[0]);\n    let coordinates_by_row_sorted_filtered_sorted_sorted\
    \ = coordinates_by_row_sorted_filtered_sorted.map((row) => row.map((col, i) =>\
    \ i));\n    return coordinates_by_row_sorted_filtered_sorted_sorted;", "    let\
    \ mut result: Vec<(isize, isize)> = Vec::new();\n    for i in lst {\n        for\
    \ j in i {\n            if j == x {\n                result.push((i, j));\n  \
    \          }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0]);\n    result.sort((a,\
    \ b) => b[1] - a[1]);\n    return result;", "    let rows = lst.map(|row| row.map(|col|\
    \ col + 1));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let\
    \ sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coordinates\
    \ = sorted_cols.map(|row| row.map(|col| (x, col)));\n    return sorted_coordinates;",
  "    let rows = lst.map(|row| row.map(|col| col.index_of(x)));\n    rows.sort();\n\
    \    rows.sort_by(|(a, b) => b - a);\n    return rows.map(|(row, col) => (row,\
    \ col + 1));", "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n\
    \    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let result = sorted_cols.map((row,\
    \ i) => (row[i], i));\n    result.map((row, i) => (x, row[i]))", "    let rows\
    \ = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a,\
    \ b) => b - a));\n    let sorted_coords = sorted_cols.map(|row| row.map(|col|\
    \ (x, col)));\n    return sorted_coords;", "    let rows = lst.map(|row| row.map(|col|\
    \ col.index_of(x)));\n    rows.sort();\n    rows.sort_by(|row| row.sort_by(|col|\
    \ -col));\n    return rows.map(|row| (row.index_of(x), row.index_of(x)));", " \
    \   let rows = lst.map(|row| row.map(|col| col.index_of(x)));\n    rows.sort(|a,\
    \ b| a.cmp(b));\n    rows.sort(|a, b| a.cmp(b), |a, b| b.cmp(a));\n    return\
    \ rows.map(|row| (row.index_of(x), row.index_of(x)));", "    let mut vec = Vec::new();\n\
    \    for i in lst {\n        for j in i {\n            vec.push((i, j));\n   \
    \     }\n    }\n    vec.sort((&(a, b) { a.0 < b.0 }));\n    vec.sort((&(a, b)\
    \ { a.1 > b.1 }));\n    vec.filter((&(a, b) { a.0 == x })).map((&(a, b) { a.1\
    \ }));\n    return vec;", "    let rows = lst.map((row) => {\n        let sorted_row\
    \ = row.sort((a, b) => a - b);\n        return sorted_row.map((col) => (col, row));\n\
    \    });\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let coordinates\
    \ = sorted_rows.map((row) => (row[0], row[1]));\n    let result = coordinates.filter((coord)\
    \ => coord[0] == x);\n    return result.map((coord) => (coord[0], coord[1]));",
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for i in lst {\n   \
    \     for j in i {\n            if j == x {\n                result.push((i.len()\
    \ - 1, j));\n            }\n        }\n    }\n    result.sort((a, b) => a[0] -\
    \ b[0]);\n    result.sort((a, b) => b[1] - a[1]);\n    return result;", "    let\
    \ rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows =\
    \ rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row|\
    \ row.map(|col| (col, x)));\n    return sorted_coordinates;", "    let mut vec\
    \ = Vec::new();\n    for i in lst {\n        for j in i {\n            vec.push((i,\
    \ j));\n        }\n    }\n    vec.sort((a, b) => a[0] - b[0]);\n    vec.sort((a,\
    \ b) => a[1] - b[1]);\n    vec.filter((a, b) => a[0] == x);\n    return vec;",
  "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row|\
    \ row.map(|col| (x, col)));\n    return sorted_coordinates;", "    let row = 0;\n\
    \    let col = 0;\n    let result = Vec::new();\n    for i in lst {\n        for\
    \ j in i {\n            if j == x {\n                result.push((row, col));\n\
    \            }\n            col += 1;\n        }\n        row += 1;\n        col\
    \ = 0;\n    }\n    return result;", "  let row_count = lst.len();\n  let row_index\
    \ = 0;\n  let row = Vec::new();\n  for i in 0..row_count {\n    let row_size =\
    \ lst[i].len();\n    for j in 0..row_size {\n      if (lst[i][j] == x) {\n   \
    \     row.add(j, i);\n      }\n    }\n  }\n  row.sort((a, b) => a[0] - b[0]);\n\
    \  row.sort((a, b) => b[1] - a[1]);\n  return row;", "    let row = 0;\n    let\
    \ col = 0;\n    let result = Vec::new();\n    for i in lst {\n        for j in\
    \ i {\n            if j == x {\n                result.push((row, col));\n   \
    \         }\n            col += 1;\n        }\n        col = 0;\n        row +=\
    \ 1;\n    }\n    return result;", "    let rows = lst.map(|row| row.map(|col|\
    \ col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n\
    \    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n   \
    \ let result = sorted_cols.map((row, i) => (i, row[x]));\n    return result;",
  "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row|\
    \ row.map(|col| (col, x)));\n    return sorted_coordinates;", "    let rows =\
    \ lst.map((row) => row.map((col, i) => (i, col)));\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map((row) => row.map((col,\
    \ i) => (i, col)));\n    let sorted_coordinates = sorted_cols.sort((a, b) => b[1]\
    \ - a[1]);\n    let coordinates = sorted_coordinates.map((coord) => (coord[0],\
    \ coord[1]));\n    let result = Vec::new();\n    for (let coord of coordinates)\
    \ {\n        if (coord[0] == x) {\n            result.append((coord[0], coord[1]));\n\
    \        }\n    }\n    return result;", "    let rows = lst.map(|row| row.map(|col|\
    \ col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n\
    \    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n   \
    \ let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (x, col)));\n \
    \   return sorted_coordinates;", "    let rows = lst.map(|v| v.len);\n    let\
    \ sorted_rows = sort_by(rows, |r| r);\n    let sorted_cols = sort_by(sorted_rows,\
    \ |r| r.len);\n    let sorted_coordinates = sorted_cols.map(|c| (c, x));\n   \
    \ let sorted_coordinates_by_row = sort_by(sorted_coordinates, |c| c.0);\n    return\
    \ sorted_coordinates_by_row.map(|c| (c.0, c.1));", "    let row_len = lst.len();\n\
    \    let row_vec = Vec::new(row_len);\n    for i in 0..row_len {\n        let\
    \ row = lst[i];\n        let col_len = row.len();\n        let col_vec = Vec::new(col_len);\n\
    \        for j in 0..col_len {\n            col_vec.append(row[j]);\n        }\n\
    \        row_vec.append(col_vec);\n    }\n    let sorted_row_vec = row_vec.sort_by(|&[(r,\
    \ c) => c]);\n    let sorted_row_vec_len = sorted_row_vec.len();\n    let sorted_row_vec_vec\
    \ = Vec::new(sorted_row_vec_len);\n    for i in 0..sorted_row_vec_len {\n    \
    \    sorted_row_vec_vec.append(sorted_row_vec[i]);\n    }\n    let sorted_row_vec_vec_len\
    \ = sorted_row_vec_vec.len();\n    let sorted_row_vec_vec_vec = Vec::new(sorted_row_vec_vec_len);\n\
    \    for i in 0..sorted_row_vec_vec_len {\n        sorted_row_vec_vec_vec.append(sorted_row_vec_vec[i]);\n\
    \    }\n    let sorted_row_vec_vec_vec_len = sorted_row_vec_vec_vec.len();\n \
    \   let sorted_row_vec_vec_vec_vec = Vec::new(sorted_row_vec_vec_vec_len);\n \
    \   for i in 0..sorted_row_vec_vec_vec_len {\n        sorted_row_vec_vec_vec_vec.append(sorted_row_vec_vec_vec[i]);\n\
    \    }\n    let sorted_row_vec_vec_vec_vec_len = sorted_row_vec_vec_vec_vec.len();\n\
    \    let sorted_row_vec_vec_vec_vec_vec = Vec::new(sorted_row_vec_vec_vec_vec_len);\n\
    \    for i in 0..sorted", "    let rows = lst.map(|row| row.map(|col| col.map(|_|\
    \ 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coordinates\
    \ = sorted_cols.map(|col| (x, col));\n    return sorted_coordinates;", "    let\
    \ rows = lst.map(|row| row.map(|col| col.index_of(x)));\n    rows.sort(|a, b|\
    \ a.cmp(b));\n    rows.sort(|a, b| a.cmp(b), |a, b| b.cmp(a));\n    return rows.map(|row|\
    \ (row.index_of(x), row.index_of(x)));", "    let rows = lst.map(|row| row.map(|col|\
    \ col.index_of(x)));\n    let sorted_rows = rows.sort((a, b) => a - b);\n    let\
    \ sorted_cols = rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coordinates\
    \ = sorted_rows.map(|row| sorted_cols.map(|col| (row, col)));\n    return sorted_coordinates;",
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for i in lst {\n   \
    \     for j in i {\n            if j == x {\n                result.push((i, j));\n\
    \            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0]);\n  \
    \  result.sort((a, b) => a[1] - b[1]);\n    return result;", "    let rows = lst.map(|row|\
    \ row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b -\
    \ a));\n    let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (col,\
    \ x)));\n    return sorted_coordinates;", "    let rows = lst.map(|v| v.len);\n\
    \    let sorted_rows = rows.sort_by(|v| v);\n    let sorted_cols = sorted_rows.map(|v|\
    \ v.sort_by(|v| v.len));\n    let sorted_coords = sorted_cols.map(|v| v.map(|v|\
    \ v));\n    let sorted_coords_by_row = sorted_coords.sort_by(|v| v.len);\n   \
    \ let sorted_coords_by_col = sorted_coords_by_row.map(|v| v.sort_by(|v| v.len));\n\
    \    let sorted_coords_by_row_col = sorted_coords_by_col.map(|v| v.map(|v| v));\n\
    \    let sorted_coords_by_row_col_desc = sorted_coords_by_row_col.sort_by(|v|\
    \ v.len);\n    let sorted_coords_by_row_col_desc_by_row = sorted_coords_by_row_col_desc.map(|v|\
    \ v.sort_by(|v| v.len));\n    let sorted_coords_by_row_col_desc_by_col = sorted_coords_by_row_col_desc_by_row.map(|v|\
    \ v.sort_by(|v| v.len));\n    let sorted_coords_by_row_col_desc_by_row_col = sorted_coords_by_row_col_desc_by_col.map(|v|\
    \ v.map(|v| v));\n    let sorted_coords_by_row_col_desc_by_row_col_desc = sorted_coords_by_row_col_desc_by_row_col.sort_by(|v|\
    \ v.len);\n    let sorted_coords_by_row_col_desc_by_row_col_desc_by_row = sorted_coords_by_row_col_desc_by_row_col_desc.map(|v|\
    \ v.sort_by(|v| v.len", "    let rows = lst.map(|row| row.map(|col| col.map(|_|\
    \ 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coordinates\
    \ = sorted_cols.map(|row| row.map(|col| (col, x)));\n    return sorted_coordinates;",
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for i in lst {\n   \
    \     for j in i {\n            if j == x {\n                result.push((i, j));\n\
    \            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0]);\n  \
    \  result.sort((a, b) => b[1] - a[1]);\n    return result;", "    let rows = lst.map(|row|\
    \ {\n        let sorted_row = row.sort((a, b) => a - b);\n        let sorted_cols\
    \ = sorted_row.map(|col| {\n            let sorted_col = col.sort((a, b) => b\
    \ - a);\n            return (sorted_col, sorted_row.indexOf(col));\n        });\n\
    \        return sorted_cols;\n    });\n    let sorted_rows = rows.sort((a, b)\
    \ => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| {\n        let\
    \ sorted_col = row.sort((a, b) => b[1] - a[1]);\n        return sorted_col;\n\
    \    });\n    return sorted_cols.map((col, i) => (i, col));", "    let rows =\
    \ lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a,\
    \ b) => b - a));\n    let sorted_coords = sorted_cols.map(|row| row.map(|col|\
    \ (x, col)));\n    return sorted_coords;", "    let rows = lst.map(|row| {\n \
    \       let sorted_row = row.sort((a, b) => a - b);\n        let sorted_cols =\
    \ sorted_row.map(|col| {\n            let sorted_col = col.sort((a, b) => b -\
    \ a);\n            return (sorted_col, sorted_row.indexOf(col));\n        });\n\
    \        return sorted_cols;\n    });\n    let sorted_rows = rows.sort((a, b)\
    \ => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| {\n        let\
    \ sorted_col = row.sort((a, b) => b[1] - a[1]);\n        return sorted_col;\n\
    \    });\n    return sorted_cols.map((col, i) => (i, col));", "    let rows =\
    \ lst.map(|v| v.len);\n    let sorted_rows = rows.sort();\n    let sorted_cols\
    \ = rows.map(|v| v.sort());\n    let sorted_coordinates = sorted_rows.map(|r|\
    \ sorted_cols.map(|c| (r, c)));\n    let coordinates = sorted_coordinates.filter(|c|\
    \ c.x == x);\n    return coordinates;", "    let row = Vec::new();\n    for i\
    \ in lst {\n        for j in i {\n            if j == x {\n                row.push((i,\
    \ j));\n            }\n        }\n    }\n    row.sort((a, b) => a[0] - b[0]);\n\
    \    row.sort((a, b) => b[1] - a[1]);\n    return row;", "    let rows = lst.map(|row|\
    \ row.map(|col| col.get(x)));\n    rows.sort((a, b) => a.row - b.row);\n    rows.sort((a,\
    \ b) => b.column - a.column);\n    return rows.map(|row| (row.row, row.column));",
  "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coords = sorted_cols.map(|row| row.map(|col|\
    \ (col, x)));\n    return sorted_coords;", "    let rows = lst.map(|row| row.map(|col|\
    \ col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n\
    \    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n   \
    \ let sorted_coords = sorted_cols.map(|row| row.map(|col| (col, x)));\n    return\
    \ sorted_coords;", "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n\
    \    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coordinates\
    \ = sorted_cols.map(|row| row.map(|col| (x, col)));\n    return sorted_coordinates;",
  "    let mut vec = Vec::new();\n    for i in lst {\n        for j in i {\n     \
    \       vec.push((i, j));\n        }\n    }\n    vec.sort((&(a, b) { a.0 < b.0\
    \ }));\n    vec.sort((&(a, b) { a.1 > b.1 }));\n    vec.filter((&(a, b) { a.0\
    \ == x })).map((&(a, b) { a.1 }));\n    return vec;", "    let mut vec = Vec::new();\n\
    \    for i in lst {\n        for j in i {\n            vec.push((i, j));\n   \
    \     }\n    }\n    vec.sort((a, b) => a[0] - b[0]);\n    vec.sort((a, b) => a[1]\
    \ - b[1]);\n    vec.filter((a, b) => a[0] == x);\n    return vec;", "    let rows\
    \ = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a,\
    \ b) => b - a));\n    let sorted_coords = sorted_cols.map(|row| row.map(|col|\
    \ (col, x)));\n    return sorted_coords;", "  let row_count = lst.len();\n  let\
    \ row_index = 0;\n  let row_coordinates = Vec::new();\n  for row in lst {\n  \
    \  let row_coordinate_count = row.len();\n    let row_coordinate_index = 0;\n\
    \    for row_coordinate in row {\n      if row_coordinate_index == x {\n     \
    \   row_coordinates.append((row_index, row_coordinate_count));\n      }\n    \
    \  row_coordinate_index += 1;\n    }\n    row_index += 1;\n  }\n  row_coordinates.sort((a,\
    \ b) => a[0] - b[0]);\n  row_coordinates.sort((a, b) => b[1] - a[1]);\n  return\
    \ row_coordinates;", "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n\
    \    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coords =\
    \ sorted_cols.map(|row| row.map(|col| (col, x)));\n    return sorted_coords;",
  "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|col|\
    \ (x, col));\n    return sorted_coordinates;", "    let rows = lst.map(|row| row.map(|col|\
    \ col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n\
    \    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n   \
    \ let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (col, x)));\n \
    \   return sorted_coordinates;", "    let rows = lst.map(|row| row.map(|col| col.index_of(x)));\n\
    \    let sorted_rows = rows.sort((a, b) => a - b);\n    let sorted_cols = rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_tuples = sorted_rows.map((row, i)\
    \ => (row, sorted_cols[i]));\n    return sorted_tuples;", "    let mut row = Vec::new();\n\
    \    for i in lst {\n        for j in i {\n            if j == x {\n         \
    \       row.push((i.len() - 1, j));\n            }\n        }\n    }\n    row.sort((a,\
    \ b) => a[0] - b[0]);\n    row.sort((a, b) => b[1] - a[1]);\n    return row;",
  "    let rows = lst.map(|row| row.map(|col| col + 1));\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a,\
    \ b) => b[1] - a[1]));\n    let coordinates = sorted_cols.map((row, i) => (row[0],\
    \ i));\n    coordinates.push(x);\n    return coordinates;", "    let mut result\
    \ = Vec::new();\n    for i in lst {\n        for j in i {\n            if j ==\
    \ x {\n                result.push((i.len() - 1, j));\n            }\n       \
    \ }\n    }\n    result.sort((a, b) => a[0] - b[0]);\n    result.sort((a, b) =>\
    \ a[1] - b[1]);\n    return result;", "    let mut result = Vec::new();\n    for\
    \ i in lst {\n        for j in i {\n            if j == x {\n                result.push((i.len()\
    \ - 1, j));\n            }\n        }\n    }\n    result.sort((a, b) => a.0 -\
    \ b.0);\n    result.sort((a, b) => a.1 - b.1);\n    return result;", "    let\
    \ rows = lst.map(|row| row.map(|col| col + 1));\n    let sorted_rows = rows.sort_by(|row|\
    \ row.length());\n    let sorted_cols = sorted_rows.map(|row| row.sort_by(|col|\
    \ -col));\n    let sorted_coords = sorted_cols.map(|row| row.map(|col| (x, col)));\n\
    \    return sorted_coords;", "    let rows = lst.map(|row| row.map(|col| col.get(x)));\n\
    \    let sorted_rows = rows.sort((a, b) => a.get(0) - b.get(0));\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.map(|col| col.get(1)));\n    sorted_cols.sort((a,\
    \ b) => b - a);\n    return sorted_cols;", "    let rows = lst.map((row) => {\n\
    \        let sorted_row = row.sort((a, b) => a - b);\n        let sorted_cols\
    \ = sorted_row.map((col) => {\n            return (col, sorted_row.indexOf(col));\n\
    \        });\n        return sorted_cols;\n    });\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map((row) => {\n    \
    \    return (row[0], row[1]);\n    });\n    return sorted_cols.filter((col) =>\
    \ col[0] == x);", "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n\
    \    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coords =\
    \ sorted_cols.map(|row| row.map(|col| (x, col)));\n    return sorted_coords;",
  "    let rows = lst.map((row) => row.map((col, i) => (i, col)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map((row)\
    \ => row.map((col, i) => (i, col)));\n    let sorted_coordinates = sorted_cols.sort((a,\
    \ b) => b[1] - a[1]);\n    let coordinates = sorted_coordinates.map((coord) =>\
    \ (coord[0], coord[1]));\n    coordinates.filter((coord) => coord[0] == x);",
  "    let rows = lst.map(|row| row.map(|col| col.index_of(x)));\n    let sorted_rows\
    \ = rows.sort_by(|row| row.index_of(0));\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort_by(|col| -col));\n    return sorted_cols;", "    let rows = lst.map(|row|\
    \ row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b -\
    \ a));\n    let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (col,\
    \ x)));\n    return sorted_coordinates;", "    let mut vec = Vec::new();\n   \
    \ for i in lst {\n        for j in i {\n            vec.push((i, j));\n      \
    \  }\n    }\n    vec.sort_by(|&(a, b) { a.0 }).sort_by(|&(a, b) { a.1 }).reverse();\n\
    \    vec.filter((&(a, b), c) => c == x);\n    return vec;", "    let rows = lst.map(|row|\
    \ row.map(|col| col.get(x)));\n    let sorted_rows = rows.sort((a, b) => a.get(0)\
    \ - b.get(0));\n    let sorted_cols = sorted_rows.map(|row| row.map(|col| col.get(1)));\n\
    \    sorted_cols.sort((a, b) => b - a);\n    return sorted_cols.map(|col| (col.get(0),\
    \ col.get(1)));", "    let row_count = lst.len();\n    let row_index = 0;\n  \
    \  let col_index = 0;\n    let row_coord = (0, 0);\n    let col_coord = (0, 0);\n\
    \    let row_coord_list = Vec::new();\n    let col_coord_list = Vec::new();\n\
    \    for (let i = 0; i < row_count; i++) {\n        for (let j = 0; j < lst[i].len();\
    \ j++) {\n            if (lst[i][j] == x) {\n                row_coord = (i, j);\n\
    \                col_coord = (i, j);\n                row_coord_list.push(row_coord);\n\
    \                col_coord_list.push(col_coord);\n            }\n        }\n \
    \   }\n    row_coord_list.sort((a, b) => a[0] - b[0]);\n    col_coord_list.sort((a,\
    \ b) => b[1] - a[1]);\n    let coord_list = Vec::new();\n    for (let i = 0; i\
    \ < row_coord_list.len(); i++) {\n        coord_list.push(row_coord_list[i]);\n\
    \        coord_list.push(col_coord_list[i]);\n    }\n    return coord_list;",
  "    let rows = lst.map((row) => row.map((col) => col - 1));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map((row)\
    \ => row.map((col) => col[1]));\n    let sorted_coordinates = sorted_cols.sort((a,\
    \ b) => b - a);\n    let coordinates = sorted_coordinates.map((coord) => (coord[0],\
    \ coord[1] + 1));\n    return coordinates.map((coord) => (coord[0], coord[1]));",
  "    let mut result = Vec::new();\n    for i in lst {\n        for j in i {\n  \
    \          if j == x {\n                result.push((i.len() - 1, j));\n     \
    \       }\n        }\n    }\n    result.sort();\n    for i in result {\n     \
    \   i.sort();\n    }\n    return result;", "    let mut vec = Vec::new();\n  \
    \  for i in lst {\n        for j in i {\n            if j == x {\n           \
    \     vec.push((i.len() - 1, j));\n            }\n        }\n    }\n    vec.sort_by(|&(a,\
    \ b) { a.len() - b.len() });\n    vec.sort_by(|&(a, b) { b.len() - a.len() });\n\
    \    return vec;", "    let mut vec = Vec::new();\n    for i in lst {\n      \
    \  for j in i {\n            if j == x {\n                vec.push((i.len() -\
    \ 1, j));\n            }\n        }\n    }\n    vec.sort_by(|&(a, b) { a.0 }).sort_by(|&(a,\
    \ b) { b.0 }).map(|&(a, b) { (a, b) }).to_vec();\n    return vec;", "    let rows\
    \ = lst.map((row) => {\n        let sorted_row = row.sort((a, b) => a - b);\n\
    \        let sorted_cols = sorted_row.map((col) => {\n            let sorted_col\
    \ = col.sort((a, b) => b - a);\n            return (sorted_col, sorted_row.indexOf(col));\n\
    \        });\n        return sorted_cols;\n    });\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map((row) => {\n    \
    \    let sorted_col = row.sort((a, b) => b[1] - a[1]);\n        return (sorted_col,\
    \ row[0]);\n    });\n    return sorted_cols.map((col) => (col[0], col[1]));",
  "    let rows = lst.map(|v| v.len());\n    let sorted_rows = rows.sort_by(|v| v);\n\
    \    let sorted_cols = sorted_rows.map(|v| v.sort_by(|v| v.len()));\n    let sorted_coords\
    \ = sorted_cols.map(|v| v.map(|v| v));\n    let sorted_coords_by_row = sorted_coords.sort_by(|v|\
    \ v.len());\n    let sorted_coords_by_row_and_col = sorted_coords_by_row.map(|v|\
    \ v.sort_by(|v| v.len()));\n    let result = sorted_coords_by_row_and_col.map(|v|\
    \ v.map(|v| v));\n    let result_by_row = result.sort_by(|v| v.len());\n    return\
    \ result_by_row;", "    let rows = lst.map(|row| row.map(|col| col.get(x)));\n\
    \    let sorted_rows = rows.sort((a, b) => a.compare(b));\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b.compare(a)));\n    return sorted_cols.map((row,\
    \ i) => (i, row));", "    let rows = lst.map((row) => row.map((col) => (col, 0)));\n\
    \    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map((row) => row.map((col) => (col[1], -col[0])));\n    let sorted_coordinates\
    \ = sorted_cols.sort((a, b) => a[0] - b[0]);\n    let coordinates = sorted_coordinates.map((coord)\
    \ => (coord[1], coord[0]));\n    let result = Vec::new();\n    for (let coord\
    \ of coordinates) {\n        if (coord[0] == x) {\n            result.push(coord);\n\
    \        }\n    }\n    return result;", "    let mut result = Vec::new();\n  \
    \  for i in lst {\n        for j in i {\n            if j == x {\n           \
    \     result.push((i.len() - 1, j));\n            }\n        }\n    }\n    result.sort((a,\
    \ b) => a[0] - b[0]);\n    result.sort((a, b) => a[1] - b[1]);\n    return result;",
  "    let rows = lst.map(|v| v.length);\n    let sorted_rows = sort_by(rows, |r|\
    \ r);\n    let sorted_cols = sort_by(sorted_rows, |r| r.length);\n    let sorted_coords\
    \ = sorted_cols.map(|c| (c, x));\n    let sorted_coords_by_row = sort_by(sorted_coords,\
    \ |c| c[0]);\n    return sorted_coords_by_row.map(|c| (c[0], c[1]));", "    let\
    \ rows = lst.map(|row| row.map(|col| col.index_of(x)));\n    let sorted_rows =\
    \ rows.sort((a, b) => a - b);\n    let sorted_cols = rows.map(|row| row.sort((a,\
    \ b) => b - a));\n    let sorted_tuples = sorted_rows.map((row, i) => (i, sorted_cols[i]));\n\
    \    return sorted_tuples;", "    let rows = lst.map(|row| row.map(|col| col.get(x)));\n\
    \    rows.sort((a, b) => a.row - b.row);\n    rows.sort((a, b) => b.col - a.col);\n\
    \    return rows.map(|row| (row.row, row.col));", "    let row_count = lst.len();\n\
    \    let row_index = 0;\n    let coord_count = 0;\n    let coord_index = 0;\n\
    \    let coord = (0, 0);\n    let result = Vec::new();\n    for coord_index in\
    \ 0..row_count {\n        let row = lst[row_index];\n        let coord_count =\
    \ row.len();\n        for coord_index in 0..coord_count {\n            let column\
    \ = row[coord_index];\n            if column == x {\n                result.append((row_index,\
    \ coord_index));\n            }\n        }\n        if coord_index == 0 {\n  \
    \          coord = (row_index, coord_count - 1);\n        } else {\n         \
    \   coord = (row_index, coord_index - 1);\n        }\n        row_index += 1;\n\
    \    }\n    return result;", "    let row = Vec::new();\n    for i in lst {\n\
    \        for j in i {\n            if j == x {\n                row.push((i.len()\
    \ - 1, j));\n            }\n        }\n    }\n    row.sort((a, b) => a[0] - b[0]);\n\
    \    row.sort((a, b) => b[1] - a[1]);\n    return row;", "    let mut vec = Vec::new();\n\
    \    for i in lst {\n        for j in i {\n            if j == x {\n         \
    \       vec.push((i.len() - 1, j));\n            }\n        }\n    }\n    vec.sort((a,\
    \ b) => a[0] - b[0]);\n    vec.sort((a, b) => b[1] - a[1]);\n    return vec;",
  "    let rows = lst.map((row) => row.map((col, i) => i));\n    let sorted_rows =\
    \ rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map((row)\
    \ => row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map((row)\
    \ => row.map((col, i) => i));\n    let coordinates = sorted_coordinates.filter((row)\
    \ => row[0] == x);\n    return coordinates.map((row) => (row[1], row[2]));", " \
    \   let row_count = lst.len();\n    let row_index = 0;\n    let row_coordinates\
    \ = Vec::new();\n    for row in lst {\n        let row_coordinate = Vec::new();\n\
    \        for column in row {\n            let column_index = column;\n       \
    \     let column_coordinate = (row_index, column_index);\n            row_coordinate.push(column_coordinate);\n\
    \        }\n        row_coordinates.push(row_coordinate);\n        row_index +=\
    \ 1;\n    }\n    row_coordinates.sort((a, b) => a.len() - b.len());\n    row_coordinates.sort((a,\
    \ b) => a[0] - b[0]);\n    let coordinates = Vec::new();\n    for row in row_coordinates\
    \ {\n        let row_coordinate = row[0];\n        let column_coordinates = row[1];\n\
    \        for column_coordinate in column_coordinates {\n            let coordinate\
    \ = (row_coordinate, column_coordinate);\n            coordinates.push(coordinate);\n\
    \        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0]);\n    coordinates.sort((a,\
    \ b) => a[1] - b[1]);\n    let coordinates_list = Vec::new();\n    for coordinate\
    \ in coordinates {\n        let coordinate_tuple = (coordinate[0], coordinate[1]);\n\
    \        coordinates_list.push(coordinate_tuple);\n    }\n    return coordinates_list;",
  "    let rows = lst.map(|row| row.map(|col| col.get(x)));\n    rows.sort((a, b)\
    \ => a.row - b.row);\n    rows.sort((a, b) => b.col - a.col);\n    return rows.map((row,\
    \ i) => (row.row, row.col));", "    let rows = lst.map(|row| row.map(|col| col.map(|_|\
    \ 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coords =\
    \ sorted_cols.map(|row| row.map(|col| (x, col)));\n    return sorted_coords;",
  "    let rows = lst.map(|row| row.map(|col| col + 1));\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a,\
    \ b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row| row.map(|col|\
    \ (x, col)));\n    return sorted_coordinates;", "    let rows = lst.map(|row|\
    \ row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b -\
    \ a));\n    let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (col,\
    \ x)));\n    return sorted_coordinates;", "    let rows = lst.map(|vec| vec.map(|vec|\
    \ vec.len()));\n    let sorted_rows = rows.sort((a, b) => a - b);\n    let sorted_cols\
    \ = rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coords = sorted_cols.map(|col|\
    \ (x, col));\n    return sorted_coords.sort((a, b) => a[0] - b[0]);", "    let\
    \ rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows =\
    \ rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row|\
    \ row.map(|col| (col, x)));\n    return sorted_coordinates;", "    let rows =\
    \ lst.map(|v| v.len);\n    let sorted_rows = sort_by(rows, |r| r);\n    let sorted_cols\
    \ = sort_by(sorted_rows, |r| r.len);\n    let sorted_coordinates = sorted_cols.map(|v|\
    \ (v, x));\n    let sorted_coordinates_by_row = sort_by(sorted_coordinates, |c|\
    \ c[0]);\n    return sorted_coordinates_by_row.map(|c| (c[0], c[1]));", "    let\
    \ rows = lst.map((row) => {\n        let sorted_row = row.sort((a, b) => a - b);\n\
    \        let sorted_cols = sorted_row.map((col) => {\n            return (col,\
    \ sorted_row.indexOf(col));\n        });\n        return sorted_cols;\n    });\n\
    \    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map((row) => {\n        return (row[1], row[0]);\n    });\n  \
    \  return sorted_cols.map((col) => {\n        return (col[0], col[1]);\n    });",
  "    let rows = lst.map(|v| v.len);\n    let sorted_rows = sort_by(rows, |r| r);\n\
    \    let sorted_cols = sort_by(sorted_rows, |r| r.len);\n    let sorted_coords\
    \ = sorted_cols.map(|c| (c, x));\n    return sorted_coords", "    let rows = lst.map(|row|\
    \ row.map(|col| col.get(x)));\n    let sorted_rows = rows.sort((a, b) => a.get(0)\
    \ - b.get(0));\n    let sorted_cols = sorted_rows.map(|row| row.map(|col| col.get(1)));\n\
    \    sorted_cols.sort((a, b) => b - a);\n    return sorted_cols.map((col, i) =>\
    \ (i, col));", "    let mut result = Vec::new();\n    for i in lst {\n       \
    \ for j in i {\n            if j == x {\n                result.push((i.len()\
    \ - 1, j));\n            }\n        }\n    }\n    result.sort((a, b) => a[0] -\
    \ b[0]);\n    result.sort((a, b) => b[1] - a[1]);\n    return result;", "    let\
    \ rows = lst.map(|row| row.map(|col| col.index_of(x)));\n    let sorted_rows =\
    \ rows.sort((a, b) => a - b);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a,\
    \ b) => b - a));\n    return sorted_cols.map(|col| (col, 0));", "    let rows\
    \ = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a,\
    \ b) => b - a));\n    let sorted_coordinates = sorted_cols.map((row, i) => (row,\
    \ sorted_rows[i][1]));\n    let coordinates = sorted_coordinates.filter((_, i)\
    \ => i == x);\n    return coordinates;", "    let rows = lst.map(|row| row.map(|col|\
    \ col + 1));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let\
    \ sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coordinates\
    \ = sorted_cols.map(|col| (x, col));\n    return sorted_coordinates;", "    let\
    \ rows = lst.map(|v| v.len);\n    let sorted_rows = sort_by(rows, |r| r);\n  \
    \  let sorted_cols = sort_by(sorted_rows, |r| r.len);\n    let sorted_coords =\
    \ sorted_cols.map(|c| (c, x));\n    return sorted_coords;", "    let row_count\
    \ = lst.len();\n    let row_index = 0;\n    let row_coordinates = Vec::new();\n\
    \    for row in lst {\n        let column_count = row.len();\n        let column_index\
    \ = 0;\n        for column in row {\n            if column_index == x {\n    \
    \            row_coordinates.add(row_index, column_index);\n            }\n  \
    \          column_index += 1;\n        }\n        row_index += 1;\n    }\n   \
    \ row_coordinates.sort((a, b) => a[0] - b[0]);\n    row_coordinates.sort((a, b)\
    \ => b[1] - a[1]);\n    return row_coordinates;", "    let rows = lst.map(|row|\
    \ row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b -\
    \ a));\n    let result = sorted_cols.map((col, row) => (row, col));\n    result.map((row,\
    \ col) => (row + 1, col + 1));", "    let rows = lst.map((row) => {\n        let\
    \ sorted = row.sort((a, b) => a - b);\n        let sorted_row = sorted.map((x)\
    \ => x + 1);\n        return sorted_row;\n    });\n    let sorted_rows = rows.sort((a,\
    \ b) => a - b);\n    let sorted_coordinates = sorted_rows.map((row) => {\n   \
    \     let sorted_row = row.sort((a, b) => b - a);\n        let sorted_col = sorted_row.map((x)\
    \ => x + 1);\n        return sorted_col;\n    });\n    let coordinates = sorted_coordinates.map((row)\
    \ => {\n        let sorted_row = row.sort((a, b) => a - b);\n        let sorted_col\
    \ = sorted_row.map((x) => x + 1);\n        return (x, sorted_col);\n    });\n\
    \    return coordinates;", "    let rows = lst.map(|row| row.map(|col| col.map(|_|\
    \ 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coords =\
    \ sorted_cols.map(|row| row.map(|col| (col, x)));\n    return sorted_coords;",
  "    let mut vec = Vec::new();\n    for i in lst {\n        for j in i {\n     \
    \       vec.push((i, j));\n        }\n    }\n    vec.sort((&(a, b) { a.0 < b.0\
    \ }));\n    vec.sort((&(a, b) { a.1 > b.1 }));\n    vec.filter((&(a, b) { a.0\
    \ == x })).map((&(a, b) { a.1 }));\n    return vec;", "    let rows = lst.map(|row|\
    \ row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b -\
    \ a));\n    let sorted_coords = sorted_cols.map(|row| row.map(|col| (col, x)));\n\
    \    return sorted_coords;", "    let rows = lst.map((row) => row.map((col) =>\
    \ col - 1));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let\
    \ sorted_cols = sorted_rows.map((row) => row.map((col) => col[1]));\n    let sorted_coordinates\
    \ = sorted_cols.sort((a, b) => b - a);\n    let coordinates = sorted_coordinates.map((col)\
    \ => (col[0], col[1] + 1));\n    let result = coordinates.filter((coord) => coord[0]\
    \ == x);\n    return result;", "    let rows = lst.map(|row| row.map(|col| col.get(x)));\n\
    \    let sorted_rows = rows.sort((a, b) => a.compare(b));\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b.compare(a)));\n    return sorted_cols.map((row,\
    \ i) => (i, row));", "  let mut result = Vec::new();\n  for i in lst {\n    for\
    \ j in i {\n      if j == x {\n        result.push((i.len() - 1, j));\n      }\n\
    \    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1]\
    \ - a[1]);\n  return result;", "    let mut vec = Vec::new();\n    for i in lst\
    \ {\n        for j in i {\n            if j == x {\n                vec.push((i.len()\
    \ - 1, j));\n            }\n        }\n    }\n    vec.sort((a, b) => a[0] - b[0]);\n\
    \    vec.sort((a, b) => b[1] - a[1]);\n    return vec;", "    let rows = lst.map(|row|\
    \ row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b -\
    \ a));\n    let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (x, col)));\n\
    \    return sorted_coordinates;", "    let row = 0;\n    let col = 0;\n    let\
    \ res = Vec::new();\n    for i in lst {\n        for j in i {\n            if\
    \ j == x {\n                res.push((row, col));\n            }\n           \
    \ col += 1;\n        }\n        row += 1;\n        col = 0;\n    }\n    return\
    \ res;", "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let\
    \ sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row|\
    \ row.map(|col| (col, x)));\n    return sorted_coordinates;", "    let rows =\
    \ lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a,\
    \ b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row| row.map(|col|\
    \ (col, x)));\n    return sorted_coordinates;", "    let mut vec = Vec::new();\n\
    \    for i in lst {\n        for j in i {\n            if j == x {\n         \
    \       vec.push((i.len() - 1, j));\n            }\n        }\n    }\n    vec.sort((&(a,\
    \ b) { a.0 < b.0 }));\n    vec.sort((&(a, b) { a.1 > b.1 }));\n    return vec;",
  "    let rows = lst.map(|row| row.map(|col| col.get(x)));\n    let sorted_rows =\
    \ rows.sort((a, b) => a.row - b.row);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.map(|col| col.sort((a, b) => b - a)));\n    return sorted_cols.map((row,\
    \ i) => (row.row, row.get(i)));", "    let row_count = lst.len();\n    let row_index\
    \ = 0;\n    let row = Vec::new(row_count);\n    for i in 0..row_count {\n    \
    \    let column_count = lst[i].len();\n        let column_index = 0;\n       \
    \ for j in 0..column_count {\n            if (lst[i][j] == x) {\n            \
    \    row.push((i, j));\n            }\n        }\n    }\n    return row;", " \
    \   let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row|\
    \ row.map(|col| (col, x)));\n    return sorted_coordinates;", "    let mut ret:\
    \ Vec<(isize, isize)> = Vec::new();\n    for i in lst {\n        for j in i {\n\
    \            if j == x {\n                ret.push((i.len() - 1, j));\n      \
    \      }\n        }\n    }\n    ret.sort((a, b) => a[0] - b[0]);\n    ret.sort((a,\
    \ b) => b[1] - a[1]);\n    return ret;", "    let rows = lst.map(|vec| vec.map(|vec|\
    \ vec.length()));\n    let sorted_rows = rows.sort_by(|vec| vec.length());\n \
    \   let sorted_cols = sorted_rows.map(|row| row.sort_by(|vec| vec[0]));\n    let\
    \ sorted_coords = sorted_cols.map(|row| row.map(|vec| vec.map(|x| x)));\n    sorted_coords.map(|tuple|\
    \ tuple.sort_by(|tuple| tuple[0]));\n    sorted_coords.map(|tuple| tuple.map(|tuple|\
    \ tuple.map(|x| x)));\n    sorted_coords.map(|tuple| tuple.map(|tuple| tuple.map(|x|\
    \ x)));\n    sorted_coords.map(|tuple| tuple.map(|tuple| tuple.map(|x| x)));\n\
    \    sorted_coords.map(|tuple| tuple.map(|tuple| tuple.map(|x| x)));\n    sorted_coords.map(|tuple|\
    \ tuple.map(|tuple| tuple.map(|x| x)));\n    sorted_coords.map(|tuple| tuple.map(|tuple|\
    \ tuple.map(|x| x)));\n    sorted_coords.map(|tuple| tuple.map(|tuple| tuple.map(|x|\
    \ x)));\n    sorted_coords.map(|tuple| tuple.map(|tuple| tuple.map(|x| x)));\n\
    \    sorted_coords.map(|tuple| tuple.map(|tuple| tuple.map(|x| x)));\n    sorted_coords.map(|tuple|\
    \ tuple.map(|tuple| tuple.map(|x| x)));\n    sorted_coords.map(|tuple| tuple.map(|tuple|\
    \ tuple.map(|x| x)));\n    sorted_coords.map(|tuple| tuple.map(|tuple", "    let\
    \ mut result: Vec<(isize, isize)> = Vec::new();\n    let mut row_index = 0;\n\
    \    for row in lst {\n        for column in row {\n            if column == x\
    \ {\n                result.push((row_index, column));\n            }\n      \
    \  }\n        row_index += 1;\n    }\n    return result;", "  let rows = lst.map(|row|\
    \ row.map(|col| col.map(|_| 0)));\n  let sorted_rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n  let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n\
    \  let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (col, x)));\n\
    \  return sorted_coordinates;", "    let rows = lst.map(|row| row.map(|col| col.index_of(x)));\n\
    \    let sorted_rows = rows.sort_by(|row| row.index_of(0));\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort_by(|col| -col));\n    return sorted_cols.map(|col|\
    \ (col.index_of(0), 0));", "    let rows = lst.map(|row| row.map(|col| col.map(|_|\
    \ 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coordinates\
    \ = sorted_cols.map(|row| row.map(|col| (col, x)));\n    return sorted_coordinates;",
  "    let mut result: Vec<(isize, isize)> = Vec::new();\n    for i in lst {\n   \
    \     for j in i {\n            if j == x {\n                result.push((i.len()\
    \ - 1, j));\n            }\n        }\n    }\n    result.sort((a, b) => a[0] -\
    \ b[0]);\n    result.sort((a, b) => a[1] - b[1]);\n    return result;", "    let\
    \ mut result: Vec<(isize, isize)> = Vec::new();\n    for i in lst {\n        for\
    \ j in i {\n            if j == x {\n                result.push((i.len() - 1,\
    \ j));\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0]);\n\
    \    result.sort((a, b) => b[1] - a[1]);\n    return result;", "    let rows =\
    \ lst.map(|row| row.map(|col| col.get(x)));\n    rows.sort((a, b) => a.row - b.row);\n\
    \    rows.sort((a, b) => b.columns - a.columns);\n    return rows.map((row, i)\
    \ => (row.row, row.columns));", "    let rows = lst.map(|row| row.map(|col| col.get(x)));\n\
    \    rows.sort((a, b) => a.row - b.row);\n    rows.sort((a, b) => b.col - a.col);\n\
    \    return rows.map((row, i) => (row.row, row.col));", "    let rows = lst.map(|row|\
    \ row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b -\
    \ a));\n    let sorted_coords = sorted_cols.map(|row| row.map(|col| (x, col)));\n\
    \    return sorted_coords;", "    let row = Vec::new();\n    for i in lst {\n\
    \        for j in i {\n            if j == x {\n                row.push((i.len(),\
    \ j));\n            }\n        }\n    }\n    row.sort((a, b) => a[0] - b[0]);\n\
    \    row.sort((a, b) => b[1] - a[1]);\n    return row;", "    let rows = lst.map(|row|\
    \ row.map(|col| col.index_of(x)));\n    let sorted_rows = rows.sort((a, b) =>\
    \ a - b);\n    let sorted_cols = rows.map(|row| row.sort((a, b) => b - a));\n\
    \    let sorted_coordinates = sorted_rows.map(|row| sorted_cols.map(|col| (row,\
    \ col)));\n    return sorted_coordinates;", "    let rows = lst.map(|row| row.map(|col|\
    \ col + 1));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let\
    \ sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coordinates\
    \ = sorted_cols.map(|row| row.map(|col| (x, col)));\n    return sorted_coordinates;",
  "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row|\
    \ row.map(|col| (col, x)));\n    return sorted_coordinates;", "    let row = 0;\n\
    \    for i in lst {\n        for j in i {\n            if j == x {\n         \
    \       return vec![(row, j)]\n            }\n        }\n        row += 1\n  \
    \  }\n    return vec![(0, 0)]", "    let row_count = lst.len();\n    let row_index\
    \ = 0;\n    let row_coordinates = Vec::new();\n    for row in lst {\n        let\
    \ column_count = row.len();\n        let column_index = 0;\n        for column\
    \ in row {\n            row_coordinates.add(row_index, column_index);\n      \
    \      column_index += 1;\n        }\n        row_index += 1;\n    }\n    let\
    \ sorted_row_coordinates = row_coordinates.sort((a, b) => a[0] - b[0]);\n    let\
    \ sorted_row_coordinates_by_column = sorted_row_coordinates.sort((a, b) => a[1]\
    \ - b[1]);\n    let sorted_row_coordinates_by_column_desc = sorted_row_coordinates_by_column.sort((a,\
    \ b) => b[1] - a[1]);\n    let sorted_row_coordinates_by_column_desc_by_row =\
    \ sorted_row_coordinates_by_column_desc.sort((a, b) => a[0] - b[0]);\n    let\
    \ sorted_row_coordinates_by_column_desc_by_row_desc = sorted_row_coordinates_by_column_desc_by_row.sort((a,\
    \ b) => b[0] - a[0]);\n    let sorted_row_coordinates_by_column_desc_by_row_desc_by_column\
    \ = sorted_row_coordinates_by_column_desc_by_row_desc.sort((a, b) => a[1] - b[1]);\n\
    \    let sorted_row_coordinates_by_column_desc_by_row_desc_by_column_desc = sorted_row_coordinates_by_column_desc_by_row_desc_by_column.sort((a,\
    \ b) => b[1] - a[1]);\n    let sorted_row_coordinates_by_column_desc_by_row_desc_by_column_desc_by_row\
    \ = sorted_row_coordinates_by_column_desc_by_row_desc_by_column_desc.sort((a,\
    \ b)", "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let\
    \ sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coords = sorted_cols.map(|row| row.map(|col|\
    \ (col, x)));\n    return sorted_coords;", "    let rows = lst.map(|row| row.map(|col|\
    \ col + 1));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let\
    \ sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coordinates\
    \ = sorted_cols.map(|row| row.map(|col| (x, col)));\n    return sorted_coordinates;",
  "    let row = 0;\n    let col = 0;\n    let vec = Vec::new();\n    for i in lst\
    \ {\n        for j in i {\n            if j == x {\n                vec.push((row,\
    \ col));\n            }\n            col += 1;\n        }\n        row += 1;\n\
    \        col = 0;\n    }\n    return vec;", "    let rows = lst.map((row) => {\n\
    \        let sorted_row = row.sort((a, b) => a - b);\n        let sorted_cols\
    \ = sorted_row.map((col) => {\n            let sorted_col = col.sort((a, b) =>\
    \ b - a);\n            return (sorted_col, sorted_row.indexOf(col));\n       \
    \ });\n        return sorted_cols;\n    });\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map((row) => {\n    \
    \    let sorted_col = row.sort((a, b) => b[1] - a[1]);\n        return (sorted_col,\
    \ row[1]);\n    });\n    return sorted_cols.map((col) => (col[0], col[1]));",
  "    let row_count = lst.len();\n    let row_index = 0;\n    let row_coordinates\
    \ = Vec::new();\n    for row in lst {\n        let row_coordinate = Vec::new();\n\
    \        for column in row {\n            let column_index = 0;\n            for\
    \ coordinate in row_coordinates {\n                if coordinate.0 == row_index\
    \ {\n                    column_index = coordinate.1;\n                    break;\n\
    \                }\n            }\n            row_coordinate.push(column_index);\n\
    \        }\n        row_coordinates.push(row_coordinate);\n        row_index +=\
    \ 1;\n    }\n    let sorted_row_coordinates = row_coordinates.sort((a, b) => a.0\
    \ - b.0);\n    let sorted_row_coordinates_index = 0;\n    let sorted_row_coordinates_count\
    \ = sorted_row_coordinates.len();\n    let sorted_row_coordinates_coordinate =\
    \ Vec::new();\n    for sorted_row_coordinates_index in 0..sorted_row_coordinates_count\
    \ {\n        sorted_row_coordinates_coordinate.push(sorted_row_coordinates[sorted_row_coordinates_index]);\n\
    \        if sorted_row_coordinates_coordinate.len() == x {\n            break;\n\
    \        }\n    }\n    let coordinates = Vec::new();\n    for sorted_row_coordinates_index\
    \ in 0..sorted_row_coordinates_count {\n        let sorted_row_coordinates_coordinate\
    \ = sorted_row_coordinates[sorted_row_coordinates_index];\n        let row_index\
    \ = sorted_row_coordinates_coordinate.0;\n        let column_index = sorted_row_coordinates_coordinate.1;\n\
    \        coordinates.push((row_index, column_index));\n    }\n    return coordinates;",
  "    let row_count = lst.len();\n    let row_index = 0;\n    let coord_count = 0;\n\
    \    let coord_index = 0;\n    let coord_row = 0;\n    let coord_column = 0;\n\
    \    let coord_row_count = 0;\n    let coord_column_count = 0;\n    let result\
    \ = Vec::new();\n    for coord_index in 0..row_count {\n        coord_row_count\
    \ = lst[coord_index].len();\n        coord_row = coord_index;\n        coord_column_count\
    \ = lst[coord_index][coord_index].len();\n        coord_column = coord_index;\n\
    \        for coord_row_index in 0..coord_row_count {\n            coord_row =\
    \ coord_index;\n            coord_column = coord_index;\n            for coord_column_index\
    \ in 0..coord_column_count {\n                coord_row = coord_index;\n     \
    \           coord_column = coord_index;\n                if coord_row == x {\n\
    \                    result.append((coord_row, coord_column));\n             \
    \   }\n            }\n        }\n    }\n    return result;", "    let rows = lst.map(|row|\
    \ row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b -\
    \ a));\n    let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (col,\
    \ x)));\n    return sorted_coordinates;", "    let rows = lst.map((row) => {\n\
    \        let sorted_row = row.sort((a, b) => a - b);\n        let sorted_cols\
    \ = sorted_row.map((col) => col.sort((a, b) => b - a));\n        return sorted_cols;\n\
    \    });\n    let sorted_rows = rows.sort((a, b) => a - b);\n    let sorted_cols\
    \ = sorted_rows.map((row) => row.map((col) => (col, x)));\n    return sorted_cols;",
  "    let rows = lst.map(|row| row.map(|col| col + 1));\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a,\
    \ b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row| row.map(|col|\
    \ (x, col)));\n    return sorted_coordinates;", "    let rows = lst.map(|row|\
    \ row.map(|col| col + 1));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n\
    \    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n   \
    \ let result = sorted_cols.map((row, i) => (row[i], i));\n    result.map((row,\
    \ i) => (row[0], i))", "    let rows = lst.map(|row| row.map(|col| col.index_of(x)));\n\
    \    rows.sort((a, b) => a - b);\n    rows.sort((a, b) => b - a);\n    return\
    \ rows.map((row, i) => (i, row));", "    let rows = lst.map(|row| row.map(|col|\
    \ col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n\
    \    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n   \
    \ let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (x, col)));\n \
    \   return sorted_coordinates;", "    let rows = lst.map(|row| row.map(|col| col.map(|_|\
    \ 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coordinates\
    \ = sorted_cols.map(|row| row.map(|col| (col, x)));\n    return sorted_coordinates;",
  "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map((col,\
    \ i) => (i, col));\n    let coordinates = sorted_coordinates.map((coord, i) =>\
    \ (i, coord));\n    let result = coordinates.filter((coord, i) => coord[0] ==\
    \ x);\n    return result.map((coord, i) => (coord[1], coord[0]));", "    let row\
    \ = 0;\n    let col = 0;\n    let result = Vec::new();\n    for i in lst {\n \
    \       for j in i {\n            if j == x {\n                result.push((row,\
    \ col));\n            }\n            col += 1;\n        }\n        row += 1;\n\
    \        col = 0;\n    }\n    return result;", "    let row = 0;\n    for i in\
    \ lst {\n        for j in i {\n            if j == x {\n                return\
    \ vec![(row, j)];\n            }\n        }\n        row += 1;\n    }\n    return\
    \ vec![];", "    let rows = lst.map(|v| v.len);\n    let sorted_rows = sort_by(rows,\
    \ |r| r);\n    let sorted_cols = sort_by(sorted_rows, |r| r.len);\n    let sorted_coords\
    \ = sorted_cols.map(|c| (c, x));\n    return sorted_coords", "    let rows = lst.map(|row|\
    \ row.map(|col| col.get(x)));\n    rows.sort((a, b) => a.row - b.row);\n    rows.sort((a,\
    \ b) => b.col - a.col);\n    return rows.map((row, i) => (row.row, row.col));",
  "    let rows = lst.map(|row| row.map(|col| col + 1));\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a,\
    \ b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row| row.map(|col|\
    \ (x, col)));\n    return sorted_coordinates;", "    let mut result: Vec<(isize,\
    \ isize)> = Vec::new();\n    for i in lst {\n        for j in i {\n          \
    \  if j == x {\n                result.push((i.len() - 1, j));\n            }\n\
    \        }\n    }\n    result.sort((a, b) => a[0] - b[0]);\n    result.sort((a,\
    \ b) => a[1] - b[1]);\n    return result;", "    let row = Vec::new();\n    for\
    \ i in lst {\n        for j in i {\n            if j == x {\n                row.push((i,\
    \ j));\n            }\n        }\n    }\n    row.sort((a, b) => a[0] - b[0]);\n\
    \    row.sort((a, b) => b[1] - a[1]);\n    return row;", "    let rows = lst.map(|row|\
    \ row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b -\
    \ a));\n    let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (col,\
    \ x)));\n    return sorted_coordinates;", "    let rows = lst.map(|row| row.map(|col|\
    \ col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n\
    \    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n   \
    \ let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (col, x)));\n \
    \   return sorted_coordinates;", "    let rows = lst.map((row) => {\n        let\
    \ sorted_row = row.sort((a, b) => a - b);\n        let sorted_cols = sorted_row.map((col)\
    \ => col.sort((a, b) => b - a));\n        return sorted_cols;\n    });\n    let\
    \ sorted_rows = rows.sort((a, b) => a - b);\n    let sorted_cols = sorted_rows.map((row)\
    \ => row.sort((a, b) => b - a));\n    let coordinates = sorted_cols.map((col)\
    \ => (x, col));\n    return coordinates;", "    let rows = lst.map(|row| row.map(|col|\
    \ col.get(x)));\n    rows.sort((a, b) => a.row - b.row);\n    rows.sort((a, b)\
    \ => b.col - a.col);\n    return rows.map((row, i) => (row.row, row.col));", " \
    \   let mut result = Vec::new();\n    for i in lst {\n        for j in i {\n \
    \           if j == x {\n                result.push((i.len() - 1, j));\n    \
    \        }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0]);\n    result.sort((a,\
    \ b) => b[1] - a[1]);\n    return result;", "    let mut ret = Vec::new();\n \
    \   for i in lst {\n        for j in i {\n            if j == x {\n          \
    \      ret.push((i.len() - 1, j));\n            }\n        }\n    }\n    ret.sort_by(|&(a,\
    \ b) { return a.0 < b.0; });\n    ret.sort_by(|&(a, b) { return a.1 > b.1; });\n\
    \    return ret;", "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n\
    \    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coordinates\
    \ = sorted_cols.map(|row| row.map(|col| (col, x)));\n    return sorted_coordinates;",
  "    let rows = lst.map(|row| {\n        let sorted_row = row.sort((a, b) => a -\
    \ b);\n        let sorted_cols = sorted_row.map(|col| {\n            let sorted_col\
    \ = col.sort((a, b) => b - a);\n            return (sorted_col, sorted_row.indexOf(col));\n\
    \        });\n        return sorted_cols;\n    });\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| {\n       \
    \ let sorted_col = row.sort((a, b) => b[1] - a[1]);\n        return sorted_col;\n\
    \    });\n    let sorted_coords = sorted_cols.map(|col| {\n        let sorted_row\
    \ = rows.find(|row| {\n            return row[0] == col[0];\n        });\n   \
    \     return (sorted_row[0], sorted_col[0]);\n    });\n    return sorted_coords;",
  "    let rows = lst.map(|v| v.length);\n    let sorted_rows = rows.sort();\n   \
    \ let sorted_cols = rows.map(|v| v.sort());\n    let sorted_coordinates = sorted_rows.map(|v|\
    \ v.map(|c| c.map(|r| r + 1)));\n    let coordinates = sorted_coordinates.filter(|c|\
    \ c.length > 0);\n    let coordinates_by_row = coordinates.map(|c| c.map(|c| c.map(|r|\
    \ r + 1)));\n    let coordinates_by_col = coordinates_by_row.map(|c| c.map(|c|\
    \ c.sort().reverse()));\n    let coordinates_by_row_sorted = coordinates_by_row.sort();\n\
    \    let coordinates_by_col_sorted = coordinates_by_col.sort();\n    let coordinates_by_row_sorted_by_col\
    \ = coordinates_by_row_sorted.map(|c| c.map(|c| c.sort().reverse()));\n    let\
    \ coordinates_by_col_sorted_by_row = coordinates_by_col_sorted.map(|c| c.map(|c|\
    \ c.sort()));\n    let coordinates_by_row_sorted_by_col_sorted_by_row = coordinates_by_row_sorted_by_col.sort();\n\
    \    let coordinates_by_col_sorted_by_row_sorted_by_col = coordinates_by_col_sorted_by_row.sort();\n\
    \    let coordinates_by_row_sorted_by_col_sorted_by_row_sorted_by_col = coordinates_by_row_sorted_by_col_sorted_by_row.sort();\n\
    \    let coordinates_by_row_sorted_by_col_sorted_by_row_sorted_by_col_sorted_by_row\
    \ = coordinates_by_row_sorted_by_col_sorted_by_row_sorted_by_col.sort();\n   \
    \ let coordinates_by_row_sorted_by_col_sorted_by", "    let rows = lst.map(|row|\
    \ row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b -\
    \ a));\n    let result = sorted_cols.map((row, i) => (i, row[x]));\n    return\
    \ result;", "    let mut ret = Vec::new();\n    for i in lst {\n        for j\
    \ in i {\n            if j == x {\n                ret.push((i.len() - 1, j));\n\
    \            }\n        }\n    }\n    ret.sort_by(|&(a, b) { a.0 });\n    ret.sort_by(|&(a,\
    \ b) { a.1.desc() });\n    return ret;", "    let rows = lst.map(|row| row.map(|col|\
    \ col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n\
    \    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n   \
    \ let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (col, x)));\n \
    \   return sorted_coordinates;", "  let rows = lst.map(|v| v.len());\n  let sorted_rows\
    \ = sort_by(rows, |r| r);\n  let sorted_cols = sort_by(sorted_rows, |r| r.len());\n\
    \  let sorted_coords = sorted_cols.map(|c| (c, x));\n  let sorted_coords_by_row\
    \ = sort_by(sorted_coords, |c| c.0);\n  return sorted_coords_by_row.map(|c| (c.0,\
    \ c.1));", "    let row_count = lst.len();\n    let row_index = 0;\n    let row_coordinates\
    \ = Vec::new();\n    for row in lst {\n        let row_coordinate = Vec::new();\n\
    \        for column in row {\n            let column_index = column;\n       \
    \     let column_coordinate = (row_index, column_index);\n            row_coordinate.append(column_coordinate);\n\
    \        }\n        row_coordinates.append(row_coordinate);\n        row_index\
    \ += 1;\n    }\n    row_coordinates.sort((a, b) => a[0] - b[0]);\n    row_coordinates.sort((a,\
    \ b) => b[1] - a[1]);\n    let coordinates = Vec::new();\n    for row in row_coordinates\
    \ {\n        let coordinate = (row[0], row[1]);\n        coordinates.append(coordinate);\n\
    \    }\n    coordinates.sort((a, b) => a[0] - b[0]);\n    coordinates.sort((a,\
    \ b) => b[1] - a[1]);\n    let coordinates_count = coordinates.len();\n    let\
    \ coordinates_index = 0;\n    let coordinates_coordinate = Vec::new();\n    for\
    \ coordinate in coordinates {\n        let coordinate_index = coordinate[1];\n\
    \        let coordinate_coordinate = (coordinate[0], coordinate_index);\n    \
    \    coordinates_coordinate.append(coordinate_coordinate);\n        coordinates_index\
    \ += 1;\n    }\n    coordinates_coordinate.sort((a, b) => a[0] - b[0]);\n    coordinates_coordinate.sort((a,\
    \ b) => b[1] - a[1]);\n    let coordinates_coordinates = Vec::new();\n    for\
    \ coordinate in coordinates_coordinate {\n        let coordinate_coordinate =\
    \ (coordinate[0], coordinate[1]);\n        coordinates_coordinates.append(coordinate_coordinate);\n\
    \    }\n    coordinates_coordinates.sort((a, b) => a[0] - b[0]);\n    coordinates_coordinates.sort((a,\
    \ b) => b[1] - a[1]);", "    let rows = lst.map(|v| v.len());\n    let sorted_rows\
    \ = rows.sort();\n    let sorted_cols = rows.map(|row| row.sort());\n    let sorted_coordinates\
    \ = sorted_rows.map(|row| sorted_cols.map(|col| (row, col)));\n    let coordinates\
    \ = sorted_coordinates.filter(|tuple| tuple[0] == x);\n    return coordinates;",
  "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row|\
    \ row.map(|col| (x, col)));\n    return sorted_coordinates;", "    let rows =\
    \ lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a,\
    \ b) => b - a));\n    let sorted_coords = sorted_cols.map(|row| row.map(|col|\
    \ (col, x)));\n    return sorted_coords;", "    let rows = lst.map((row) => {\n\
    \        let sorted_row = row.sort((a, b) => a - b);\n        let sorted_cols\
    \ = sorted_row.map((col) => col.sort((a, b) => b - a));\n        return sorted_cols;\n\
    \    });\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map((row) => row.map((col) => col[x]));\n    return sorted_cols;",
  "    let mut r: Vec<(isize, isize)> = Vec::new();\n    for i in lst {\n        for\
    \ j in i {\n            if j == x {\n                r.push((i.len() - 1, j));\n\
    \            }\n        }\n    }\n    r.sort((a, b) => a[0] - b[0]);\n    r.sort((a,\
    \ b) => a[1] - b[1]);\n    return r;", "    let mut result: Vec<(isize, isize)>\
    \ = Vec::new();\n    for i in lst {\n        for j in i {\n            if j ==\
    \ x {\n                result.push((i, j));\n            }\n        }\n    }\n\
    \    result.sort((a, b) => a[0] - b[0]);\n    result.sort((a, b) => a[1] - b[1]);\n\
    \    return result;", "    let rows = lst.map(|row| row.map(|col| col + 1));\n\
    \    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coords =\
    \ sorted_cols.map(|row| row.map(|col| (x, col)));\n    return sorted_coords;",
  "    let mut ret: Vec<(isize, isize)> = Vec::new();\n    for i in lst {\n      \
    \  for j in i {\n            if j == x {\n                ret.push((i, j));\n\
    \            }\n        }\n    }\n    ret.sort((a, b) => a[0] - b[0]);\n    ret.sort((a,\
    \ b) => a[1] - b[1]);\n    return ret;", "    let rows = lst.map(|row| row.map(|col|\
    \ col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n\
    \    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n   \
    \ let sorted_coordinates = sorted_cols.map(|row| row.map(|col| (col, x)));\n \
    \   return sorted_coordinates;", "    let rows = lst.map(|row| row.map(|col| col.get(x)));\n\
    \    let sorted_rows = rows.sort((a, b) => a.row - b.row);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.map(|col| col.sort((a, b) => b - a)));\n    return\
    \ sorted_cols.map((row, i) => (row.col, i));", "    let mut result = Vec::new();\n\
    \    for i in lst {\n        for j in i {\n            if j == x {\n         \
    \       result.push((i.len() - 1, j));\n            }\n        }\n    }\n    result.sort((a,\
    \ b) => a[0] - b[0]);\n    result.sort((a, b) => a[1] - b[1]);\n    return result;",
  "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row|\
    \ row.map(|col| (col, x)));\n    return sorted_coordinates;", "    let row_count\
    \ = lst.len();\n    let row_index = 0;\n    let coord_count = 0;\n    let coord_index\
    \ = 0;\n    let result = Vec::new();\n    for i in 0..row_count {\n        let\
    \ row = lst[i];\n        let coord_count = row.len();\n        for j in 0..coord_count\
    \ {\n            let coord = row[j];\n            if coord == x {\n          \
    \      result.add((row_index, coord_index));\n            }\n            coord_index\
    \ += 1;\n        }\n        row_index += 1;\n        coord_index = 0;\n    }\n\
    \    return result;", "    let rows = lst.map(|row| {\n        let sorted_row\
    \ = row.sort(|a, b| a - b);\n        let sorted_cols = sorted_row.map(|col| {\n\
    \            let sorted_col = sorted_row.sort(|a, b| b - a);\n            return\
    \ (sorted_col, col);\n        });\n        return sorted_cols;\n    });\n    let\
    \ sorted_rows = rows.sort(|a, b| a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ {\n        let sorted_col = sorted_rows.sort(|a, b| b[1] - a[1]);\n        return\
    \ (row[0], sorted_col[0]);\n    });\n    return sorted_cols;", "    let rows =\
    \ lst.map(|row| row.map(|col| col.get(x)));\n    rows.sort((a, b) => a.row - b.row);\n\
    \    rows.sort((a, b) => b.column - a.column);\n    return rows.map(|row| (row.row,\
    \ row.column));", "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n\
    \    let sorted_rows = rows.sort_by(|row| row.sort_by(|col| -col));\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.map(|col| col.sort_by(|_| -1)));\n    let sorted_coordinates\
    \ = sorted_cols.map(|row| row.map(|col| (x, col)));\n    return sorted_coordinates;",
  "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coords = sorted_cols.map(|row| row.map(|col|\
    \ (col, x)));\n    return sorted_coords;", "    let rows = lst.map(|row| row.map(|col|\
    \ col + 1));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let\
    \ sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coords\
    \ = sorted_cols.map(|row| row.map(|col| (x, col)));\n    return sorted_coords;",
  "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row|\
    \ row.map(|col| (col, x)));\n    return sorted_coordinates;", "    let mut vec\
    \ = Vec::new();\n    for i in lst {\n        for j in i {\n            vec.push((i,\
    \ j));\n        }\n    }\n    vec.sort((a, b) => a[0] - b[0]);\n    vec.sort((a,\
    \ b) => a[1] - b[1]);\n    vec.filter((_, y) => y == x);\n    return vec;", " \
    \   let mut vec = Vec::new();\n    for i in lst {\n        for j in i {\n    \
    \        if j == x {\n                vec.push((i.len() - 1, j));\n          \
    \  }\n        }\n    }\n    vec.sort_by(|&(a, b) { a.len() - b.len() });\n   \
    \ vec.sort_by(|&(a, b) { b.len() - a.len() });\n    return vec;", "    let row\
    \ = 0;\n    let result = Vec::new();\n    for i in lst {\n        for j in i {\n\
    \            if j == x {\n                result.push((row, j));\n           \
    \ }\n        }\n        row += 1;\n    }\n    result.sort((a, b) => a[0] - b[0]);\n\
    \    result.sort((a, b) => a[1] - b[1]);\n    return result;", "    let rows =\
    \ lst.map((row) => {\n        let sorted_row = row.sort((a, b) => a - b);\n  \
    \      let sorted_cols = sorted_row.map((col) => {\n            return (col, sorted_row.indexOf(col));\n\
    \        });\n        return sorted_cols;\n    });\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map((row) => {\n    \
    \    return (row[1], row[0]);\n    });\n    return sorted_cols.map((col) => {\n\
    \        return (x, col[0]);\n    });", "    let mut vec = Vec::new();\n    for\
    \ i in lst {\n        for j in i {\n            if j == x {\n                vec.push((i.len(),\
    \ j));\n            }\n        }\n    }\n    vec.sort_by(|&(a, b) { return a.0\
    \ < b.0; });\n    vec.sort_by(|&(a, b) { return a.1 < b.1; });\n    return vec;",
  "    let rows = lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows\
    \ = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.sort((a, b) => b - a));\n    let sorted_coords = sorted_cols.map(|row| row.map(|col|\
    \ (x, col)));\n    return sorted_coords;", "  let row_index = 0;\n  let col_index\
    \ = 0;\n  let row_count = 0;\n  let col_count = 0;\n  let result = Vec::new();\n\
    \  for (let i = 0; i < lst.len(); i++) {\n    if (lst[i].len() > 0) {\n      row_count\
    \ = lst[i].len();\n      col_count = lst[i][0].len();\n      for (let j = 0; j\
    \ < row_count; j++) {\n        if (lst[i][j].len() > 0) {\n          for (let\
    \ k = 0; k < col_count; k++) {\n            if (lst[i][j][k] == x) {\n       \
    \       result.push((row_index, k));\n            }\n          }\n        }\n\
    \      }\n    }\n    row_index += 1;\n    col_index = 0;\n  }\n  return result;",
  "    let rows = lst.map(|row| row.map(|col| col.get(x)));\n    let sorted_rows =\
    \ rows.sort((a, b) => a.row - b.row);\n    let sorted_cols = sorted_rows.map(|row|\
    \ row.map(|col| col.sort((a, b) => b - a)));\n    return sorted_cols.map((row,\
    \ i) => (row.col, i));", "    let rows = lst.map((row) => {\n        let sorted_row\
    \ = row.sort((a, b) => a - b);\n        let sorted_cols = sorted_row.map((col)\
    \ => col.sort((a, b) => b - a));\n        return sorted_cols;\n    });\n    let\
    \ sorted_rows = rows.sort((a, b) => a - b);\n    let sorted_cols = sorted_rows.map((row)\
    \ => row.map((col) => (col, x)));\n    return sorted_cols;", "    let rows = lst.map(|row|\
    \ row.map(|col| col.get(x)));\n    let sorted_rows = rows.sort((a, b) => a.row\
    \ - b.row);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b\
    \ - a));\n    return sorted_cols.map((col, i) => (col, i));", "    let rows =\
    \ lst.map(|row| row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a,\
    \ b) => a[0] - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a,\
    \ b) => b - a));\n    let sorted_coordinates = sorted_cols.map(|row| row.map(|col|\
    \ (col, x)));\n    return sorted_coordinates;", "    let rows = lst.map(|row|\
    \ row.map(|col| col + 1));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n\
    \    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b - a));\n   \
    \ let result = sorted_cols.map((col, row) => (row, col));\n    result.map((row,\
    \ col) => (row + 1, col + 1));", "    let rows = lst.map(|row| row.map(|col| col.map(|_|\
    \ 0)));\n    let sorted_rows = rows.sort((a, b) => a[0] - b[0]);\n    let sorted_cols\
    \ = sorted_rows.map(|row| row.sort((a, b) => b - a));\n    let sorted_coords =\
    \ sorted_cols.map(|row| row.map(|col| (col, x)));\n    return sorted_coords;",
  "    let rows = lst.map(|v| v.length);\n    let sorted_rows = sort_by(rows, |r|\
    \ r);\n    let sorted_cols = sort_by(sorted_rows, |r| r.length);\n    let sorted_coords\
    \ = sorted_cols.map(|c| (x, c));\n    return sorted_coords", "    let row_count\
    \ = lst.len();\n    let row_index = 0;\n    let row_coordinates = Vec::new();\n\
    \    for row in lst {\n        let row_coordinates_count = row.len();\n      \
    \  let row_coordinates_index = 0;\n        for row_coordinate in row {\n     \
    \       if row_coordinates_index == 0 {\n                row_coordinates.push((row_index,\
    \ row_coordinates_count));\n            }\n            row_coordinates_index +=\
    \ 1;\n        }\n        row_index += 1;\n    }\n    let sorted_row_coordinates\
    \ = row_coordinates.sort((a, b) => a[0] - b[0]);\n    let sorted_row_coordinates_count\
    \ = sorted_row_coordinates.len();\n    let sorted_row_coordinates_index = 0;\n\
    \    let sorted_row_coordinates_value = Vec::new();\n    for sorted_row_coordinates_value\
    \ in sorted_row_coordinates {\n        let sorted_row_coordinates_value_count\
    \ = sorted_row_coordinates_value.len();\n        let sorted_row_coordinates_value_index\
    \ = 0;\n        for sorted_row_coordinates_value_value in sorted_row_coordinates_value\
    \ {\n            if sorted_row_coordinates_value_index == 0 {\n              \
    \  sorted_row_coordinates_value.push((sorted_row_coordinates_count, sorted_row_coordinates_value_count));\n\
    \            }\n            sorted_row_coordinates_value_index += 1;\n       \
    \ }\n        sorted_row_coordinates_count += 1;\n    }\n    let sorted_row_coordinates_value_count\
    \ = sorted_row_coordinates_value.len();\n    let sorted_row_coordinates_value_index\
    \ = 0;\n    for sorted_row_coordinates_value_value in sorted_row_coordinates_value\
    \ {\n        if sorted_row_coordinates_value_index == 0 {\n            sorted_row_coordinates_value.push((sorted_row_coordinates_count,\
    \ sorted_row_coordinates_value_count));\n        }\n        s", "    let row_index\
    \ = 0;\n    let col_index = 0;\n    let row_count = 0;\n    let col_count = 0;\n\
    \    let row_vec = Vec::new();\n    let col_vec = Vec::new();\n    for row in\
    \ lst {\n        for col in row {\n            if col_index == 0 {\n         \
    \       row_vec = Vec::new(row_count, col_count);\n                row_count =\
    \ row_count + 1;\n            }\n            row_vec[row_index] = col_vec[col_index];\n\
    \            col_vec[col_index] = col;\n            col_index = col_index + 1;\n\
    \        }\n        row_index = 0;\n        col_index = 0;\n        col_count\
    \ = 0;\n    }\n    let row_vec_sorted = row_vec.sort();\n    let row_vec_sorted_rev\
    \ = row_vec_sorted.reverse();\n    let row_vec_sorted_rev_sorted = row_vec_sorted_rev.sort();\n\
    \    let row_vec_sorted_sorted_rev = row_vec_sorted_sorted_rev.reverse();\n  \
    \  let row_vec_sorted_sorted_rev_sorted = row_vec_sorted_sorted_rev_sorted.sort();\n\
    \    let row_vec_sorted_sorted_rev_sorted_rev = row_vec_sorted_sorted_rev_sorted.reverse();\n\
    \    let row_vec_sorted_sorted_rev_sorted_rev_sorted = row_vec_sorted_sorted_rev_sorted_rev.sort();\n\
    \    let row_vec_sorted_sorted_rev_sorted_rev_sorted_rev = row_vec_sorted_sorted_rev_sorted_rev_sorted.reverse();\n\
    \    let row_vec_sorted_sorted_rev_sorted_rev_sorted_rev_sorted = row_vec_sorted_sorted_rev_sorted_rev_sorted_rev.sort();\n\
    \    let row_vec_sorted_sorted_rev_sorted_rev", "    let rows = lst.map(|row|\
    \ row.map(|col| col.map(|_| 0)));\n    let sorted_rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n    let sorted_cols = sorted_rows.map(|row| row.sort((a, b) => b -\
    \ a));\n    let sorted_coordinates = sorted_cols.map(|col| (x, col));\n    return\
    \ sorted_coordinates;"]
stop_tokens:
- "\n}"
