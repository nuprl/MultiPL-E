name: HumanEval_159_eat
language: rs
prompt: "/// You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n\
  /// you should return a vector of [ total number of eaten carrots after your meals,\n\
  /// the number of carrots left after your meals ]\n/// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n\
  /// >>> eat(5, 6, 10)\n/// vec![11, 4]\n/// >>> eat(4, 8, 9)\n/// vec![12, 1]\n\
  /// >>> eat(1, 10, 10)\n/// vec![11, 0]\n/// >>> eat(2, 11, 5)\n/// vec![7, 0]\n\
  /// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n\
  /// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining\
  \ : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n\
  /// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n\
  /// Have fun :)\nfn eat(number: isize, need: isize, remaining: isize) -> Vec<isize>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6,\
  \ 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
  \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n   \
  \ assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1),\
  \ vec![5, 0]);\n}\n"
completions: ["  if number >= need {\n    return Vec![number, 0]\n  }\n  if number\
    \ < need and remaining > 0 {\n    return Vec![number, remaining]\n  }\n  return\
    \ Vec![number, 0]", "  if number >= need {\n    return Vec![number, remaining]\n\
    \  }\n  if number == 0 {\n    return Vec![0, 0]\n  }\n  return Vec![number, need\
    \ - number]", "  if number >= need {\n    return Vec![number, remaining]\n  }\n\
    \  if number < need {\n    return Vec![number, 0]\n  }\n  return Vec![number,\
    \ need - number]", "  if number >= need {\n    return Vec![number, 0]\n  }\n \
    \ if number < need and remaining >= need - number {\n    return Vec![number +\
    \ remaining, remaining - number]\n  }\n  return Vec![number, 0]", "  let n = number\
    \ + need;\n  let r = remaining - need;\n  if (n < r) {\n    return Vec![n, r];\n\
    \  } else {\n    return Vec![n, 0];\n  }", "  if number >= need {\n    return\
    \ Vec![number, remaining]\n  } else {\n    return Vec![number, 0]\n  }", "  let\
    \ eaten = number;\n  let left = need - eaten;\n  let total = eaten + left;\n \
    \ if left < 0 {\n    left = 0;\n  }\n  if total > remaining {\n    total = remaining;\n\
    \  }\n  return vec![total, left];", "  if number >= need {\n    return Vec![number,\
    \ remaining]\n  } else {\n    return Vec![number, 0]\n  }", "  if number < need\
    \ {\n    return Vec![number, remaining]\n  } else if number == need {\n    return\
    \ Vec![number, 0]\n  } else {\n    return Vec![number, 0]\n  }", "  if number\
    \ < need {\n    return Vec![number, remaining]\n  } else if number == need {\n\
    \    return Vec![number, 0]\n  } else {\n    return Vec![number, 0]\n  }", " \
    \ if number >= need {\n    return Vec![number, remaining]\n  }\n  return Vec![number,\
    \ 0]", "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number <\
    \ need and remaining > 0 {\n    return Vec![number, remaining]\n  }\n  return\
    \ Vec![number, 0]", "  if number >= need {\n    return Vec![number, 0]\n  }\n\
    \  if number < need and remaining >= need - number {\n    return Vec![number +\
    \ remaining, 0]\n  }\n  return Vec![number, need - number]", "  if number < need\
    \ {\n    return Vec![number, remaining]\n  } else if number == need {\n    return\
    \ Vec![number, 0]\n  } else {\n    return Vec![number, 0]\n  }", "  let total\
    \ = number + need;\n  if total > remaining {\n    return Vec![total, 0];\n  }\
    \ else {\n    return Vec![total, remaining - total];\n  }", "  let total = number\
    \ + need;\n  let left = remaining - total;\n  if left < 0 {\n    return Vec![total,\
    \ 0];\n  }\n  return Vec![total, left];", "  if number >= need {\n    return Vec![number,\
    \ remaining]\n  }\n  return Vec![number, 0]", "  let eaten = 0;\n  let eaten_remaining\
    \ = 0;\n  let remaining_eaten = 0;\n  let eaten_need = 0;\n  let remaining_need\
    \ = 0;\n  let total = 0;\n  if number >= need {\n    total = number;\n    remaining_eaten\
    \ = number - need;\n    remaining_need = 0;\n  } else {\n    total = number;\n\
    \    remaining_eaten = number;\n    remaining_need = need - number;\n  }\n  if\
    \ remaining >= remaining_need {\n    remaining_eaten = remaining - remaining_need;\n\
    \    remaining_need = 0;\n  } else {\n    remaining_eaten = remaining;\n    remaining_need\
    \ = remaining_need - remaining;\n  }\n  if remaining_eaten >= need {\n    eaten_need\
    \ = remaining_eaten - need;\n    remaining_need = 0;\n  } else {\n    eaten_need\
    \ = remaining_eaten;\n    remaining_need = need - remaining_eaten;\n  }\n  if\
    \ remaining_need >= need {\n    remaining_eaten = remaining_need - need;\n   \
    \ remaining_need = 0;\n  } else {\n    remaining_eaten = remaining_need;\n   \
    \ remaining_need = need - remaining_eaten;\n  }\n  if remaining_need >= need {\n\
    \    remaining_eaten = remaining_need - need;\n    remaining_need = 0;\n  } else\
    \ {\n    remaining_eaten = remaining_need;\n    remaining_need = need - remaining_eaten;\n\
    \  }\n  if remaining_need >= need {\n    remaining_eaten = remaining_need - need;\n\
    \    remaining_need = 0;\n  } else {\n    remaining_eaten = remaining_need;\n\
    \    remaining_need = need - remaining_eaten;\n  }\n  if remaining_need >= need\
    \ {\n    remaining_eaten = remaining_need - need;\n    remaining_need = 0;\n \
    \ } else {\n    remaining_eaten = remaining_need;\n    remaining_need = need -\
    \ remaining_eaten;\n", "  let eaten = 0;\n  let left = 0;\n  let total = 0;\n\
    \  while (number >= need) {\n    total += need;\n    left += need;\n    number\
    \ -= need;\n    eaten += need;\n  }\n  if (number > 0) {\n    total += number;\n\
    \    left += number;\n    eaten += number;\n  }\n  return vec![total, left];",
  "  if number < need {\n    return Vec![number, remaining]\n  } else if number ==\
    \ need {\n    return Vec![number, 0]\n  } else {\n    return Vec![number, 0]\n\
    \  }", "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number <\
    \ need and remaining >= need - number {\n    return Vec![number + remaining, 0]\n\
    \  }\n  return Vec![number, need - number]", "  let total = number + need;\n \
    \ let left = remaining - need;\n  if (left < 0) {\n    return Vec![total, 0];\n\
    \  } else {\n    return Vec![total, left];\n  }", "  if number >= need {\n   \
    \ return Vec![number, remaining]\n  } else {\n    return Vec![number, 0]\n  }",
  "  if number < need {\n    return Vec![number, remaining]\n  } else if number ==\
    \ need {\n    return Vec![number, 0]\n  } else {\n    return Vec![number, 0]\n\
    \  }", "  if number < need {\n    return Vec![number, remaining]\n  } else if\
    \ number == need {\n    return Vec![number, 0]\n  } else {\n    return Vec![number,\
    \ 0]\n  }", "  if number < need {\n    return Vec![number, remaining]\n  } else\
    \ if number == need {\n    return Vec![number, 0]\n  } else {\n    return Vec![number,\
    \ 0]\n  }", "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number\
    \ < need and remaining >= need - number {\n    return Vec![number + remaining,\
    \ 0]\n  }\n  if number < need and remaining < need - number {\n    return Vec![number\
    \ + remaining, remaining]\n  }\n  return Vec![number, 0]", "  if number < need\
    \ {\n    return Vec![number, remaining]\n  } else if number == need {\n    return\
    \ Vec![number, 0]\n  } else {\n    return Vec![number, 0]\n  }", "  if number\
    \ >= need {\n    return Vec![number, remaining]\n  }\n  return Vec![number, 0]",
  "  let n = number + need;\n  let r = remaining - n;\n  if (n > r) {\n    return\
    \ Vec![n, r];\n  } else {\n    return Vec![n, 0];\n  }", "  if number >= need\
    \ {\n    return Vec![number, remaining]\n  }\n  if number < need {\n    return\
    \ Vec![number, 0]\n  }", "  if number >= need {\n    return Vec![number, 0]\n\
    \  }\n  if number >= remaining {\n    return Vec![number, remaining]\n  }\n  return\
    \ Vec![number + need, remaining - number]", "  if number >= need {\n    return\
    \ Vec![number, 0]\n  }\n  if number + remaining >= need {\n    return Vec![number\
    \ + remaining, 0]\n  }\n  return Vec![number, need - number]", "  if number >=\
    \ need {\n    return Vec![number, 0]\n  }\n  if number < need and remaining >=\
    \ need - number {\n    return Vec![number + remaining, 0]\n  }\n  return Vec![number,\
    \ need - number]", "  if number >= need {\n    return Vec![number, 0]\n  }\n \
    \ if number + remaining >= need {\n    return Vec![number + remaining, 0]\n  }\n\
    \  return Vec![number, need - number]", "  let total = number + need;\n  if total\
    \ > remaining {\n    return Vec![total, 0];\n  } else {\n    return Vec![total,\
    \ remaining - total];\n  }", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else if number == need {\n    return Vec![number, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else {\n    return Vec![number, 0]\n  }", "  if number < need {\n    return\
    \ Vec![number, 0]\n  } else if number == need {\n    return Vec![number, remaining]\n\
    \  } else {\n    return Vec![number, 0]\n  }", "  let total = number + need;\n\
    \  if total > remaining {\n    return Vec![total, 0];\n  } else {\n    return\
    \ Vec![total, remaining - total];\n  }", "  if number >= need {\n    return Vec![number,\
    \ 0]\n  }\n  if number < need and remaining > 0 {\n    return Vec![number, remaining]\n\
    \  }\n  if number < need and remaining == 0 {\n    return Vec![number, 0]\n  }\n\
    \  return Vec![number, 0]", "  if number >= need {\n    return Vec![number, 0]\n\
    \  } else if number < need and remaining >= need {\n    return Vec![number + need,\
    \ remaining - need]\n  } else {\n    return Vec![number, 0]\n  }", "  let eaten\
    \ = 0;\n  let eaten_remaining = 0;\n  let remaining_eaten = 0;\n  let eaten_need\
    \ = 0;\n  let need_eaten = 0;\n  let need_remaining = 0;\n  let need_remaining_eaten\
    \ = 0;\n  let remaining_need = 0;\n  let remaining_remaining = 0;\n  let remaining_remaining_eaten\
    \ = 0;\n  let remaining_need_eaten = 0;\n  let remaining_remaining_need = 0;\n\
    \  let remaining_remaining_remaining = 0;\n  let remaining_remaining_remaining_eaten\
    \ = 0;\n  let remaining_remaining_remaining_need = 0;\n  let remaining_remaining_remaining_remaining\
    \ = 0;\n  let remaining_remaining_remaining_remaining_eaten = 0;\n  let remaining_remaining_remaining_remaining_need\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining = 0;\n  let remaining_remaining_remaining_remaining_remaining_eaten\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_need = 0;\n  let\
    \ remaining_remaining_remaining_remaining_remaining_remaining = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_eaten\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_need\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_remaining\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_remaining_eaten\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_remaining_need\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining_eaten\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining", " \
    \ if number < need {\n    return Vec![number, remaining]\n  } else if number ==\
    \ need {\n    return Vec![number, 0]\n  } else {\n    return Vec![number, 0]\n\
    \  }", "  if number >= need {\n    return Vec![number, 0]\n  } else if number\
    \ < need and remaining >= need - number {\n    return Vec![number + remaining,\
    \ remaining - number]\n  } else if number < need and remaining < need - number\
    \ {\n    return Vec![number + remaining, 0]\n  } else {\n    return Vec![number,\
    \ 0]\n  }", "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number\
    \ + remaining >= need {\n    return Vec![number + remaining, 0]\n  }\n  return\
    \ Vec![number, need - number]", "  if number >= need {\n    return Vec![number,\
    \ 0]\n  }\n  if number >= remaining {\n    return Vec![number, remaining]\n  }\n\
    \  return Vec![number, need - number]", "  if number < need {\n    return Vec![number,\
    \ remaining]\n  } else {\n    return Vec![number, 0]\n  }", "  let total = number\
    \ + need;\n  if total > remaining {\n    return Vec![total, 0];\n  } else {\n\
    \    return Vec![total, remaining - total];\n  }", "  if number < need {\n   \
    \ return Vec![number, remaining]\n  } else if number == need {\n    return Vec![number,\
    \ 0]\n  } else {\n    return Vec![number, 0]\n  }", "  if number >= need {\n \
    \   return Vec![number, 0]\n  }\n  if number + remaining >= need {\n    return\
    \ Vec![number + remaining, 0]\n  }\n  return Vec![number, need - number]", " \
    \ if number >= need {\n    return Vec![number, 0]\n  }\n  if number >= remaining\
    \ {\n    return Vec![number, remaining]\n  }\n  return Vec![number, need - number]",
  "  let total = number + need;\n  if total > remaining {\n    return Vec![total,\
    \ 0];\n  } else {\n    return Vec![total, remaining - total];\n  }", "  if number\
    \ < need {\n    return Vec![number, remaining]\n  } else if number == need {\n\
    \    return Vec![number, 0]\n  } else {\n    return Vec![number, 0]\n  }", " \
    \ if number >= need {\n    return Vec![number, 0]\n  }\n  if number < need and\
    \ remaining >= need - number {\n    return Vec![number + remaining, 0]\n  }\n\
    \  return Vec![number, need - number]", "  let total = number + need;\n  let left\
    \ = remaining - total;\n  if left < 0 {\n    return Vec![total, 0];\n  }\n  return\
    \ Vec![total, left];", "  let total = number + need;\n  let left = remaining -\
    \ total;\n  if left < 0 {\n    return Vec![total, 0];\n  } else {\n    return\
    \ Vec![total, left];\n  }", "  let total = number + need;\n  if total > remaining\
    \ {\n    return Vec![total, 0];\n  } else {\n    return Vec![total, remaining\
    \ - total];\n  }", "  if number >= need {\n    return Vec![number, remaining]\n\
    \  } else {\n    return Vec![number, 0]\n  }", "  if number >= need {\n    return\
    \ Vec![number, remaining]\n  } else {\n    return Vec![number, 0]\n  }", "  if\
    \ number < need {\n    return Vec![number, remaining]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  if number >= need {\n    return Vec![number, 0]\n\
    \  }\n  if number < need and remaining > 0 {\n    return Vec![number, remaining]\n\
    \  }\n  return Vec![number, 0]", "  if number >= need {\n    return Vec![number,\
    \ 0]\n  }\n  if number >= remaining {\n    return Vec![number, remaining]\n  }\n\
    \  return Vec![number, need - number]", "  if number >= need {\n    return Vec![number,\
    \ 0]\n  } else if number < need and remaining > 0 {\n    return Vec![number, remaining]\n\
    \  } else {\n    return Vec![number, 0]\n  }", "  if number >= need {\n    return\
    \ Vec![number, remaining]\n  } else {\n    return Vec![number, 0]\n  }", "  if\
    \ number >= need {\n    return Vec![number, 0]\n  }\n  if number == 0 {\n    return\
    \ Vec![0, remaining]\n  }\n  return Vec![number, remaining - number]", "  let\
    \ total = number + need;\n  if total > remaining {\n    return Vec![total, 0];\n\
    \  } else {\n    return Vec![total, remaining - total];\n  }", "  let eaten =\
    \ 0;\n  let eaten_remaining = 0;\n  let remaining_eaten = 0;\n  if number >= need\
    \ {\n    eaten = number - need;\n    remaining_eaten = number - eaten;\n  } else\
    \ {\n    eaten = number;\n    remaining_eaten = need - eaten;\n  }\n  if remaining\
    \ >= remaining_eaten {\n    eaten_remaining = remaining - remaining_eaten;\n \
    \ } else {\n    eaten_remaining = remaining;\n  }\n  return vec![eaten + eaten_remaining,\
    \ remaining_eaten];", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else if number == need {\n    return Vec![number, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  let eaten = 0;\n  let eaten_remaining = 0;\n  let\
    \ remaining_eaten = 0;\n  if number >= need {\n    eaten = number;\n    remaining_eaten\
    \ = number - need;\n  } else {\n    eaten = need;\n    remaining_eaten = need\
    \ - number;\n  }\n  if remaining >= remaining_eaten {\n    eaten_remaining = remaining_eaten;\n\
    \  } else {\n    eaten_remaining = remaining;\n  }\n  return vec![eaten + eaten_remaining,\
    \ remaining - eaten_remaining];", "  if number >= need {\n    return Vec![number,\
    \ remaining]\n  } else {\n    return Vec![number, 0]\n  }", "  if number < need\
    \ {\n    return Vec![number, remaining]\n  } else if number == need {\n    return\
    \ Vec![number, 0]\n  } else {\n    return Vec![number, 0]\n  }", "  let total\
    \ = number + need;\n  if total > remaining {\n    return Vec![total, 0];\n  }\
    \ else {\n    return Vec![total, remaining - total];\n  }", "  if number >= need\
    \ {\n    return Vec![number, 0]\n  } else if number < need and remaining > 0 {\n\
    \    return Vec![number, remaining]\n  } else {\n    return Vec![number, 0]\n\
    \  }", "  let total = number + need;\n  let left = remaining - need;\n  if (left\
    \ < 0) {\n    return Vec![total, 0];\n  } else {\n    return Vec![total, left];\n\
    \  }", "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number +\
    \ remaining >= need {\n    return Vec![number + remaining, 0]\n  }\n  return Vec![number,\
    \ need - number]", "  if number >= need {\n    return Vec![number, 0]\n  }\n \
    \ if number < need {\n    return Vec![number, need - number]\n  }\n  if remaining\
    \ >= need {\n    return Vec![number + remaining, 0]\n  }\n  return Vec![number\
    \ + remaining, need - remaining]", "  if number >= need {\n    return Vec![number,\
    \ 0]\n  } else if number + remaining >= need {\n    return Vec![number + remaining,\
    \ 0]\n  } else {\n    return Vec![number, need - number]\n  }", "  if number <\
    \ need {\n    return Vec![number, remaining]\n  } else if number == need {\n \
    \   return Vec![number, 0]\n  } else {\n    return Vec![number, 0]\n  }", "  if\
    \ number >= need {\n    return Vec![number, remaining]\n  }\n  if number < need\
    \ {\n    return Vec![number, 0]\n  }", "  if number >= need {\n    return Vec![number,\
    \ 0]\n  }\n  if number + remaining >= need {\n    return Vec![number + remaining,\
    \ 0]\n  }\n  return Vec![number, need - number]", "  let total = number + need;\n\
    \  let left = remaining - total;\n  if (left < 0) {\n    return Vec![total, 0];\n\
    \  } else {\n    return Vec![total, left];\n  }", "  if number < need {\n    return\
    \ Vec![number, remaining]\n  } else if number == need {\n    return Vec![number,\
    \ 0]\n  } else {\n    return Vec![number, 0]\n  }", "  if number >= need {\n \
    \   return Vec![number, 0]\n  }\n  if number < need {\n    return Vec![number,\
    \ need - number]\n  }\n  return Vec![number, 0]", "  let total = number + need;\n\
    \  if (total < remaining) {\n    return Vec![total, remaining - total];\n  } else\
    \ {\n    return Vec![total, 0];\n  }", "  if number < need {\n    return Vec![number,\
    \ remaining]\n  } else if number == need {\n    return Vec![number, 0]\n  } else\
    \ {\n    return Vec![number, 0]\n  }", "  if number >= need {\n    return Vec![number,\
    \ 0]\n  } else if number + remaining >= need {\n    return Vec![number + remaining,\
    \ 0]\n  } else {\n    return Vec![number, need - number]\n  }", "  if number >=\
    \ need {\n    return Vec![number, 0]\n  }\n  if number + remaining >= need {\n\
    \    return Vec![number + remaining, 0]\n  }\n  return Vec![number, need - number]",
  "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number < need and\
    \ remaining >= need - number {\n    return Vec![number + remaining, 0]\n  }\n\
    \  return Vec![number, need - number]", "  if number >= need {\n    return Vec![number,\
    \ 0]\n  }\n  if number < need {\n    return Vec![number, need - number]\n  }\n\
    \  if remaining >= need {\n    return Vec![number + need, remaining - need]\n\
    \  }\n  return Vec![number + need, 0]", "  let total = number + need;\n  if total\
    \ > remaining {\n    return Vec![total, 0];\n  } else {\n    return Vec![total,\
    \ remaining - total];\n  }", "  if number >= need {\n    return Vec![number, 0]\n\
    \  }\n  if number < need and remaining > 0 {\n    return Vec![number, remaining]\n\
    \  }\n  return Vec![number, 0]", "  let total = number + need;\n  let left = remaining\
    \ - need;\n  if (left < 0) {\n    return Vec![total, 0];\n  }\n  return Vec![total,\
    \ left];", "  let total = number + need;\n  if total > remaining {\n    return\
    \ Vec![total, 0];\n  } else {\n    return Vec![total, remaining - total];\n  }",
  "  if number >= need {\n    return Vec![number, remaining]\n  }\n  return Vec![number,\
    \ 0]", "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number <\
    \ need and remaining >= need - number {\n    return Vec![number + remaining, 0]\n\
    \  }\n  return Vec![number, need - number]", "  let total = number + need;\n \
    \ if total > remaining {\n    return Vec![total, 0];\n  } else {\n    return Vec![total,\
    \ remaining - total];\n  }", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else if number == need {\n    return Vec![number, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  let total = number + need;\n  if total > remaining\
    \ {\n    return Vec![total, 0];\n  } else {\n    return Vec![total, remaining\
    \ - total];\n  }", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else if number == need {\n    return Vec![number, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  let eaten = number;\n  let left = need - eaten;\n\
    \  if (left < 0) {\n    left = 0;\n  }\n  let result = [left, remaining - left];\n\
    \  return result;", "  if number >= need {\n    return Vec![number, 0]\n  }\n\
    \  if number < need and remaining >= need - number {\n    return Vec![number +\
    \ remaining, 0]\n  }\n  return Vec![number, need - number]", "  let eaten = 0;\n\
    \  let eaten_remaining = 0;\n  let eaten_need = 0;\n  let eaten_remaining_need\
    \ = 0;\n  if number >= need {\n    eaten = number - need;\n    eaten_remaining\
    \ = remaining - need;\n    eaten_need = need;\n    eaten_remaining_need = remaining;\n\
    \  } else {\n    eaten = number;\n    eaten_remaining = remaining;\n    eaten_need\
    \ = number;\n    eaten_remaining_need = remaining - number;\n  }\n  return vec![eaten,\
    \ eaten_remaining, eaten_need, eaten_remaining_need];", "  if number < need {\n\
    \    return Vec![number, remaining]\n  } else if number == need {\n    return\
    \ Vec![number, 0]\n  } else {\n    return Vec![number, 0]\n  }", "  let eaten\
    \ = number;\n  let left = need - eaten;\n  let result = Vec![left, remaining];\n\
    \  if (left < 0) {\n    result = Vec![left, 0];\n  }\n  return result;", "  if\
    \ number >= need {\n    return Vec![number, 0]\n  }\n  if number + remaining >=\
    \ need {\n    return Vec![number + remaining, 0]\n  }\n  return Vec![number, need\
    \ - number]", "  if number < need {\n    return Vec![number, remaining]\n  } else\
    \ if number == need {\n    return Vec![number, 0]\n  } else {\n    return Vec![number,\
    \ 0]\n  }", "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number\
    \ < need and remaining >= need - number {\n    return Vec![number + remaining,\
    \ 0]\n  }\n  return Vec![number, need - number]", "  if number < need {\n    return\
    \ Vec![number, remaining]\n  } else if number == need {\n    return Vec![number,\
    \ 0]\n  } else {\n    return Vec![number, 0]\n  }", "  if number < need {\n  \
    \  return Vec![number, remaining]\n  } else if number == need {\n    return Vec![number,\
    \ 0]\n  } else {\n    return Vec![number, 0]\n  }", "  let total = number + need;\n\
    \  let left = remaining - total;\n  if (left < 0) {\n    return Vec![total, 0];\n\
    \  } else {\n    return Vec![total, left];\n  }", "  if number < need {\n    return\
    \ Vec![number, remaining]\n  } else if number == need {\n    return Vec![number,\
    \ 0]\n  } else {\n    return Vec![number, 0]\n  }", "  if number >= need {\n \
    \   return Vec![number, 0]\n  }\n  if number >= remaining {\n    return Vec![number,\
    \ remaining]\n  }\n  return Vec![number, need - number]", "  if number >= need\
    \ {\n    return Vec![number, 0]\n  } else if number < need and remaining >= need\
    \ {\n    return Vec![number + need, remaining - need]\n  } else if number < need\
    \ and remaining < need {\n    return Vec![number + need, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  if number >= need {\n    return Vec![number, 0]\n\
    \  }\n  if number + remaining >= need {\n    return Vec![number + remaining, 0]\n\
    \  }\n  return Vec![number, need - number]", "  if number >= need {\n    return\
    \ Vec![number, 0]\n  } else if number < need and remaining > 0 {\n    return Vec![number,\
    \ remaining]\n  } else {\n    return Vec![number, 0]\n  }", "  let eaten = number;\n\
    \  let left = need - eaten;\n  let result = [ eaten, left ];\n  if (left > 0)\
    \ {\n    result = [ left, 0 ];\n  }\n  return result;", "  if number >= need {\n\
    \    return Vec![number, remaining]\n  }\n  return Vec![number, 0]", "  if number\
    \ >= need {\n    return Vec![number, remaining]\n  }\n  return Vec![number, 0]",
  "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number < need and\
    \ remaining >= need - number {\n    return Vec![number + remaining, 0]\n  }\n\
    \  if number < need and remaining < need - number {\n    return Vec![number +\
    \ remaining, remaining]\n  }\n  return Vec![number, 0]", "  let total = number\
    \ + need;\n  if total > remaining {\n    return Vec![total, 0];\n  } else {\n\
    \    return Vec![total, remaining - total];\n  }", "  if number >= need {\n  \
    \  return Vec![number, 0]\n  }\n  if number >= remaining {\n    return Vec![number,\
    \ remaining]\n  }\n  return Vec![number, need - number]", "  if number >= need\
    \ {\n    return Vec![number, remaining]\n  }\n  if number == 0 {\n    return Vec![0,\
    \ 0]\n  }\n  let eat_count = number - need\n  let eat_remaining = remaining -\
    \ eat_count\n  return Vec![number, eat_remaining]", "  if number >= need {\n \
    \   return Vec![number, 0]\n  }\n  if number + remaining >= need {\n    return\
    \ Vec![number + remaining, 0]\n  }\n  return Vec![number, need - number]", " \
    \ if number >= need {\n    return Vec![number, remaining]\n  }\n  if number <\
    \ need {\n    return Vec![number, 0]\n  }", "  if number < need {\n    return\
    \ Vec![number, remaining]\n  } else if number == need {\n    return Vec![number,\
    \ 0]\n  } else {\n    return Vec![number, 0]\n  }", "  let total = number + need;\n\
    \  if total > remaining {\n    return Vec![total, 0];\n  } else {\n    return\
    \ Vec![total, remaining - total];\n  }", "  if number >= need {\n    return Vec![number,\
    \ remaining]\n  }\n  if number < need {\n    return Vec![number, 0]\n  }\n  return\
    \ Vec![number, 0]", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else if number == need {\n    return Vec![number, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else if number == need {\n    return Vec![number, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else if number == need {\n    return Vec![number, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  if number >= need {\n    return Vec![number, remaining]\n\
    \  } else {\n    return Vec![number, 0]\n  }", "  if number >= need {\n    return\
    \ Vec![number, 0]\n  }\n  if number < need and remaining >= need - number {\n\
    \    return Vec![number + remaining, 0]\n  }\n  return Vec![number, need - number]",
  "  if number < need {\n    return Vec![number, remaining]\n  } else if number ==\
    \ need {\n    return Vec![number, 0]\n  } else {\n    return Vec![number, 0]\n\
    \  }", "  let total = number + need;\n  let left = remaining - total;\n  if (left\
    \ < 0) {\n    return Vec![total, 0];\n  } else {\n    return Vec![total, left];\n\
    \  }", "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number <\
    \ need and remaining > 0 {\n    return Vec![number, remaining]\n  }\n  return\
    \ Vec![number, 0]", "  if number >= need {\n    return Vec![number, 0]\n  }\n\
    \  if number + remaining >= need {\n    return Vec![number + remaining, 0]\n \
    \ }\n  return Vec![number, need - number]", "  if number >= need {\n    return\
    \ Vec![number, 0]\n  }\n  if number < need and remaining >= need - number {\n\
    \    return Vec![number + remaining, remaining - number]\n  }\n  return Vec![number,\
    \ 0]", "  let total = number + need;\n  if total > remaining {\n    return Vec![total,\
    \ 0];\n  } else {\n    return Vec![total, remaining - total];\n  }", "  if number\
    \ >= need {\n    return Vec![number, remaining]\n  } else {\n    return Vec![number,\
    \ 0]\n  }", "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number\
    \ < need {\n    return Vec![number, need - number]\n  }\n  if remaining < need\
    \ {\n    return Vec![number, need]\n  }\n  return Vec![number, remaining - need]",
  "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number < need and\
    \ remaining >= need - number {\n    return Vec![number + remaining, remaining\
    \ - number]\n  }\n  return Vec![number, 0]", "  if number < need {\n    return\
    \ Vec![number, remaining]\n  } else if number == need {\n    return Vec![number,\
    \ 0]\n  } else {\n    return Vec![number, 0]\n  }", "  if number >= need {\n \
    \   return Vec![number, 0]\n  }\n  if number < need and remaining >= need - number\
    \ {\n    return Vec![number + remaining, 0]\n  }\n  return Vec![number, need -\
    \ number]", "  if number >= need {\n    return Vec![number, remaining]\n  }\n\
    \  if number < need {\n    return Vec![number, 0]\n  }", "  if number >= need\
    \ {\n    return Vec![number, 0]\n  }\n  if number < need and remaining > 0 {\n\
    \    return Vec![number, remaining]\n  }\n  return Vec![number, 0]", "  let eaten\
    \ = 0;\n  let eaten_remaining = 0;\n  let eaten_need = 0;\n  if (number >= need)\
    \ {\n    eaten = number - need;\n    eaten_remaining = remaining - eaten;\n  \
    \  eaten_need = need;\n  } else {\n    eaten = number;\n    eaten_remaining =\
    \ remaining;\n    eaten_need = number;\n  }\n  return vec![eaten, eaten_remaining];",
  "  if number >= need {\n    return Vec![number, remaining]\n  }\n  if number ==\
    \ 0 {\n    return Vec![0, 0]\n  }\n  return Vec![number, need - number]", "  let\
    \ total = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n\
    \    return Vec![total, 0];\n  }\n  return Vec![total, left];", "  if number >=\
    \ need {\n    return Vec![number, 0]\n  } else if number < need and remaining\
    \ >= need - number {\n    return Vec![number + remaining, remaining - number]\n\
    \  } else {\n    return Vec![number, 0]\n  }", "  if number >= need {\n    return\
    \ Vec![number, 0]\n  }\n  if number + remaining >= need {\n    return Vec![number\
    \ + remaining, 0]\n  }\n  return Vec![number, need - number]", "  let n = number\
    \ - need;\n  let r = remaining - n;\n  if n < 0 {\n    return Vec![number, r];\n\
    \  } else if r < 0 {\n    return Vec![number, 0];\n  } else {\n    return Vec![number,\
    \ r];\n  }", "  if number >= need {\n    return Vec![number, 0]\n  }\n  if number\
    \ == 0 {\n    return Vec![need, remaining]\n  }\n  return Vec![number, need -\
    \ number]", "  let n = number\n  let nn = need\n  let r = remaining\n  if nn >\
    \ r {\n    nn = r\n  }\n  let res = Vec![n + nn, r - nn]\n  if nn == 0 {\n   \
    \ res = Vec![n, r]\n  }\n  return res", "  if number >= need {\n    return Vec![number,\
    \ 0]\n  }\n  if number < need and remaining >= need - number {\n    return Vec![number\
    \ + remaining, 0]\n  }\n  return Vec![number, need - number]", "  if number <\
    \ need {\n    return Vec![number, 0]\n  } else if number == need {\n    return\
    \ Vec![number, remaining]\n  } else {\n    return Vec![number, 0]\n  }", "  let\
    \ total = number + need;\n  let left = remaining - total;\n  if (left < 0) {\n\
    \    return Vec![total, 0];\n  } else {\n    return Vec![total, left];\n  }",
  "  let eaten = number;\n  let left = need - eaten;\n  let result = [ eaten, left\
    \ ];\n  if (left < remaining) {\n    result = [ left, 0 ];\n  }\n  return result;",
  "  if number >= need {\n    return Vec![number, remaining]\n  }\n  return Vec![number,\
    \ 0]", "  if number < need {\n    return Vec![number, remaining]\n  } else {\n\
    \    return Vec![number, 0]\n  }", "  let total = number + need;\n  if total >\
    \ remaining {\n    return Vec![total, 0];\n  } else {\n    return Vec![total,\
    \ remaining - total];\n  }", "  if number >= need {\n    return Vec![number, remaining]\n\
    \  } else {\n    return Vec![number, 0]\n  }", "  if number < need {\n    return\
    \ Vec![number, remaining]\n  } else if number == need {\n    return Vec![number,\
    \ 0]\n  } else {\n    return Vec![number, 0]\n  }", "  if number >= need {\n \
    \   return Vec![number, 0]\n  }\n  if number < need and remaining > 0 {\n    return\
    \ Vec![number, remaining]\n  }\n  return Vec![number, 0]", "  let total = number\
    \ + need;\n  let left = remaining - total;\n  if (left < 0) {\n    return Vec![total,\
    \ 0];\n  }\n  return Vec![total, left];", "  if number >= need {\n    return Vec![number,\
    \ 0]\n  }\n  if number < need {\n    return Vec![number, need - number]\n  }\n\
    \  if remaining < need {\n    return Vec![number, need]\n  }\n  return Vec![number,\
    \ remaining - need]", "  let total = number + need;\n  if total > remaining {\n\
    \    return Vec![total, 0];\n  } else {\n    return Vec![total, remaining - total];\n\
    \  }", "  let result = [number, remaining];\n  if (number >= need) {\n    result\
    \ = [number - need, 0];\n  }\n  if (number < need) {\n    result = [number, 0];\n\
    \  }\n  return result;", "  let diff = need - number;\n  if diff < 0 {\n    return\
    \ Vec![number, 0];\n  } else if diff == 0 {\n    return Vec![number, remaining];\n\
    \  } else {\n    return Vec![number, remaining - diff];\n  }", "  let eaten =\
    \ 0;\n  let eaten_remaining = 0;\n  let remaining_eaten = 0;\n  if (number < need)\
    \ {\n    remaining_eaten = number;\n    eaten = number;\n  } else {\n    remaining_eaten\
    \ = need;\n    eaten = need;\n  }\n  if (remaining - eaten < remaining_eaten)\
    \ {\n    eaten = remaining - remaining_eaten;\n  }\n  return vec![eaten, remaining\
    \ - eaten];", "  if number >= need {\n    return Vec![number, remaining]\n  }\n\
    \  return Vec![number, 0]", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else if number == need {\n    return Vec![number, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  let eaten = 0;\n  let eaten_remaining = 0;\n  let\
    \ remaining_eaten = 0;\n  let eaten_need = 0;\n  let need_eaten = 0;\n  let need_remaining\
    \ = 0;\n  let need_remaining_eaten = 0;\n  let remaining_need = 0;\n  let remaining_remaining\
    \ = 0;\n  let remaining_remaining_eaten = 0;\n  let remaining_remaining_need =\
    \ 0;\n  let remaining_remaining_remaining = 0;\n  let remaining_remaining_remaining_eaten\
    \ = 0;\n  let remaining_remaining_remaining_need = 0;\n  let remaining_remaining_remaining_remaining\
    \ = 0;\n  let remaining_remaining_remaining_remaining_eaten = 0;\n  let remaining_remaining_remaining_remaining_need\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining = 0;\n  let remaining_remaining_remaining_remaining_remaining_eaten\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_need = 0;\n  let\
    \ remaining_remaining_remaining_remaining_remaining_remaining = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_eaten\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_need\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_remaining\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_remaining_eaten\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_remaining_need\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining_eaten\
    \ = 0;\n  let remaining_remaining_remaining_remaining_remaining_remaining_remaining_remaining_need\
    \ = 0;\n", "  let eaten = 0;\n  let eaten_remaining = 0;\n  let remaining_eaten\
    \ = 0;\n  let remaining_remaining = 0;\n  if (number >= need) {\n    eaten = number\
    \ - need;\n    remaining_eaten = need;\n  } else {\n    eaten = number;\n    remaining_eaten\
    \ = number;\n  }\n  if (remaining >= need) {\n    remaining_remaining = remaining\
    \ - need;\n  } else {\n    remaining_remaining = remaining;\n  }\n  return vec![eaten,\
    \ remaining_eaten, remaining_remaining];", "  if number >= need {\n    return\
    \ Vec![number, remaining]\n  }\n  if number == 0 {\n    return Vec![0, 0]\n  }\n\
    \  return Vec![number, need - number]", "  if number < need {\n    return Vec![number,\
    \ remaining]\n  } else if number == need {\n    return Vec![number, 0]\n  } else\
    \ {\n    return Vec![number, 0]\n  }", "  if number < need {\n    return Vec![number,\
    \ 0]\n  } else if number == need {\n    return Vec![number, remaining]\n  } else\
    \ {\n    return Vec![number, 0]\n  }", "  let diff = need - number;\n  if diff\
    \ < 0 {\n    return Vec![number, 0];\n  } else if diff == 0 {\n    return Vec![number,\
    \ remaining];\n  } else {\n    return Vec![number + diff, remaining - diff];\n\
    \  }", "  if number < need {\n    return Vec![number, remaining]\n  } else if\
    \ number == need {\n    return Vec![number, 0]\n  } else {\n    return Vec![number,\
    \ 0]\n  }", "  let total = number + need;\n  let left = remaining - total;\n \
    \ if (left < 0) {\n    return Vec![total, 0];\n  }\n  return Vec![total, left];",
  "  let eaten = 0;\n  let eaten_remaining = 0;\n  let remaining_eaten = 0;\n  let\
    \ total = 0;\n  while (remaining > 0) {\n    if (remaining >= need) {\n      remaining\
    \ -= need;\n      total += need;\n      need = 0;\n    } else {\n      need -=\
    \ remaining;\n      total += remaining;\n      remaining_eaten = remaining;\n\
    \      remaining = 0;\n    }\n    eaten += remaining_eaten;\n  }\n  return vec![total,\
    \ remaining];", "  if number >= need {\n    return Vec![number, remaining]\n \
    \ } else {\n    return Vec![number, 0]\n  }", "  let total = number + need;\n\
    \  if total > remaining {\n    return Vec![total, 0];\n  } else {\n    return\
    \ Vec![total, remaining - total];\n  }", "  if number >= need {\n    return Vec![number,\
    \ 0]\n  }\n  if number < need and remaining >= need - number {\n    return Vec![number\
    \ + remaining, remaining - number]\n  }\n  return Vec![number, 0]", "  if number\
    \ >= need {\n    return Vec![number, 0]\n  }\n  if number < need {\n    return\
    \ Vec![number, need - number]\n  }\n  if remaining >= need {\n    return Vec![number\
    \ + need, remaining - need]\n  }\n  return Vec![number + need, 0]", "  if number\
    \ < need {\n    return Vec![number, 0]\n  } else if number == need {\n    return\
    \ Vec![number, remaining]\n  } else {\n    return Vec![number, 0]\n  }", "  let\
    \ eaten = 0;\n  let eaten_remaining = 0;\n  let remaining_eaten = 0;\n  let remaining_remaining\
    \ = 0;\n  if number >= need {\n    eaten = number;\n    remaining_eaten = number\
    \ - need;\n    remaining_remaining = remaining;\n  } else {\n    eaten = need;\n\
    \    remaining_eaten = need - number;\n    remaining_remaining = remaining - need;\n\
    \  }\n  return vec![eaten, remaining_eaten, remaining_remaining];", "  let total\
    \ = number + need;\n  let left = remaining - need;\n  if (total > left) {\n  \
    \  return Vec![total, left];\n  } else {\n    return Vec![total, 0];\n  }", " \
    \ if number >= need {\n    return Vec![number, 0]\n  }\n  if number < need and\
    \ remaining > 0 {\n    return Vec![number, remaining]\n  }\n  return Vec![number,\
    \ 0]", "  if number < need {\n    return Vec![number, remaining]\n  } else if\
    \ number == need {\n    return Vec![number, 0]\n  } else {\n    return Vec![number,\
    \ 0]\n  }", "  if number < need {\n    return Vec![number, remaining]\n  } else\
    \ if number == need {\n    return Vec![number, 0]\n  } else {\n    return Vec![number,\
    \ 0]\n  }", "  if number >= need {\n    return Vec![number, remaining]\n  }\n\
    \  if number < need {\n    return Vec![number, 0]\n  }\n  return Vec![number,\
    \ need - number]", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else if number == need {\n    return Vec![number, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else if number == need {\n    return Vec![number, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else if number == need {\n    return Vec![number, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  if number < need {\n    return Vec![number, remaining]\n\
    \  } else if number == need {\n    return Vec![number, 0]\n  } else {\n    return\
    \ Vec![number, 0]\n  }", "  if number >= need {\n    return Vec![number, remaining]\n\
    \  } else {\n    return Vec![number, 0]\n  }", "  let total = number + need;\n\
    \  if total > remaining {\n    return Vec![total, 0];\n  } else {\n    return\
    \ Vec![total, remaining - total];\n  }", "  if number >= need {\n    return Vec![number,\
    \ remaining]\n  }\n  if number + remaining >= need {\n    return Vec![number,\
    \ 0]\n  }\n  return Vec![number, need - number]", "  if number < need {\n    return\
    \ Vec![number, 0]\n  } else if number == need {\n    return Vec![number, remaining]\n\
    \  } else {\n    return Vec![number, 0]\n  }"]
stop_tokens:
- "\n}"
