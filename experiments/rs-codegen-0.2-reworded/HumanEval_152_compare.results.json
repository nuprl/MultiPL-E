{
  "name": "HumanEval_152_compare",
  "language": "rs",
  "prompt": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp3ot8rgnu.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp3ot8rgnu.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3ot8rgnu.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp3ot8rgnu.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.zip(game)) {\n        diffs[i] = abs(score - guess);\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpq31tcgd_.rs:15:28\n   |\n15 |     for (i, (score, guess) in guess.zip(game)) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpq31tcgd_.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.zip(game)) {\n   |         ^                                    ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (score, guess) in guess.zip(game)) {\n15 +     for i, (score, guess) in guess.zip(game) {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpq31tcgd_.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpq31tcgd_.rs:16:20\n   |\n16 |         diffs[i] = abs(score - guess);\n   |                    ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpq31tcgd_.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpq31tcgd_.rs:15:37\n    |\n15  |       for (i, (score, guess) in guess.zip(game)) {\n    |                                       ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp563ffere.rs:16:17\n   |\n16 |         diff += abs(j - i);\n   |                 ^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp563ffere.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmp563ffere.rs:18:12\n   |\n18 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpzlzag7_3.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpzlzag7_3.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpzlzag7_3.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpzlzag7_3.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzlzag7_3.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.enumerate()) {\n        diffs[i] = abs(score - guess);\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpxph18bis.rs:15:28\n   |\n15 |     for (i, (score, guess) in guess.enumerate()) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpxph18bis.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.enumerate()) {\n   |         ^                                      ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (score, guess) in guess.enumerate()) {\n15 +     for i, (score, guess) in guess.enumerate() {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpxph18bis.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpxph18bis.rs:16:20\n   |\n16 |         diffs[i] = abs(score - guess);\n   |                    ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxph18bis.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpxph18bis.rs:15:37\n    |\n15  |       for (i, (score, guess) in guess.enumerate()) {\n    |                                       ^^^^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_len(game.len);\n    for (i, (g, gt)) in guess.zip(game) {\n        diff[i] = gt - g;\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpbxfhms9p.rs:14:16\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                ^^^-------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_len`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpbxfhms9p.rs:14:32\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                                ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_len(game.len());\n   |                                   ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpbxfhms9p.rs:15:31\n    |\n15  |       for (i, (g, gt)) in guess.zip(game) {\n    |                                 ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let guess_i = guess[i];\n        let game_i = game[i];\n        if guess_i == game_i {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess_i - game_i);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp7khb87kn.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp7khb87kn.rs:21:24\n   |\n21 |             diffs[i] = abs(guess_i - game_i);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7khb87kn.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7khb87kn.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpzlzag7_3.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpzlzag7_3.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpzlzag7_3.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpzlzag7_3.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzlzag7_3.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp55uzctd5.rs:18:23\n   |\n18 |     return game.map(i => diff - abs(i - guess.get(i)));\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (g, s)) in guess.iter().zip(game) {\n        diffs.set(i, abs(g - s));\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpe5c3injz.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpe5c3injz.rs:16:22\n   |\n16 |         diffs.set(i, abs(g - s));\n   |                      ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpe5c3injz.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5c3injz.rs:15:13\n   |\n15 |     for (i, (g, s)) in guess.iter().zip(game) {\n   |             ^^^^^^     ---------------------- this expression has type `Option<(&isize, isize)>`\n   |             |\n   |             expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let score = game[i];\n        let guess = guess[i];\n        let diff = abs(score - guess);\n        diffs[i] = diff;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp2fzt_rfr.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp2fzt_rfr.rs:18:20\n   |\n18 |         let diff = abs(score - guess);\n   |                    ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp2fzt_rfr.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp2fzt_rfr.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let score = game[i];\n        let guess = guess[i];\n        let diff = score - guess;\n        diffs[i] = diff;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpnxoiclyq.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnxoiclyq.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnxoiclyq.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return Vec::from(game) * diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqnp_wd76.rs:16:17\n   |\n16 |         diff += abs(j - i);\n   |                 ^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpqnp_wd76.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0369]: cannot multiply `Vec<isize>` by `{integer}`\n  --> /tmp/tmpqnp_wd76.rs:18:28\n   |\n18 |     return Vec::from(game) * diff;\n   |            --------------- ^ ---- {integer}\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0369, E0425, E0599.\nFor more information about an error, try `rustc --explain E0369`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, v) in guess.iter().zip(game) {\n        diff[i] = abs(v - guess[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpx8ejmqi8.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpx8ejmqi8.rs:16:19\n   |\n16 |         diff[i] = abs(v - guess[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpx8ejmqi8.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpx8ejmqi8.rs:16:27\n   |\n16 |         diff[i] = abs(v - guess[i]);\n   |                           ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.from(game);\n    for (i, v) in guess {\n        diff[i] = v - game[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpy9dmqihp.rs:14:16\n   |\n14 |     let diff = Vec.from(game);\n   |                ^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::from`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy9dmqihp.rs:15:9\n   |\n15 |     for (i, v) in guess {\n   |         ^^^^^^    ----- this expression has type `Option<isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0423.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let guess_i = guess[i];\n        let game_i = game[i];\n        if guess_i == game_i {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess_i - game_i);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp7khb87kn.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp7khb87kn.rs:21:24\n   |\n21 |             diffs[i] = abs(guess_i - game_i);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7khb87kn.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7khb87kn.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp3ot8rgnu.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp3ot8rgnu.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3ot8rgnu.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp3ot8rgnu.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        if (j != i) {\n            diff += 1;\n        }\n    }\n    return game.map(i => diff - i);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpswbgbtie.rs:20:23\n   |\n20 |     return game.map(i => diff - i);\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, _) in guess.iter() {\n        let guess_score = game[i];\n        let diff = guess_score - guess[i];\n        diffs[i] = diff;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpqbh21lbi.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqbh21lbi.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqbh21lbi.rs:15:9\n   |\n15 |     for (i, _) in guess.iter() {\n   |         ^^^^^^    ------------ this expression has type `Option<&isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for i in 0..game.len {\n        if game[i] != guess[i] {\n            diff[i] = game[i] - guess[i];\n        }\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp_fpucb2l.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp_fpucb2l.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp_fpucb2l.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpqsorc94e.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqsorc94e.rs:19:24\n   |\n19 |             diffs[i] = abs(guess[i] - game[i]);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, _) in guess {\n        diffs[i] = game[i] - guess[i];\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpdg_gdyrp.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpdg_gdyrp.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdg_gdyrp.rs:15:9\n   |\n15 |     for (i, _) in guess {\n   |         ^^^^^^    ----- this expression has type `Option<isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, g) in guess.iter() {\n        let guess_score = game[i];\n        let diff = guess_score - g;\n        diffs[i] = diff;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmppj_46z6k.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppj_46z6k.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppj_46z6k.rs:15:9\n   |\n15 |     for (i, g) in guess.iter() {\n   |         ^^^^^^    ------------ this expression has type `Option<&isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec::new();\n    for (i, j) in guess.zip(game) {\n        diff.push(abs(j - i));\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpbttqvar8.rs:16:19\n   |\n16 |         diff.push(abs(j - i));\n   |                   ^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpbttqvar8.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let guess_i = guess[i];\n        let game_i = game[i];\n        if guess_i == game_i {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess_i - game_i);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp7khb87kn.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp7khb87kn.rs:21:24\n   |\n21 |             diffs[i] = abs(guess_i - game_i);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7khb87kn.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7khb87kn.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for i in 0..game.len() {\n        if game[i] != guess[i] {\n            diff += abs(game[i] - guess[i]);\n        }\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpjmxmmxkt.rs:17:21\n   |\n17 |             diff += abs(game[i] - guess[i]);\n   |                     ^^^ not found in this scope\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmpjmxmmxkt.rs:20:12\n   |\n20 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let diff = guess[i] - game[i];\n        diffs[i] = diff;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpwh4gl6zu.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpwh4gl6zu.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpwh4gl6zu.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpzlzag7_3.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpzlzag7_3.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpzlzag7_3.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpzlzag7_3.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzlzag7_3.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, g) in guess.iter().zip(game) {\n        if (g) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(g - game[i]);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp969ue789.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp969ue789.rs:19:24\n   |\n19 |             diffs[i] = abs(g - game[i]);\n   |                        ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp969ue789.rs:16:12\n   |\n16 |         if (g) {\n   |            ^ ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (g) {\n16 +         if g {\n   | \n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp969ue789.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp969ue789.rs:16:12\n   |\n16 |         if (g) {\n   |            ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp969ue789.rs:19:32\n   |\n19 |             diffs[i] = abs(g - game[i]);\n   |                                ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, (_, guess_val) in guess) {\n        let score = game[i];\n        diffs[i] = abs(guess_val - score);\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpgt7esoll.rs:15:28\n   |\n15 |     for (i, (_, guess_val) in guess) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpgt7esoll.rs:15:9\n   |\n15 |     for (i, (_, guess_val) in guess) {\n   |         ^                          ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (_, guess_val) in guess) {\n15 +     for i, (_, guess_val) in guess {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpgt7esoll.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpgt7esoll.rs:17:20\n   |\n17 |         diffs[i] = abs(guess_val - score);\n   |                    ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpgt7esoll.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgt7esoll.rs:15:9\n   |\n15 |     for (i, (_, guess_val) in guess) {\n   |         ^^^^^^^^^^^^^^^^^^    ----- this expression has type `Option<isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (g, g2) in guess.iter()) {\n        if (g2 == game[i]) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(g2 - game[i]);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpyu5bq40u.rs:15:21\n   |\n15 |     for (i, (g, g2) in guess.iter()) {\n   |                     ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpyu5bq40u.rs:15:9\n   |\n15 |     for (i, (g, g2) in guess.iter()) {\n   |         ^                          ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (g, g2) in guess.iter()) {\n15 +     for i, (g, g2) in guess.iter() {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyu5bq40u.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpyu5bq40u.rs:19:24\n   |\n19 |             diffs[i] = abs(g2 - game[i]);\n   |                        ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyu5bq40u.rs:16:12\n   |\n16 |         if (g2 == game[i]) {\n   |            ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (g2 == game[i]) {\n16 +         if g2 == game[i] {\n   | \n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyu5bq40u.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyu5bq40u.rs:15:9\n   |\n15 |     for (i, (g, g2) in guess.iter()) {\n   |         ^^^^^^^^^^^    ------------ this expression has type `Option<&isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detaile",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_len(game.len);\n    for (i, (g, g2) in guess.zip(game)) {\n        diff[i] = g2 - g;\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpu48te5lr.rs:15:21\n   |\n15 |     for (i, (g, g2) in guess.zip(game)) {\n   |                     ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpu48te5lr.rs:15:9\n   |\n15 |     for (i, (g, g2) in guess.zip(game)) {\n   |         ^                             ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (g, g2) in guess.zip(game)) {\n15 +     for i, (g, g2) in guess.zip(game) {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpu48te5lr.rs:14:16\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                ^^^-------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_len`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpu48te5lr.rs:14:32\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                                ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_len(game.len());\n   |                                   ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpu48te5lr.rs:15:30\n    |\n15  |       for (i, (g, g2) in guess.zip(game)) {\n    |                                ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, g) in guess.iter().zip(game) {\n        diff += abs(g - i);\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpophgwltv.rs:16:17\n   |\n16 |         diff += abs(g - i);\n   |                 ^^^ not found in this scope\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmpophgwltv.rs:18:12\n   |\n18 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        if (i != j) {\n            diff += abs(i - j);\n        }\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpj3gdeu4v.rs:17:21\n   |\n17 |             diff += abs(i - j);\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpj3gdeu4v.rs:16:12\n   |\n16 |         if (i != j) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i != j) {\n16 +         if i != j {\n   | \n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpj3gdeu4v.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmpj3gdeu4v.rs:20:12\n   |\n20 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.from(game);\n    for i in guess {\n        diff[i] = abs(guess[i] - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp4p7jwlvk.rs:14:16\n   |\n14 |     let diff = Vec.from(game);\n   |                ^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::from`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp4p7jwlvk.rs:16:19\n   |\n16 |         diff[i] = abs(guess[i] - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4p7jwlvk.rs:16:23\n   |\n16 |         diff[i] = abs(guess[i] - game[i]);\n   |                       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4p7jwlvk.rs:16:34\n   |\n16 |         diff[i] = abs(guess[i] - game[i]);\n   |                                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpjp4b3heg.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpjp4b3heg.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpjp4b3heg.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpjp4b3heg.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpjp4b3heg.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, (g, gi) => {\n        if (game[i] == guess[gi]) {\n            diff[i] = 0;\n        } else {\n            diff[i] = abs(game[i] - guess[gi]);\n        }\n    });\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpe131xwnb.rs:15:21\n   |\n15 |     for (i, (g, gi) => {\n   |                     ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpe131xwnb.rs:15:20\n   |\n15 |     for (i, (g, gi) => {\n   |                    ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpe131xwnb.rs:15:21\n   |\n15 |     for (i, (g, gi) => {\n   |                     ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpe131xwnb.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpe131xwnb.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.from_iter(game.len, 0);\n    for i in 0..game.len {\n        diff[i] = guess[i] - game[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp9sjlbhsd.rs:14:16\n   |\n14 |     let diff = Vec.from_iter(game.len, 0);\n   |                ^^^----------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::from_iter`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9sjlbhsd.rs:14:35\n   |\n14 |     let diff = Vec.from_iter(game.len, 0);\n   |                                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.from_iter(game.len(), 0);\n   |                                      ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9sjlbhsd.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (g, g2) in guess.iter()) {\n        diffs[i] = abs(g - g2);\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmp9geqj7vq.rs:15:21\n   |\n15 |     for (i, (g, g2) in guess.iter()) {\n   |                     ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp9geqj7vq.rs:15:9\n   |\n15 |     for (i, (g, g2) in guess.iter()) {\n   |         ^                          ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (g, g2) in guess.iter()) {\n15 +     for i, (g, g2) in guess.iter() {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp9geqj7vq.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp9geqj7vq.rs:16:20\n   |\n16 |         diffs[i] = abs(g - g2);\n   |                    ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9geqj7vq.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9geqj7vq.rs:15:9\n   |\n15 |     for (i, (g, g2) in guess.iter()) {\n   |         ^^^^^^^^^^^    ------------ this expression has type `Option<&isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.iter()) {\n        diffs[i] = score - guess;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpbaa3smm_.rs:15:28\n   |\n15 |     for (i, (score, guess) in guess.iter()) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpbaa3smm_.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.iter()) {\n   |         ^                                 ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (score, guess) in guess.iter()) {\n15 +     for i, (score, guess) in guess.iter() {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpbaa3smm_.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpbaa3smm_.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbaa3smm_.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.iter()) {\n   |         ^^^^^^^^^^^^^^^^^^    ------------ this expression has type `Option<&isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (_, g) in guess) {\n        diffs[i] = game[i] - g;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmp26ki2wjl.rs:15:20\n   |\n15 |     for (i, (_, g) in guess) {\n   |                    ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp26ki2wjl.rs:15:9\n   |\n15 |     for (i, (_, g) in guess) {\n   |         ^                  ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (_, g) in guess) {\n15 +     for i, (_, g) in guess {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp26ki2wjl.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp26ki2wjl.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp26ki2wjl.rs:15:9\n   |\n15 |     for (i, (_, g) in guess) {\n   |         ^^^^^^^^^^    ----- this expression has type `Option<isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpqsorc94e.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqsorc94e.rs:19:24\n   |\n19 |             diffs[i] = abs(guess[i] - game[i]);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, _) in guess.iter() {\n        diffs[i] = game[i] - guess[i];\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpwdd6yf96.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpwdd6yf96.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwdd6yf96.rs:15:9\n   |\n15 |     for (i, _) in guess.iter() {\n   |         ^^^^^^    ------------ this expression has type `Option<&isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, (g, gi) => {\n        if (game[i] == gi) {\n            diff[i] = 0;\n        } else {\n            diff[i] = abs(gi - g);\n        }\n    });\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmprbl8hc0k.rs:15:21\n   |\n15 |     for (i, (g, gi) => {\n   |                     ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmprbl8hc0k.rs:15:20\n   |\n15 |     for (i, (g, gi) => {\n   |                    ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmprbl8hc0k.rs:15:21\n   |\n15 |     for (i, (g, gi) => {\n   |                     ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmprbl8hc0k.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmprbl8hc0k.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.from_iter(game.len, 0);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpvpwj7hc3.rs:14:16\n   |\n14 |     let diff = Vec.from_iter(game.len, 0);\n   |                ^^^----------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::from_iter`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpvpwj7hc3.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpvpwj7hc3.rs:14:35\n   |\n14 |     let diff = Vec.from_iter(game.len, 0);\n   |                                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.from_iter(game.len(), 0);\n   |                                      ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpvpwj7hc3.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.from(game);\n    for i in guess {\n        diff[i] = abs(guess[i] - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp4p7jwlvk.rs:14:16\n   |\n14 |     let diff = Vec.from(game);\n   |                ^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::from`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp4p7jwlvk.rs:16:19\n   |\n16 |         diff[i] = abs(guess[i] - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4p7jwlvk.rs:16:23\n   |\n16 |         diff[i] = abs(guess[i] - game[i]);\n   |                       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4p7jwlvk.rs:16:34\n   |\n16 |         diff[i] = abs(guess[i] - game[i]);\n   |                                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, g) in guess.iter().zip(game) {\n        if (g) {\n            diff += 1;\n        }\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp32ad_eq7.rs:16:12\n   |\n16 |         if (g) {\n   |            ^ ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (g) {\n16 +         if g {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp32ad_eq7.rs:16:12\n   |\n16 |         if (g) {\n   |            ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmp32ad_eq7.rs:20:12\n   |\n20 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.from_iter(game.len, 0);\n    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diff[i] = 0;\n        } else {\n            diff[i] = game[i] - guess[i];\n        }\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpz1evc6ba.rs:14:16\n   |\n14 |     let diff = Vec.from_iter(game.len, 0);\n   |                ^^^----------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::from_iter`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpz1evc6ba.rs:14:35\n   |\n14 |     let diff = Vec.from_iter(game.len, 0);\n   |                                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.from_iter(game.len(), 0);\n   |                                      ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpz1evc6ba.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.from(game);\n    for (i, v) in guess {\n        diff[i] = v - game[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpy9dmqihp.rs:14:16\n   |\n14 |     let diff = Vec.from(game);\n   |                ^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::from`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy9dmqihp.rs:15:9\n   |\n15 |     for (i, v) in guess {\n   |         ^^^^^^    ----- this expression has type `Option<isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0423.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (g, gt) => {\n        if (g == gt) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(g - gt);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpnx11zgcx.rs:15:21\n   |\n15 |     for (i, (g, gt) => {\n   |                     ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpnx11zgcx.rs:15:20\n   |\n15 |     for (i, (g, gt) => {\n   |                    ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpnx11zgcx.rs:15:21\n   |\n15 |     for (i, (g, gt) => {\n   |                     ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpnx11zgcx.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnx11zgcx.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec::new();\n    for (i, j) in guess.zip(game) {\n        if (j == i) {\n            diff.push(0);\n        } else {\n            diff.push(abs(j - i));\n        }\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpeu3l5fn3.rs:19:23\n   |\n19 |             diff.push(abs(j - i));\n   |                       ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpeu3l5fn3.rs:16:12\n   |\n16 |         if (j == i) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (j == i) {\n16 +         if j == i {\n   | \n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpeu3l5fn3.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp3ot8rgnu.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp3ot8rgnu.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3ot8rgnu.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp3ot8rgnu.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_len(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpzmamgu8n.rs:14:16\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                ^^^-------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_len`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpzmamgu8n.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzmamgu8n.rs:14:32\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                                ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_len(game.len());\n   |                                   ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpzmamgu8n.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.zip(game)) {\n        diffs[i] = abs(score - guess);\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpq31tcgd_.rs:15:28\n   |\n15 |     for (i, (score, guess) in guess.zip(game)) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpq31tcgd_.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.zip(game)) {\n   |         ^                                    ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (score, guess) in guess.zip(game)) {\n15 +     for i, (score, guess) in guess.zip(game) {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpq31tcgd_.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpq31tcgd_.rs:16:20\n   |\n16 |         diffs[i] = abs(score - guess);\n   |                    ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpq31tcgd_.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpq31tcgd_.rs:15:37\n    |\n15  |       for (i, (score, guess) in guess.zip(game)) {\n    |                                       ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        if (j == i) {\n            diff = 0;\n        } else {\n            diff = j - i;\n        }\n    }\n    return game.map(i => abs(i - guess.get(i))).sum();\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpbs0tww96.rs:22:23\n   |\n22 |     return game.map(i => abs(i - guess.get(i))).sum();\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for i in guess {\n        if i == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = game[i] - guess[i];\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp259qe329.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp259qe329.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp259qe329.rs:16:17\n   |\n16 |         if i == game[i] {\n   |                 ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp259qe329.rs:19:24\n   |\n19 |             diffs[i] = game[i] - guess[i];\n   |                        ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp259qe329.rs:19:34\n   |\n19 |             diffs[i] = game[i] - guess[i];\n   |                                  ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 5",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] != game[i] {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp830i4jh5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp830i4jh5.rs:17:24\n   |\n17 |             diffs[i] = abs(guess[i] - game[i]);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp830i4jh5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp830i4jh5.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp563ffere.rs:16:17\n   |\n16 |         diff += abs(j - i);\n   |                 ^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp563ffere.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmp563ffere.rs:18:12\n   |\n18 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_len(game.len);\n    for i in 0..game.len {\n        diff[i] = abs(game[i] - guess[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp1gdkcma.rs:14:16\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                ^^^-------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_len`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpp1gdkcma.rs:16:19\n   |\n16 |         diff[i] = abs(game[i] - guess[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp1gdkcma.rs:14:32\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                                ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_len(game.len());\n   |                                   ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp1gdkcma.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.from(game);\n    for i in guess {\n        diff[i] = game[i] - guess[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmptz0ihdal.rs:14:16\n   |\n14 |     let diff = Vec.from(game);\n   |                ^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::from`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptz0ihdal.rs:16:19\n   |\n16 |         diff[i] = game[i] - guess[i];\n   |                   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptz0ihdal.rs:16:29\n   |\n16 |         diff[i] = game[i] - guess[i];\n   |                             ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0423.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpa4o1x3fr.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpa4o1x3fr.rs:19:24\n   |\n19 |             diffs[i] = abs(guess[i] - game[i]);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpa4o1x3fr.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpa4o1x3fr.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.enumerate()) {\n        diffs[i] = abs(score - guess);\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpxph18bis.rs:15:28\n   |\n15 |     for (i, (score, guess) in guess.enumerate()) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpxph18bis.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.enumerate()) {\n   |         ^                                      ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (score, guess) in guess.enumerate()) {\n15 +     for i, (score, guess) in guess.enumerate() {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpxph18bis.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpxph18bis.rs:16:20\n   |\n16 |         diffs[i] = abs(score - guess);\n   |                    ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxph18bis.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpxph18bis.rs:15:37\n    |\n15  |       for (i, (score, guess) in guess.enumerate()) {\n    |                                       ^^^^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = game.map(guess);\n    let diff_len = diff.length;\n    let correct = game.map(guess.filter(x => x == 0));\n    let correct_len = correct.length;\n    let diff_correct = diff.filter(x => x == 0);\n    let diff_correct_len = diff_correct.length;\n    let correct_guess = guess.filter(x => x == 0);\n    let correct_guess_len = correct_guess.length;\n    let diff_correct_guess = diff_correct.filter(x => x == 0);\n    let diff_correct_guess_len = diff_correct_guess.length;\n    let correct_guess_diff = correct_guess.map(x => x - correct_guess_len);\n    let correct_guess_diff_len = correct_guess_diff.length;\n    let diff_correct_guess_diff = diff_correct_guess.map(x => x - correct_guess_diff_len);\n    let diff_correct_guess_diff_len = diff_correct_guess_diff.length;\n    let correct_guess_diff_correct = correct_guess.map(x => x - correct_guess_diff_len);\n    let correct_guess_diff_correct_len = correct_guess_diff_correct.length;\n    let diff_correct_guess_diff_correct = diff_correct_guess_diff.map(x => x - correct_guess_diff_correct_len);\n    let diff_correct_guess_diff_correct_len = diff_correct_guess_diff_correct.length;\n    let correct_guess_diff_correct_diff = correct_guess.map(x => x - correct_guess_diff_correct_len);\n    let correct_guess_diff_correct_diff_len = correct_guess_diff_correct_diff.length;\n    let diff_correct_guess_diff_correct_diff = diff_correct_guess_diff_correct.map(x => x - correct_guess_diff_correct_diff_len);\n    let diff\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpf3vgbrrt.rs:16:43\n   |\n16 |     let correct = game.map(guess.filter(x => x == 0));\n   |                                           ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.enumerate()) {\n        diffs[i] = score - guess;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpj_rbfcpu.rs:15:28\n   |\n15 |     for (i, (score, guess) in guess.enumerate()) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpj_rbfcpu.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.enumerate()) {\n   |         ^                                      ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (score, guess) in guess.enumerate()) {\n15 +     for i, (score, guess) in guess.enumerate() {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpj_rbfcpu.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpj_rbfcpu.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpj_rbfcpu.rs:15:37\n    |\n15  |       for (i, (score, guess) in guess.enumerate()) {\n    |                                       ^^^^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_len(game.len);\n    for i in 0..game.len {\n        diff[i] = guess[i] - game[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpaj9z0b34.rs:14:16\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                ^^^-------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_len`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpaj9z0b34.rs:14:32\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                                ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_len(game.len());\n   |                                   ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpaj9z0b34.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpqsorc94e.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqsorc94e.rs:19:24\n   |\n19 |             diffs[i] = abs(guess[i] - game[i]);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.from(game);\n    for (i, v) in guess {\n        diff[i] = v - game[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpy9dmqihp.rs:14:16\n   |\n14 |     let diff = Vec.from(game);\n   |                ^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::from`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy9dmqihp.rs:15:9\n   |\n15 |     for (i, v) in guess {\n   |         ^^^^^^    ----- this expression has type `Option<isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0423.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, (g, gt)) in guess.zip(game) {\n        diff[i] = gt - g;\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpctw1_qn3.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpctw1_qn3.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpctw1_qn3.rs:15:31\n    |\n15  |       for (i, (g, gt)) in guess.zip(game) {\n    |                                 ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        if (i != j) {\n            diff += abs(i - j);\n        }\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpj3gdeu4v.rs:17:21\n   |\n17 |             diff += abs(i - j);\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpj3gdeu4v.rs:16:12\n   |\n16 |         if (i != j) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i != j) {\n16 +         if i != j {\n   | \n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpj3gdeu4v.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmpj3gdeu4v.rs:20:12\n   |\n20 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, g) in guess.iter().zip(game) {\n        diff += abs(g - i);\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpophgwltv.rs:16:17\n   |\n16 |         diff += abs(g - i);\n   |                 ^^^ not found in this scope\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmpophgwltv.rs:18:12\n   |\n18 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp563ffere.rs:16:17\n   |\n16 |         diff += abs(j - i);\n   |                 ^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp563ffere.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmp563ffere.rs:18:12\n   |\n18 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.enumerate()) {\n        diffs[i] = score - guess;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpj_rbfcpu.rs:15:28\n   |\n15 |     for (i, (score, guess) in guess.enumerate()) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpj_rbfcpu.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.enumerate()) {\n   |         ^                                      ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (score, guess) in guess.enumerate()) {\n15 +     for i, (score, guess) in guess.enumerate() {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpj_rbfcpu.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpj_rbfcpu.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpj_rbfcpu.rs:15:37\n    |\n15  |       for (i, (score, guess) in guess.enumerate()) {\n    |                                       ^^^^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len());\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpt_6_44be.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpt_6_44be.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpt_6_44be.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (_, g) in guess) {\n        diffs[i] = game[i] - g;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmp26ki2wjl.rs:15:20\n   |\n15 |     for (i, (_, g) in guess) {\n   |                    ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp26ki2wjl.rs:15:9\n   |\n15 |     for (i, (_, g) in guess) {\n   |         ^                  ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (_, g) in guess) {\n15 +     for i, (_, g) in guess {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp26ki2wjl.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp26ki2wjl.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp26ki2wjl.rs:15:9\n   |\n15 |     for (i, (_, g) in guess) {\n   |         ^^^^^^^^^^    ----- this expression has type `Option<isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = g - game[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpjwu2gjk8.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpjwu2gjk8.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpjwu2gjk8.rs:16:23\n   |\n16 |         diff[i] = g - game[i];\n   |                       ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp3ot8rgnu.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp3ot8rgnu.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3ot8rgnu.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp3ot8rgnu.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp3ot8rgnu.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp3ot8rgnu.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3ot8rgnu.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp3ot8rgnu.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for i in 0..game.len() {\n        if game[i] != guess[i] {\n            diff += abs(game[i] - guess[i]);\n        }\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpjmxmmxkt.rs:17:21\n   |\n17 |             diff += abs(game[i] - guess[i]);\n   |                     ^^^ not found in this scope\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmpjmxmmxkt.rs:20:12\n   |\n20 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = game.map(guess);\n    let diff_abs = diff.map(abs);\n    let diff_sum = diff_abs.fold(0, (a, b) => a + b);\n    return diff_sum;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp6n4xo751.rs:16:44\n   |\n16 |     let diff_sum = diff_abs.fold(0, (a, b) => a + b);\n   |                                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff = max(diff, abs(j - i));\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpgfczc5im.rs:18:23\n   |\n18 |     return game.map(i => diff - abs(i - guess.get(i)));\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = game.map(guess.map(x => abs(x - guess[x])));\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpv4al21_z.rs:14:37\n   |\n14 |     let diff = game.map(guess.map(x => abs(x - guess[x])));\n   |                                     ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpa4o1x3fr.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpa4o1x3fr.rs:19:24\n   |\n19 |             diffs[i] = abs(guess[i] - game[i]);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpa4o1x3fr.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpa4o1x3fr.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.enumerate()) {\n        diffs.set(i, abs(score - guess));\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmp1zy10c0r.rs:15:28\n   |\n15 |     for (i, (score, guess) in guess.enumerate()) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp1zy10c0r.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.enumerate()) {\n   |         ^                                      ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (score, guess) in guess.enumerate()) {\n15 +     for i, (score, guess) in guess.enumerate() {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp1zy10c0r.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp1zy10c0r.rs:16:22\n   |\n16 |         diffs.set(i, abs(score - guess));\n   |                      ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp1zy10c0r.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp1zy10c0r.rs:15:37\n    |\n15  |       for (i, (score, guess) in guess.enumerate()) {\n    |                                       ^^^^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpzlzag7_3.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpzlzag7_3.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpzlzag7_3.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpzlzag7_3.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzlzag7_3.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpavvwhr1g.rs:16:17\n   |\n16 |         diff += abs(j - i);\n   |                 ^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpavvwhr1g.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpavvwhr1g.rs:18:12\n   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |                                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |     return diff;\n   |            ^^^^ expected struct `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n                found type `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_len(game.len);\n    for (i, (score, guess_) => {\n        diff[i] = score - guess_;\n    });\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpe252gsr9.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpe252gsr9.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpe252gsr9.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpe252gsr9.rs:14:16\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                ^^^-------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_len`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpe252gsr9.rs:14:32\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                                ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_len(game.len());\n   |                                   ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, v) in guess.iter().zip(game) {\n        diff[i] = v - guess[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyaspbysb.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyaspbysb.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpyaspbysb.rs:16:23\n   |\n16 |         diff[i] = v - guess[i];\n   |                       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp563ffere.rs:16:17\n   |\n16 |         diff += abs(j - i);\n   |                 ^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp563ffere.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmp563ffere.rs:18:12\n   |\n18 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let scores = game;\n    let guesses = guess;\n    let diffs = Vec.new(guesses.len);\n    for (i in 0..guesses.len) {\n        let score = scores[i];\n        let guess = guesses[i];\n        let diff = score - guess;\n        diffs[i] = diff;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmpct_x5n_b.rs:17:12\n   |\n17 |     for (i in 0..guesses.len) {\n   |            ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpct_x5n_b.rs:17:9\n   |\n17 |     for (i in 0..guesses.len) {\n   |         ^                   ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n17 -     for (i in 0..guesses.len) {\n17 +     for i in 0..guesses.len {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpct_x5n_b.rs:16:17\n   |\n16 |     let diffs = Vec.new(guesses.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpct_x5n_b.rs:16:33\n   |\n16 |     let diffs = Vec.new(guesses.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n16 |     let diffs = Vec.new(guesses.len());\n   |                                    ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpct_x5n_b.rs:17:26\n   |\n17 |     for (i in 0..guesses.len) {\n   |                          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n17 |     for (i in 0..guesses.len()) {\n   |                             ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, v) in guess.iter().zip(game) {\n        diff[i] = v - guess[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyaspbysb.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyaspbysb.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpyaspbysb.rs:16:23\n   |\n16 |         diff[i] = v - guess[i];\n   |                       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, v) in guess.iter().zip(game) {\n        diff[i] = v - v;\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp_b_jml5g.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp_b_jml5g.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpqsorc94e.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqsorc94e.rs:19:24\n   |\n19 |             diffs[i] = abs(guess[i] - game[i]);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, v) in guess.iter().zip(game) {\n        diff += abs(v - i);\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpxx0t9bap.rs:16:17\n   |\n16 |         diff += abs(v - i);\n   |                 ^^^ not found in this scope\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmpxx0t9bap.rs:18:12\n   |\n18 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp563ffere.rs:16:17\n   |\n16 |         diff += abs(j - i);\n   |                 ^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp563ffere.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmp563ffere.rs:18:12\n   |\n18 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_len(game.len);\n    for (i, (g, g2) in guess.zip(game)) {\n        diff[i] = g2 - g;\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpu48te5lr.rs:15:21\n   |\n15 |     for (i, (g, g2) in guess.zip(game)) {\n   |                     ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpu48te5lr.rs:15:9\n   |\n15 |     for (i, (g, g2) in guess.zip(game)) {\n   |         ^                             ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (g, g2) in guess.zip(game)) {\n15 +     for i, (g, g2) in guess.zip(game) {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpu48te5lr.rs:14:16\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                ^^^-------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_len`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpu48te5lr.rs:14:32\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                                ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_len(game.len());\n   |                                   ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpu48te5lr.rs:15:30\n    |\n15  |       for (i, (g, g2) in guess.zip(game)) {\n    |                                ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp563ffere.rs:16:17\n   |\n16 |         diff += abs(j - i);\n   |                 ^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp563ffere.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmp563ffere.rs:18:12\n   |\n18 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.from(game);\n    for (i, g) in guess.iter() {\n        diff[i] = game[i] - g;\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpy_0s48o0.rs:14:16\n   |\n14 |     let diff = Vec.from(game);\n   |                ^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::from`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy_0s48o0.rs:15:9\n   |\n15 |     for (i, g) in guess.iter() {\n   |         ^^^^^^    ------------ this expression has type `Option<&isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0423.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp55uzctd5.rs:18:23\n   |\n18 |     return game.map(i => diff - abs(i - guess.get(i)));\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let guess_i = guess[i];\n        let game_i = game[i];\n        if guess_i == game_i {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess_i - game_i);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp7khb87kn.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp7khb87kn.rs:21:24\n   |\n21 |             diffs[i] = abs(guess_i - game_i);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7khb87kn.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7khb87kn.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.enumerate()) {\n        let diff = score - guess;\n        diffs[i] = diff;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpqj9otb6t.rs:15:28\n   |\n15 |     for (i, (score, guess) in guess.enumerate()) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpqj9otb6t.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.enumerate()) {\n   |         ^                                      ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (score, guess) in guess.enumerate()) {\n15 +     for i, (score, guess) in guess.enumerate() {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpqj9otb6t.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqj9otb6t.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpqj9otb6t.rs:15:37\n    |\n15  |       for (i, (score, guess) in guess.enumerate()) {\n    |                                       ^^^^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let diff = guess[i] - game[i];\n        diffs[i] = diff;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpwh4gl6zu.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpwh4gl6zu.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpwh4gl6zu.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpqsorc94e.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqsorc94e.rs:19:24\n   |\n19 |             diffs[i] = abs(guess[i] - game[i]);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff = diff + abs(j - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp0suhxhvi.rs:18:23\n   |\n18 |     return game.map(i => diff - abs(i - guess.get(i)));\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff = diff + abs(j - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp0suhxhvi.rs:18:23\n   |\n18 |     return game.map(i => diff - abs(i - guess.get(i)));\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        if (i != j) {\n            diff += abs(i - j);\n        }\n    }\n    return game.map(i => diff - i);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp430zqdqs.rs:20:23\n   |\n20 |     return game.map(i => diff - i);\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = g - game[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpjwu2gjk8.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpjwu2gjk8.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpjwu2gjk8.rs:16:23\n   |\n16 |         diff[i] = g - game[i];\n   |                       ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpqsorc94e.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqsorc94e.rs:19:24\n   |\n19 |             diffs[i] = abs(guess[i] - game[i]);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp55uzctd5.rs:18:23\n   |\n18 |     return game.map(i => diff - abs(i - guess.get(i)));\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        diffs[i] = guess[i] - game[i];\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpo99g0g_j.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpo99g0g_j.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpo99g0g_j.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        if (i != j) {\n            diff += abs(i - j);\n        }\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpj3gdeu4v.rs:17:21\n   |\n17 |             diff += abs(i - j);\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpj3gdeu4v.rs:16:12\n   |\n16 |         if (i != j) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i != j) {\n16 +         if i != j {\n   | \n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpj3gdeu4v.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmpj3gdeu4v.rs:20:12\n   |\n20 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return Vec::from(game) * diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqnp_wd76.rs:16:17\n   |\n16 |         diff += abs(j - i);\n   |                 ^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpqnp_wd76.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0369]: cannot multiply `Vec<isize>` by `{integer}`\n  --> /tmp/tmpqnp_wd76.rs:18:28\n   |\n18 |     return Vec::from(game) * diff;\n   |            --------------- ^ ---- {integer}\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0369, E0425, E0599.\nFor more information about an error, try `rustc --explain E0369`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp563ffere.rs:16:17\n   |\n16 |         diff += abs(j - i);\n   |                 ^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp563ffere.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmp563ffere.rs:18:12\n   |\n18 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_len(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpzmamgu8n.rs:14:16\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                ^^^-------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_len`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpzmamgu8n.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzmamgu8n.rs:14:32\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                                ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_len(game.len());\n   |                                   ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpzmamgu8n.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, _) in guess {\n        diffs[i] = game[i] - guess[i];\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpdg_gdyrp.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpdg_gdyrp.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdg_gdyrp.rs:15:9\n   |\n15 |     for (i, _) in guess {\n   |         ^^^^^^    ----- this expression has type `Option<isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n  let diffs = Vec.new(game.len);\n  for (i, (score, guess_) => {\n    let diff = score - guess_;\n    diffs[i] = diff;\n  });\n  return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmphywwv9zt.rs:15:27\n   |\n15 |   for (i, (score, guess_) => {\n   |                           ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmphywwv9zt.rs:15:26\n   |\n15 |   for (i, (score, guess_) => {\n   |                          ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmphywwv9zt.rs:15:27\n   |\n15 |   for (i, (score, guess_) => {\n   |                           ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmphywwv9zt.rs:14:15\n   |\n14 |   let diffs = Vec.new(game.len);\n   |               ^^^----\n   |               |\n   |               help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmphywwv9zt.rs:14:28\n   |\n14 |   let diffs = Vec.new(game.len);\n   |                            ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |   let diffs = Vec.new(game.len());\n   |                               ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.zip(game)) {\n        diffs[i] = abs(score - guess);\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpq31tcgd_.rs:15:28\n   |\n15 |     for (i, (score, guess) in guess.zip(game)) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpq31tcgd_.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.zip(game)) {\n   |         ^                                    ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (score, guess) in guess.zip(game)) {\n15 +     for i, (score, guess) in guess.zip(game) {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpq31tcgd_.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpq31tcgd_.rs:16:20\n   |\n16 |         diffs[i] = abs(score - guess);\n   |                    ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpq31tcgd_.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpq31tcgd_.rs:15:37\n    |\n15  |       for (i, (score, guess) in guess.zip(game)) {\n    |                                       ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0599, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        if (i != j) {\n            diff += abs(i - j);\n        }\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpj3gdeu4v.rs:17:21\n   |\n17 |             diff += abs(i - j);\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpj3gdeu4v.rs:16:12\n   |\n16 |         if (i != j) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (i != j) {\n16 +         if i != j {\n   | \n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpj3gdeu4v.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmpj3gdeu4v.rs:20:12\n   |\n20 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let guess_i = guess[i];\n        let game_i = game[i];\n        if guess_i == game_i {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess_i - game_i);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp7khb87kn.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp7khb87kn.rs:21:24\n   |\n21 |             diffs[i] = abs(guess_i - game_i);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7khb87kn.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7khb87kn.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff = max(diff, abs(j - i));\n    }\n    return game.map(i => diff - i);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpmu16ukzx.rs:18:23\n   |\n18 |     return game.map(i => diff - i);\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (g, g2) in guess.iter()) {\n        if (g2 == 0) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(g2 - g);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmppjw15tp8.rs:15:21\n   |\n15 |     for (i, (g, g2) in guess.iter()) {\n   |                     ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmppjw15tp8.rs:15:9\n   |\n15 |     for (i, (g, g2) in guess.iter()) {\n   |         ^                          ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (g, g2) in guess.iter()) {\n15 +     for i, (g, g2) in guess.iter() {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmppjw15tp8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmppjw15tp8.rs:19:24\n   |\n19 |             diffs[i] = abs(g2 - g);\n   |                        ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmppjw15tp8.rs:16:12\n   |\n16 |         if (g2 == 0) {\n   |            ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (g2 == 0) {\n16 +         if g2 == 0 {\n   | \n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppjw15tp8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppjw15tp8.rs:15:9\n   |\n15 |     for (i, (g, g2) in guess.iter()) {\n   |         ^^^^^^^^^^^    ------------ this expression has type `Option<&isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror[E0277]: can't compare `&_` with `{integer}`\n  --> /tmp/tmppjw15tp8.rs:16:16\n   |\n16 |         if (g2 == 0) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = g - game[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpjwu2gjk8.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpjwu2gjk8.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpjwu2gjk8.rs:16:23\n   |\n16 |         diff[i] = g - game[i];\n   |                       ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff = diff + abs(j - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp0suhxhvi.rs:18:23\n   |\n18 |     return game.map(i => diff - abs(i - guess.get(i)));\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff = diff + abs(j - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp0suhxhvi.rs:18:23\n   |\n18 |     return game.map(i => diff - abs(i - guess.get(i)));\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, g) in guess.iter().zip(game) {\n        diff += abs(g - i);\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpophgwltv.rs:16:17\n   |\n16 |         diff += abs(g - i);\n   |                 ^^^ not found in this scope\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmpophgwltv.rs:18:12\n   |\n18 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let diff = guess[i] - game[i];\n        diffs[i] = diff;\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpwh4gl6zu.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpwh4gl6zu.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpwh4gl6zu.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(guess.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpzlzag7_3.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpzlzag7_3.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpzlzag7_3.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpzlzag7_3.rs:14:17\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzlzag7_3.rs:14:31\n   |\n14 |     let diffs = Vec.new(guess.len);\n   |                               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(guess.len());\n   |                                  ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_len(game.len);\n    for i in 0..game.len {\n        diff[i] = guess[i] - game[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpaj9z0b34.rs:14:16\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                ^^^-------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_len`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpaj9z0b34.rs:14:32\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                                ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_len(game.len());\n   |                                   ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpaj9z0b34.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        if (j != i) {\n            diff += 1;\n        }\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp24l3xiic.rs:16:12\n   |\n16 |         if (j != i) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (j != i) {\n16 +         if j != i {\n   | \n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp24l3xiic.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmp24l3xiic.rs:20:12\n   |\n20 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        diffs[i] = guess[i] - game[i];\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpo99g0g_j.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpo99g0g_j.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpo99g0g_j.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (g, g2) in guess.zip(game)) {\n        if (g2 == g) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(g2 - g);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpoli0cqgd.rs:15:21\n   |\n15 |     for (i, (g, g2) in guess.zip(game)) {\n   |                     ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpoli0cqgd.rs:15:9\n   |\n15 |     for (i, (g, g2) in guess.zip(game)) {\n   |         ^                             ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (g, g2) in guess.zip(game)) {\n15 +     for i, (g, g2) in guess.zip(game) {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpoli0cqgd.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpoli0cqgd.rs:19:24\n   |\n19 |             diffs[i] = abs(g2 - g);\n   |                        ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpoli0cqgd.rs:16:12\n   |\n16 |         if (g2 == g) {\n   |            ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (g2 == g) {\n16 +         if g2 == g {\n   | \n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpoli0cqgd.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpoli0cqgd.rs:15:30\n    |\n15  |       for (i, (g, g2) in guess.zip(game)) {\n    |                                ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is req",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp3ot8rgnu.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp3ot8rgnu.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3ot8rgnu.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp3ot8rgnu.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpqsorc94e.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqsorc94e.rs:19:24\n   |\n19 |             diffs[i] = abs(guess[i] - game[i]);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpqsorc94e.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqsorc94e.rs:19:24\n   |\n19 |             diffs[i] = abs(guess[i] - game[i]);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqsorc94e.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.from(game);\n    for i in guess {\n        diff[i] = abs(guess[i] - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp4p7jwlvk.rs:14:16\n   |\n14 |     let diff = Vec.from(game);\n   |                ^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::from`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp4p7jwlvk.rs:16:19\n   |\n16 |         diff[i] = abs(guess[i] - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4p7jwlvk.rs:16:23\n   |\n16 |         diff[i] = abs(guess[i] - game[i]);\n   |                       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4p7jwlvk.rs:16:34\n   |\n16 |         diff[i] = abs(guess[i] - game[i]);\n   |                                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp3ot8rgnu.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp3ot8rgnu.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3ot8rgnu.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp3ot8rgnu.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = g - game[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpjwu2gjk8.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpjwu2gjk8.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpjwu2gjk8.rs:16:23\n   |\n16 |         diff[i] = g - game[i];\n   |                       ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_len(game.len);\n    for i in 0..game.len {\n        diff[i] = guess[i] - game[i];\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpaj9z0b34.rs:14:16\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                ^^^-------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_len`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpaj9z0b34.rs:14:32\n   |\n14 |     let diff = Vec.of_len(game.len);\n   |                                ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_len(game.len());\n   |                                   ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpaj9z0b34.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp3ot8rgnu.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp3ot8rgnu.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3ot8rgnu.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp3ot8rgnu.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (g, gt)) in guess.iter().zip(game) {\n        if (g == gt) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(g - gt);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp0vu8pbnm.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp0vu8pbnm.rs:19:24\n   |\n19 |             diffs[i] = abs(g - gt);\n   |                        ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0vu8pbnm.rs:16:12\n   |\n16 |         if (g == gt) {\n   |            ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (g == gt) {\n16 +         if g == gt {\n   | \n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0vu8pbnm.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0vu8pbnm.rs:15:13\n   |\n15 |     for (i, (g, gt)) in guess.iter().zip(game) {\n   |             ^^^^^^^     ---------------------- this expression has type `Option<(&isize, isize)>`\n   |             |\n   |             expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let guess_score = guess[i];\n        let game_score = game[i];\n        if guess_score == game_score {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = guess_score - game_score;\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp873tsq17.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp873tsq17.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp873tsq17.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        if (j == 0) {\n            diff += 1;\n        } else {\n            diff += abs(j - i);\n        }\n    }\n    return Vec::from(diff);\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp755tttis.rs:19:21\n   |\n19 |             diff += abs(j - i);\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp755tttis.rs:16:12\n   |\n16 |         if (j == 0) {\n   |            ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -         if (j == 0) {\n16 +         if j == 0 {\n   | \n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp755tttis.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n  --> /tmp/tmp755tttis.rs:22:12\n   |\n22 |     return Vec::from(diff);\n   |            ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T, A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8> as From<&str>>\n           and 2 others\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.iter()) {\n        diffs[i] = abs(score - guess);\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpacttzw3b.rs:15:28\n   |\n15 |     for (i, (score, guess) in guess.iter()) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpacttzw3b.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.iter()) {\n   |         ^                                 ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (score, guess) in guess.iter()) {\n15 +     for i, (score, guess) in guess.iter() {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpacttzw3b.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpacttzw3b.rs:16:20\n   |\n16 |         diffs[i] = abs(score - guess);\n   |                    ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpacttzw3b.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpacttzw3b.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.iter()) {\n   |         ^^^^^^^^^^^^^^^^^^    ------------ this expression has type `Option<&isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyevot5m5.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpyevot5m5.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpyevot5m5.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyevot5m5.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp55uzctd5.rs:18:23\n   |\n18 |     return game.map(i => diff - abs(i - guess.get(i)));\n   |                       ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.iter()) {\n        diffs[i] = abs(score - guess);\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found keyword `in`\n  --> /tmp/tmpacttzw3b.rs:15:28\n   |\n15 |     for (i, (score, guess) in guess.iter()) {\n   |                            ^^ expected one of `)`, `,`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpacttzw3b.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.iter()) {\n   |         ^                                 ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -     for (i, (score, guess) in guess.iter()) {\n15 +     for i, (score, guess) in guess.iter() {\n   | \n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpacttzw3b.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpacttzw3b.rs:16:20\n   |\n16 |         diffs[i] = abs(score - guess);\n   |                    ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpacttzw3b.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpacttzw3b.rs:15:9\n   |\n15 |     for (i, (score, guess) in guess.iter()) {\n   |         ^^^^^^^^^^^^^^^^^^    ------------ this expression has type `Option<&isize>`\n   |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpa4o1x3fr.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpa4o1x3fr.rs:19:24\n   |\n19 |             diffs[i] = abs(guess[i] - game[i]);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpa4o1x3fr.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpa4o1x3fr.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp3ot8rgnu.rs:14:16\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                ^^^--------\n   |                |\n   |                help: use the path separator to refer to an item: `Vec::of_ints`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp3ot8rgnu.rs:16:19\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                   ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3ot8rgnu.rs:14:33\n   |\n14 |     let diff = Vec.of_ints(game.len);\n   |                                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diff = Vec.of_ints(game.len());\n   |                                    ++\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp3ot8rgnu.rs:16:27\n   |\n16 |         diff[i] = abs(g - game[i]);\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return diff;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpavvwhr1g.rs:16:17\n   |\n16 |         diff += abs(j - i);\n   |                 ^^^ not found in this scope\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpavvwhr1g.rs:15:25\n    |\n15  |       for (i, j) in guess.zip(game) {\n    |                           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpavvwhr1g.rs:18:12\n   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |                                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |     return diff;\n   |            ^^^^ expected struct `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n                found type `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, or `|`, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected one of `)`, `,`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6i3qro8.rs:15:28\n   |\n15 |     for (i, (score, guess_) => {\n   |                            ^ help: try adding `in` here\n\nerror: expected expression, found `=>`\n  --> /tmp/tmpp6i3qro8.rs:15:29\n   |\n15 |     for (i, (score, guess_) => {\n   |                             ^^ expected expression\n\nerror[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmpp6i3qro8.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp6i3qro8.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n/// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let guess_i = guess[i];\n        let game_i = game[i];\n        if guess_i == game_i {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess_i - game_i);\n        }\n    }\n    return diffs;\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n",
      "timestamp": 1664292516,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `Vec`\n  --> /tmp/tmp7khb87kn.rs:14:17\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                 ^^^----\n   |                 |\n   |                 help: use the path separator to refer to an item: `Vec::new`\n\nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp7khb87kn.rs:21:24\n   |\n21 |             diffs[i] = abs(guess_i - game_i);\n   |                        ^^^ not found in this scope\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7khb87kn.rs:14:30\n   |\n14 |     let diffs = Vec.new(game.len);\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |     let diffs = Vec.new(game.len());\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7khb87kn.rs:15:22\n   |\n15 |     for i in 0..game.len {\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     for i in 0..game.len() {\n   |                         ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0616.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}