{
  "name": "HumanEval_2_truncate_number",
  "language": "rs",
  "prompt": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n",
  "tests": "}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = std::floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in crate `std`\n --> /tmp/tmpdy0wst45.rs:8:22\n  |\n8 |   let integer = std::floor(number);\n  |                      ^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  const _ = number;\n  return 0.0;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp3nwv71l0.rs:8:13\n  |\n8 |   const _ = number;\n  |   -------   ^^^^^^ non-constant value\n  |   |\n  |   help: consider using `let` instead of `const`: `let _`\n\nerror: missing type for `const` item\n --> /tmp/tmp3nwv71l0.rs:8:9\n  |\n8 |   const _ = number;\n  |         ^ help: provide a type for the item: `_: <type>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0435`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = 0.0;\n  while integer >= 1.0 {\n    integer = integer - 1.0;\n    decimals = decimals + 1.0;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `integer`\n  --> /tmp/tmps3drxir2.rs:11:5\n   |\n8  |   let integer = number;\n   |       -------\n   |       |\n   |       first assignment to `integer`\n   |       help: consider making this binding mutable: `mut integer`\n...\n11 |     integer = integer - 1.0;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `decimals`\n  --> /tmp/tmps3drxir2.rs:12:5\n   |\n9  |   let decimals = 0.0;\n   |       --------\n   |       |\n   |       first assignment to `decimals`\n   |       help: consider making this binding mutable: `mut decimals`\n...\n12 |     decimals = decimals + 1.0;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n\n  const int_part = floor(number)\n  const decimals = number - int_part\n\n  if decimals < 0.5 {\n    return 0\n  }\n\n  return decimals\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpaewpf438.rs:12:33\n   |\n12 |   const int_part = floor(number)\n   |                                 ^ help: add `;` here\n13 |   const decimals = number - int_part\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpaewpf438.rs:13:37\n   |\n13 |   const decimals = number - int_part\n   |                                     ^ help: add `;` here\n14 | \n15 |   if decimals < 0.5 {\n   |   -- unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpaewpf438.rs:12:26\n   |\n12 |   const int_part = floor(number)\n   |   --------------         ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let int_part`\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpaewpf438.rs:13:20\n   |\n13 |   const decimals = number - int_part\n   |   --------------   ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let decimals`\n\nerror[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmpaewpf438.rs:12:20\n   |\n12 |   const int_part = floor(number)\n   |                    ^^^^^ not found in this scope\n\nerror: missing type for `const` item\n  --> /tmp/tmpaewpf438.rs:12:9\n   |\n12 |   const int_part = floor(number)\n   |         ^^^^^^^^ help: provide a type for the item: `int_part: <type>`\n\nerror: missing type for `const` item\n  --> /tmp/tmpaewpf438.rs:13:9\n   |\n13 |   const decimals = number - int_part\n   |         ^^^^^^^^ help: provide a type for the item: `decimals: <type>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpaewpf438.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaewpf438.rs:16:12\n   |\n7  | fn truncate_number(number: f64) -> f64 {\n   |                                    --- expected `f64` because of return type\n...\n16 |     return 0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimal = 0.0;\n  let _ = integer;\n  let _ = decimal;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpgub5eems.rs:7:36\n  |\n7 | fn truncate_number(number: f64) -> f64 {\n  |    ---------------                 ^^^ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = number - integer;\n  if decimals < 0 {\n    decimals = 0;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbcbfsrjq.rs:10:17\n   |\n10 |   if decimals < 0 {\n   |                 ^\n   |                 |\n   |                 expected `f64`, found integer\n   |                 help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbcbfsrjq.rs:11:16\n   |\n9  |   let decimals = number - integer;\n   |                  ---------------- expected due to this value\n10 |   if decimals < 0 {\n11 |     decimals = 0;\n   |                ^\n   |                |\n   |                expected `f64`, found integer\n   |                help: use a float literal: `0.0`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  \n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp1be_sq1h.rs:7:36\n  |\n7 | fn truncate_number(number: f64) -> f64 {\n  |    ---------------                 ^^^ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = std::floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in crate `std`\n --> /tmp/tmpdy0wst45.rs:8:22\n  |\n8 |   let integer = std::floor(number);\n  |                      ^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  const _ = number;\n  return 0.0;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp3nwv71l0.rs:8:13\n  |\n8 |   const _ = number;\n  |   -------   ^^^^^^ non-constant value\n  |   |\n  |   help: consider using `let` instead of `const`: `let _`\n\nerror: missing type for `const` item\n --> /tmp/tmp3nwv71l0.rs:8:9\n  |\n8 |   const _ = number;\n  |         ^ help: provide a type for the item: `_: <type>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0435`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  \n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp1be_sq1h.rs:7:36\n  |\n7 | fn truncate_number(number: f64) -> f64 {\n  |    ---------------                 ^^^ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.0`,\n right: `0.5`', /tmp/tmpz4c8zu64.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimal = 0.0;\n  let _ = integer;\n  let _ = decimal;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpgub5eems.rs:7:36\n  |\n7 | fn truncate_number(number: f64) -> f64 {\n  |    ---------------                 ^^^ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = 0.0;\n  if number < 0.0 {\n    integer = -integer;\n  }\n  if number < 1.0 {\n    decimals = number - integer;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `integer`\n  --> /tmp/tmp314h7emm.rs:11:5\n   |\n8  |   let integer = number;\n   |       -------\n   |       |\n   |       first assignment to `integer`\n   |       help: consider making this binding mutable: `mut integer`\n...\n11 |     integer = -integer;\n   |     ^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `decimals`\n  --> /tmp/tmp314h7emm.rs:14:5\n   |\n9  |   let decimals = 0.0;\n   |       --------\n   |       |\n   |       first assignment to `decimals`\n   |       help: consider making this binding mutable: `mut decimals`\n...\n14 |     decimals = number - integer;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimal = 0.0;\n  if number < 0 {\n    integer = -integer;\n  }\n  if number < 1 {\n    return decimal;\n  }\n  if number < 10 {\n    decimal = number - integer;\n  } else {\n    let exponent = floor(log2(number));\n    decimal = number - integer - pow(2, exponent);\n  }\n  return decimal;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmp8h6c3haq.rs:19:20\n   |\n19 |     let exponent = floor(log2(number));\n   |                    ^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `log2` in this scope\n  --> /tmp/tmp8h6c3haq.rs:19:26\n   |\n19 |     let exponent = floor(log2(number));\n   |                          ^^^^ not found in this scope\n\nerror[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmp8h6c3haq.rs:20:34\n   |\n20 |     decimal = number - integer - pow(2, exponent);\n   |                                  ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h6c3haq.rs:10:15\n   |\n10 |   if number < 0 {\n   |               ^\n   |               |\n   |               expected `f64`, found integer\n   |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h6c3haq.rs:13:15\n   |\n13 |   if number < 1 {\n   |               ^\n   |               |\n   |               expected `f64`, found integer\n   |               help: use a float literal: `1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h6c3haq.rs:16:15\n   |\n16 |   if number < 10 {\n   |               ^^\n   |               |\n   |               expected `f64`, found integer\n   |               help: use a float literal: `10.0`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let _ = number;\n  let integer = number;\n  let decimals = 0.0;\n  if (number < 0.0) {\n    integer = -integer;\n  }\n  decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpr3exr687.rs:11:6\n   |\n11 |   if (number < 0.0) {\n   |      ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (number < 0.0) {\n11 +   if number < 0.0 {\n   | \n\nwarning: value assigned to `decimals` is never read\n  --> /tmp/tmpr3exr687.rs:10:7\n   |\n10 |   let decimals = 0.0;\n   |       ^^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]` on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]: cannot assign twice to immutable variable `integer`\n  --> /tmp/tmpr3exr687.rs:12:5\n   |\n9  |   let integer = number;\n   |       -------\n   |       |\n   |       first assignment to `integer`\n   |       help: consider making this binding mutable: `mut integer`\n...\n12 |     integer = -integer;\n   |     ^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `decimals`\n  --> /tmp/tmpr3exr687.rs:14:3\n   |\n10 |   let decimals = 0.0;\n   |       --------\n   |       |\n   |       first assignment to `decimals`\n   |       help: consider making this binding mutable: `mut decimals`\n...\n14 |   decimals = number - integer;\n   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimal = 0.0;\n  while (integer >= 1.0) {\n    integer = integer - 1.0;\n    decimal = decimal + 1.0;\n  }\n  return decimal;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpviovwvhb.rs:10:9\n   |\n10 |   while (integer >= 1.0) {\n   |         ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -   while (integer >= 1.0) {\n10 +   while integer >= 1.0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `integer`\n  --> /tmp/tmpviovwvhb.rs:11:5\n   |\n8  |   let integer = number;\n   |       -------\n   |       |\n   |       first assignment to `integer`\n   |       help: consider making this binding mutable: `mut integer`\n...\n11 |     integer = integer - 1.0;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `decimal`\n  --> /tmp/tmpviovwvhb.rs:12:5\n   |\n9  |   let decimal = 0.0;\n   |       -------\n   |       |\n   |       first assignment to `decimal`\n   |       help: consider making this binding mutable: `mut decimal`\n...\n12 |     decimal = decimal + 1.0;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  decimals = decimals.trunc();\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `decimals`\n  --> /tmp/tmp5bnz7cq7.rs:10:3\n   |\n9  |   let decimals = number - integer;\n   |       --------\n   |       |\n   |       first assignment to `decimals`\n   |       help: consider making this binding mutable: `mut decimals`\n10 |   decimals = decimals.trunc();\n   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  const int_part = truncate_int(number);\n  const decimals = number - int_part;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp5sumwxbp.rs:8:33\n  |\n8 |   const int_part = truncate_int(number);\n  |   --------------                ^^^^^^ non-constant value\n  |   |\n  |   help: consider using `let` instead of `const`: `let int_part`\n\nerror[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp5sumwxbp.rs:9:20\n  |\n9 |   const decimals = number - int_part;\n  |   --------------   ^^^^^^ non-constant value\n  |   |\n  |   help: consider using `let` instead of `const`: `let decimals`\n\nerror[E0425]: cannot find function `truncate_int` in this scope\n --> /tmp/tmp5sumwxbp.rs:8:20\n  |\n8 |   const int_part = truncate_int(number);\n  |                    ^^^^^^^^^^^^ not found in this scope\n\nerror: missing type for `const` item\n --> /tmp/tmp5sumwxbp.rs:8:9\n  |\n8 |   const int_part = truncate_int(number);\n  |         ^^^^^^^^ help: provide a type for the item: `int_part: <type>`\n\nerror: missing type for `const` item\n --> /tmp/tmp5sumwxbp.rs:9:9\n  |\n9 |   const decimals = number - int_part;\n  |         ^^^^^^^^ help: provide a type for the item: `decimals: <type>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0435.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_float(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_float` in this scope\n --> /tmp/tmpoxflj1gn.rs:8:17\n  |\n8 |   let integer = truncate_float(number);\n  |                 ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  const int_part = int(number);\n  const decimals = number - int_part;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp367izvua.rs:8:24\n  |\n8 |   const int_part = int(number);\n  |   --------------       ^^^^^^ non-constant value\n  |   |\n  |   help: consider using `let` instead of `const`: `let int_part`\n\nerror[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp367izvua.rs:9:20\n  |\n9 |   const decimals = number - int_part;\n  |   --------------   ^^^^^^ non-constant value\n  |   |\n  |   help: consider using `let` instead of `const`: `let decimals`\n\nerror[E0425]: cannot find function `int` in this scope\n --> /tmp/tmp367izvua.rs:8:20\n  |\n8 |   const int_part = int(number);\n  |                    ^^^ not found in this scope\n\nerror: missing type for `const` item\n --> /tmp/tmp367izvua.rs:8:9\n  |\n8 |   const int_part = int(number);\n  |         ^^^^^^^^ help: provide a type for the item: `int_part: <type>`\n\nerror: missing type for `const` item\n --> /tmp/tmp367izvua.rs:9:9\n  |\n9 |   const decimals = number - int_part;\n  |         ^^^^^^^^ help: provide a type for the item: `decimals: <type>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0435.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimal = 0.0;\n  while (integer >= 1.0) {\n    integer = integer - 1.0;\n    decimal = decimal + 1.0;\n  }\n  return decimal;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpviovwvhb.rs:10:9\n   |\n10 |   while (integer >= 1.0) {\n   |         ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -   while (integer >= 1.0) {\n10 +   while integer >= 1.0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `integer`\n  --> /tmp/tmpviovwvhb.rs:11:5\n   |\n8  |   let integer = number;\n   |       -------\n   |       |\n   |       first assignment to `integer`\n   |       help: consider making this binding mutable: `mut integer`\n...\n11 |     integer = integer - 1.0;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `decimal`\n  --> /tmp/tmpviovwvhb.rs:12:5\n   |\n9  |   let decimal = 0.0;\n   |       -------\n   |       |\n   |       first assignment to `decimal`\n   |       help: consider making this binding mutable: `mut decimal`\n...\n12 |     decimal = decimal + 1.0;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = 0.0;\n  if number < 0.0 {\n    integer = -integer;\n  }\n  if number < 1.0 {\n    decimals = number - integer;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `integer`\n  --> /tmp/tmp314h7emm.rs:11:5\n   |\n8  |   let integer = number;\n   |       -------\n   |       |\n   |       first assignment to `integer`\n   |       help: consider making this binding mutable: `mut integer`\n...\n11 |     integer = -integer;\n   |     ^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `decimals`\n  --> /tmp/tmp314h7emm.rs:14:5\n   |\n9  |   let decimals = 0.0;\n   |       --------\n   |       |\n   |       first assignment to `decimals`\n   |       help: consider making this binding mutable: `mut decimals`\n...\n14 |     decimals = number - integer;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  \n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp1be_sq1h.rs:7:36\n  |\n7 | fn truncate_number(number: f64) -> f64 {\n  |    ---------------                 ^^^ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = number - integer;\n  if decimals < 0 {\n    decimals = 0;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbcbfsrjq.rs:10:17\n   |\n10 |   if decimals < 0 {\n   |                 ^\n   |                 |\n   |                 expected `f64`, found integer\n   |                 help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbcbfsrjq.rs:11:16\n   |\n9  |   let decimals = number - integer;\n   |                  ---------------- expected due to this value\n10 |   if decimals < 0 {\n11 |     decimals = 0;\n   |                ^\n   |                |\n   |                expected `f64`, found integer\n   |                help: use a float literal: `0.0`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  \n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp1be_sq1h.rs:7:36\n  |\n7 | fn truncate_number(number: f64) -> f64 {\n  |    ---------------                 ^^^ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n\n  const int_part = int(number)\n  const decimals = number - int_part\n\n  if decimals < 0 {\n    return 0\n  }\n\n  return decimals\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpbrib2bj2.rs:12:31\n   |\n12 |   const int_part = int(number)\n   |                               ^ help: add `;` here\n13 |   const decimals = number - int_part\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpbrib2bj2.rs:13:37\n   |\n13 |   const decimals = number - int_part\n   |                                     ^ help: add `;` here\n14 | \n15 |   if decimals < 0 {\n   |   -- unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpbrib2bj2.rs:12:24\n   |\n12 |   const int_part = int(number)\n   |   --------------       ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let int_part`\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpbrib2bj2.rs:13:20\n   |\n13 |   const decimals = number - int_part\n   |   --------------   ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let decimals`\n\nerror[E0425]: cannot find function `int` in this scope\n  --> /tmp/tmpbrib2bj2.rs:12:20\n   |\n12 |   const int_part = int(number)\n   |                    ^^^ not found in this scope\n\nerror: missing type for `const` item\n  --> /tmp/tmpbrib2bj2.rs:12:9\n   |\n12 |   const int_part = int(number)\n   |         ^^^^^^^^ help: provide a type for the item: `int_part: <type>`\n\nerror: missing type for `const` item\n  --> /tmp/tmpbrib2bj2.rs:13:9\n   |\n13 |   const decimals = number - int_part\n   |         ^^^^^^^^ help: provide a type for the item: `decimals: <type>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbrib2bj2.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbrib2bj2.rs:16:12\n   |\n7  | fn truncate_number(number: f64) -> f64 {\n   |                                    --- expected `f64` because of return type\n...\n16 |     return 0\n   |            ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  if decimals < 0 {\n    decimals = 0;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpd74tli3v.rs:10:17\n   |\n10 |   if decimals < 0 {\n   |                 ^\n   |                 |\n   |                 expected `f64`, found integer\n   |                 help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd74tli3v.rs:11:16\n   |\n9  |   let decimals = number - integer;\n   |                  ---------------- expected due to this value\n10 |   if decimals < 0 {\n11 |     decimals = 0;\n   |                ^\n   |                |\n   |                expected `f64`, found integer\n   |                help: use a float literal: `0.0`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -1 * truncate_number(-number)\n  }\n\n  const int_part = floor(number)\n  const decimals = number - int_part\n\n  return decimals\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmp5jr7fwiq.rs:12:33\n   |\n12 |   const int_part = floor(number)\n   |                                 ^ help: add `;` here\n13 |   const decimals = number - int_part\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp5jr7fwiq.rs:13:37\n   |\n13 |   const decimals = number - int_part\n   |                                     ^ help: add `;` here\n14 | \n15 |   return decimals\n   |   ------ unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmp5jr7fwiq.rs:12:26\n   |\n12 |   const int_part = floor(number)\n   |   --------------         ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let int_part`\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmp5jr7fwiq.rs:13:20\n   |\n13 |   const decimals = number - int_part\n   |   --------------   ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let decimals`\n\nerror[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmp5jr7fwiq.rs:12:20\n   |\n12 |   const int_part = floor(number)\n   |                    ^^^^^ not found in this scope\n\nerror: missing type for `const` item\n  --> /tmp/tmp5jr7fwiq.rs:12:9\n   |\n12 |   const int_part = floor(number)\n   |         ^^^^^^^^ help: provide a type for the item: `int_part: <type>`\n\nerror: missing type for `const` item\n  --> /tmp/tmp5jr7fwiq.rs:13:9\n   |\n13 |   const decimals = number - int_part\n   |         ^^^^^^^^ help: provide a type for the item: `decimals: <type>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5jr7fwiq.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0277]: cannot multiply `{integer}` by `f64`\n --> /tmp/tmp5jr7fwiq.rs:9:15\n  |\n9 |     return -1 * truncate_number(-number)\n  |               ^ no implementation for `{integer} * f64`\n  |\n  = help: the trait",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n  const _, decimals = math::modf(number)\n  return decimals\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected one of `:`, `;`, or `=`, found `,`\n  --> /tmp/tmp5io9meqt.rs:11:10\n   |\n11 |   const _, decimals = math::modf(number)\n   |          ^ expected one of `:`, `;`, or `=`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5io9meqt.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror: missing type for `const` item\n  --> /tmp/tmp5io9meqt.rs:11:9\n   |\n11 |   const _, decimals = math::modf(number)\n   |         ^ help: provide a type for the item: `_: <type>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ =\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:12:19\n   |\n12 |   const _ = number\n   |                   ^ help: add `;` here\n13 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:13:19\n   |\n13 |   const _ = number\n   |                   ^ help: add `;` here\n14 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:14:19\n   |\n14 |   const _ = number\n   |                   ^ help: add `;` here\n15 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:15:19\n   |\n15 |   const _ = number\n   |                   ^ help: add `;` here\n16 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:16:19\n   |\n16 |   const _ = number\n   |                   ^ help: add `;` here\n17 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:17:19\n   |\n17 |   const _ = number\n   |                   ^ help: add `;` here\n18 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:18:19\n   |\n18 |   const _ = number\n   |                   ^ help: add `;` here\n19 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:19:19\n   |\n19 |   const _ = number\n   |                   ^ help: add `;` here\n20 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:20:19\n   |\n20 |   const _ = number\n   |                   ^ help: add `;` here\n21 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:21:19\n   |\n21 |   const _ = number\n   |                   ^ help: add `;` here\n22 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  let _ = number;\n  \n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp1be_sq1h.rs:7:36\n  |\n7 | fn truncate_number(number: f64) -> f64 {\n  |    ---------------                 ^^^ expected `f64`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_int(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_int` in this scope\n --> /tmp/tmp16k9nfys.rs:8:17\n  |\n8 |   let integer = truncate_int(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = 0.0;\n  while (integer >= 1.0) {\n    integer = integer - 1.0;\n    decimals = decimals + 1.0;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpz08qip3c.rs:10:9\n   |\n10 |   while (integer >= 1.0) {\n   |         ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -   while (integer >= 1.0) {\n10 +   while integer >= 1.0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `integer`\n  --> /tmp/tmpz08qip3c.rs:11:5\n   |\n8  |   let integer = number;\n   |       -------\n   |       |\n   |       first assignment to `integer`\n   |       help: consider making this binding mutable: `mut integer`\n...\n11 |     integer = integer - 1.0;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `decimals`\n  --> /tmp/tmpz08qip3c.rs:12:5\n   |\n9  |   let decimals = 0.0;\n   |       --------\n   |       |\n   |       first assignment to `decimals`\n   |       help: consider making this binding mutable: `mut decimals`\n...\n12 |     decimals = decimals + 1.0;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return 0\n  }\n  return number - floor(number)\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmpvh_yng0q.rs:11:19\n   |\n11 |   return number - floor(number)\n   |                   ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvh_yng0q.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvh_yng0q.rs:9:12\n  |\n7 | fn truncate_number(number: f64) -> f64 {\n  |                                    --- expected `f64` because of return type\n8 |   if number < 0 {\n9 |     return 0\n  |            ^\n  |            |\n  |            expected `f64`, found integer\n  |            help: use a float literal: `0.0`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  const _ = number;\n  return 0.0;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp3nwv71l0.rs:8:13\n  |\n8 |   const _ = number;\n  |   -------   ^^^^^^ non-constant value\n  |   |\n  |   help: consider using `let` instead of `const`: `let _`\n\nerror: missing type for `const` item\n --> /tmp/tmp3nwv71l0.rs:8:9\n  |\n8 |   const _ = number;\n  |         ^ help: provide a type for the item: `_: <type>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0435`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = std::floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in crate `std`\n --> /tmp/tmpdy0wst45.rs:8:22\n  |\n8 |   let integer = std::floor(number);\n  |                      ^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = std::floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in crate `std`\n --> /tmp/tmpdy0wst45.rs:8:22\n  |\n8 |   let integer = std::floor(number);\n  |                      ^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  const _ = number;\n  return 0.0;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp3nwv71l0.rs:8:13\n  |\n8 |   const _ = number;\n  |   -------   ^^^^^^ non-constant value\n  |   |\n  |   help: consider using `let` instead of `const`: `let _`\n\nerror: missing type for `const` item\n --> /tmp/tmp3nwv71l0.rs:8:9\n  |\n8 |   const _ = number;\n  |         ^ help: provide a type for the item: `_: <type>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0435`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ =\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:12:19\n   |\n12 |   const _ = number\n   |                   ^ help: add `;` here\n13 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:13:19\n   |\n13 |   const _ = number\n   |                   ^ help: add `;` here\n14 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:14:19\n   |\n14 |   const _ = number\n   |                   ^ help: add `;` here\n15 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:15:19\n   |\n15 |   const _ = number\n   |                   ^ help: add `;` here\n16 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:16:19\n   |\n16 |   const _ = number\n   |                   ^ help: add `;` here\n17 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:17:19\n   |\n17 |   const _ = number\n   |                   ^ help: add `;` here\n18 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:18:19\n   |\n18 |   const _ = number\n   |                   ^ help: add `;` here\n19 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:19:19\n   |\n19 |   const _ = number\n   |                   ^ help: add `;` here\n20 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:20:19\n   |\n20 |   const _ = number\n   |                   ^ help: add `;` here\n21 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp1yw5ruh_.rs:21:19\n   |\n21 |   const _ = number\n   |                   ^ help: add `;` here\n22 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -1 * truncate_number(-number)\n  }\n\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _ = number\n  const _\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpfuphm6kk.rs:12:19\n   |\n12 |   const _ = number\n   |                   ^ help: add `;` here\n13 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpfuphm6kk.rs:13:19\n   |\n13 |   const _ = number\n   |                   ^ help: add `;` here\n14 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpfuphm6kk.rs:14:19\n   |\n14 |   const _ = number\n   |                   ^ help: add `;` here\n15 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpfuphm6kk.rs:15:19\n   |\n15 |   const _ = number\n   |                   ^ help: add `;` here\n16 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpfuphm6kk.rs:16:19\n   |\n16 |   const _ = number\n   |                   ^ help: add `;` here\n17 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpfuphm6kk.rs:17:19\n   |\n17 |   const _ = number\n   |                   ^ help: add `;` here\n18 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpfuphm6kk.rs:18:19\n   |\n18 |   const _ = number\n   |                   ^ help: add `;` here\n19 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpfuphm6kk.rs:19:19\n   |\n19 |   const _ = number\n   |                   ^ help: add `;` here\n20 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpfuphm6kk.rs:20:19\n   |\n20 |   const _ = number\n   |                   ^ help: add `;` here\n21 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpfuphm6kk.rs:21:19\n   |\n21 |   const _ = number\n   |                   ^ help: add `;` here\n22 |   const _ = number\n   |   ----- unexpected token\n\nerror: expected `;",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n  if number < 1 {\n    return 0\n  }\n  return number - floor(number)\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmpnj058odj.rs:14:19\n   |\n14 |   return number - floor(number)\n   |                   ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnj058odj.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnj058odj.rs:11:15\n   |\n11 |   if number < 1 {\n   |               ^\n   |               |\n   |               expected `f64`, found integer\n   |               help: use a float literal: `1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnj058odj.rs:12:12\n   |\n7  | fn truncate_number(number: f64) -> f64 {\n   |                                    --- expected `f64` because of return type\n...\n12 |     return 0\n   |            ^\n   |            |\n   |            expected `f64`, found integer\n   |            help: use a float literal: `0.0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = std::floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in crate `std`\n --> /tmp/tmpdy0wst45.rs:8:22\n  |\n8 |   let integer = std::floor(number);\n  |                      ^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimal = 0.0;\n  while integer >= 1.0 {\n    integer = integer - 1.0;\n    decimal = decimal + 1.0;\n  }\n  return decimal;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `integer`\n  --> /tmp/tmpunt3gdld.rs:11:5\n   |\n8  |   let integer = number;\n   |       -------\n   |       |\n   |       first assignment to `integer`\n   |       help: consider making this binding mutable: `mut integer`\n...\n11 |     integer = integer - 1.0;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `decimal`\n  --> /tmp/tmpunt3gdld.rs:12:5\n   |\n9  |   let decimal = 0.0;\n   |       -------\n   |       |\n   |       first assignment to `decimal`\n   |       help: consider making this binding mutable: `mut decimal`\n...\n12 |     decimal = decimal + 1.0;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n\n  const _ = number\n  return 0\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmpfdt_9nqp.rs:12:19\n   |\n12 |   const _ = number\n   |                   ^ help: add `;` here\n13 |   return 0\n   |   ------ unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpfdt_9nqp.rs:12:13\n   |\n12 |   const _ = number\n   |   -------   ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let _`\n\nerror: missing type for `const` item\n  --> /tmp/tmpfdt_9nqp.rs:12:9\n   |\n12 |   const _ = number\n   |         ^ help: provide a type for the item: `_: <type>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfdt_9nqp.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfdt_9nqp.rs:13:10\n   |\n7  | fn truncate_number(number: f64) -> f64 {\n   |                                    --- expected `f64` because of return type\n...\n13 |   return 0\n   |          ^\n   |          |\n   |          expected `f64`, found integer\n   |          help: use a float literal: `0.0`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0435.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    panic(\"negative number\");\n  }\n  if number == 0 {\n    return 0;\n  }\n  let integer = floor(number);\n  let decimals = number - integer;\n  if decimals < 0 {\n    panic(\"decimals < 0\");\n  }\n  if decimals > 0.5 {\n    panic(\"decimals > 0.5\");\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0423]: expected function, found macro `panic`\n --> /tmp/tmp9b7lqxfr.rs:9:5\n  |\n9 |     panic(\"negative number\");\n  |     ^^^^^ not a function\n  |\nhelp: use `!` to invoke the macro\n  |\n9 |     panic!(\"negative number\");\n  |          +\n\nerror[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmp9b7lqxfr.rs:14:17\n   |\n14 |   let integer = floor(number);\n   |                 ^^^^^ not found in this scope\n\nerror[E0423]: expected function, found macro `panic`\n  --> /tmp/tmp9b7lqxfr.rs:17:5\n   |\n17 |     panic(\"decimals < 0\");\n   |     ^^^^^ not a function\n   |\nhelp: use `!` to invoke the macro\n   |\n17 |     panic!(\"decimals < 0\");\n   |          +\n\nerror[E0423]: expected function, found macro `panic`\n  --> /tmp/tmp9b7lqxfr.rs:20:5\n   |\n20 |     panic(\"decimals > 0.5\");\n   |     ^^^^^ not a function\n   |\nhelp: use `!` to invoke the macro\n   |\n20 |     panic!(\"decimals > 0.5\");\n   |          +\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9b7lqxfr.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9b7lqxfr.rs:11:16\n   |\n11 |   if number == 0 {\n   |                ^\n   |                |\n   |                expected `f64`, found integer\n   |                help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9b7lqxfr.rs:12:12\n   |\n7  | fn truncate_number(number: f64) -> f64 {\n   |                                    --- expected `f64` because of return type\n...\n12 |     return 0;\n   |            ^\n   |            |\n   |            expected `f64`, found integer\n   |            help: use a float literal: `0.0`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  const _ = number;\n  return 0.0;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp3nwv71l0.rs:8:13\n  |\n8 |   const _ = number;\n  |   -------   ^^^^^^ non-constant value\n  |   |\n  |   help: consider using `let` instead of `const`: `let _`\n\nerror: missing type for `const` item\n --> /tmp/tmp3nwv71l0.rs:8:9\n  |\n8 |   const _ = number;\n  |         ^ help: provide a type for the item: `_: <type>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0435`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = std::floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in crate `std`\n --> /tmp/tmpdy0wst45.rs:8:22\n  |\n8 |   let integer = std::floor(number);\n  |                      ^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n\n  if number < 1 {\n    return 0\n  }\n\n  return number - floor(number)\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmpn6v2q0bo.rs:16:19\n   |\n16 |   return number - floor(number)\n   |                   ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn6v2q0bo.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn6v2q0bo.rs:12:15\n   |\n12 |   if number < 1 {\n   |               ^\n   |               |\n   |               expected `f64`, found integer\n   |               help: use a float literal: `1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn6v2q0bo.rs:13:12\n   |\n7  | fn truncate_number(number: f64) -> f64 {\n   |                                    --- expected `f64` because of return type\n...\n13 |     return 0\n   |            ^\n   |            |\n   |            expected `f64`, found integer\n   |            help: use a float literal: `0.0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  decimals = decimals / 10;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpj9a73n1g.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmpj9a73n1g.rs:10:23\n   |\n10 |   decimals = decimals / 10;\n   |                       ^ no implementation for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n10 |   decimals = decimals / 10.0;\n   |                           ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_int(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_int` in this scope\n --> /tmp/tmp16k9nfys.rs:8:17\n  |\n8 |   let integer = truncate_int(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let _ = number;\n  return 0.0;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.0`,\n right: `0.5`', /tmp/tmpc63nsv2f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = 0.0;\n  if number < 0.0 {\n    integer = -integer;\n  }\n  if number < 1.0 {\n    decimals = number - integer;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `integer`\n  --> /tmp/tmp314h7emm.rs:11:5\n   |\n8  |   let integer = number;\n   |       -------\n   |       |\n   |       first assignment to `integer`\n   |       help: consider making this binding mutable: `mut integer`\n...\n11 |     integer = -integer;\n   |     ^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `decimals`\n  --> /tmp/tmp314h7emm.rs:14:5\n   |\n9  |   let decimals = 0.0;\n   |       --------\n   |       |\n   |       first assignment to `decimals`\n   |       help: consider making this binding mutable: `mut decimals`\n...\n14 |     decimals = number - integer;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n\n  const _ = number\n  return 0.0\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmpkrc6vehc.rs:12:19\n   |\n12 |   const _ = number\n   |                   ^ help: add `;` here\n13 |   return 0.0\n   |   ------ unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpkrc6vehc.rs:12:13\n   |\n12 |   const _ = number\n   |   -------   ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let _`\n\nerror: missing type for `const` item\n  --> /tmp/tmpkrc6vehc.rs:12:9\n   |\n12 |   const _ = number\n   |         ^ help: provide a type for the item: `_: <type>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkrc6vehc.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0435.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = std::floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in crate `std`\n --> /tmp/tmpdy0wst45.rs:8:22\n  |\n8 |   let integer = std::floor(number);\n  |                      ^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = std::floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in crate `std`\n --> /tmp/tmpdy0wst45.rs:8:22\n  |\n8 |   let integer = std::floor(number);\n  |                      ^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  decimals = decimals / 10;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpj9a73n1g.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmpj9a73n1g.rs:10:23\n   |\n10 |   decimals = decimals / 10;\n   |                       ^ no implementation for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n10 |   decimals = decimals / 10.0;\n   |                           ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  const _ = number;\n  return 0.0;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp3nwv71l0.rs:8:13\n  |\n8 |   const _ = number;\n  |   -------   ^^^^^^ non-constant value\n  |   |\n  |   help: consider using `let` instead of `const`: `let _`\n\nerror: missing type for `const` item\n --> /tmp/tmp3nwv71l0.rs:8:9\n  |\n8 |   const _ = number;\n  |         ^ help: provide a type for the item: `_: <type>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0435`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n\n  const integral = floor(number)\n  const decimals = number - integral\n  return decimals\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpdrqofo7g.rs:12:33\n   |\n12 |   const integral = floor(number)\n   |                                 ^ help: add `;` here\n13 |   const decimals = number - integral\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpdrqofo7g.rs:13:37\n   |\n13 |   const decimals = number - integral\n   |                                     ^ help: add `;` here\n14 |   return decimals\n   |   ------ unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpdrqofo7g.rs:12:26\n   |\n12 |   const integral = floor(number)\n   |   --------------         ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let integral`\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpdrqofo7g.rs:13:20\n   |\n13 |   const decimals = number - integral\n   |   --------------   ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let decimals`\n\nerror[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmpdrqofo7g.rs:12:20\n   |\n12 |   const integral = floor(number)\n   |                    ^^^^^ not found in this scope\n\nerror: missing type for `const` item\n  --> /tmp/tmpdrqofo7g.rs:12:9\n   |\n12 |   const integral = floor(number)\n   |         ^^^^^^^^ help: provide a type for the item: `integral: <type>`\n\nerror: missing type for `const` item\n  --> /tmp/tmpdrqofo7g.rs:13:9\n   |\n13 |   const decimals = number - integral\n   |         ^^^^^^^^ help: provide a type for the item: `decimals: <type>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdrqofo7g.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0435.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    panic(\"truncate_number: negative number\");\n  }\n  if number == 0 {\n    return 0;\n  }\n  let integer = floor(number);\n  let decimals = number - integer;\n  if decimals < 0 {\n    panic(\"truncate_number: decimals < 0\");\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0423]: expected function, found macro `panic`\n --> /tmp/tmpylcnrsb5.rs:9:5\n  |\n9 |     panic(\"truncate_number: negative number\");\n  |     ^^^^^ not a function\n  |\nhelp: use `!` to invoke the macro\n  |\n9 |     panic!(\"truncate_number: negative number\");\n  |          +\n\nerror[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmpylcnrsb5.rs:14:17\n   |\n14 |   let integer = floor(number);\n   |                 ^^^^^ not found in this scope\n\nerror[E0423]: expected function, found macro `panic`\n  --> /tmp/tmpylcnrsb5.rs:17:5\n   |\n17 |     panic(\"truncate_number: decimals < 0\");\n   |     ^^^^^ not a function\n   |\nhelp: use `!` to invoke the macro\n   |\n17 |     panic!(\"truncate_number: decimals < 0\");\n   |          +\n\nerror[E0308]: mismatched types\n --> /tmp/tmpylcnrsb5.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpylcnrsb5.rs:11:16\n   |\n11 |   if number == 0 {\n   |                ^\n   |                |\n   |                expected `f64`, found integer\n   |                help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpylcnrsb5.rs:12:12\n   |\n7  | fn truncate_number(number: f64) -> f64 {\n   |                                    --- expected `f64` because of return type\n...\n12 |     return 0;\n   |            ^\n   |            |\n   |            expected `f64`, found integer\n   |            help: use a float literal: `0.0`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  decimals = decimals.floor();\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmp2kxzk_ke.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n\n  if number < 1 {\n    return 0\n  }\n\n  return number - floor(number)\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmpn6v2q0bo.rs:16:19\n   |\n16 |   return number - floor(number)\n   |                   ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn6v2q0bo.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn6v2q0bo.rs:12:15\n   |\n12 |   if number < 1 {\n   |               ^\n   |               |\n   |               expected `f64`, found integer\n   |               help: use a float literal: `1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn6v2q0bo.rs:13:12\n   |\n7  | fn truncate_number(number: f64) -> f64 {\n   |                                    --- expected `f64` because of return type\n...\n13 |     return 0\n   |            ^\n   |            |\n   |            expected `f64`, found integer\n   |            help: use a float literal: `0.0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  decimals = decimals / 10;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpj9a73n1g.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmpj9a73n1g.rs:10:23\n   |\n10 |   decimals = decimals / 10;\n   |                       ^ no implementation for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n10 |   decimals = decimals / 10.0;\n   |                           ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = std::floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in crate `std`\n --> /tmp/tmpdy0wst45.rs:8:22\n  |\n8 |   let integer = std::floor(number);\n  |                      ^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  if decimals < 0 {\n    decimals = 0;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpjvqwmiwz.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjvqwmiwz.rs:13:10\n   |\n7  | fn truncate_number(number: f64) -> f64 {\n   |                                    --- expected `f64` because of return type\n...\n13 |   return decimals;\n   |          ^^^^^^^^ expected `f64`, found integer\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n\n  const _ = number\n  return 0.0\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmpkrc6vehc.rs:12:19\n   |\n12 |   const _ = number\n   |                   ^ help: add `;` here\n13 |   return 0.0\n   |   ------ unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpkrc6vehc.rs:12:13\n   |\n12 |   const _ = number\n   |   -------   ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let _`\n\nerror: missing type for `const` item\n  --> /tmp/tmpkrc6vehc.rs:12:9\n   |\n12 |   const _ = number\n   |         ^ help: provide a type for the item: `_: <type>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkrc6vehc.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0435.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = 0.0;\n  if number < 0.0 {\n    integer = -integer;\n  }\n  if number < 1.0 {\n    decimals = number - integer;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `integer`\n  --> /tmp/tmp314h7emm.rs:11:5\n   |\n8  |   let integer = number;\n   |       -------\n   |       |\n   |       first assignment to `integer`\n   |       help: consider making this binding mutable: `mut integer`\n...\n11 |     integer = -integer;\n   |     ^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `decimals`\n  --> /tmp/tmp314h7emm.rs:14:5\n   |\n9  |   let decimals = 0.0;\n   |       --------\n   |       |\n   |       first assignment to `decimals`\n   |       help: consider making this binding mutable: `mut decimals`\n...\n14 |     decimals = number - integer;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  const _ = number;\n  return 0.0;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp3nwv71l0.rs:8:13\n  |\n8 |   const _ = number;\n  |   -------   ^^^^^^ non-constant value\n  |   |\n  |   help: consider using `let` instead of `const`: `let _`\n\nerror: missing type for `const` item\n --> /tmp/tmp3nwv71l0.rs:8:9\n  |\n8 |   const _ = number;\n  |         ^ help: provide a type for the item: `_: <type>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0435`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  const _ = number;\n  return 0.0;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0435]: attempt to use a non-constant value in a constant\n --> /tmp/tmp3nwv71l0.rs:8:13\n  |\n8 |   const _ = number;\n  |   -------   ^^^^^^ non-constant value\n  |   |\n  |   help: consider using `let` instead of `const`: `let _`\n\nerror: missing type for `const` item\n --> /tmp/tmp3nwv71l0.rs:8:9\n  |\n8 |   const _ = number;\n  |         ^ help: provide a type for the item: `_: <type>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0435`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n\n  const int_part = int(number)\n  const decimals = number - int_part\n\n  if decimals < 0 {\n    return 0\n  }\n\n  return decimals\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpbrib2bj2.rs:12:31\n   |\n12 |   const int_part = int(number)\n   |                               ^ help: add `;` here\n13 |   const decimals = number - int_part\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpbrib2bj2.rs:13:37\n   |\n13 |   const decimals = number - int_part\n   |                                     ^ help: add `;` here\n14 | \n15 |   if decimals < 0 {\n   |   -- unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpbrib2bj2.rs:12:24\n   |\n12 |   const int_part = int(number)\n   |   --------------       ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let int_part`\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpbrib2bj2.rs:13:20\n   |\n13 |   const decimals = number - int_part\n   |   --------------   ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let decimals`\n\nerror[E0425]: cannot find function `int` in this scope\n  --> /tmp/tmpbrib2bj2.rs:12:20\n   |\n12 |   const int_part = int(number)\n   |                    ^^^ not found in this scope\n\nerror: missing type for `const` item\n  --> /tmp/tmpbrib2bj2.rs:12:9\n   |\n12 |   const int_part = int(number)\n   |         ^^^^^^^^ help: provide a type for the item: `int_part: <type>`\n\nerror: missing type for `const` item\n  --> /tmp/tmpbrib2bj2.rs:13:9\n   |\n13 |   const decimals = number - int_part\n   |         ^^^^^^^^ help: provide a type for the item: `decimals: <type>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbrib2bj2.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbrib2bj2.rs:16:12\n   |\n7  | fn truncate_number(number: f64) -> f64 {\n   |                                    --- expected `f64` because of return type\n...\n16 |     return 0\n   |            ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = number - integer;\n  if decimals < 0 {\n    decimals = 0;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbcbfsrjq.rs:10:17\n   |\n10 |   if decimals < 0 {\n   |                 ^\n   |                 |\n   |                 expected `f64`, found integer\n   |                 help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbcbfsrjq.rs:11:16\n   |\n9  |   let decimals = number - integer;\n   |                  ---------------- expected due to this value\n10 |   if decimals < 0 {\n11 |     decimals = 0;\n   |                ^\n   |                |\n   |                expected `f64`, found integer\n   |                help: use a float literal: `0.0`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.0`,\n right: `0.5`', /tmp/tmpz4c8zu64.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = std::floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in crate `std`\n --> /tmp/tmpdy0wst45.rs:8:22\n  |\n8 |   let integer = std::floor(number);\n  |                      ^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n --> /tmp/tmpwwn5rr_p.rs:8:17\n  |\n8 |   let integer = floor(number);\n  |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n  const _, decimals = math::modf(number)\n  return decimals\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected one of `:`, `;`, or `=`, found `,`\n  --> /tmp/tmp5io9meqt.rs:11:10\n   |\n11 |   const _, decimals = math::modf(number)\n   |          ^ expected one of `:`, `;`, or `=`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5io9meqt.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror: missing type for `const` item\n  --> /tmp/tmp5io9meqt.rs:11:9\n   |\n11 |   const _, decimals = math::modf(number)\n   |         ^ help: provide a type for the item: `_: <type>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = number - integer;\n  let rounded = round(decimals);\n  let truncated = integer + rounded;\n  return truncated;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp2iugbzfa.rs:10:17\n   |\n10 |   let rounded = round(decimals);\n   |                 ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_int(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_int` in this scope\n --> /tmp/tmp16k9nfys.rs:8:17\n  |\n8 |   let integer = truncate_int(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  decimals = decimals / 10;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpj9a73n1g.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmpj9a73n1g.rs:10:23\n   |\n10 |   decimals = decimals / 10;\n   |                       ^ no implementation for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n10 |   decimals = decimals / 10.0;\n   |                           ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_int(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_int` in this scope\n --> /tmp/tmp16k9nfys.rs:8:17\n  |\n8 |   let integer = truncate_int(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n  if number < 1 {\n    return 0\n  }\n  return number - floor(number)\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmpnj058odj.rs:14:19\n   |\n14 |   return number - floor(number)\n   |                   ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnj058odj.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnj058odj.rs:11:15\n   |\n11 |   if number < 1 {\n   |               ^\n   |               |\n   |               expected `f64`, found integer\n   |               help: use a float literal: `1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnj058odj.rs:12:12\n   |\n7  | fn truncate_number(number: f64) -> f64 {\n   |                                    --- expected `f64` because of return type\n...\n12 |     return 0\n   |            ^\n   |            |\n   |            expected `f64`, found integer\n   |            help: use a float literal: `0.0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number;\n  let decimals = number - integer;\n  if decimals < 0 {\n    decimals = 0;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbcbfsrjq.rs:10:17\n   |\n10 |   if decimals < 0 {\n   |                 ^\n   |                 |\n   |                 expected `f64`, found integer\n   |                 help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbcbfsrjq.rs:11:16\n   |\n9  |   let decimals = number - integer;\n   |                  ---------------- expected due to this value\n10 |   if decimals < 0 {\n11 |     decimals = 0;\n   |                ^\n   |                |\n   |                expected `f64`, found integer\n   |                help: use a float literal: `0.0`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n  if number < 1 {\n    return 0\n  }\n  return number - floor(number)\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in this scope\n  --> /tmp/tmpnj058odj.rs:14:19\n   |\n14 |   return number - floor(number)\n   |                   ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnj058odj.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnj058odj.rs:11:15\n   |\n11 |   if number < 1 {\n   |               ^\n   |               |\n   |               expected `f64`, found integer\n   |               help: use a float literal: `1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnj058odj.rs:12:12\n   |\n7  | fn truncate_number(number: f64) -> f64 {\n   |                                    --- expected `f64` because of return type\n...\n12 |     return 0\n   |            ^\n   |            |\n   |            expected `f64`, found integer\n   |            help: use a float literal: `0.0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  if decimals < 0 {\n    decimals = 0;\n  }\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpd74tli3v.rs:10:17\n   |\n10 |   if decimals < 0 {\n   |                 ^\n   |                 |\n   |                 expected `f64`, found integer\n   |                 help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd74tli3v.rs:11:16\n   |\n9  |   let decimals = number - integer;\n   |                  ---------------- expected due to this value\n10 |   if decimals < 0 {\n11 |     decimals = 0;\n   |                ^\n   |                |\n   |                expected `f64`, found integer\n   |                help: use a float literal: `0.0`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = std::floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in crate `std`\n --> /tmp/tmpdy0wst45.rs:8:22\n  |\n8 |   let integer = std::floor(number);\n  |                      ^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = std::floor(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `floor` in crate `std`\n --> /tmp/tmpdy0wst45.rs:8:22\n  |\n8 |   let integer = std::floor(number);\n  |                      ^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  if number < 0 {\n    return -truncate_number(-number)\n  }\n\n  const _ = number\n  return 0.0\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmpkrc6vehc.rs:12:19\n   |\n12 |   const _ = number\n   |                   ^ help: add `;` here\n13 |   return 0.0\n   |   ------ unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpkrc6vehc.rs:12:13\n   |\n12 |   const _ = number\n   |   -------   ^^^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let _`\n\nerror: missing type for `const` item\n  --> /tmp/tmpkrc6vehc.rs:12:9\n   |\n12 |   const _ = number\n   |         ^ help: provide a type for the item: `_: <type>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkrc6vehc.rs:8:15\n  |\n8 |   if number < 0 {\n  |               ^\n  |               |\n  |               expected `f64`, found integer\n  |               help: use a float literal: `0.0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0435.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = number.trunc();\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n  let integer = truncate_f64(number);\n  let decimals = number - integer;\n  return decimals;\n}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5), 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0), 0.0);\n}\n",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `truncate_f64` in this scope\n --> /tmp/tmpwq_ckla9.rs:8:17\n  |\n8 |   let integer = truncate_f64(number);\n  |                 ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}