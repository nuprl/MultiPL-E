{
  "name": "HumanEval_61_correct_bracketing",
  "language": "rs",
  "prompt": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n",
  "tests": "}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(bracket_count)\n      bracket_count += 1\n    } else if brackets[i] == \")\" {\n      bracket_count -= 1\n      if bracket_count < 0 {\n        return false\n      }\n      if bracket_stack.pop() != bracket_count {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpufuspfw7.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpufuspfw7.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpufuspfw7.rs:16:40\n   |\n16 |       bracket_stack.push(bracket_count)\n   |                                        ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpufuspfw7.rs:19:25\n   |\n19 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n20 |       if bracket_count < 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpufuspfw7.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpufuspfw7.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpufuspfw7.rs:16:21\n   |\n16 |       bracket_stack.push(bracket_count)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpufuspfw7.rs:23:24\n   |\n23 |       if bracket_stack.pop() != bracket_count {\n   |                        ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more inform",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpnf_spjsf.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpnf_spjsf.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpnf_spjsf.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpnf_spjsf.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpnf_spjsf.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = 0\n  let close_brackets = 0\n\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      open_brackets += 1\n    } else if (bracket_count == 1) {\n      close_brackets += 1\n    }\n    bracket_count = (bracket_count + 1) % 2\n  }\n\n  return open_brackets == close_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbih5_fsz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpbih5_fsz.rs:13:24\n   |\n13 |   let open_brackets = 0\n   |                        ^ help: add `;` here\n14 |   let close_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpbih5_fsz.rs:14:25\n   |\n14 |   let close_brackets = 0\n   |                         ^ help: add `;` here\n15 | \n16 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbih5_fsz.rs:17:8\n   |\n17 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (bracket_count == 0) {\n17 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbih5_fsz.rs:19:15\n   |\n19 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -     } else if (bracket_count == 1) {\n19 +     } else if bracket_count == 1 {\n   | \n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvkd_giqb.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpvkd_giqb.rs:15:20\n   |\n15 |       if (brackets[i] != \"(\") {\n   |                    ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpvkd_giqb.rs:19:20\n   |\n19 |       if (brackets[i] != \")\") {\n   |                    ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvkd_giqb.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvkd_giqb.rs:15:10\n   |\n15 |       if (brackets[i] != \"(\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[i] != \"(\") {\n15 +       if brackets[i] != \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvkd_giqb.rs:19:10\n   |\n19 |       if (brackets[i] != \")\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[i] != \")\") {\n19 +       if brackets[i] != \")\" {\n   | \n\nerror: aborting due to 3 previous errors; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      } else {\n        bracket_count -= 1\n        if bracket_count == 0 {\n          bracket_stack.pop()\n        }\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcmm6jtwv.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcmm6jtwv.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpcmm6jtwv.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpcmm6jtwv.rs:22:27\n   |\n22 |         bracket_count -= 1\n   |                           ^ help: add `;` here\n23 |         if bracket_count == 0 {\n   |         -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcmm6jtwv.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpcmm6jtwv.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpcmm6jtwv.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpcmm6jtwv.rs:24:25\n   |\n24 |           bracket_stack.pop()\n   |                         ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E04",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpabim5dgl.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpabim5dgl.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:16:18\n   |\n16 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:18:25\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:16:8\n   |\n16 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"(\") {\n16 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == '(' {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == ')' {\n      if !open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyhbuf97x.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyhbuf97x.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for c in brackets {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpyhbuf97x.rs:14:12\n   |\n14 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0ds5v45r.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp0ds5v45r.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp0ds5v45r.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp0ds5v45r.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp0ds5v45r.rs:19:31\n   |\n19 |       } else if bracket_stack.pop() != i {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"(\" {\n      bracket_stack.push(c)\n    } else if c == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"(\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmptniabj8b.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmptniabj8b.rs:14:24\n   |\n14 |     let c = brackets[i]\n   |                        ^ help: add `;` here\n15 |     if c == \"(\" {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmptniabj8b.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmptniabj8b.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmptniabj8b.rs:16:21\n   |\n16 |       bracket_stack.push(c)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmptniabj8b.rs:20:31\n   |\n20 |       } else if bracket_stack.pop() != \"(\" {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpe5xym706.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpe5xym706.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpe5xym706.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpe5xym706.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpe5xym706.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpe5xym706.rs:21:28\n   |\n21 |       opening_bracket = \")\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpe5xym706.rs:22:26\n   |\n22 |       closing_bracket = c\n   |                          ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpe5xym706.rs:26:29\n   |\n26 |   return bracket_count == 0 and opening_bracket == closing_bracket\n   |                             ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpe5xym706.rs:15:12\n   |\n15 |   for c in brackets {",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count] != '(') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpgg923iho.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg923iho.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg923iho.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg923iho.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg923iho.rs:19:10\n   |\n19 |       if (brackets[0] != '(' || brackets[1] != ')') {\n   |          ^                                        ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '(' || brackets[1] != ')') {\n19 +       if brackets[0] != '(' || brackets[1] != ')' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg923iho.rs:23:10\n   |\n23 |       if (brackets[bracket_count] != '(') {\n   |          ^                              ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[bracket_count] != '(') {\n23 +       if brackets[bracket_count] != '(' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpgg923iho.rs:15:11\n   |\n15 |       if (brackets[0] != '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \")\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfll6yz0e.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfll6yz0e.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpfll6yz0e.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpfll6yz0e.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       bracket_stack.pop()\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpfll6yz0e.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfll6yz0e.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfll6yz0e.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfll6yz0e.rs:19:10\n   |\n19 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (bracket_coun",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp4j9jeyep.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp4j9jeyep.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp4j9jeyep.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp4j9jeyep.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp4j9jeyep.rs:20:23\n   |\n20 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjwoqxpi0.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjwoqxpi0.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpjwoqxpi0.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpjwoqxpi0.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpjwoqxpi0.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpjwoqxpi0.rs:21:28\n   |\n21 |       opening_bracket = \")\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = \"(\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpjwoqxpi0.rs:22:28\n   |\n22 |       closing_bracket = \"(\"\n   |                            ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpjwoqxpi0.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 8 previous errors\n\nFor more information abo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack: List[String] = []\n  let bracket_count: int = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(brackets[i])\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != '(' {\n        return false\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n  --> /tmp/tmpizmc12r3.rs:12:26\n   |\n12 |   let bracket_stack: List[String] = []\n   |                          ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if len(bracket_stack) == 0 {\n        return false\n      }\n      let opening_bracket = bracket_stack.pop()\n      if opening_bracket != i - 1 {\n        return false\n      }\n    }\n  }\n  if len(bracket_stack) != 0 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp575s9acb.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp575s9acb.rs:20:48\n   |\n20 |       let opening_bracket = bracket_stack.pop()\n   |                                                ^ help: add `;` here\n21 |       if opening_bracket != i - 1 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp575s9acb.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp575s9acb.rs:17:10\n   |\n17 |       if len(bracket_stack) == 0 {\n   |          ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp575s9acb.rs:26:6\n   |\n26 |   if len(bracket_stack) != 0 {\n   |      ^^^ not found in this scope\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp575s9acb.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp575s9acb.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp575s9acb.rs:20:43\n   |\n20 |       let opening_bracket = bracket_stack.pop()\n   |                                           ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      } else if bracket_count == 1 {\n        bracket_count -= 1\n        bracket_stack.pop()\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_f58s4y.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_f58s4y.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpc_f58s4y.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpc_f58s4y.rs:22:27\n   |\n22 |         bracket_count -= 1\n   |                           ^ help: add `;` here\n23 |         bracket_stack.pop()\n   |         ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpc_f58s4y.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpc_f58s4y.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpc_f58s4y.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpc_f58s4y.rs:23:23\n   |\n23 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --expla",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets.charAt(0) != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets.charAt(0) != ')') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpcn_xc6ty.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcn_xc6ty.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcn_xc6ty.rs:15:10\n   |\n15 |       if (brackets.charAt(0) != '(') {\n   |          ^                         ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets.charAt(0) != '(') {\n15 +       if brackets.charAt(0) != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcn_xc6ty.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcn_xc6ty.rs:19:10\n   |\n19 |       if (brackets.charAt(0) != ')') {\n   |          ^                         ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets.charAt(0) != ')') {\n19 +       if brackets.charAt(0) != ')' {\n   | \n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpcn_xc6ty.rs:15:20\n   |\n15 |       if (brackets.charAt(0) != '(') {\n   |                    ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpcn_xc6ty.rs:19:20\n   |\n19 |       if (brackets.charAt(0) != ')') {\n   |                    ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 3 previous errors; 4",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count] != '(') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpgg923iho.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg923iho.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg923iho.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg923iho.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg923iho.rs:19:10\n   |\n19 |       if (brackets[0] != '(' || brackets[1] != ')') {\n   |          ^                                        ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '(' || brackets[1] != ')') {\n19 +       if brackets[0] != '(' || brackets[1] != ')' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg923iho.rs:23:10\n   |\n23 |       if (brackets[bracket_count] != '(') {\n   |          ^                              ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[bracket_count] != '(') {\n23 +       if brackets[bracket_count] != '(' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpgg923iho.rs:15:11\n   |\n15 |       if (brackets[0] != '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == '(' {\n      bracket_stack.push(bracket)\n      bracket_count += 1\n    } else if bracket == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if last_bracket != '(' {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp63ii1lmi.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp63ii1lmi.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp63ii1lmi.rs:15:30\n   |\n15 |     let bracket = brackets[i]\n   |                              ^ help: add `;` here\n16 |     if bracket == '(' {\n   |     -- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp63ii1lmi.rs:17:34\n   |\n17 |       bracket_stack.push(bracket)\n   |                                  ^ help: add `;` here\n18 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp63ii1lmi.rs:23:45\n   |\n23 |       let last_bracket = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n24 |       if last_bracket != '(' {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp63ii1lmi.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp63ii1lmi.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp63ii1lmi.rs:17:21\n   |\n17 |       bracket_stack.push(bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphxu7ip6f.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:17:25\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:17:41\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:19:25\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:19:41\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:20:15\n   |\n20 |     } else if c == '(' {\n   |               ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:22:15\n   |\n22 |     } else if c == ')' {\n   |               ^ not found in this scope\n\nerror: aborting du",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromCharCode(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromCharCode(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpo5b2a0kr.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo5b2a0kr.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpo5b2a0kr.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 | \n16 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpo5b2a0kr.rs:18:25\n   |\n18 |       opening_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpo5b2a0kr.rs:18:45\n   |\n18 |       opening_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpo5b2a0kr.rs:20:25\n   |\n20 |       closing_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpo5b2a0kr.rs:20:45\n   |\n20 |       closing_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpo5b2a0kr.rs:21:15\n   |\n21 |     } else if c == '(' {\n   |               ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpo5b2a0kr.rs:23:15\n   |\n23 |     } else if c == ')' {\n   |              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(bracket_count)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      bracket_count -= 1\n      if bracket_count < 0 {\n        return false\n      }\n      if bracket_stack.pop() != bracket_count {\n        return false\n      }\n    }\n  }\n\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp6yeub8pd.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp6yeub8pd.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 | \n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp6yeub8pd.rs:17:40\n   |\n17 |       bracket_stack.push(bracket_count)\n   |                                        ^ help: add `;` here\n18 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp6yeub8pd.rs:20:25\n   |\n20 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n21 |       if bracket_count < 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp6yeub8pd.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp6yeub8pd.rs:15:30\n   |\n15 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6yeub8pd.rs:17:21\n   |\n17 |       bracket_stack.push(bracket_count)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6yeub8pd.rs:24:24\n   |\n24 |       if bracket_stack.pop() != bracket_count {\n   |                        ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyzjvwauq.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyzjvwauq.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpyzjvwauq.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyzjvwauq.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyzjvwauq.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:24:23\n   |\n24 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphxu7ip6f.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:17:25\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:17:41\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:19:25\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:19:41\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:20:15\n   |\n20 |     } else if c == '(' {\n   |               ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:22:15\n   |\n22 |     } else if c == ')' {\n   |               ^ not found in this scope\n\nerror: aborting du",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count] != ')') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpennvr4nv.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:19:10\n   |\n19 |       if (brackets[0] != '(' || brackets[1] != ')') {\n   |          ^                                        ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '(' || brackets[1] != ')') {\n19 +       if brackets[0] != '(' || brackets[1] != ')' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:23:10\n   |\n23 |       if (brackets[bracket_count] != ')') {\n   |          ^                              ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[bracket_count] != ')') {\n23 +       if brackets[bracket_count] != ')' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpennvr4nv.rs:15:11\n   |\n15 |       if (brackets[0] != '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[0] == '(') {\n        bracket_count += 1\n      } else if (brackets[0] == ')') {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp6roirc8a.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6roirc8a.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6roirc8a.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6roirc8a.rs:19:10\n   |\n19 |       if (brackets[0] == '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] == '(') {\n19 +       if brackets[0] == '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6roirc8a.rs:21:17\n   |\n21 |       } else if (brackets[0] == ')') {\n   |                 ^                  ^\n   |\nhelp: remove these parentheses\n   |\n21 -       } else if (brackets[0] == ')') {\n21 +       } else if brackets[0] == ')' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp6roirc8a.rs:15:11\n   |\n15 |       if (brackets[0] != '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpabim5dgl.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpabim5dgl.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:16:18\n   |\n16 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:18:25\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:16:8\n   |\n16 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"(\") {\n16 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      if brackets.char(0) == '(' {\n        bracket_stack.push(0)\n      } else {\n        return false\n      }\n    } else if bracket_count == 1 {\n      if brackets.char(0) == ')' {\n        if bracket_stack.pop() != 0 {\n          return false\n        }\n      } else {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  if bracket_count != 0 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3fb99um2.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp3fb99um2.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmp3fb99um2.rs:16:19\n   |\n16 |       if brackets.char(0) == '(' {\n   |                   ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3fb99um2.rs:17:23\n   |\n17 |         bracket_stack.push(0)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmp3fb99um2.rs:22:19\n   |\n22 |       if brackets.char(0) == ')' {\n   |                   ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3fb99um2.rs:23:26\n   |\n23 |         if bracket_stack.pop() != 0 {\n   |                          ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      bracket_stack.push(Bracket(BracketType::Open))\n    } else if bracket_stack.peek().type == BracketType::Open {\n      bracket_stack.push(Bracket(BracketType::Open))\n    } else if bracket_stack.peek().type == BracketType::Close {\n      bracket_stack.pop()\n    } else {\n      panic(\"Invalid bracketing\")\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpnw0kk8m2.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `type`\n  --> /tmp/tmpnw0kk8m2.rs:16:36\n   |\n16 |     } else if bracket_stack.peek().type == BracketType::Open {\n   |                                    ^^^^ expected identifier, found keyword\n\nerror: expected identifier, found keyword `type`\n  --> /tmp/tmpnw0kk8m2.rs:18:36\n   |\n18 |     } else if bracket_stack.peek().type == BracketType::Close {\n   |                                    ^^^^ expected identifier, found keyword\n\nerror[E0433]: failed to resolve: use of undeclared type `BracketType`\n  --> /tmp/tmpnw0kk8m2.rs:15:34\n   |\n15 |       bracket_stack.push(Bracket(BracketType::Open))\n   |                                  ^^^^^^^^^^^ use of undeclared type `BracketType`\n\nerror[E0433]: failed to resolve: use of undeclared type `BracketType`\n  --> /tmp/tmpnw0kk8m2.rs:16:44\n   |\n16 |     } else if bracket_stack.peek().type == BracketType::Open {\n   |                                            ^^^^^^^^^^^ use of undeclared type `BracketType`\n\nerror[E0433]: failed to resolve: use of undeclared type `BracketType`\n  --> /tmp/tmpnw0kk8m2.rs:17:34\n   |\n17 |       bracket_stack.push(Bracket(BracketType::Open))\n   |                                  ^^^^^^^^^^^ use of undeclared type `BracketType`\n\nerror[E0433]: failed to resolve: use of undeclared type `BracketType`\n  --> /tmp/tmpnw0kk8m2.rs:18:44\n   |\n18 |     } else if bracket_stack.peek().type == BracketType::Close {\n   |                                            ^^^^^^^^^^^ use of undeclared type `BracketType`\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Bracket` in this scope\n  --> /tmp/tmpnw0kk8m2.rs:15:26\n   |\n15 |       bracket_stack.push(Bracket(BracketType::Open))\n   |                          ^^^^^^^ help: a local variable with a similar name exists: `brackets`\n\nerror[E0425]: ca",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpnf_spjsf.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpnf_spjsf.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpnf_spjsf.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpnf_spjsf.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpnf_spjsf.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if len(bracket_stack) == 0 {\n        return false\n      }\n      bracket_stack.pop()\n    }\n  }\n  return len(bracket_stack) == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmphdg0e9y6.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphdg0e9y6.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphdg0e9y6.rs:17:10\n   |\n17 |       if len(bracket_stack) == 0 {\n   |          ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphdg0e9y6.rs:23:10\n   |\n23 |   return len(bracket_stack) == 0\n   |          ^^^ not found in this scope\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmphdg0e9y6.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmphdg0e9y6.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmphdg0e9y6.rs:20:21\n   |\n20 |       bracket_stack.pop()\n   |                     ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpio65ht46.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpio65ht46.rs:15:20\n   |\n15 |       if (brackets[i] != \"(\") {\n   |                    ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpio65ht46.rs:19:20\n   |\n19 |       if (brackets[i] != \")\") {\n   |                    ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpio65ht46.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpio65ht46.rs:15:10\n   |\n15 |       if (brackets[i] != \"(\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[i] != \"(\") {\n15 +       if brackets[i] != \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpio65ht46.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpio65ht46.rs:19:10\n   |\n19 |       if (brackets[i] != \")\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[i] != \")\") {\n19 +       if brackets[i] != \")\" {\n   | \n\nerror: aborting due to 3 previous errors; 4 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmps_xaem3t.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmps_xaem3t.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmps_xaem3t.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmps_xaem3t.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmps_xaem3t.rs:20:23\n   |\n20 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  let bracket_open = false\n  let bracket_close = false\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if (c == \"(\") {\n      if (bracket_open) {\n        bracket_stack.push(c)\n      } else {\n        bracket_open = true\n      }\n    } else if (c == \")\") {\n      if (bracket_close) {\n        bracket_stack.pop()\n      } else {\n        bracket_close = true\n      }\n    } else {\n      if (bracket_open) {\n        if (bracket_stack.length == 0) {\n          return false\n        } else {\n          bracket_count += 1\n        }\n      }\n    }\n  }\n  return bracket_count == bracket_stack.length\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy1xr9mz4.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy1xr9mz4.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   let bracket_open = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy1xr9mz4.rs:14:27\n   |\n14 |   let bracket_open = false\n   |                           ^ help: add `;` here\n15 |   let bracket_close = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy1xr9mz4.rs:15:28\n   |\n15 |   let bracket_close = false\n   |                            ^ help: add `;` here\n16 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpy1xr9mz4.rs:17:24\n   |\n17 |     let c = brackets[i]\n   |                        ^ help: add `;` here\n18 |     if (c == \"(\") {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpy1xr9mz4.rs:16:12\n   |\n16 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy1xr9mz4.rs:18:8\n   |\n18 |     if (c == \"(\") {\n   |        ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (c == \"(\") {\n18 +     if c == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy1xr9mz4.rs:19:10\n   |\n19 |       if (bracket_open) {\n   |          ^            ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (bracket_open) {\n19 +       if bracket_open {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy1xr9mz4.rs:24:15\n   |\n24 |     } else if (c == \")\") {\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if last_bracket != i - 1 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4ql7gb15.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp4ql7gb15.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp4ql7gb15.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp4ql7gb15.rs:22:45\n   |\n22 |       let last_bracket = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n23 |       if last_bracket != i - 1 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp4ql7gb15.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp4ql7gb15.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp4ql7gb15.rs:16:21\n   |\n16 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp4ql7gb15.rs:22:40\n   |\n22 |       let last_bracket = bracket_stack.pop()\n   |                                        ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n\n  for i in range(0, brackets.length) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      opening_bracket_index = i\n    } else if (brackets[i] == \")\") {\n      bracket_count -= 1\n      closing_bracket_index = i\n    }\n  }\n\n  return bracket_count == 0 && opening_bracket_index < closing_bracket_index\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpt2s_nck5.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpt2s_nck5.rs:13:32\n   |\n13 |   let opening_bracket_index = 0\n   |                                ^ help: add `;` here\n14 |   let closing_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpt2s_nck5.rs:14:32\n   |\n14 |   let closing_bracket_index = 0\n   |                                ^ help: add `;` here\n15 | \n16 |   for i in range(0, brackets.length) {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket_index`\n  --> /tmp/tmpt2s_nck5.rs:18:25\n   |\n18 |       bracket_count += 1\n   |                         ^ help: add `;` here\n19 |       opening_bracket_index = i\n   |       --------------------- unexpected token\n\nerror: expected `;`, found `closing_bracket_index`\n  --> /tmp/tmpt2s_nck5.rs:21:25\n   |\n21 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n22 |       closing_bracket_index = i\n   |       --------------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpt2s_nck5.rs:16:12\n   |\n16 |   for i in range(0, brackets.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt2s_nck5.rs:17:8\n   |\n17 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (brackets[i] == \"(\") {\n17 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt2s_nck5.rs:20:15\n   |\n20 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \")\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfll6yz0e.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfll6yz0e.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpfll6yz0e.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpfll6yz0e.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       bracket_stack.pop()\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpfll6yz0e.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfll6yz0e.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfll6yz0e.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfll6yz0e.rs:19:10\n   |\n19 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (bracket_coun",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count] != ')') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpennvr4nv.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:19:10\n   |\n19 |       if (brackets[0] != '(' || brackets[1] != ')') {\n   |          ^                                        ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '(' || brackets[1] != ')') {\n19 +       if brackets[0] != '(' || brackets[1] != ')' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:23:10\n   |\n23 |       if (brackets[bracket_count] != ')') {\n   |          ^                              ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[bracket_count] != ')') {\n23 +       if brackets[bracket_count] != ')' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpennvr4nv.rs:15:11\n   |\n15 |       if (brackets[0] != '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromCharCode(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromCharCode(c)\n    } else if bracket_count > 1 {\n      if opening_bracket == String.fromCharCode(c) {\n        bracket_count -= 1\n      } else if closing_bracket == String.fromCharCode(c) {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_6o8bgct.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_6o8bgct.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_6o8bgct.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp_6o8bgct.rs:17:25\n   |\n17 |       opening_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmp_6o8bgct.rs:17:45\n   |\n17 |       opening_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp_6o8bgct.rs:19:25\n   |\n19 |       closing_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmp_6o8bgct.rs:19:45\n   |\n19 |       closing_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp_6o8bgct.rs:21:29\n   |\n21 |       if opening_bracket == String.fromCharCode(c) {\n   |                             ^^^^^^-------------\n   |                             |\n   |                             help: use the path separator to refe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = 0\n  let close_brackets = 0\n\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      open_brackets += 1\n    } else if (bracket_count == 1) {\n      close_brackets += 1\n    }\n    bracket_count += 1\n  }\n\n  return open_brackets == close_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyhm6apde.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpyhm6apde.rs:13:24\n   |\n13 |   let open_brackets = 0\n   |                        ^ help: add `;` here\n14 |   let close_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyhm6apde.rs:14:25\n   |\n14 |   let close_brackets = 0\n   |                         ^ help: add `;` here\n15 | \n16 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyhm6apde.rs:17:8\n   |\n17 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (bracket_count == 0) {\n17 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyhm6apde.rs:19:15\n   |\n19 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -     } else if (bracket_count == 1) {\n19 +     } else if bracket_count == 1 {\n   | \n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpabim5dgl.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpabim5dgl.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:16:18\n   |\n16 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:18:25\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:16:8\n   |\n16 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"(\") {\n16 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n\n  for i in brackets.chars() {\n    if i == '(' {\n      opening_bracket_count += 1\n    } else if i == ')' {\n      closing_bracket_count += 1\n    } else {\n      // ignore\n    }\n\n    if opening_bracket_count > closing_bracket_count {\n      return false\n    }\n\n    if opening_bracket_count < closing_bracket_count {\n      bracket_stack.push(i)\n    } else if opening_bracket_count > closing_bracket_count {\n      if bracket_stack.pop() != '(' {\n        return false\n      }\n    }\n  }\n\n  if opening_bracket_count != closing_bracket_count {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpa93vszlj.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpa93vszlj.rs:13:32\n   |\n13 |   let opening_bracket_count = 0\n   |                                ^ help: add `;` here\n14 |   let closing_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpa93vszlj.rs:14:32\n   |\n14 |   let closing_bracket_count = 0\n   |                                ^ help: add `;` here\n15 | \n16 |   for i in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpa93vszlj.rs:30:21\n   |\n30 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpa93vszlj.rs:32:24\n   |\n32 |       if bracket_stack.pop() != '(' {\n   |                        ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      if brackets[i] == '(' {\n        bracket_stack.push(brackets[i])\n      } else if brackets[i] == ')' {\n        if bracket_stack.empty() {\n          return false\n        } else if bracket_stack.pop() != '(' {\n          return false\n        }\n      }\n    } else {\n      if brackets[i] == ')' {\n        bracket_count -= 1\n      } else if brackets[i] == '(' {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8ttpdbsv.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8ttpdbsv.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8ttpdbsv.rs:16:19\n   |\n16 |       if brackets[i] == '(' {\n   |                   ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8ttpdbsv.rs:17:37\n   |\n17 |         bracket_stack.push(brackets[i])\n   |                                     ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8ttpdbsv.rs:18:26\n   |\n18 |       } else if brackets[i] == ')' {\n   |                          ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8ttpdbsv.rs:26:19\n   |\n26 |       if brackets[i] == ')' {\n   |                   ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8ttpdbsv.rs:28:26\n   |\n28 |       } else if brackets[i] == '(' {\n   |                          ^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8ttpdbsv.rs:17:23\n   |\n17 |         bracket_stack.push(brackets[i])\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `empty` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8ttpdbsv.rs:19:26\n   |\n19 |         if bracket_stack.empty() {\n   |                          ^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8ttpdbsv.rs:21:33\n   |\n21 |         } else if bracket_stack.pop() != '(' {\n   |                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpndto_327.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpndto_327.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpndto_327.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 | \n16 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpndto_327.rs:18:25\n   |\n18 |       opening_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpndto_327.rs:18:41\n   |\n18 |       opening_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpndto_327.rs:20:25\n   |\n20 |       closing_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpndto_327.rs:20:41\n   |\n20 |       closing_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpndto_327.rs:21:15\n   |\n21 |     } else if c == '(' {\n   |               ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpndto_327.rs:23:15\n   |\n23 |     } else if c == ')' {\n   |               ^ not found in this scope\n\nerror: abort",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let opening_bracket = bracket_stack.pop()\n      if opening_bracket != i - 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpv30t0leq.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpv30t0leq.rs:20:48\n   |\n20 |       let opening_bracket = bracket_stack.pop()\n   |                                                ^ help: add `;` here\n21 |       if opening_bracket != i - 1 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpv30t0leq.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpv30t0leq.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpv30t0leq.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpv30t0leq.rs:20:43\n   |\n20 |       let opening_bracket = bracket_stack.pop()\n   |                                           ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpe5xym706.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpe5xym706.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpe5xym706.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpe5xym706.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpe5xym706.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpe5xym706.rs:21:28\n   |\n21 |       opening_bracket = \")\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpe5xym706.rs:22:26\n   |\n22 |       closing_bracket = c\n   |                          ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpe5xym706.rs:26:29\n   |\n26 |   return bracket_count == 0 and opening_bracket == closing_bracket\n   |                             ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpe5xym706.rs:15:12\n   |\n15 |   for c in brackets {",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  let bracket_stack_index = 0\n  let bracket_stack_size = 0\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n    } else if (brackets[i] == \")\") {\n      bracket_count -= 1\n    }\n\n    if (bracket_count == 0) {\n      bracket_stack_index += 1\n      bracket_stack.push(brackets[i])\n    } else if (bracket_count < 0) {\n      if (bracket_stack_index == 0) {\n        return false\n      } else {\n        bracket_stack_index -= 1\n        bracket_stack.pop()\n      }\n    }\n  }\n\n  if (bracket_stack_index != 0) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd4_k9d_x.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpd4_k9d_x.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   let bracket_stack_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpd4_k9d_x.rs:14:30\n   |\n14 |   let bracket_stack_index = 0\n   |                              ^ help: add `;` here\n15 |   let bracket_stack_size = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpd4_k9d_x.rs:15:29\n   |\n15 |   let bracket_stack_size = 0\n   |                             ^ help: add `;` here\n16 | \n17 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpd4_k9d_x.rs:25:31\n   |\n25 |       bracket_stack_index += 1\n   |                               ^ help: add `;` here\n26 |       bracket_stack.push(brackets[i])\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpd4_k9d_x.rs:31:33\n   |\n31 |         bracket_stack_index -= 1\n   |                                 ^ help: add `;` here\n32 |         bracket_stack.pop()\n   |         ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpd4_k9d_x.rs:17:12\n   |\n17 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpd4_k9d_x.rs:18:8\n   |\n18 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (brackets[i] == \"(\") {\n18 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parent",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n  for i in range(0, brackets.length) {\n    if (brackets[i] == \"(\") {\n      opening_bracket_index = i\n      opening_bracket = brackets[i]\n      bracket_count += 1\n    } else if (brackets[i] == \")\") {\n      closing_bracket_index = i\n      closing_bracket = brackets[i]\n      bracket_count -= 1\n    }\n    if (bracket_count == 0) {\n      return opening_bracket_index == closing_bracket_index\n    }\n  }\n  return false\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_xkl704c.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_xkl704c.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_xkl704c.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   let opening_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_xkl704c.rs:15:32\n   |\n15 |   let opening_bracket_index = 0\n   |                                ^ help: add `;` here\n16 |   let closing_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_xkl704c.rs:16:32\n   |\n16 |   let closing_bracket_index = 0\n   |                                ^ help: add `;` here\n17 |   for i in range(0, brackets.length) {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket`\n  --> /tmp/tmp_xkl704c.rs:19:32\n   |\n19 |       opening_bracket_index = i\n   |                                ^ help: add `;` here\n20 |       opening_bracket = brackets[i]\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp_xkl704c.rs:20:36\n   |\n20 |       opening_bracket = brackets[i]\n   |                                    ^ help: add `;` here\n21 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp_xkl704c.rs:23:32\n   |\n23 |       closing_bracket_index = i\n   |                                ^ help: add `;` here\n24 |       closing_bracket = brackets[i]\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp_xkl704c.rs:24:36\n   |\n24 |       closing_bracket = brackets[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      } else if bracket_count == 1 {\n        bracket_count -= 1\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2a2xgwbi.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2a2xgwbi.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmp2a2xgwbi.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmp2a2xgwbi.rs:22:27\n   |\n22 |         bracket_count -= 1\n   |                           ^ help: add `;` here\n23 |         bracket_stack.pop()\n   |         ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp2a2xgwbi.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp2a2xgwbi.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp2a2xgwbi.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp2a2xgwbi.rs:23:23\n   |\n23 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --expla",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n    } else {\n      if (bracket_count == 0) {\n        open_bracket = true\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq_azhb2g.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq_azhb2g.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpq_azhb2g.rs:16:10\n   |\n16 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -       if (bracket_count == 0) {\n16 +       if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpq_azhb2g.rs:21:10\n   |\n21 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n21 -       if (bracket_count == 0) {\n21 +       if bracket_count == 0 {\n   | \n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '(' || brackets[1] != ')' || brackets[2] != '(') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp417518xo.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp417518xo.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp417518xo.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp417518xo.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp417518xo.rs:19:10\n   |\n19 |       if (brackets[0] != '(' || brackets[1] != ')') {\n   |          ^                                        ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '(' || brackets[1] != ')') {\n19 +       if brackets[0] != '(' || brackets[1] != ')' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp417518xo.rs:23:10\n   |\n23 |       if (brackets[0] != '(' || brackets[1] != ')' || brackets[2] != '(') {\n   |          ^                                                              ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '(' || brackets[1] != ')' || brackets[2] != '(') {\n23 +       if brackets[0] != '(' || brackets[1] != ')' || brackets[2] != '(' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp4175",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == '(') {\n      opening_brackets += 1\n    } else if (brackets[i] == ')') {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbeue_8nk.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpbeue_8nk.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpbeue_8nk.rs:15:18\n   |\n15 |     if (brackets[i] == '(') {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpbeue_8nk.rs:17:25\n   |\n17 |     } else if (brackets[i] == ')') {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbeue_8nk.rs:15:8\n   |\n15 |     if (brackets[i] == '(') {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == '(') {\n15 +     if brackets[i] == '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbeue_8nk.rs:17:15\n   |\n17 |     } else if (brackets[i] == ')') {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == ')') {\n17 +     } else if brackets[i] == ')' {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkvp9x4nt.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkvp9x4nt.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkvp9x4nt.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpkvp9x4nt.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpkvp9x4nt.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpkvp9x4nt.rs:21:28\n   |\n21 |       opening_bracket = \"(\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpkvp9x4nt.rs:22:26\n   |\n22 |       closing_bracket = c\n   |                          ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpkvp9x4nt.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 8 previous errors\n\nFor more information about thi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \")\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfll6yz0e.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfll6yz0e.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpfll6yz0e.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpfll6yz0e.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       bracket_stack.pop()\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpfll6yz0e.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfll6yz0e.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfll6yz0e.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfll6yz0e.rs:19:10\n   |\n19 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (bracket_coun",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      } else if bracket_count == 1 {\n        bracket_count -= 1\n        bracket_stack.pop()\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_f58s4y.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_f58s4y.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpc_f58s4y.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpc_f58s4y.rs:22:27\n   |\n22 |         bracket_count -= 1\n   |                           ^ help: add `;` here\n23 |         bracket_stack.pop()\n   |         ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpc_f58s4y.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpc_f58s4y.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpc_f58s4y.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpc_f58s4y.rs:23:23\n   |\n23 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --expla",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let open_bracket_index = bracket_stack.pop()\n      if i != open_bracket_index + 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp4svb5qov.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp4svb5qov.rs:20:51\n   |\n20 |       let open_bracket_index = bracket_stack.pop()\n   |                                                   ^ help: add `;` here\n21 |       if i != open_bracket_index + 1 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp4svb5qov.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp4svb5qov.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp4svb5qov.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp4svb5qov.rs:20:46\n   |\n20 |       let open_bracket_index = bracket_stack.pop()\n   |                                              ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphxu7ip6f.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:17:25\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:17:41\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:19:25\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:19:41\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:20:15\n   |\n20 |     } else if c == '(' {\n   |               ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:22:15\n   |\n22 |     } else if c == ')' {\n   |               ^ not found in this scope\n\nerror: aborting du",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp69z26fqb.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp69z26fqb.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp69z26fqb.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp69z26fqb.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp69z26fqb.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp69z26fqb.rs:21:28\n   |\n21 |       opening_bracket = \"(\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp69z26fqb.rs:22:26\n   |\n22 |       closing_bracket = c\n   |                          ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror: `and` is not a logical operator\n  --> /tmp/tmp69z26fqb.rs:26:29\n   |\n26 |   return bracket_count == 0 and opening_bracket == closing_bracket\n   |                             ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp69z26fqb.rs:15:12\n   |\n15 |   for c in brackets {",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpabim5dgl.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpabim5dgl.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:16:18\n   |\n16 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:18:25\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:16:8\n   |\n16 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"(\") {\n16 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyzjvwauq.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyzjvwauq.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpyzjvwauq.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyzjvwauq.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyzjvwauq.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:24:23\n   |\n24 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 && opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_v8137ik.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_v8137ik.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_v8137ik.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp_v8137ik.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp_v8137ik.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp_v8137ik.rs:21:28\n   |\n21 |       opening_bracket = \"(\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp_v8137ik.rs:22:26\n   |\n22 |       closing_bracket = c\n   |                          ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp_v8137ik.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 8 previous errors\n\nFor more information about thi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  let bracket_stack_index = 0\n  let bracket_stack_top = 0\n  let bracket_stack_top_index = 0\n  let bracket_stack_top_index_next = 0\n\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if (c == \"(\") {\n      bracket_count += 1\n      bracket_stack_top_index_next = bracket_stack_index\n      bracket_stack_index += 1\n      bracket_stack_top += 1\n    } else if (c == \")\") {\n      bracket_count -= 1\n      if (bracket_count == 0) {\n        if (bracket_stack_top == 0) {\n          return false\n        }\n        bracket_stack_top -= 1\n        bracket_stack_top_index = bracket_stack_top_index_next\n      }\n    } else {\n      if (bracket_stack_top > 0) {\n        bracket_stack[bracket_stack_top - 1] += c\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp35b7axz9.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp35b7axz9.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   let bracket_stack_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp35b7axz9.rs:14:30\n   |\n14 |   let bracket_stack_index = 0\n   |                              ^ help: add `;` here\n15 |   let bracket_stack_top = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp35b7axz9.rs:15:28\n   |\n15 |   let bracket_stack_top = 0\n   |                            ^ help: add `;` here\n16 |   let bracket_stack_top_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp35b7axz9.rs:16:34\n   |\n16 |   let bracket_stack_top_index = 0\n   |                                  ^ help: add `;` here\n17 |   let bracket_stack_top_index_next = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp35b7axz9.rs:17:39\n   |\n17 |   let bracket_stack_top_index_next = 0\n   |                                       ^ help: add `;` here\n18 | \n19 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp35b7axz9.rs:20:24\n   |\n20 |     let c = brackets[i]\n   |                        ^ help: add `;` here\n21 |     if (c == \"(\") {\n   |     -- unexpected token\n\nerror: expected `;`, found `bracket_stack_top_index_next`\n  --> /tmp/tmp35b7axz9.rs:22:25\n   |\n22 |       bracket_count += 1\n   |                         ^ help: add `;` here\n23 |       bracket_stack_top_index_next = bracket_stack_index\n   |       ---------------------------- unexpected token\n\nerror: expected `;`, found `bracket_stack_index`\n  --> /tmp/tmp35b7axz9.rs:23:57\n   |\n23 |       bracket_stack_top_index_next = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjwoqxpi0.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjwoqxpi0.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpjwoqxpi0.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpjwoqxpi0.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpjwoqxpi0.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpjwoqxpi0.rs:21:28\n   |\n21 |       opening_bracket = \")\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = \"(\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpjwoqxpi0.rs:22:28\n   |\n22 |       closing_bracket = \"(\"\n   |                            ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpjwoqxpi0.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 8 previous errors\n\nFor more information abo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  let opening_bracket_stack = []\n  let closing_bracket_stack = []\n\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket_count += 1\n      opening_bracket_stack.push(0)\n    } else if (bracket_count == 1) {\n      closing_bracket_count += 1\n      closing_bracket_stack.push(0)\n    } else if (bracket_count > 1) {\n      if (opening_bracket_stack.pop() == 0) {\n        opening_bracket_count -= 1\n      } else {\n        closing_bracket_count -= 1\n      }\n    }\n    bracket_count += 1\n  }\n\n  return opening_bracket_count == 0 && closing_bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpowxu27nc.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpowxu27nc.rs:13:32\n   |\n13 |   let opening_bracket_count = 0\n   |                                ^ help: add `;` here\n14 |   let closing_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpowxu27nc.rs:14:32\n   |\n14 |   let closing_bracket_count = 0\n   |                                ^ help: add `;` here\n15 |   let opening_bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpowxu27nc.rs:15:33\n   |\n15 |   let opening_bracket_stack = []\n   |                                 ^ help: add `;` here\n16 |   let closing_bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpowxu27nc.rs:16:33\n   |\n16 |   let closing_bracket_stack = []\n   |                                 ^ help: add `;` here\n17 | \n18 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket_stack`\n  --> /tmp/tmpowxu27nc.rs:20:33\n   |\n20 |       opening_bracket_count += 1\n   |                                 ^ help: add `;` here\n21 |       opening_bracket_stack.push(0)\n   |       --------------------- unexpected token\n\nerror: expected `;`, found `closing_bracket_stack`\n  --> /tmp/tmpowxu27nc.rs:23:33\n   |\n23 |       closing_bracket_count += 1\n   |                                 ^ help: add `;` here\n24 |       closing_bracket_stack.push(0)\n   |       --------------------- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpowxu27nc.rs:19:8\n   |\n19 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -     if (bracket_count == 0) {\n19 +     if bracket_count =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \")\") {\n      bracket_count -= 1\n      if (bracket_count < 0) {\n        return false\n      }\n      if (bracket_stack.pop() != i) {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnun83t3t.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnun83t3t.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpnun83t3t.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpnun83t3t.rs:19:25\n   |\n19 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n20 |       if (bracket_count < 0) {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpnun83t3t.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnun83t3t.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnun83t3t.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnun83t3t.rs:20:10\n   |\n20 |       if (bracket_count < 0) {\n   |          ^                 ^\n   |\nhelp: remove these parentheses\n   |\n20 -       if (bracket_count < 0) {\n20",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp69z26fqb.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp69z26fqb.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp69z26fqb.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp69z26fqb.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp69z26fqb.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp69z26fqb.rs:21:28\n   |\n21 |       opening_bracket = \"(\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp69z26fqb.rs:22:26\n   |\n22 |       closing_bracket = c\n   |                          ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror: `and` is not a logical operator\n  --> /tmp/tmp69z26fqb.rs:26:29\n   |\n26 |   return bracket_count == 0 and opening_bracket == closing_bracket\n   |                             ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp69z26fqb.rs:15:12\n   |\n15 |   for c in brackets {",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if (brackets[i] == \")\") {\n      if (bracket_stack.length == 0) {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if (last_bracket != i) {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_stack.length == 0 && bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpm5jvusjs.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpm5jvusjs.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpm5jvusjs.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpm5jvusjs.rs:22:45\n   |\n22 |       let last_bracket = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n23 |       if (last_bracket != i) {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpm5jvusjs.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm5jvusjs.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm5jvusjs.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm5jvusjs.rs:19:10\n   |\n19 |       if (bracket_stack.length == 0) {\n   |          ^                         ^\n   |\nhelp: remove the",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for c in brackets {\n    if c == \"(\" {\n      bracket_count += 1\n      bracket_stack.push(c)\n    } else if c == \")\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5qhxqyjl.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5qhxqyjl.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmp5qhxqyjl.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(c)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmp5qhxqyjl.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       bracket_stack.pop()\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp5qhxqyjl.rs:14:12\n   |\n14 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5qhxqyjl.rs:17:21\n   |\n17 |       bracket_stack.push(c)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5qhxqyjl.rs:23:21\n   |\n23 |       bracket_stack.pop()\n   |                     ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n\n  for i in range(0, brackets.length) {\n    if brackets[i] == \"(\" {\n      bracket_count += 1\n      opening_bracket_index = i\n    } else if brackets[i] == \")\" {\n      bracket_count -= 1\n      closing_bracket_index = i\n    }\n  }\n\n  return bracket_count == 0 && opening_bracket_index < closing_bracket_index\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjng0_kdv.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjng0_kdv.rs:13:32\n   |\n13 |   let opening_bracket_index = 0\n   |                                ^ help: add `;` here\n14 |   let closing_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpjng0_kdv.rs:14:32\n   |\n14 |   let closing_bracket_index = 0\n   |                                ^ help: add `;` here\n15 | \n16 |   for i in range(0, brackets.length) {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket_index`\n  --> /tmp/tmpjng0_kdv.rs:18:25\n   |\n18 |       bracket_count += 1\n   |                         ^ help: add `;` here\n19 |       opening_bracket_index = i\n   |       --------------------- unexpected token\n\nerror: expected `;`, found `closing_bracket_index`\n  --> /tmp/tmpjng0_kdv.rs:21:25\n   |\n21 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n22 |       closing_bracket_index = i\n   |       --------------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpjng0_kdv.rs:16:12\n   |\n16 |   for i in range(0, brackets.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpjng0_kdv.rs:16:30\n   |\n16 |   for i in range(0, brackets.length) {\n   |                              ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpjng0_kdv.rs:17:8\n   |\n17 |     if brackets[i] == \"(\" {\n   |        ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Inde",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      opening_bracket_count += 1\n      if bracket_stack.length > 0 {\n        closing_bracket = bracket_stack.pop()\n        closing_bracket_count += 1\n      }\n    } else if c == \")\" {\n      closing_bracket = c\n      closing_bracket_count += 1\n      if bracket_stack.length == 0 {\n        return false\n      }\n      opening_bracket = bracket_stack.pop()\n      opening_bracket_count += 1\n    } else {\n      if opening_bracket_count == 0 {\n        bracket_stack.push(c)\n      } else if closing_bracket_count == 0 {\n        bracket_stack.push(c)\n      } else if opening_bracket_count > closing_bracket_count {\n        bracket_stack.push(c)\n      } else {\n        return false\n      }\n    }\n  }\n  return bracket_stack.length == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfbul0sw4.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpfbul0sw4.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpfbul0sw4.rs:14:27\n   |\n14 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpfbul0sw4.rs:15:27\n   |\n15 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n16 |   let opening_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpfbul0sw4.rs:16:32\n   |\n16 |   let opening_bracket_count = 0\n   |                                ^ help: add `;` here\n17 |   let closing_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfbul0sw4.rs:17:32\n   |\n17 |   let closing_bracket_count = 0\n   |                                ^ help: add `;` here\n18 | \n19 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket_count`\n  --> /tmp/tmpfbul0sw4.rs:21:26\n   |\n21 |       opening_bracket = c\n   |                          ^ help: add `;` here\n22 |       opening_bracket_count += 1\n   |       --------------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfbul0sw4.rs:22:33\n   |\n22 |       opening_bracket_count += 1\n   |                                 ^ help: add `;` here\n23 |       if bracket_stack.length > 0 {\n   |       -- unexpected token\n\nerror: expected `;`, found `closing_bracket_count`\n  --> /tmp/tmpfbul0sw4.rs:24:46\n   |\n24 |         closing_bracket = bracket_stack.pop()\n   |                                            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in brackets.chars() {\n    if i == \"(\" {\n      opening_bracket = \"(\"\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if i == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9v1ro40a.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp9v1ro40a.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9v1ro40a.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for i in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp9v1ro40a.rs:17:28\n   |\n17 |       opening_bracket = \"(\"\n   |                            ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp9v1ro40a.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp9v1ro40a.rs:21:28\n   |\n21 |       opening_bracket = \")\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = \"(\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp9v1ro40a.rs:22:28\n   |\n22 |       closing_bracket = \"(\"\n   |                            ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9v1ro40a.rs:16:13\n   |\n16 |     if i == \"(\" {\n   |             ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant to write a `char` literal, use single quotes\n   |\n16 |     if i == '(' {\n   |             ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9v1ro40a.rs:20:20\n   |\n20 |     } else if i == \")\" {\n   |                    ^^^ expected `char`, found `&",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[i] == '(') {\n        bracket_count += 1\n      } else if (brackets[i] == ')') {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpnx1dyuus.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpnx1dyuus.rs:15:20\n   |\n15 |       if (brackets[i] != '(') {\n   |                    ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpnx1dyuus.rs:19:20\n   |\n19 |       if (brackets[i] == '(') {\n   |                    ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpnx1dyuus.rs:21:27\n   |\n21 |       } else if (brackets[i] == ')') {\n   |                           ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnx1dyuus.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnx1dyuus.rs:15:10\n   |\n15 |       if (brackets[i] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[i] != '(') {\n15 +       if brackets[i] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnx1dyuus.rs:19:10\n   |\n19 |       if (brackets[i] == '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[i] == '(') {\n19 +       if brackets[i] == '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnx1dyuus.rs:21:17\n   |\n21 |       } else if (brackets[i] == ')') {\n   |                 ^                  ^\n   |\nhelp: remove these parentheses\n   |\n21 -       } else if (brackets[i] == ')') {\n21 +       } else if brackets[i] == ')' {\n   | \n\nerror: aborting due to 4 previous errors; 4 warnings emitted\n\nFor more information a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpw4tk81qr.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpw4tk81qr.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpw4tk81qr.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpw4tk81qr.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpw4tk81qr.rs:19:31\n   |\n19 |       } else if bracket_stack.pop() != i - 1 {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[0] == '(') {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpdpzjsczd.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:19:10\n   |\n19 |       if (brackets[0] == '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] == '(') {\n19 +       if brackets[0] == '(' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdpzjsczd.rs:15:11\n   |\n15 |       if (brackets[0] != '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdpzjsczd.rs:19:11\n   |\n19 |       if (brackets[0] == '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{intege",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp4j9jeyep.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp4j9jeyep.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp4j9jeyep.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp4j9jeyep.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp4j9jeyep.rs:20:23\n   |\n20 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  let bracket_stack_index = 0\n  let bracket_stack_top = 0\n\n  for i in range(0, brackets.length) {\n    if (brackets[i] == '(') {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == ')') {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack_top = bracket_stack.pop()\n      if (bracket_stack_top != i) {\n        return false\n      }\n    }\n  }\n\n  if (bracket_count != 0) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu97n0c91.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu97n0c91.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   let bracket_stack_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu97n0c91.rs:14:30\n   |\n14 |   let bracket_stack_index = 0\n   |                              ^ help: add `;` here\n15 |   let bracket_stack_top = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu97n0c91.rs:15:28\n   |\n15 |   let bracket_stack_top = 0\n   |                            ^ help: add `;` here\n16 | \n17 |   for i in range(0, brackets.length) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpu97n0c91.rs:19:25\n   |\n19 |       bracket_count += 1\n   |                         ^ help: add `;` here\n20 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack_top`\n  --> /tmp/tmpu97n0c91.rs:25:25\n   |\n25 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n26 |       bracket_stack_top = bracket_stack.pop()\n   |       ----------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpu97n0c91.rs:26:46\n   |\n26 |       bracket_stack_top = bracket_stack.pop()\n   |                                              ^ help: add `;` here\n27 |       if (bracket_stack_top != i) {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpu97n0c91.rs:17:12\n   |\n17 |   for i in range(0, brackets.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpu97n0c91.rs:18:8\n   |\n18 |     i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      bracket_count += 1\n      opening_bracket = c\n      closing_bracket = \")\"\n    } else if c == \")\" {\n      bracket_count -= 1\n      if bracket_count < 0 {\n        return false\n      }\n      if bracket_count == 0 {\n        bracket_stack.pop()\n        if bracket_stack.empty() {\n          return true\n        }\n        opening_bracket = bracket_stack.pop()\n        closing_bracket = bracket_stack.pop()\n      } else {\n        opening_bracket = bracket_stack.pop()\n        closing_bracket = bracket_stack.pop()\n      }\n    } else {\n      bracket_stack.push(c)\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxxh6l9gc.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpxxh6l9gc.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpxxh6l9gc.rs:14:27\n   |\n14 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxxh6l9gc.rs:15:27\n   |\n15 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n16 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket`\n  --> /tmp/tmpxxh6l9gc.rs:18:25\n   |\n18 |       bracket_count += 1\n   |                         ^ help: add `;` here\n19 |       opening_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpxxh6l9gc.rs:19:26\n   |\n19 |       opening_bracket = c\n   |                          ^ help: add `;` here\n20 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpxxh6l9gc.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count < 0 {\n   |       -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpxxh6l9gc.rs:27:28\n   |\n27 |         bracket_stack.pop()\n   |                            ^ help: add `;` here\n28 |         if bracket_stack.empty() {\n   |         -- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpxxh6l9gc.rs:31:46\n   |\n31 |         opening_bracket = bracket_stack.pop()\n   |                                              ^ help: add `;` here\n32 |         closing_bracket ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(bracket_count)\n      bracket_count += 1\n    } else if brackets[i] == \")\" {\n      bracket_count -= 1\n      if bracket_count < 0 {\n        return false\n      }\n      if bracket_stack.pop() != bracket_count {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpufuspfw7.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpufuspfw7.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpufuspfw7.rs:16:40\n   |\n16 |       bracket_stack.push(bracket_count)\n   |                                        ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpufuspfw7.rs:19:25\n   |\n19 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n20 |       if bracket_count < 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpufuspfw7.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpufuspfw7.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpufuspfw7.rs:16:21\n   |\n16 |       bracket_stack.push(bracket_count)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpufuspfw7.rs:23:24\n   |\n23 |       if bracket_stack.pop() != bracket_count {\n   |                        ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more inform",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '(' || brackets[1] != ')' || brackets[2] != '(') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp417518xo.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp417518xo.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp417518xo.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp417518xo.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp417518xo.rs:19:10\n   |\n19 |       if (brackets[0] != '(' || brackets[1] != ')') {\n   |          ^                                        ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '(' || brackets[1] != ')') {\n19 +       if brackets[0] != '(' || brackets[1] != ')' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp417518xo.rs:23:10\n   |\n23 |       if (brackets[0] != '(' || brackets[1] != ')' || brackets[2] != '(') {\n   |          ^                                                              ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '(' || brackets[1] != ')' || brackets[2] != '(') {\n23 +       if brackets[0] != '(' || brackets[1] != ')' || brackets[2] != '(' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp4175",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      open_brackets += 1\n    } else if (bracket_count == 1) {\n      if (open_brackets == 0) {\n        return false\n      } else {\n        open_brackets -= 1\n      }\n    } else if (bracket_count == 2) {\n      if (open_brackets == 0) {\n        return false\n      } else {\n        open_brackets -= 1\n      }\n    }\n    bracket_count += 1\n  }\n  return open_brackets == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpse4wn0ix.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpse4wn0ix.rs:13:24\n   |\n13 |   let open_brackets = 0\n   |                        ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpse4wn0ix.rs:15:8\n   |\n15 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (bracket_count == 0) {\n15 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpse4wn0ix.rs:17:15\n   |\n17 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (bracket_count == 1) {\n17 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpse4wn0ix.rs:18:10\n   |\n18 |       if (open_brackets == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -       if (open_brackets == 0) {\n18 +       if open_brackets == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpse4wn0ix.rs:23:15\n   |\n23 |     } else if (bracket_count == 2) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -     } else if (bracket_count == 2) {\n23 +     } else if bracket_count == 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpse4wn0ix.rs:24:10\n   |\n24 |       if (open_brackets == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n24 -       if (open_brackets == 0) {\n24 +       if open_brackets == 0 {\n   | \n\nerror: aborting due to 2 previous errors; 5 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.length == 0 {\n        return false\n      } else {\n        bracket_count -= 1\n        if bracket_count == 0 {\n          bracket_stack.pop()\n        }\n      }\n    }\n  }\n  return bracket_stack.length == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkm6xvjej.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkm6xvjej.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpkm6xvjej.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpkm6xvjej.rs:22:27\n   |\n22 |         bracket_count -= 1\n   |                           ^ help: add `;` here\n23 |         if bracket_count == 0 {\n   |         -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpkm6xvjej.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpkm6xvjej.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpkm6xvjej.rs:16:21\n   |\n16 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /tmp/tmpkm6xvjej.rs:19:24\n   |\n19 |       if bracket_stack.length == 0 {\n   |                        ^^^^^^\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpkm6xvjej.rs:24:25\n   |\n24 |           bracket_stack.pop()\n   |                         ^^^ method not found in `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count - 2] != '(' || brackets[bracket_count - 1] != ')') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == brackets.count + 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp2_nq5_bg.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2_nq5_bg.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2_nq5_bg.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2_nq5_bg.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2_nq5_bg.rs:19:10\n   |\n19 |       if (brackets[0] != '(' || brackets[1] != ')') {\n   |          ^                                        ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '(' || brackets[1] != ')') {\n19 +       if brackets[0] != '(' || brackets[1] != ')' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2_nq5_bg.rs:23:10\n   |\n23 |       if (brackets[bracket_count - 2] != '(' || brackets[bracket_count - 1] != ')') {\n   |          ^                                                                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[bracket_count - 2] != '(' || brackets[bracket_count - 1] != ')') {\n23 +       if brackets[bracket_count - 2] != '(' || brackets[bracket_count - 1] != ')' {\n   | \n\nerror[E0277]: the type `String` cannot be i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"(\" {\n      bracket_stack.push(c)\n    } else if c == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"(\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmptniabj8b.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmptniabj8b.rs:14:24\n   |\n14 |     let c = brackets[i]\n   |                        ^ help: add `;` here\n15 |     if c == \"(\" {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmptniabj8b.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmptniabj8b.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmptniabj8b.rs:16:21\n   |\n16 |       bracket_stack.push(c)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmptniabj8b.rs:20:31\n   |\n20 |       } else if bracket_stack.pop() != \"(\" {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n\n  return bracket_count == 0 && opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfzhqfgno.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpfzhqfgno.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfzhqfgno.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 | \n16 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpfzhqfgno.rs:18:26\n   |\n18 |       opening_bracket = c\n   |                          ^ help: add `;` here\n19 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpfzhqfgno.rs:19:28\n   |\n19 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n20 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpfzhqfgno.rs:22:28\n   |\n22 |       opening_bracket = \")\"\n   |                            ^ help: add `;` here\n23 |       closing_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpfzhqfgno.rs:23:26\n   |\n23 |       closing_bracket = c\n   |                          ^ help: add `;` here\n24 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpfzhqfgno.rs:16:12\n   |\n16 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 8 previous errors\n\nFor more information abo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = String.fromCharCode(c)\n    } else if (bracket_count == 1) {\n      closing_bracket = String.fromCharCode(c)\n    } else if (bracket_count == 2) {\n      if (opening_bracket == \"(\" && closing_bracket == \")\") {\n        bracket_count = 0\n      } else {\n        return false\n      }\n    } else {\n      return false\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpv20g48n_.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv20g48n_.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpv20g48n_.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpv20g48n_.rs:17:25\n   |\n17 |       opening_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpv20g48n_.rs:17:45\n   |\n17 |       opening_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpv20g48n_.rs:19:25\n   |\n19 |       closing_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpv20g48n_.rs:19:45\n   |\n19 |       closing_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpv20g48n_.rs:16:8\n   |\n16 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (bracket_count == 0) {\n16 +     if bracket",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[0] == '(') {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpdpzjsczd.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:19:10\n   |\n19 |       if (brackets[0] == '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] == '(') {\n19 +       if brackets[0] == '(' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdpzjsczd.rs:15:11\n   |\n15 |       if (brackets[0] != '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdpzjsczd.rs:19:11\n   |\n19 |       if (brackets[0] == '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{intege",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets.char_at(0) != '(') {\n        return false\n      }\n    } else {\n      if (brackets.char_at(0) == '(') {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp8d6xwma2.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8d6xwma2.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8d6xwma2.rs:15:10\n   |\n15 |       if (brackets.char_at(0) != '(') {\n   |          ^                          ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets.char_at(0) != '(') {\n15 +       if brackets.char_at(0) != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8d6xwma2.rs:19:10\n   |\n19 |       if (brackets.char_at(0) == '(') {\n   |          ^                          ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets.char_at(0) == '(') {\n19 +       if brackets.char_at(0) == '(' {\n   | \n\nerror[E0599]: no method named `char_at` found for struct `String` in the current scope\n  --> /tmp/tmp8d6xwma2.rs:15:20\n   |\n15 |       if (brackets.char_at(0) != '(') {\n   |                    ^^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char_at` found for struct `String` in the current scope\n  --> /tmp/tmp8d6xwma2.rs:19:20\n   |\n19 |       if (brackets.char_at(0) == '(') {\n   |                    ^^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 3 previous errors; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let open_bracket = bracket_stack.pop()\n      if open_bracket != i - 1 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  if bracket_stack.is_empty() {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvgxqvpqs.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvgxqvpqs.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpvgxqvpqs.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpvgxqvpqs.rs:22:45\n   |\n22 |       let open_bracket = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n23 |       if open_bracket != i - 1 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpvgxqvpqs.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpvgxqvpqs.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpvgxqvpqs.rs:16:21\n   |\n16 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpvgxqvpqs.rs:22:40\n   |\n22 |       let open_bracket = bracket_stack.pop()\n   |                                        ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpabim5dgl.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpabim5dgl.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:16:18\n   |\n16 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:18:25\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:16:8\n   |\n16 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"(\") {\n16 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count] != ')') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpennvr4nv.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:19:10\n   |\n19 |       if (brackets[0] != '(' || brackets[1] != ')') {\n   |          ^                                        ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '(' || brackets[1] != ')') {\n19 +       if brackets[0] != '(' || brackets[1] != ')' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:23:10\n   |\n23 |       if (brackets[bracket_count] != ')') {\n   |          ^                              ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[bracket_count] != ')') {\n23 +       if brackets[bracket_count] != ')' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpennvr4nv.rs:15:11\n   |\n15 |       if (brackets[0] != '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      } else if bracket_count == 1 {\n        bracket_count -= 1\n        bracket_stack.pop()\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc_f58s4y.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc_f58s4y.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpc_f58s4y.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpc_f58s4y.rs:22:27\n   |\n22 |         bracket_count -= 1\n   |                           ^ help: add `;` here\n23 |         bracket_stack.pop()\n   |         ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpc_f58s4y.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpc_f58s4y.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpc_f58s4y.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpc_f58s4y.rs:23:23\n   |\n23 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --expla",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpio65ht46.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpio65ht46.rs:15:20\n   |\n15 |       if (brackets[i] != \"(\") {\n   |                    ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpio65ht46.rs:19:20\n   |\n19 |       if (brackets[i] != \")\") {\n   |                    ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpio65ht46.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpio65ht46.rs:15:10\n   |\n15 |       if (brackets[i] != \"(\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[i] != \"(\") {\n15 +       if brackets[i] != \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpio65ht46.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpio65ht46.rs:19:10\n   |\n19 |       if (brackets[i] != \")\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[i] != \")\") {\n19 +       if brackets[i] != \")\" {\n   | \n\nerror: aborting due to 3 previous errors; 4 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 && opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_v8137ik.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_v8137ik.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_v8137ik.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp_v8137ik.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp_v8137ik.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp_v8137ik.rs:21:28\n   |\n21 |       opening_bracket = \"(\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp_v8137ik.rs:22:26\n   |\n22 |       closing_bracket = c\n   |                          ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp_v8137ik.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 8 previous errors\n\nFor more information about thi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in brackets.chars() {\n    if i == \"(\" {\n      opening_bracket = i\n      closing_bracket = \")\"\n    } else if i == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = \")\"\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          closing_bracket = i\n        }\n      } else {\n        opening_bracket = i\n      }\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpymuj8wsz.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpymuj8wsz.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpymuj8wsz.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for i in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpymuj8wsz.rs:17:26\n   |\n17 |       opening_bracket = i\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpymuj8wsz.rs:20:28\n   |\n20 |       opening_bracket = \"(\"\n   |                            ^ help: add `;` here\n21 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpymuj8wsz.rs:28:31\n   |\n28 |           opening_bracket = \"\"\n   |                               ^ help: add `;` here\n29 |           closing_bracket = \"\"\n   |           --------------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpymuj8wsz.rs:16:13\n   |\n16 |     if i == \"(\" {\n   |             ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant to write a `char` literal, use single quotes\n   |\n16 |     if i == '(' {\n   |             ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpymuj8wsz.rs:17:25\n   |\n13 |   let opening_bracket = \"\"\n   |                         -- expected due to this value\n...\n17 |       opening_bracket = i\n   |                         ^ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpymuj8wsz.rs:19:20\n   |\n19 |     } else if i == \")\" {\n   |              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for i in range(0, brackets.length) {\n    if brackets[i] == \"(\" {\n      opening_bracket_count += 1\n      opening_bracket_index = i\n    } else if brackets[i] == \")\" {\n      closing_bracket_count += 1\n      closing_bracket_index = i\n    }\n  }\n  if opening_bracket_count != closing_bracket_count {\n    return false\n  }\n  for i in range(0, brackets.length) {\n    if i == opening_bracket_index {\n      bracket_count += 1\n    }\n    if i == closing_bracket_index {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpczirlj0b.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpczirlj0b.rs:13:32\n   |\n13 |   let opening_bracket_index = 0\n   |                                ^ help: add `;` here\n14 |   let closing_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpczirlj0b.rs:14:32\n   |\n14 |   let closing_bracket_index = 0\n   |                                ^ help: add `;` here\n15 |   let opening_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpczirlj0b.rs:15:32\n   |\n15 |   let opening_bracket_count = 0\n   |                                ^ help: add `;` here\n16 |   let closing_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpczirlj0b.rs:16:32\n   |\n16 |   let closing_bracket_count = 0\n   |                                ^ help: add `;` here\n17 |   for i in range(0, brackets.length) {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket_index`\n  --> /tmp/tmpczirlj0b.rs:19:33\n   |\n19 |       opening_bracket_count += 1\n   |                                 ^ help: add `;` here\n20 |       opening_bracket_index = i\n   |       --------------------- unexpected token\n\nerror: expected `;`, found `closing_bracket_index`\n  --> /tmp/tmpczirlj0b.rs:22:33\n   |\n22 |       closing_bracket_count += 1\n   |                                 ^ help: add `;` here\n23 |       closing_bracket_index = i\n   |       --------------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpczirlj0b.rs:17:12\n   |\n17 |   for i in range(0, brackets.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphxu7ip6f.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:17:25\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:17:41\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:19:25\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:19:41\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:20:15\n   |\n20 |     } else if c == '(' {\n   |               ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:22:15\n   |\n22 |     } else if c == ')' {\n   |               ^ not found in this scope\n\nerror: aborting du",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvkd_giqb.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpvkd_giqb.rs:15:20\n   |\n15 |       if (brackets[i] != \"(\") {\n   |                    ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpvkd_giqb.rs:19:20\n   |\n19 |       if (brackets[i] != \")\") {\n   |                    ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvkd_giqb.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvkd_giqb.rs:15:10\n   |\n15 |       if (brackets[i] != \"(\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[i] != \"(\") {\n15 +       if brackets[i] != \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvkd_giqb.rs:19:10\n   |\n19 |       if (brackets[i] != \")\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[i] != \")\") {\n19 +       if brackets[i] != \")\" {\n   | \n\nerror: aborting due to 3 previous errors; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpabim5dgl.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpabim5dgl.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:16:18\n   |\n16 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:18:25\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:16:8\n   |\n16 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"(\") {\n16 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"(\" {\n      bracket_stack.push(bracket)\n    } else if bracket == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        let last_bracket = bracket_stack.pop()\n        if last_bracket != \"(\" {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpehvzhexa.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpehvzhexa.rs:14:30\n   |\n14 |     let bracket = brackets[i]\n   |                              ^ help: add `;` here\n15 |     if bracket == \"(\" {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpehvzhexa.rs:21:47\n   |\n21 |         let last_bracket = bracket_stack.pop()\n   |                                               ^ help: add `;` here\n22 |         if last_bracket != \"(\" {\n   |         -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpehvzhexa.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpehvzhexa.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpehvzhexa.rs:16:21\n   |\n16 |       bracket_stack.push(bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpehvzhexa.rs:21:42\n   |\n21 |         let last_bracket = bracket_stack.pop()\n   |                                          ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpabim5dgl.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpabim5dgl.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:16:18\n   |\n16 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:18:25\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:16:8\n   |\n16 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"(\") {\n16 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          opening_bracket = \"\"\n        }\n      }\n    }\n    if opening_bracket != \"\" {\n      bracket_stack.push(opening_bracket)\n    }\n  }\n  return bracket_stack.length == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpo0ak9g3d.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo0ak9g3d.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpo0ak9g3d.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpo0ak9g3d.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpo0ak9g3d.rs:20:28\n   |\n20 |       opening_bracket = \"(\"\n   |                            ^ help: add `;` here\n21 |       closing_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpo0ak9g3d.rs:28:31\n   |\n28 |           opening_bracket = \"\"\n   |                               ^ help: add `;` here\n29 |           closing_bracket = \"\"\n   |           --------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpo0ak9g3d.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpo0ak9g3d.rs:36:21\n   |\n36 |       bracket_stack.push(opening_bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp8rrxcwxc.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8rrxcwxc.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp8rrxcwxc.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8rrxcwxc.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `empty` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8rrxcwxc.rs:17:24\n   |\n17 |       if bracket_stack.empty() {\n   |                        ^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8rrxcwxc.rs:20:23\n   |\n20 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `empty` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8rrxcwxc.rs:24:24\n   |\n24 |   return bracket_stack.empty()\n   |                        ^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyzjvwauq.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyzjvwauq.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpyzjvwauq.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyzjvwauq.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyzjvwauq.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:24:23\n   |\n24 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyzjvwauq.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyzjvwauq.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpyzjvwauq.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyzjvwauq.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyzjvwauq.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:24:23\n   |\n24 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      opening_bracket_index = i\n    } else if (brackets[i] == \")\") {\n      bracket_count -= 1\n      closing_bracket_index = i\n    }\n  }\n\n  return bracket_count == 0 && opening_bracket_index < closing_bracket_index\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzfwtflwn.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzfwtflwn.rs:13:32\n   |\n13 |   let opening_bracket_index = 0\n   |                                ^ help: add `;` here\n14 |   let closing_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzfwtflwn.rs:14:32\n   |\n14 |   let closing_bracket_index = 0\n   |                                ^ help: add `;` here\n15 | \n16 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket_index`\n  --> /tmp/tmpzfwtflwn.rs:18:25\n   |\n18 |       bracket_count += 1\n   |                         ^ help: add `;` here\n19 |       opening_bracket_index = i\n   |       --------------------- unexpected token\n\nerror: expected `;`, found `closing_bracket_index`\n  --> /tmp/tmpzfwtflwn.rs:21:25\n   |\n21 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n22 |       closing_bracket_index = i\n   |       --------------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpzfwtflwn.rs:16:12\n   |\n16 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzfwtflwn.rs:17:8\n   |\n17 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (brackets[i] == \"(\") {\n17 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzfwtflwn.rs:20:15\n   |\n20 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } els",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else {\n      if (brackets[i] == \")\") {\n        bracket_count--\n      } else if (brackets[i] == \"(\") {\n        bracket_count++\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpr3rupyrc.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected expression, found `}`\n  --> /tmp/tmpr3rupyrc.rs:21:7\n   |\n21 |       } else if (brackets[i] == \"(\") {\n   |       ^ expected expression\n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmpr3rupyrc.rs:22:22\n   |\n22 |         bracket_count++\n   |                      ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n22 |         { let tmp = bracket_count; bracket_count += 1; tmp }\n   |         +++++++++++              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n22 -         bracket_count++\n22 +         bracket_count += 1\n   | \n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpr3rupyrc.rs:15:20\n   |\n15 |       if (brackets[i] != \"(\") {\n   |                    ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpr3rupyrc.rs:19:20\n   |\n19 |       if (brackets[i] == \")\") {\n   |                    ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpr3rupyrc.rs:21:27\n   |\n21 |       } else if (brackets[i] == \"(\") {\n   |                           ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpr3rupyrc.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpr3rupyrc.rs:15:10\n   |\n15 |       if (brackets[i] != \"(\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[i] != \"(\") {\n15 +       if brackets[i] != \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpr3rupyrc.rs:19:10\n   |\n19 |       if (brackets[i] == \"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      if opening_bracket != \"\") {\n        bracket_stack.push(opening_bracket)\n        opening_bracket = \"\"\n      }\n      opening_bracket = c\n    } else if c == \")\" {\n      if closing_bracket != \"\") {\n        if bracket_stack.pop() != closing_bracket {\n          return false\n        }\n        closing_bracket = \"\"\n      }\n      closing_bracket = c\n    }\n  }\n  if opening_bracket != \"\" {\n    return false\n  }\n  if closing_bracket != \"\" {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: unexpected closing delimiter: `}`\n  --> /tmp/tmprw5z6y0q.rs:31:3\n   |\n11 | fn correct_bracketing(brackets: String) -> bool {\n   |                                                 - this opening brace...\n...\n30 |     }\n   |     - ...matches this closing brace\n31 |   }\n   |   ^ unexpected closing delimiter\n\nerror: mismatched closing delimiter: `)`\n  --> /tmp/tmprw5z6y0q.rs:16:17\n   |\n16 |     if c == \"(\" {\n   |                 ^ unclosed delimiter\n17 |       if opening_bracket != \"\") {\n   |                               ^ mismatched closing delimiter\n\nerror: mismatched closing delimiter: `)`\n  --> /tmp/tmprw5z6y0q.rs:22:24\n   |\n22 |     } else if c == \")\" {\n   |                        ^ unclosed delimiter\n23 |       if closing_bracket != \"\") {\n   |                               ^ mismatched closing delimiter\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      if brackets[i] == '(' {\n        bracket_stack.push(bracket_count)\n      } else {\n        if bracket_stack.is_empty() {\n          return false\n        }\n        let top = bracket_stack.pop()\n        if top != bracket_count {\n          return false\n        }\n      }\n    } else {\n      if brackets[i] == ')' {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjfw__3yw.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpjfw__3yw.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjfw__3yw.rs:22:38\n   |\n22 |         let top = bracket_stack.pop()\n   |                                      ^ help: add `;` here\n23 |         if top != bracket_count {\n   |         -- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpjfw__3yw.rs:16:19\n   |\n16 |       if brackets[i] == '(' {\n   |                   ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpjfw__3yw.rs:28:19\n   |\n28 |       if brackets[i] == ')' {\n   |                   ^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpjfw__3yw.rs:17:23\n   |\n17 |         bracket_stack.push(bracket_count)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpjfw__3yw.rs:22:33\n   |\n22 |         let top = bracket_stack.pop()\n   |                                 ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 && opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_v8137ik.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_v8137ik.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_v8137ik.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp_v8137ik.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp_v8137ik.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp_v8137ik.rs:21:28\n   |\n21 |       opening_bracket = \"(\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp_v8137ik.rs:22:26\n   |\n22 |       closing_bracket = c\n   |                          ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp_v8137ik.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 8 previous errors\n\nFor more information about thi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_stack.is_empty() && bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5j5t0o2m.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5j5t0o2m.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp5j5t0o2m.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp5j5t0o2m.rs:22:28\n   |\n22 |         bracket_stack.pop()\n   |                            ^ help: add `;` here\n23 |         bracket_count -= 1\n   |         ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp5j5t0o2m.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp5j5t0o2m.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5j5t0o2m.rs:16:21\n   |\n16 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5j5t0o2m.rs:22:23\n   |\n22 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --ex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = c\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpe5xym706.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpe5xym706.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpe5xym706.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpe5xym706.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpe5xym706.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpe5xym706.rs:21:28\n   |\n21 |       opening_bracket = \")\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpe5xym706.rs:22:26\n   |\n22 |       closing_bracket = c\n   |                          ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpe5xym706.rs:26:29\n   |\n26 |   return bracket_count == 0 and opening_bracket == closing_bracket\n   |                             ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpe5xym706.rs:15:12\n   |\n15 |   for c in brackets {",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyzjvwauq.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyzjvwauq.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpyzjvwauq.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyzjvwauq.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyzjvwauq.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:24:23\n   |\n24 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_stack.is_empty() && bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdw3632ak.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdw3632ak.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpdw3632ak.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpdw3632ak.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpdw3632ak.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpdw3632ak.rs:16:21\n   |\n16 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpdw3632ak.rs:21:31\n   |\n21 |       } else if bracket_stack.pop() != i - 1 {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjwoqxpi0.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjwoqxpi0.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpjwoqxpi0.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpjwoqxpi0.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpjwoqxpi0.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpjwoqxpi0.rs:21:28\n   |\n21 |       opening_bracket = \")\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = \"(\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpjwoqxpi0.rs:22:28\n   |\n22 |       closing_bracket = \"(\"\n   |                            ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpjwoqxpi0.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 8 previous errors\n\nFor more information abo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[0] == '(') {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpdpzjsczd.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:19:10\n   |\n19 |       if (brackets[0] == '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] == '(') {\n19 +       if brackets[0] == '(' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdpzjsczd.rs:15:11\n   |\n15 |       if (brackets[0] != '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdpzjsczd.rs:19:11\n   |\n19 |       if (brackets[0] == '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{intege",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == '(') {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == ')') {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpa1hs_r0r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpa1hs_r0r.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpa1hs_r0r.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpa1hs_r0r.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       bracket_stack.pop()\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpa1hs_r0r.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpa1hs_r0r.rs:15:8\n   |\n15 |     if (brackets[i] == '(') {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == '(') {\n15 +     if brackets[i] == '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpa1hs_r0r.rs:18:15\n   |\n18 |     } else if (brackets[i] == ')') {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == ')') {\n18 +     } else if brackets[i] == ')' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpa1hs_r0r.rs:19:10\n   |\n19 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (bracket_coun",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (bracket_count == 1) {\n      closing_bracket = _\n    } else if (bracket_count > 1) {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == \"(\" && closing_bracket == \")\"\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbhwmf_2p.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpbhwmf_2p.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpbhwmf_2p.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbhwmf_2p.rs:16:8\n   |\n16 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (bracket_count == 0) {\n16 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbhwmf_2p.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbhwmf_2p.rs:20:15\n   |\n20 |     } else if (bracket_count > 1) {\n   |               ^                 ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (bracket_count > 1) {\n20 +     } else if bracket_count > 1 {\n   | \n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpbhwmf_2p.rs:17:25\n   |\n17 |       opening_bracket = _\n   |                         ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpbhwmf_2p.rs:19:25\n   |\n19 |       closing_bracket = _\n   |                         ^ `_` not allowed here\n\nerror: aborting due to 5 previous errors; 3 w",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for c in brackets {\n    if c == \"(\" {\n      bracket_count += 1\n      bracket_stack.push(c)\n    } else if c == \")\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpspcm9ftu.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpspcm9ftu.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpspcm9ftu.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(c)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpspcm9ftu.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpspcm9ftu.rs:14:12\n   |\n14 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpspcm9ftu.rs:17:21\n   |\n17 |       bracket_stack.push(c)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpspcm9ftu.rs:24:23\n   |\n24 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in brackets.chars() {\n    if (i == \"(\") {\n      opening_bracket = \"(\"\n      closing_bracket = \")\"\n      bracket_stack.push(opening_bracket)\n      bracket_count += 1\n    } else if (i == \")\") {\n      opening_bracket = bracket_stack.pop()\n      if (opening_bracket != closing_bracket) {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp45vt130i.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp45vt130i.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp45vt130i.rs:14:27\n   |\n14 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp45vt130i.rs:15:27\n   |\n15 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n16 |   for i in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp45vt130i.rs:18:28\n   |\n18 |       opening_bracket = \"(\"\n   |                            ^ help: add `;` here\n19 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmp45vt130i.rs:19:28\n   |\n19 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n20 |       bracket_stack.push(opening_bracket)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp45vt130i.rs:20:42\n   |\n20 |       bracket_stack.push(opening_bracket)\n   |                                          ^ help: add `;` here\n21 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp45vt130i.rs:23:44\n   |\n23 |       opening_bracket = bracket_stack.pop()\n   |                                            ^ help: add `;` here\n24 |       if (opening_bracket != closing_bracket) {\n   |       -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp45vt130i.rs:17:8\n   |\n17 |     if (i == \"(\") {\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      bracket_stack.push(Bracket(BracketType::Open))\n    } else if bracket_stack.last().type == BracketType::Open {\n      bracket_stack.push(Bracket(BracketType::Open))\n    } else if bracket_stack.last().type == BracketType::Close {\n      bracket_stack.pop()\n    } else {\n      return false\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpq70kheqo.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `type`\n  --> /tmp/tmpq70kheqo.rs:16:36\n   |\n16 |     } else if bracket_stack.last().type == BracketType::Open {\n   |                                    ^^^^ expected identifier, found keyword\n\nerror: expected identifier, found keyword `type`\n  --> /tmp/tmpq70kheqo.rs:18:36\n   |\n18 |     } else if bracket_stack.last().type == BracketType::Close {\n   |                                    ^^^^ expected identifier, found keyword\n\nerror[E0433]: failed to resolve: use of undeclared type `BracketType`\n  --> /tmp/tmpq70kheqo.rs:15:34\n   |\n15 |       bracket_stack.push(Bracket(BracketType::Open))\n   |                                  ^^^^^^^^^^^ use of undeclared type `BracketType`\n\nerror[E0433]: failed to resolve: use of undeclared type `BracketType`\n  --> /tmp/tmpq70kheqo.rs:16:44\n   |\n16 |     } else if bracket_stack.last().type == BracketType::Open {\n   |                                            ^^^^^^^^^^^ use of undeclared type `BracketType`\n\nerror[E0433]: failed to resolve: use of undeclared type `BracketType`\n  --> /tmp/tmpq70kheqo.rs:17:34\n   |\n17 |       bracket_stack.push(Bracket(BracketType::Open))\n   |                                  ^^^^^^^^^^^ use of undeclared type `BracketType`\n\nerror[E0433]: failed to resolve: use of undeclared type `BracketType`\n  --> /tmp/tmpq70kheqo.rs:18:44\n   |\n18 |     } else if bracket_stack.last().type == BracketType::Close {\n   |                                            ^^^^^^^^^^^ use of undeclared type `BracketType`\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Bracket` in this scope\n  --> /tmp/tmpq70kheqo.rs:15:26\n   |\n15 |       bracket_stack.push(Bracket(BracketType::Open))\n   |                          ^^^^^^^ help: a local variable with a similar name exists: `brackets`\n\nerror[E0425]: ca",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      if bracket_stack.is_empty() {\n        return true\n      }\n      bracket_stack.pop()\n    } else {\n      bracket_stack.push(bracket_count)\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdofocegs.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdofocegs.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpdofocegs.rs:21:40\n   |\n21 |       bracket_stack.push(bracket_count)\n   |                                        ^ help: add `;` here\n22 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpdofocegs.rs:19:21\n   |\n19 |       bracket_stack.pop()\n   |                     ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpdofocegs.rs:21:21\n   |\n21 |       bracket_stack.push(bracket_count)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let j = bracket_stack.pop()\n      if i != j {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcauf64jy.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcauf64jy.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpcauf64jy.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpcauf64jy.rs:22:34\n   |\n22 |       let j = bracket_stack.pop()\n   |                                  ^ help: add `;` here\n23 |       if i != j {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcauf64jy.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpcauf64jy.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpcauf64jy.rs:16:21\n   |\n16 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpcauf64jy.rs:22:29\n   |\n22 |       let j = bracket_stack.pop()\n   |                             ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --exp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyzjvwauq.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyzjvwauq.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpyzjvwauq.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyzjvwauq.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyzjvwauq.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:24:23\n   |\n24 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpabim5dgl.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpabim5dgl.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:16:18\n   |\n16 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:18:25\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:16:8\n   |\n16 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"(\") {\n16 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for c in brackets {\n    if c == \"(\" {\n      bracket_count += 1\n      bracket_stack.push(c)\n    } else if c == \")\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpspcm9ftu.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpspcm9ftu.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpspcm9ftu.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(c)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpspcm9ftu.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpspcm9ftu.rs:14:12\n   |\n14 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpspcm9ftu.rs:17:21\n   |\n17 |       bracket_stack.push(c)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpspcm9ftu.rs:24:23\n   |\n24 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '(' || brackets[1] != ')') {\n        return false\n      }\n    } else {\n      if (brackets[bracket_count] != ')') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpennvr4nv.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:19:10\n   |\n19 |       if (brackets[0] != '(' || brackets[1] != ')') {\n   |          ^                                        ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '(' || brackets[1] != ')') {\n19 +       if brackets[0] != '(' || brackets[1] != ')' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpennvr4nv.rs:23:10\n   |\n23 |       if (brackets[bracket_count] != ')') {\n   |          ^                              ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[bracket_count] != ')') {\n23 +       if brackets[bracket_count] != ')' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpennvr4nv.rs:15:11\n   |\n15 |       if (brackets[0] != '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[0] == '(') {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpdpzjsczd.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:19:10\n   |\n19 |       if (brackets[0] == '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] == '(') {\n19 +       if brackets[0] == '(' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdpzjsczd.rs:15:11\n   |\n15 |       if (brackets[0] != '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdpzjsczd.rs:19:11\n   |\n19 |       if (brackets[0] == '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{intege",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == \")\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpccmrvfdk.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpccmrvfdk.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpccmrvfdk.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpccmrvfdk.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       bracket_stack.pop()\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpccmrvfdk.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpccmrvfdk.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpccmrvfdk.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpccmrvfdk.rs:23:21\n   |\n23 |       bracket_stack.pop()\n   |                     ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpio65ht46.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpio65ht46.rs:15:20\n   |\n15 |       if (brackets[i] != \"(\") {\n   |                    ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpio65ht46.rs:19:20\n   |\n19 |       if (brackets[i] != \")\") {\n   |                    ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpio65ht46.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpio65ht46.rs:15:10\n   |\n15 |       if (brackets[i] != \"(\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[i] != \"(\") {\n15 +       if brackets[i] != \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpio65ht46.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpio65ht46.rs:19:10\n   |\n19 |       if (brackets[i] != \")\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[i] != \")\") {\n19 +       if brackets[i] != \")\" {\n   | \n\nerror: aborting due to 3 previous errors; 4 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvkd_giqb.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpvkd_giqb.rs:15:20\n   |\n15 |       if (brackets[i] != \"(\") {\n   |                    ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpvkd_giqb.rs:19:20\n   |\n19 |       if (brackets[i] != \")\") {\n   |                    ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvkd_giqb.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvkd_giqb.rs:15:10\n   |\n15 |       if (brackets[i] != \"(\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[i] != \"(\") {\n15 +       if brackets[i] != \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvkd_giqb.rs:19:10\n   |\n19 |       if (brackets[i] != \")\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[i] != \")\") {\n19 +       if brackets[i] != \")\" {\n   | \n\nerror: aborting due to 3 previous errors; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_stack.push(opening_bracket)\n      bracket_count += 1\n    } else if c == \")\" {\n      if bracket_stack.empty() {\n        return false\n      }\n      opening_bracket = bracket_stack.pop()\n      if opening_bracket != closing_bracket {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzemevflr.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzemevflr.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzemevflr.rs:14:27\n   |\n14 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzemevflr.rs:15:27\n   |\n15 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n16 | \n17 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpzemevflr.rs:19:26\n   |\n19 |       opening_bracket = c\n   |                          ^ help: add `;` here\n20 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpzemevflr.rs:20:28\n   |\n20 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n21 |       bracket_stack.push(opening_bracket)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpzemevflr.rs:21:42\n   |\n21 |       bracket_stack.push(opening_bracket)\n   |                                          ^ help: add `;` here\n22 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpzemevflr.rs:27:44\n   |\n27 |       opening_bracket = bracket_stack.pop()\n   |                                            ^ help: add `;` here\n28 |       if opening_bracket != closing_bracket {\n   |       -- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpzemevflr.rs:17:12\n   |\n17 |   for c in brackets {\n   |            ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets.charAt(opening_brackets) == '(') {\n      opening_brackets += 1\n    } else if (brackets.charAt(opening_brackets) == ')') {\n      opening_brackets -= 1\n    }\n    if (brackets.charAt(closing_brackets) == '(') {\n      closing_brackets += 1\n    } else if (brackets.charAt(closing_brackets) == ')') {\n      closing_brackets -= 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgq6rczt7.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgq6rczt7.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgq6rczt7.rs:15:8\n   |\n15 |     if (brackets.charAt(opening_brackets) == '(') {\n   |        ^                                        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets.charAt(opening_brackets) == '(') {\n15 +     if brackets.charAt(opening_brackets) == '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgq6rczt7.rs:17:15\n   |\n17 |     } else if (brackets.charAt(opening_brackets) == ')') {\n   |               ^                                        ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets.charAt(opening_brackets) == ')') {\n17 +     } else if brackets.charAt(opening_brackets) == ')' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgq6rczt7.rs:20:8\n   |\n20 |     if (brackets.charAt(closing_brackets) == '(') {\n   |        ^                                        ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (brackets.charAt(closing_brackets) == '(') {\n20 +     if brackets.charAt(closing_brackets) == '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgq6rczt7.rs:22:15\n   |\n22 |     } else if (brackets.charAt(closing_brackets) == ')') {\n   |               ^                                        ^\n   |\nhelp: remove these parentheses\n   |\n22 -     } else if (brackets.charAt(closing_brackets) == ')') {\n22 +     } else if brackets.charAt(closing_brackets) == ')' {\n   | \n\nerror[E0599]: no method named `charAt` ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if (bracket_stack.is_empty()) {\n      opening_brackets += 1\n    } else {\n      if (bracket_stack.pop() == '(') {\n        opening_brackets -= 1\n      } else {\n        closing_brackets += 1\n      }\n    }\n    if (opening_brackets == 0 && closing_brackets == 0) {\n      return true\n    }\n  }\n  return false\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpscm1ryr7.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpscm1ryr7.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpscm1ryr7.rs:14:25\n   |\n14 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpscm1ryr7.rs:16:8\n   |\n16 |     if (bracket_stack.is_empty()) {\n   |        ^                        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (bracket_stack.is_empty()) {\n16 +     if bracket_stack.is_empty() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpscm1ryr7.rs:19:10\n   |\n19 |       if (bracket_stack.pop() == '(') {\n   |          ^                          ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (bracket_stack.pop() == '(') {\n19 +       if bracket_stack.pop() == '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpscm1ryr7.rs:25:8\n   |\n25 |     if (opening_brackets == 0 && closing_brackets == 0) {\n   |        ^                                              ^\n   |\nhelp: remove these parentheses\n   |\n25 -     if (opening_brackets == 0 && closing_brackets == 0) {\n25 +     if opening_brackets == 0 && closing_brackets == 0 {\n   | \n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpscm1ryr7.rs:19:25\n   |\n19 |       if (bracket_stack.pop() == '(') {\n   |                         ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 4 previous errors; 3 warnings emitted\n\nFor more information about this error, tr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyzjvwauq.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyzjvwauq.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpyzjvwauq.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyzjvwauq.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyzjvwauq.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:24:23\n   |\n24 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = []\n  let close_brackets = []\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] == \"(\" || brackets[i] == \"{\") {\n        open_brackets.push(brackets[i])\n      } else if (brackets[i] == \")\" || brackets[i] == \"}\") {\n        close_brackets.push(brackets[i])\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[i] == \")\") {\n        open_brackets.pop()\n      } else if (brackets[i] == \"}\") {\n        open_brackets.pop()\n      }\n    } else if (bracket_count == 2) {\n      if (brackets[i] == \")\") {\n        open_brackets.pop()\n      } else if (brackets[i] == \"}\") {\n        open_brackets.pop()\n      }\n    }\n    bracket_count += 1 if brackets[i] == \"(\" else -1\n  }\n  return open_brackets.length == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5o9j3vhw.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5o9j3vhw.rs:13:25\n   |\n13 |   let open_brackets = []\n   |                         ^ help: add `;` here\n14 |   let close_brackets = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5o9j3vhw.rs:14:26\n   |\n14 |   let close_brackets = []\n   |                          ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmp5o9j3vhw.rs:35:24\n   |\n35 |     bracket_count += 1 if brackets[i] == \"(\" else -1\n   |                        ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5o9j3vhw.rs:17:20\n   |\n17 |       if (brackets[i] == \"(\" || brackets[i] == \"{\") {\n   |                    ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5o9j3vhw.rs:17:42\n   |\n17 |       if (brackets[i] == \"(\" || brackets[i] == \"{\") {\n   |                                          ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5o9j3vhw.rs:18:37\n   |\n18 |         open_brackets.push(brackets[i])\n   |                                     ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5o9j3vhw.rs:19:27\n   |\n19 |       } else if (brackets[i] == \")\" || brackets[i] == \"}\") {\n   |                           ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5o9j3vhw.rs:19:49\n   |\n19 |       } else if (brackets[i] == \")\" || brackets[i] == \"}\") {\n   |                                                 ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5o9j3vhw.rs",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n    } else if c == \")\" {\n      opening_bracket = \"(\"\n      closing_bracket = c\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          return false\n        }\n      }\n    }\n    if opening_bracket != \"\" {\n      bracket_stack.push(opening_bracket)\n    }\n  }\n  if opening_bracket != \"\" {\n    return false\n  }\n  return bracket_stack.length == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwm4xaz0e.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwm4xaz0e.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwm4xaz0e.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpwm4xaz0e.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpwm4xaz0e.rs:20:28\n   |\n20 |       opening_bracket = \"(\"\n   |                            ^ help: add `;` here\n21 |       closing_bracket = c\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpwm4xaz0e.rs:28:31\n   |\n28 |           opening_bracket = \"\"\n   |                               ^ help: add `;` here\n29 |           closing_bracket = \"\"\n   |           --------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpwm4xaz0e.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpwm4xaz0e.rs:36:21\n   |\n36 |       bracket_stack.push(opening_bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpabim5dgl.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpabim5dgl.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:16:18\n   |\n16 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:18:25\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:16:8\n   |\n16 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"(\") {\n16 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpabim5dgl.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpabim5dgl.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:16:18\n   |\n16 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:18:25\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:16:8\n   |\n16 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"(\") {\n16 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpabim5dgl.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpabim5dgl.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:16:18\n   |\n16 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:18:25\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:16:8\n   |\n16 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"(\") {\n16 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      if brackets[bracket_stack.pop()] != '(' {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp6f12ygl8.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp6f12ygl8.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp6f12ygl8.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6f12ygl8.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6f12ygl8.rs:20:33\n   |\n20 |       if brackets[bracket_stack.pop()] != '(' {\n   |                                 ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      opening_bracket = brackets[i]\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if (brackets[i] == \")\") {\n      opening_bracket = \"(\"\n      closing_bracket = brackets[i]\n      bracket_count -= 1\n    }\n    if (bracket_count < 0) {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpn8vwv3et.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpn8vwv3et.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpn8vwv3et.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpn8vwv3et.rs:17:36\n   |\n17 |       opening_bracket = brackets[i]\n   |                                    ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpn8vwv3et.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpn8vwv3et.rs:21:28\n   |\n21 |       opening_bracket = \"(\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = brackets[i]\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpn8vwv3et.rs:22:36\n   |\n22 |       closing_bracket = brackets[i]\n   |                                    ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpn8vwv3et.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpn8vwv3et.rs:16:8\n   |\n1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjwoqxpi0.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjwoqxpi0.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpjwoqxpi0.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpjwoqxpi0.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpjwoqxpi0.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpjwoqxpi0.rs:21:28\n   |\n21 |       opening_bracket = \")\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = \"(\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpjwoqxpi0.rs:22:28\n   |\n22 |       closing_bracket = \"(\"\n   |                            ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpjwoqxpi0.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 8 previous errors\n\nFor more information abo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"(\" {\n      if opening_bracket == \"\") {\n        opening_bracket = c\n      } else {\n        bracket_stack.push(opening_bracket)\n        opening_bracket = c\n      }\n    } else if c == \")\" {\n      if closing_bracket == \"\") {\n        closing_bracket = c\n      } else {\n        if bracket_stack.pop() != opening_bracket {\n          return false\n        }\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      }\n    }\n  }\n  if bracket_stack.pop() != opening_bracket {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: unexpected closing delimiter: `}`\n  --> /tmp/tmpmhutpxzu.rs:36:3\n   |\n11 | fn correct_bracketing(brackets: String) -> bool {\n   |                                                 - this opening brace...\n...\n35 |     }\n   |     - ...matches this closing brace\n36 |   }\n   |   ^ unexpected closing delimiter\n\nerror: mismatched closing delimiter: `)`\n  --> /tmp/tmpmhutpxzu.rs:18:17\n   |\n18 |     if c == \"(\" {\n   |                 ^ unclosed delimiter\n19 |       if opening_bracket == \"\") {\n   |                               ^ mismatched closing delimiter\n\nerror: mismatched closing delimiter: `)`\n  --> /tmp/tmpmhutpxzu.rs:25:24\n   |\n25 |     } else if c == \")\" {\n   |                        ^ unclosed delimiter\n26 |       if closing_bracket == \"\") {\n   |                               ^ mismatched closing delimiter\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = String.fromCharCode(c)\n    } else if (bracket_count == 1) {\n      closing_bracket = String.fromCharCode(c)\n    } else if (bracket_count == 2) {\n      if (opening_bracket == \"(\" && closing_bracket == \")\") {\n        bracket_count = 0\n      } else {\n        return false\n      }\n    } else {\n      return false\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpv20g48n_.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv20g48n_.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpv20g48n_.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpv20g48n_.rs:17:25\n   |\n17 |       opening_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpv20g48n_.rs:17:45\n   |\n17 |       opening_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpv20g48n_.rs:19:25\n   |\n19 |       closing_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpv20g48n_.rs:19:45\n   |\n19 |       closing_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpv20g48n_.rs:16:8\n   |\n16 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (bracket_count == 0) {\n16 +     if bracket",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    }\n\n    if opening_bracket.is_empty() {\n      if bracket_stack.is_empty() {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      } else {\n        opening_bracket = bracket_stack.pop()\n      }\n    }\n\n    if closing_bracket.is_empty() {\n      if bracket_stack.is_empty() {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      } else {\n        closing_bracket = bracket_stack.pop()\n      }\n    }\n\n    if bracket_stack.is_empty() {\n      bracket_count += 1\n    } else {\n      bracket_count -= 1\n    }\n\n    if opening_bracket == \"(\" and closing_bracket == \")\") {\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    }\n  }\n\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: unexpected closing delimiter: `}`\n  --> /tmp/tmpv46dvixt.rs:54:1\n   |\n11 | fn correct_bracketing(brackets: String) -> bool {\n   |                                                 - this opening brace...\n...\n51 |   }\n   |   - ...matches this closing brace\n...\n54 | }\n   | ^ unexpected closing delimiter\n\nerror: mismatched closing delimiter: `)`\n  --> /tmp/tmpv46dvixt.rs:17:29\n   |\n17 |   for _ in brackets.chars() {\n   |                             ^ unclosed delimiter\n...\n47 |     if opening_bracket == \"(\" and closing_bracket == \")\") {\n   |                                                         ^ mismatched closing delimiter\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n      bracket_count += 1\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp59jt1rkp.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp59jt1rkp.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp59jt1rkp.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp59jt1rkp.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp59jt1rkp.rs:18:28\n   |\n18 |       closing_bracket = \")\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp59jt1rkp.rs:21:28\n   |\n21 |       opening_bracket = \")\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = \"(\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp59jt1rkp.rs:22:28\n   |\n22 |       closing_bracket = \"(\"\n   |                            ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror: `and` is not a logical operator\n  --> /tmp/tmp59jt1rkp.rs:26:29\n   |\n26 |   return bracket_count == 0 and opening_bracket == closing_bracket\n   |                             ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp59jt1rkp.rs:15:12\n   |\n15 |   for c in brac",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = String.fromChar(c)\n    } else if (bracket_count == 1) {\n      closing_bracket = String.fromChar(c)\n    } else if (c == '(') {\n      bracket_count += 1\n    } else if (c == ')') {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq1ee5u6s.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1ee5u6s.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq1ee5u6s.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpq1ee5u6s.rs:17:25\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpq1ee5u6s.rs:17:41\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpq1ee5u6s.rs:19:25\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpq1ee5u6s.rs:19:41\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpq1ee5u6s.rs:20:16\n   |\n20 |     } else if (c == '(') {\n   |                ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpq1ee5u6s.rs:22:16\n   |\n22 |     } else if (c == ')') {\n   |                ^ not found in this scope\n\nwarning: unn",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"(\" {\n      bracket_stack.push(bracket)\n    } else if bracket == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"(\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp8krnpcsj.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp8krnpcsj.rs:14:30\n   |\n14 |     let bracket = brackets[i]\n   |                              ^ help: add `;` here\n15 |     if bracket == \"(\" {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8krnpcsj.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp8krnpcsj.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8krnpcsj.rs:16:21\n   |\n16 |       bracket_stack.push(bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8krnpcsj.rs:20:31\n   |\n20 |       } else if bracket_stack.pop() != \"(\" {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == '(') {\n      bracket_stack.push(brackets[i])\n      bracket_count += 1\n    } else if (brackets[i] == ')') {\n      if (bracket_stack.length == 0) {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if (last_bracket != '(') {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n\n  return bracket_stack.length == 0 && bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9zcgc_lh.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9zcgc_lh.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 | \n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp9zcgc_lh.rs:17:38\n   |\n17 |       bracket_stack.push(brackets[i])\n   |                                      ^ help: add `;` here\n18 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp9zcgc_lh.rs:23:45\n   |\n23 |       let last_bracket = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n24 |       if (last_bracket != '(') {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp9zcgc_lh.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9zcgc_lh.rs:16:8\n   |\n16 |     if (brackets[i] == '(') {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == '(') {\n16 +     if brackets[i] == '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9zcgc_lh.rs:19:15\n   |\n19 |     } else if (brackets[i] == ')') {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -     } else if (brackets[i] == ')') {\n19 +     } else if brackets[i] == ')' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9zcgc_lh.rs:20:10\n   |\n20 |       if (bracket_stack.length == 0) {\n   |          ^                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromCharCode(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromCharCode(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqo2e3znd.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqo2e3znd.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqo2e3znd.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpqo2e3znd.rs:17:25\n   |\n17 |       opening_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpqo2e3znd.rs:17:45\n   |\n17 |       opening_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpqo2e3znd.rs:19:25\n   |\n19 |       closing_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpqo2e3znd.rs:19:45\n   |\n19 |       closing_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpqo2e3znd.rs:20:15\n   |\n20 |     } else if c == '(' {\n   |               ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpqo2e3znd.rs:22:15\n   |\n22 |     } else if c == ')' {\n   |               ^ not",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpabim5dgl.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpabim5dgl.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:16:18\n   |\n16 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpabim5dgl.rs:18:25\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:16:8\n   |\n16 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"(\") {\n16 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpabim5dgl.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyzjvwauq.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyzjvwauq.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpyzjvwauq.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyzjvwauq.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyzjvwauq.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:24:23\n   |\n24 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      } else if bracket_count == 1 {\n        bracket_count -= 1\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2a2xgwbi.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2a2xgwbi.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmp2a2xgwbi.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmp2a2xgwbi.rs:22:27\n   |\n22 |         bracket_count -= 1\n   |                           ^ help: add `;` here\n23 |         bracket_stack.pop()\n   |         ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp2a2xgwbi.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp2a2xgwbi.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp2a2xgwbi.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp2a2xgwbi.rs:23:23\n   |\n23 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --expla",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"(\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \")\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy0lvpkqd.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy0lvpkqd.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:15:18\n   |\n15 |     if (brackets[i] == \"(\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpy0lvpkqd.rs:17:25\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy0lvpkqd.rs:17:15\n   |\n17 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \")\") {\n17 +     } else if brackets[i] == \")\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyzjvwauq.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyzjvwauq.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpyzjvwauq.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyzjvwauq.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyzjvwauq.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:24:23\n   |\n24 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == '(') {\n      opening_brackets += 1\n    } else if (brackets[i] == ')') {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbeue_8nk.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpbeue_8nk.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpbeue_8nk.rs:15:18\n   |\n15 |     if (brackets[i] == '(') {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpbeue_8nk.rs:17:25\n   |\n17 |     } else if (brackets[i] == ')') {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbeue_8nk.rs:15:8\n   |\n15 |     if (brackets[i] == '(') {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == '(') {\n15 +     if brackets[i] == '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbeue_8nk.rs:17:15\n   |\n17 |     } else if (brackets[i] == ')') {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == ')') {\n17 +     } else if brackets[i] == ')' {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \")\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      if (bracket_count == 0) {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8clr70bu.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8clr70bu.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmp8clr70bu.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp8clr70bu.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if (bracket_count == 0) {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8clr70bu.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8clr70bu.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8clr70bu.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8clr70bu.rs:19:10\n   |\n19 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (bracket_count == 0) ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let opening_bracket = bracket_stack.pop()\n      if opening_bracket != i - 1 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxooixba8.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxooixba8.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpxooixba8.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpxooixba8.rs:22:48\n   |\n22 |       let opening_bracket = bracket_stack.pop()\n   |                                                ^ help: add `;` here\n23 |       if opening_bracket != i - 1 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpxooixba8.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpxooixba8.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpxooixba8.rs:16:21\n   |\n16 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpxooixba8.rs:22:43\n   |\n22 |       let opening_bracket = bracket_stack.pop()\n   |                                           ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explana",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let opening_bracket = bracket_stack.pop()\n      if opening_bracket != i - 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpw1dcij85.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpw1dcij85.rs:20:48\n   |\n20 |       let opening_bracket = bracket_stack.pop()\n   |                                                ^ help: add `;` here\n21 |       if opening_bracket != i - 1 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpw1dcij85.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpw1dcij85.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpw1dcij85.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpw1dcij85.rs:20:43\n   |\n20 |       let opening_bracket = bracket_stack.pop()\n   |                                           ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"(\" {\n      bracket_stack.push(bracket)\n      bracket_count += 1\n    } else if bracket == \")\" {\n      if bracket_stack.empty() {\n        return false\n      } else if bracket_stack.pop() != \"(\" {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8n5kailg.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8n5kailg.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp8n5kailg.rs:15:30\n   |\n15 |     let bracket = brackets[i]\n   |                              ^ help: add `;` here\n16 |     if bracket == \"(\" {\n   |     -- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp8n5kailg.rs:17:34\n   |\n17 |       bracket_stack.push(bracket)\n   |                                  ^ help: add `;` here\n18 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8n5kailg.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp8n5kailg.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8n5kailg.rs:17:21\n   |\n17 |       bracket_stack.push(bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `empty` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8n5kailg.rs:20:24\n   |\n20 |       if bracket_stack.empty() {\n   |                        ^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let opening_bracket = bracket_stack.pop()\n      if opening_bracket != i - 1 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n\n  if bracket_stack.is_empty() {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu9va989o.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu9va989o.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 | \n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpu9va989o.rs:17:28\n   |\n17 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n18 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpu9va989o.rs:23:48\n   |\n23 |       let opening_bracket = bracket_stack.pop()\n   |                                                ^ help: add `;` here\n24 |       if opening_bracket != i - 1 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpu9va989o.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpu9va989o.rs:15:30\n   |\n15 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpu9va989o.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpu9va989o.rs:23:43\n   |\n23 |       let opening_bracket = bracket_stack.pop()\n   |                                           ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpnf_spjsf.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpnf_spjsf.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpnf_spjsf.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpnf_spjsf.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpnf_spjsf.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpw4tk81qr.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpw4tk81qr.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpw4tk81qr.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpw4tk81qr.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpw4tk81qr.rs:19:31\n   |\n19 |       } else if bracket_stack.pop() != i - 1 {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == ')' {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxafrye0w.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxafrye0w.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpxafrye0w.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpxafrye0w.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpxafrye0w.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpxafrye0w.rs:16:21\n   |\n16 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpxafrye0w.rs:21:31\n   |\n21 |       } else if bracket_stack.pop() != i - 1 {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          opening_bracket = \"\"\n        }\n      }\n    }\n    if opening_bracket != \"\" {\n      bracket_stack.push(opening_bracket)\n    }\n  }\n  return bracket_stack.length == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph0_oi5oh.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph0_oi5oh.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph0_oi5oh.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmph0_oi5oh.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmph0_oi5oh.rs:20:28\n   |\n20 |       opening_bracket = \")\"\n   |                            ^ help: add `;` here\n21 |       closing_bracket = \"(\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmph0_oi5oh.rs:28:31\n   |\n28 |           opening_bracket = \"\"\n   |                               ^ help: add `;` here\n29 |           closing_bracket = \"\"\n   |           --------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmph0_oi5oh.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmph0_oi5oh.rs:36:21\n   |\n36 |       bracket_stack.push(opening_bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '(' {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == ')' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyzjvwauq.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyzjvwauq.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpyzjvwauq.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyzjvwauq.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyzjvwauq.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyzjvwauq.rs:24:23\n   |\n24 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"(\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \")\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      if (bracket_count == 0) {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8clr70bu.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8clr70bu.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmp8clr70bu.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp8clr70bu.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if (bracket_count == 0) {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp8clr70bu.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8clr70bu.rs:15:8\n   |\n15 |     if (brackets[i] == \"(\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"(\") {\n15 +     if brackets[i] == \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8clr70bu.rs:18:15\n   |\n18 |     } else if (brackets[i] == \")\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \")\") {\n18 +     } else if brackets[i] == \")\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8clr70bu.rs:19:10\n   |\n19 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (bracket_count == 0) ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphxu7ip6f.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:17:25\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:17:41\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:19:25\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:19:41\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:20:15\n   |\n20 |     } else if c == '(' {\n   |               ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:22:15\n   |\n22 |     } else if c == ')' {\n   |               ^ not found in this scope\n\nerror: aborting du",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphxu7ip6f.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:17:25\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:17:41\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:19:25\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:19:41\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:20:15\n   |\n20 |     } else if c == '(' {\n   |               ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:22:15\n   |\n22 |     } else if c == ')' {\n   |               ^ not found in this scope\n\nerror: aborting du",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      if _ == '(' {\n        bracket_count += 1\n      } else {\n        return false\n      }\n    } else {\n      if _ == ')' {\n        bracket_count -= 1\n      } else {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpw855ytbt.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpw855ytbt.rs:15:10\n   |\n15 |       if _ == '(' {\n   |          ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpw855ytbt.rs:21:10\n   |\n21 |       if _ == ')' {\n   |          ^ `_` not allowed here\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"(\" {\n      opening_bracket = c\n      closing_bracket = \")\"\n    } else if c == \")\" {\n      opening_bracket = \")\"\n      closing_bracket = \"(\"\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          return false\n        }\n      }\n    }\n    if c == \"(\" {\n      bracket_stack.push(c)\n    } else if c == \")\" {\n      if bracket_stack.pop() != \"(\" {\n        return false\n      }\n    }\n  }\n  if bracket_stack.length() != 0 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpiluok66s.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpiluok66s.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpiluok66s.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpiluok66s.rs:16:24\n   |\n16 |     let c = brackets[i]\n   |                        ^ help: add `;` here\n17 |     if c == \"(\" {\n   |     -- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpiluok66s.rs:18:26\n   |\n18 |       opening_bracket = c\n   |                          ^ help: add `;` here\n19 |       closing_bracket = \")\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpiluok66s.rs:21:28\n   |\n21 |       opening_bracket = \")\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = \"(\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpiluok66s.rs:29:31\n   |\n29 |           opening_bracket = \"\"\n   |                               ^ help: add `;` here\n30 |           closing_bracket = \"\"\n   |           --------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpiluok66s.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpiluok66s.rs:15:30\n   |\n15 |   for i in range(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '(') {\n        return false\n      }\n    } else {\n      if (brackets[0] == '(') {\n        bracket_count -= 1\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpdpzjsczd.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:15:10\n   |\n15 |       if (brackets[0] != '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '(') {\n15 +       if brackets[0] != '(' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdpzjsczd.rs:19:10\n   |\n19 |       if (brackets[0] == '(') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] == '(') {\n19 +       if brackets[0] == '(' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdpzjsczd.rs:15:11\n   |\n15 |       if (brackets[0] != '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdpzjsczd.rs:19:11\n   |\n19 |       if (brackets[0] == '(') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{intege",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \")\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        let last_index = bracket_stack.pop()\n        if brackets[last_index] != \"(\":\n          return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp81tm4q14.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp81tm4q14.rs:20:45\n   |\n20 |         let last_index = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n21 |         if brackets[last_index] != \"(\":\n   |         -- unexpected token\n\nerror: expected identifier, found keyword `return`\n  --> /tmp/tmp81tm4q14.rs:22:11\n   |\n22 |           return false\n   |           ^^^^^^ expected identifier, found keyword\n\nerror: expected type, found keyword `return`\n  --> /tmp/tmp81tm4q14.rs:22:11\n   |\n21 |         if brackets[last_index] != \"(\":\n   |                                       - help: try using a semicolon: `;`\n22 |           return false\n   |           ^^^^^^ expected type\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp81tm4q14.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp81tm4q14.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp81tm4q14.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp81tm4q14.rs:20:40\n   |\n20 |         let last_index = bracket_stack.pop()\n   |                                        ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"(\" {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if brackets[i] == \")\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      bracket_stack.pop()\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpccmrvfdk.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpccmrvfdk.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpccmrvfdk.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpccmrvfdk.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       bracket_stack.pop()\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpccmrvfdk.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpccmrvfdk.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpccmrvfdk.rs:17:21\n   |\n17 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpccmrvfdk.rs:23:21\n   |\n23 |       bracket_stack.pop()\n   |                     ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[i] != \"(\") {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[i] != \")\") {\n        return false\n      }\n    } else if (bracket_count > 1) {\n      return false\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp8338y_ck.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8338y_ck.rs:15:20\n   |\n15 |       if (brackets[i] != \"(\") {\n   |                    ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8338y_ck.rs:19:20\n   |\n19 |       if (brackets[i] != \")\") {\n   |                    ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8338y_ck.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8338y_ck.rs:15:10\n   |\n15 |       if (brackets[i] != \"(\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[i] != \"(\") {\n15 +       if brackets[i] != \"(\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8338y_ck.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8338y_ck.rs:19:10\n   |\n19 |       if (brackets[i] != \")\") {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[i] != \")\") {\n19 +       if brackets[i] != \")\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8338y_ck.rs:22:15\n   |\n22 |     } else if (bracket_count > 1) {\n   |               ^                 ^\n   |\nhelp: remove these parentheses\n   |\n22 -     } else if (bracket_count > 1) {\n22 +     } else if bracket_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack: List[String] = []\n  let open_brackets: List[String] = []\n  for _ in brackets.split(\"\") {\n    if (bracket_stack.isEmpty()) {\n      open_brackets.append(brackets.charAt(0))\n    } else {\n      if (bracket_stack.last() == \"(\" && brackets.charAt(0) == \")\") {\n        bracket_stack.pop()\n      } else {\n        bracket_stack.append(brackets.charAt(0))\n      }\n    }\n  }\n  return open_brackets.isEmpty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n  --> /tmp/tmp72fmegka.rs:12:26\n   |\n12 |   let bracket_stack: List[String] = []\n   |                          ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = 0\n  let close_brackets = 0\n\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      open_brackets += 1\n    } else if (bracket_count == 1) {\n      close_brackets += 1\n    }\n    bracket_count += 1\n  }\n\n  return open_brackets == close_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyhm6apde.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpyhm6apde.rs:13:24\n   |\n13 |   let open_brackets = 0\n   |                        ^ help: add `;` here\n14 |   let close_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyhm6apde.rs:14:25\n   |\n14 |   let close_brackets = 0\n   |                         ^ help: add `;` here\n15 | \n16 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyhm6apde.rs:17:8\n   |\n17 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (bracket_count == 0) {\n17 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyhm6apde.rs:19:15\n   |\n19 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -     } else if (bracket_count == 1) {\n19 +     } else if bracket_count == 1 {\n   | \n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket_index = 0\n  let close_bracket_index = 0\n\n  for i in range(0, brackets.length) {\n    if brackets[i] == \"(\" {\n      bracket_count += 1\n      open_bracket_index = i\n    } else if brackets[i] == \")\" {\n      bracket_count -= 1\n      close_bracket_index = i\n    }\n  }\n\n  return bracket_count == 0 && open_bracket_index == close_bracket_index\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmfz2w0ka.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmfz2w0ka.rs:13:29\n   |\n13 |   let open_bracket_index = 0\n   |                             ^ help: add `;` here\n14 |   let close_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmfz2w0ka.rs:14:30\n   |\n14 |   let close_bracket_index = 0\n   |                              ^ help: add `;` here\n15 | \n16 |   for i in range(0, brackets.length) {\n   |   --- unexpected token\n\nerror: expected `;`, found `open_bracket_index`\n  --> /tmp/tmpmfz2w0ka.rs:18:25\n   |\n18 |       bracket_count += 1\n   |                         ^ help: add `;` here\n19 |       open_bracket_index = i\n   |       ------------------ unexpected token\n\nerror: expected `;`, found `close_bracket_index`\n  --> /tmp/tmpmfz2w0ka.rs:21:25\n   |\n21 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n22 |       close_bracket_index = i\n   |       ------------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpmfz2w0ka.rs:16:12\n   |\n16 |   for i in range(0, brackets.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpmfz2w0ka.rs:16:30\n   |\n16 |   for i in range(0, brackets.length) {\n   |                              ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmfz2w0ka.rs:17:8\n   |\n17 |     if brackets[i] == \"(\" {\n   |        ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if opening_brackets == 0 {\n      opening_bracket = String.fromCharCode(c)\n    } else if closing_brackets == 0 {\n      closing_bracket = String.fromCharCode(c)\n    } else if opening_bracket == closing_bracket {\n      opening_brackets -= 1\n      closing_brackets -= 1\n    } else {\n      opening_brackets += 1\n    }\n  }\n  return opening_brackets == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgiilk40d.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgiilk40d.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgiilk40d.rs:14:27\n   |\n14 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgiilk40d.rs:15:27\n   |\n15 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n16 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_brackets`\n  --> /tmp/tmpgiilk40d.rs:22:28\n   |\n22 |       opening_brackets -= 1\n   |                            ^ help: add `;` here\n23 |       closing_brackets -= 1\n   |       ---------------- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpgiilk40d.rs:18:25\n   |\n18 |       opening_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpgiilk40d.rs:18:45\n   |\n18 |       opening_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpgiilk40d.rs:20:25\n   |\n20 |       closing_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in thi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromChar(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromChar(c)\n    } else if c == '(' {\n      bracket_count += 1\n    } else if c == ')' {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphxu7ip6f.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphxu7ip6f.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:17:25\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:17:41\n   |\n17 |       opening_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmphxu7ip6f.rs:19:25\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                         ^^^^^^---------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromChar`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:19:41\n   |\n19 |       closing_bracket = String.fromChar(c)\n   |                                         ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:20:15\n   |\n20 |     } else if c == '(' {\n   |               ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmphxu7ip6f.rs:22:15\n   |\n22 |     } else if c == ')' {\n   |               ^ not found in this scope\n\nerror: aborting du",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"(\"))\n/// false\n/// >>> correct_bracketing(String::from(\"()\"))\n/// true\n/// >>> correct_bracketing(String::from(\"(()())\"))\n/// true\n/// >>> correct_bracketing(String::from(\")(()\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"(\") {\n      bracket_stack.push(bracket)\n      bracket_count += 1\n    } else if bracket == \")\") {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let top_bracket = bracket_stack.pop()\n      if top_bracket != \"(\") {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"()\")), true);\n    assert_eq!(candidate(String::from(\"(()())\")), true);\n    assert_eq!(candidate(String::from(\"()()(()())()\")), true);\n    assert_eq!(candidate(String::from(\"()()((()()())())(()()(()))\")), true);\n    assert_eq!(candidate(String::from(\"((()())))\")), false);\n    assert_eq!(candidate(String::from(\")(()\")), false);\n    assert_eq!(candidate(String::from(\"(\")), false);\n    assert_eq!(candidate(String::from(\"((((\")), false);\n    assert_eq!(candidate(String::from(\")\")), false);\n    assert_eq!(candidate(String::from(\"(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())())(()\")), false);\n    assert_eq!(candidate(String::from(\"()()(()())()))()\")), false);\n}\n",
      "timestamp": 1664292473,
      "stdout": "",
      "stderr": "error: unexpected closing delimiter: `}`\n  --> /tmp/tmp9io_yc8b.rs:28:5\n   |\n24 |       if top_bracket != \"(\") {\n   |                              - this opening brace...\n25 |         return false\n26 |       }\n   |       - ...matches this closing brace\n27 |       bracket_count -= 1\n28 |     }\n   |     ^ unexpected closing delimiter\n\nerror: mismatched closing delimiter: `)`\n  --> /tmp/tmp9io_yc8b.rs:14:40\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                                        ^ unclosed delimiter\n15 |     let bracket = brackets[i]\n16 |     if bracket == \"(\") {\n   |                      ^ mismatched closing delimiter\n\nerror: mismatched closing delimiter: `)`\n  --> /tmp/tmp9io_yc8b.rs:11:49\n   |\n11 | fn correct_bracketing(brackets: String) -> bool {\n   |                                                 ^ unclosed delimiter\n...\n19 |     } else if bracket == \")\") {\n   |                             ^ mismatched closing delimiter\n\nerror: mismatched closing delimiter: `)`\n  --> /tmp/tmp9io_yc8b.rs:19:31\n   |\n19 |     } else if bracket == \")\") {\n   |                               ^ unclosed delimiter\n...\n24 |       if top_bracket != \"(\") {\n   |                            ^ mismatched closing delimiter\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}