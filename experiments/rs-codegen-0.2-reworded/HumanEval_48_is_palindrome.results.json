{
  "name": "HumanEval_48_is_palindrome",
  "language": "rs",
  "prompt": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n",
  "tests": "}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() < 2 {\n    return true\n  }\n\n  for i in range(0, text.length() - 1) {\n    if text[i] != text[text.length() - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmppqbcd4mb.rs:15:12\n   |\n15 |   for i in range(0, text.length() - 1) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmppqbcd4mb.rs:11:11\n   |\n11 |   if text.length() < 2 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmppqbcd4mb.rs:15:26\n   |\n15 |   for i in range(0, text.length() - 1) {\n   |                          ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmppqbcd4mb.rs:16:29\n   |\n16 |     if text[i] != text[text.length() - 1 - i] {\n   |                             ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n  let half_text = text.slice(0, half_length)\n  let reversed_half_text = reverse(half_text)\n  return half_text === reversed_half_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph95t1igo.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph95t1igo.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 |   let half_text = text.slice(0, half_length)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph95t1igo.rs:13:45\n   |\n13 |   let half_text = text.slice(0, half_length)\n   |                                             ^ help: add `;` here\n14 |   let reversed_half_text = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmph95t1igo.rs:14:46\n   |\n14 |   let reversed_half_text = reverse(half_text)\n   |                                              ^ help: add `;` here\n15 |   return half_text === reversed_half_text\n   |   ------ unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmph95t1igo.rs:15:20\n   |\n15 |   return half_text === reversed_half_text\n   |                    ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmph95t1igo.rs:14:28\n   |\n14 |   let reversed_half_text = reverse(half_text)\n   |                            ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmph95t1igo.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmph95t1igo.rs:13:24\n   |\n13 |   let half_text = text.slice(0, half_length)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor mor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgplwrcn.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptgplwrcn.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmptgplwrcn.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmptgplwrcn.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in range(0, half_length) {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdxgzp_e8.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdxgzp_e8.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in range(0, half_length) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpdxgzp_e8.rs:14:12\n   |\n14 |   for i in range(0, half_length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpdxgzp_e8.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in range(0, half_length) {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdxgzp_e8.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdxgzp_e8.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in range(0, half_length) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpdxgzp_e8.rs:14:12\n   |\n14 |   for i in range(0, half_length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpdxgzp_e8.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length() < 2) {\n    return true\n  }\n\n  for (i = 0; i < text.length() / 2; i++) {\n    if (text[i] != text[text.length() - i - 1]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpzdrtkt6n.rs:15:10\n   |\n15 |   for (i = 0; i < text.length() / 2; i++) {\n   |          ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpzdrtkt6n.rs:15:9\n   |\n15 |   for (i = 0; i < text.length() / 2; i++) {\n   |         ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpzdrtkt6n.rs:15:10\n   |\n15 |   for (i = 0; i < text.length() / 2; i++) {\n   |          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzdrtkt6n.rs:11:6\n   |\n11 |   if (text.length() < 2) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length() < 2) {\n11 +   if text.length() < 2 {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpzdrtkt6n.rs:11:12\n   |\n11 |   if (text.length() < 2) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n    let text_len = text.length\n    let half_len = text_len / 2\n    for i in 0..half_len {\n        if text[i] != text[text_len - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxs4qyfxl.rs:11:31\n   |\n11 |     let text_len = text.length\n   |                               ^ help: add `;` here\n12 |     let half_len = text_len / 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxs4qyfxl.rs:12:32\n   |\n12 |     let half_len = text_len / 2\n   |                                ^ help: add `;` here\n13 |     for i in 0..half_len {\n   |     --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpxs4qyfxl.rs:11:25\n   |\n11 |     let text_len = text.length\n   |                         ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpxs4qyfxl.rs:14:12\n   |\n14 |         if text[i] != text[text_len - i - 1] {\n   |            ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in range(0, half_length) {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdxgzp_e8.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdxgzp_e8.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in range(0, half_length) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpdxgzp_e8.rs:14:12\n   |\n14 |   for i in range(0, half_length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpdxgzp_e8.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let reversed_half_text = reverse(half_text)\n  return half_text === reversed_half_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpef5ni6b7.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpef5ni6b7.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpef5ni6b7.rs:16:42\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n17 |   let reversed_half_text = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpef5ni6b7.rs:17:46\n   |\n17 |   let reversed_half_text = reverse(half_text)\n   |                                              ^ help: add `;` here\n18 |   return half_text === reversed_half_text\n   |   ------ unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpef5ni6b7.rs:18:20\n   |\n18 |   return half_text === reversed_half_text\n   |                    ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpef5ni6b7.rs:17:28\n   |\n17 |   let reversed_half_text = reverse(half_text)\n   |                            ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpef5ni6b7.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpef5ni6b7.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E04",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let half_text_rev = reverse(half_text)\n\n  return half_text === half_text_rev\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmp93czs95g.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp93czs95g.rs:16:30\n   |\n16 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n17 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp93czs95g.rs:17:42\n   |\n17 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n18 |   let half_text_rev = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp93czs95g.rs:18:41\n   |\n18 |   let half_text_rev = reverse(half_text)\n   |                                         ^ help: add `;` here\n19 | \n20 |   return half_text === half_text_rev\n   |   ------ unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmp93czs95g.rs:20:20\n   |\n20 |   return half_text === half_text_rev\n   |                    ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp93czs95g.rs:18:23\n   |\n18 |   let half_text_rev = reverse(half_text)\n   |                       ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp93czs95g.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmp93czs95g.rs:17:24\n   |\n17 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n    let text_length = text.length\n    let half_length = text_length / 2\n    let i = 0\n    let j = half_length - 1\n    while (i < half_length) {\n        if (text[i] != text[j]) {\n            return false\n        }\n        i += 1\n        j -= 1\n    }\n    return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp69flw_p0.rs:11:34\n   |\n11 |     let text_length = text.length\n   |                                  ^ help: add `;` here\n12 |     let half_length = text_length / 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp69flw_p0.rs:12:38\n   |\n12 |     let half_length = text_length / 2\n   |                                      ^ help: add `;` here\n13 |     let i = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp69flw_p0.rs:13:14\n   |\n13 |     let i = 0\n   |              ^ help: add `;` here\n14 |     let j = half_length - 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp69flw_p0.rs:14:28\n   |\n14 |     let j = half_length - 1\n   |                            ^ help: add `;` here\n15 |     while (i < half_length) {\n   |     ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmp69flw_p0.rs:19:15\n   |\n19 |         i += 1\n   |               ^ help: add `;` here\n20 |         j -= 1\n   |         - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp69flw_p0.rs:15:11\n   |\n15 |     while (i < half_length) {\n   |           ^               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     while (i < half_length) {\n15 +     while i < half_length {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp69flw_p0.rs:16:12\n   |\n16 |         if (text[i] != text[j]) {\n   |            ^                  ^\n   |\nhelp: remove these parentheses\n   |\n16 -         if (text[i] != text[j]) {\n16 +         if text[i] != text[j] {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp69flw_p0.rs:11:28\n   |\n11 |     let text_length = text.length\n   |                            ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp69flw_p0.rs:16:13\n   |\n16 |         if (text[i] != text[j]) {\n   |    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length <= 1 {\n    return true\n  }\n\n  for i in range(0, text.length - 1) {\n    if text[i] != text[text.length - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpxpid7mf0.rs:15:12\n   |\n15 |   for i in range(0, text.length - 1) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpxpid7mf0.rs:11:11\n   |\n11 |   if text.length <= 1 {\n   |           ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpxpid7mf0.rs:15:26\n   |\n15 |   for i in range(0, text.length - 1) {\n   |                          ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpxpid7mf0.rs:16:29\n   |\n16 |     if text[i] != text[text.length - 1 - i] {\n   |                             ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse();\n  return text == reversed;\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpd0l8o2fj.rs:11:23\n   |\n11 |   let reversed = text.reverse();\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length <= 1 {\n    return true\n  }\n\n  for i in 0..text.length - 1 {\n    if text[i] != text[text.length - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `String`\n  --> /tmp/tmp3mc9ul55.rs:11:11\n   |\n11 |   if text.length <= 1 {\n   |           ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp3mc9ul55.rs:15:20\n   |\n15 |   for i in 0..text.length - 1 {\n   |                    ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp3mc9ul55.rs:16:8\n   |\n16 |     if text[i] != text[text.length - 1 - i] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp3mc9ul55.rs:16:29\n   |\n16 |     if text[i] != text[text.length - 1 - i] {\n   |                             ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length < 2 {\n    return true\n  }\n\n  for i in range(0, text.length - 1) {\n    if text[i] != text[text.length - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpnxwtu5wm.rs:15:12\n   |\n15 |   for i in range(0, text.length - 1) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpnxwtu5wm.rs:11:11\n   |\n11 |   if text.length < 2 {\n   |           ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpnxwtu5wm.rs:15:26\n   |\n15 |   for i in range(0, text.length - 1) {\n   |                          ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpnxwtu5wm.rs:16:29\n   |\n16 |     if text[i] != text[text.length - 1 - i] {\n   |                             ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length == 0) {\n    return true\n  }\n  let i = 0\n  let j = text.length - 1\n  while (i < j) {\n    if (text[i] != text[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmbln6ok5.rs:14:12\n   |\n14 |   let i = 0\n   |            ^ help: add `;` here\n15 |   let j = text.length - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpmbln6ok5.rs:15:26\n   |\n15 |   let j = text.length - 1\n   |                          ^ help: add `;` here\n16 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpmbln6ok5.rs:20:11\n   |\n20 |     i += 1\n   |           ^ help: add `;` here\n21 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmbln6ok5.rs:11:6\n   |\n11 |   if (text.length == 0) {\n   |      ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length == 0) {\n11 +   if text.length == 0 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpmbln6ok5.rs:16:9\n   |\n16 |   while (i < j) {\n   |         ^     ^\n   |\nhelp: remove these parentheses\n   |\n16 -   while (i < j) {\n16 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmbln6ok5.rs:17:8\n   |\n17 |     if (text[i] != text[j]) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     if (text[i] != text[j]) {\n17 +     if text[i] != text[j] {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpmbln6ok5.rs:11:12\n   |\n11 |   if (text.length == 0) {\n   |            ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpmbln6ok5.rs:15:16\n   |\n15 |   let j = text.length - 1\n   |                ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbln6ok5.rs:17:9\n   |\n17 |     if (text[i] != text[j]) {\n   |         ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() < 2 {\n    return true\n  }\n  let i = 0\n  let j = text.length() - 1\n  while (i < j) {\n    if (text[i] != text[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppbjt38ox.rs:14:12\n   |\n14 |   let i = 0\n   |            ^ help: add `;` here\n15 |   let j = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmppbjt38ox.rs:15:28\n   |\n15 |   let j = text.length() - 1\n   |                            ^ help: add `;` here\n16 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmppbjt38ox.rs:20:11\n   |\n20 |     i += 1\n   |           ^ help: add `;` here\n21 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmppbjt38ox.rs:16:9\n   |\n16 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -   while (i < j) {\n16 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmppbjt38ox.rs:17:8\n   |\n17 |     if (text[i] != text[j]) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     if (text[i] != text[j]) {\n17 +     if text[i] != text[j] {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmppbjt38ox.rs:11:11\n   |\n11 |   if text.length() < 2 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmppbjt38ox.rs:15:16\n   |\n15 |   let j = text.length() - 1\n   |                ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmppbjt38ox.rs:17:9\n   |\n17 |     if (text[i] != text[j]) {\n   |         ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<Ra",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  if text_length <= 1 {\n    return true\n  }\n  let half_length = text_length / 2\n  let half_text = text.slice(0, half_length)\n  let reversed_text = half_text.reverse()\n  return half_text === reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpx0oj7j_w.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   if text_length <= 1 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0oj7j_w.rs:15:36\n   |\n15 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_length)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0oj7j_w.rs:16:45\n   |\n16 |   let half_text = text.slice(0, half_length)\n   |                                             ^ help: add `;` here\n17 |   let reversed_text = half_text.reverse()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpx0oj7j_w.rs:17:42\n   |\n17 |   let reversed_text = half_text.reverse()\n   |                                          ^ help: add `;` here\n18 |   return half_text === reversed_text\n   |   ------ unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpx0oj7j_w.rs:18:20\n   |\n18 |   return half_text === reversed_text\n   |                    ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpx0oj7j_w.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpx0oj7j_w.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_length)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length == 0) {\n    return true\n  }\n\n  for (i = 0; i < text.length / 2; i++) {\n    if (text[i] != text[text.length - i - 1]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmprnoa8cwd.rs:15:10\n   |\n15 |   for (i = 0; i < text.length / 2; i++) {\n   |          ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmprnoa8cwd.rs:15:9\n   |\n15 |   for (i = 0; i < text.length / 2; i++) {\n   |         ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmprnoa8cwd.rs:15:10\n   |\n15 |   for (i = 0; i < text.length / 2; i++) {\n   |          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprnoa8cwd.rs:11:6\n   |\n11 |   if (text.length == 0) {\n   |      ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length == 0) {\n11 +   if text.length == 0 {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmprnoa8cwd.rs:11:12\n   |\n11 |   if (text.length == 0) {\n   |            ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n    let len = text.length\n    let i = 0\n    let j = len - 1\n\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false\n        }\n        i += 1\n        j -= 1\n    }\n\n    return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpci_a0622.rs:11:26\n   |\n11 |     let len = text.length\n   |                          ^ help: add `;` here\n12 |     let i = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpci_a0622.rs:12:14\n   |\n12 |     let i = 0\n   |              ^ help: add `;` here\n13 |     let j = len - 1\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpci_a0622.rs:13:20\n   |\n13 |     let j = len - 1\n   |                    ^ help: add `;` here\n14 | \n15 |     while (i < j) {\n   |     ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpci_a0622.rs:19:15\n   |\n19 |         i += 1\n   |               ^ help: add `;` here\n20 |         j -= 1\n   |         - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpci_a0622.rs:15:11\n   |\n15 |     while (i < j) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     while (i < j) {\n15 +     while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpci_a0622.rs:16:12\n   |\n16 |         if (text[i] != text[j]) {\n   |            ^                  ^\n   |\nhelp: remove these parentheses\n   |\n16 -         if (text[i] != text[j]) {\n16 +         if text[i] != text[j] {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpci_a0622.rs:11:20\n   |\n11 |     let len = text.length\n   |                    ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpci_a0622.rs:16:13\n   |\n16 |         if (text[i] != text[j]) {\n   |             ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let half_text_rev = reverse(half_text)\n\n  return half_text == half_text_rev\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpw8oglg0w.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw8oglg0w.rs:16:30\n   |\n16 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n17 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw8oglg0w.rs:17:42\n   |\n17 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n18 |   let half_text_rev = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpw8oglg0w.rs:18:41\n   |\n18 |   let half_text_rev = reverse(half_text)\n   |                                         ^ help: add `;` here\n19 | \n20 |   return half_text == half_text_rev\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpw8oglg0w.rs:18:23\n   |\n18 |   let half_text_rev = reverse(half_text)\n   |                       ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpw8oglg0w.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpw8oglg0w.rs:17:24\n   |\n17 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let rev = text.reverse()\n  return text == rev\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp8l2oquhv.rs:11:27\n   |\n11 |   let rev = text.reverse()\n   |                           ^ help: add `;` here\n12 |   return text == rev\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp8l2oquhv.rs:11:18\n   |\n11 |   let rev = text.reverse()\n   |                  ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length <= 1 {\n    return true\n  }\n\n  for i in range(0, text.length - 1) {\n    if text[i] != text[text.length - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpxpid7mf0.rs:15:12\n   |\n15 |   for i in range(0, text.length - 1) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpxpid7mf0.rs:11:11\n   |\n11 |   if text.length <= 1 {\n   |           ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpxpid7mf0.rs:15:26\n   |\n15 |   for i in range(0, text.length - 1) {\n   |                          ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpxpid7mf0.rs:16:29\n   |\n16 |     if text[i] != text[text.length - 1 - i] {\n   |                             ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in range(0, half_length) {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdxgzp_e8.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdxgzp_e8.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in range(0, half_length) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpdxgzp_e8.rs:14:12\n   |\n14 |   for i in range(0, half_length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpdxgzp_e8.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length() <= 1) {\n    return true\n  }\n\n  let left = 0\n  let right = text.length() - 1\n\n  while (left < right) {\n    if (text[left] != text[right]) {\n      return false\n    }\n\n    left += 1\n    right -= 1\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpin8mcf_i.rs:15:15\n   |\n15 |   let left = 0\n   |               ^ help: add `;` here\n16 |   let right = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpin8mcf_i.rs:16:32\n   |\n16 |   let right = text.length() - 1\n   |                                ^ help: add `;` here\n17 | \n18 |   while (left < right) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `right`\n  --> /tmp/tmpin8mcf_i.rs:23:14\n   |\n23 |     left += 1\n   |              ^ help: add `;` here\n24 |     right -= 1\n   |     ----- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpin8mcf_i.rs:11:6\n   |\n11 |   if (text.length() <= 1) {\n   |      ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length() <= 1) {\n11 +   if text.length() <= 1 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpin8mcf_i.rs:18:9\n   |\n18 |   while (left < right) {\n   |         ^            ^\n   |\nhelp: remove these parentheses\n   |\n18 -   while (left < right) {\n18 +   while left < right {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpin8mcf_i.rs:19:8\n   |\n19 |     if (text[left] != text[right]) {\n   |        ^                         ^\n   |\nhelp: remove these parentheses\n   |\n19 -     if (text[left] != text[right]) {\n19 +     if text[left] != text[right] {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpin8mcf_i.rs:11:12\n   |\n11 |   if (text.length() <= 1) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpin8mcf_i.rs:16:20\n   |\n16 |   let right = text.length() - 1\n   |                    ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let mut text_rev = text.reverse();\n  return text == text_rev;\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpffsite6f.rs:11:27\n   |\n11 |   let mut text_rev = text.reverse();\n   |                           ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length < 2) {\n    return true\n  }\n\n  for (i = 0; i < text.length / 2; i++) {\n    if (text[i] != text[text.length - i - 1]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpnat3nrrk.rs:15:10\n   |\n15 |   for (i = 0; i < text.length / 2; i++) {\n   |          ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpnat3nrrk.rs:15:9\n   |\n15 |   for (i = 0; i < text.length / 2; i++) {\n   |         ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpnat3nrrk.rs:15:10\n   |\n15 |   for (i = 0; i < text.length / 2; i++) {\n   |          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnat3nrrk.rs:11:6\n   |\n11 |   if (text.length < 2) {\n   |      ^               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length < 2) {\n11 +   if text.length < 2 {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpnat3nrrk.rs:11:12\n   |\n11 |   if (text.length < 2) {\n   |            ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let mut text_copy = text.copy();\n  let mut text_reverse = text_copy.reverse();\n  return text_copy == text_reverse;\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0599]: no method named `copy` found for struct `String` in the current scope\n  --> /tmp/tmpzt_qfy9_.rs:11:28\n   |\n11 |   let mut text_copy = text.copy();\n   |                            ^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length < 2) {\n    return true\n  }\n\n  let is_palindrome = true\n  for (let i = 0; i < text.length / 2; i++) {\n    if (text[i] != text[text.length - 1 - i]) {\n      is_palindrome = false\n      break\n    }\n  }\n\n  return is_palindrome\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwm0lh8o8.rs:15:27\n   |\n15 |   let is_palindrome = true\n   |                           ^ help: add `;` here\n16 |   for (let i = 0; i < text.length / 2; i++) {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpwm0lh8o8.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length / 2; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpwm0lh8o8.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length / 2; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpwm0lh8o8.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length / 2; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwm0lh8o8.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length / 2; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpwm0lh8o8.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length / 2; i++) {\n   |              ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwm0lh8o8.rs:11:6\n   |\n11 |   if (text.length < 2) {\n   |      ^               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length < 2) {\n11 +   if text.length < 2 {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpwm0lh8o8.rs:11:12\n   |\n11 |   if (text.length < 2) {\n   |            ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n  let i = 0\n  let j = half_len - 1\n\n  while (i < half_len) {\n    if (text[i] != text[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp6_xjq4ck.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6_xjq4ck.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6_xjq4ck.rs:13:12\n   |\n13 |   let i = 0\n   |            ^ help: add `;` here\n14 |   let j = half_len - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp6_xjq4ck.rs:14:23\n   |\n14 |   let j = half_len - 1\n   |                       ^ help: add `;` here\n15 | \n16 |   while (i < half_len) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmp6_xjq4ck.rs:20:11\n   |\n20 |     i += 1\n   |           ^ help: add `;` here\n21 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp6_xjq4ck.rs:16:9\n   |\n16 |   while (i < half_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -   while (i < half_len) {\n16 +   while i < half_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6_xjq4ck.rs:17:8\n   |\n17 |     if (text[i] != text[j]) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     if (text[i] != text[j]) {\n17 +     if text[i] != text[j] {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp6_xjq4ck.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp6_xjq4ck.rs:17:9\n   |\n17 |     if (text[i] != text[j]) {\n   |         ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in range(half_length) {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3zle2s10.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp3zle2s10.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in range(half_length) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp3zle2s10.rs:14:12\n   |\n14 |   for i in range(half_length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp3zle2s10.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgplwrcn.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptgplwrcn.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmptgplwrcn.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmptgplwrcn.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  for i in 0..s.length() - 1 {\n    if s[i] != s[s.length() - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp60z722z3.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   for i in 0..s.length() - 1 {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmp60z722z3.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let reversed_half_text = reverse(half_text)\n  return half_text == reversed_half_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpg9lnru1u.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpg9lnru1u.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpg9lnru1u.rs:13:42\n   |\n13 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n14 |   let reversed_half_text = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpg9lnru1u.rs:14:46\n   |\n14 |   let reversed_half_text = reverse(half_text)\n   |                                              ^ help: add `;` here\n15 |   return half_text == reversed_half_text\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpg9lnru1u.rs:14:28\n   |\n14 |   let reversed_half_text = reverse(half_text)\n   |                            ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpg9lnru1u.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpg9lnru1u.rs:13:24\n   |\n13 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len == 0 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpehnf7klx.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len == 0 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpehnf7klx.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpehnf7klx.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpehnf7klx.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = reverse(text)\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmpskrn96f_.rs:11:31\n   |\n11 |   let reversed = reverse(text)\n   |                               ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpskrn96f_.rs:11:18\n   |\n11 |   let reversed = reverse(text)\n   |                  ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  if text_length < 2 {\n    return true\n  }\n  let half_length = text_length / 2\n  let half_text = text.slice(0, half_length)\n  return half_text == half_text.reverse()\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpuox9edjw.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   if text_length < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuox9edjw.rs:15:36\n   |\n15 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_length)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpuox9edjw.rs:16:45\n   |\n16 |   let half_text = text.slice(0, half_length)\n   |                                             ^ help: add `;` here\n17 |   return half_text == half_text.reverse()\n   |   ------ unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpuox9edjw.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpuox9edjw.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_length)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed_text = reverse(text)\n  return text == reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp79rz5paa.rs:11:36\n   |\n11 |   let reversed_text = reverse(text)\n   |                                    ^ help: add `;` here\n12 |   return text == reversed_text\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp79rz5paa.rs:11:23\n   |\n11 |   let reversed_text = reverse(text)\n   |                       ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  let i = 0\n  let j = s.length() - 1\n  while (i < j) {\n    if (s[i] != s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:12:12\n   |\n12 |   let i = 0\n   |            ^ help: add `;` here\n13 |   let j = s.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpfj3de78b.rs:13:25\n   |\n13 |   let j = s.length() - 1\n   |                         ^ help: add `;` here\n14 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpfj3de78b.rs:18:11\n   |\n18 |     i += 1\n   |           ^ help: add `;` here\n19 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpfj3de78b.rs:14:9\n   |\n14 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -   while (i < j) {\n14 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfj3de78b.rs:15:8\n   |\n15 |     if (s[i] != s[j]) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n15 -     if (s[i] != s[j]) {\n15 +     if s[i] != s[j] {\n   | \n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmpfj3de78b.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgplwrcn.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptgplwrcn.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmptgplwrcn.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmptgplwrcn.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length < 2) {\n    return true\n  }\n\n  for (i = 0; i < text.length / 2; i++) {\n    if (text[i] != text[text.length - 1 - i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpfot5rvj7.rs:15:10\n   |\n15 |   for (i = 0; i < text.length / 2; i++) {\n   |          ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfot5rvj7.rs:15:9\n   |\n15 |   for (i = 0; i < text.length / 2; i++) {\n   |         ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpfot5rvj7.rs:15:10\n   |\n15 |   for (i = 0; i < text.length / 2; i++) {\n   |          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfot5rvj7.rs:11:6\n   |\n11 |   if (text.length < 2) {\n   |      ^               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length < 2) {\n11 +   if text.length < 2 {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpfot5rvj7.rs:11:12\n   |\n11 |   if (text.length < 2) {\n   |            ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() < 2 {\n    return true\n  }\n\n  for i in 0..text.length() - 1 {\n    if text[i] != text[text.length() - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp31nqpcx8.rs:11:11\n   |\n11 |   if text.length() < 2 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp31nqpcx8.rs:15:20\n   |\n15 |   for i in 0..text.length() - 1 {\n   |                    ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp31nqpcx8.rs:16:8\n   |\n16 |     if text[i] != text[text.length() - 1 - i] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp31nqpcx8.rs:16:29\n   |\n16 |     if text[i] != text[text.length() - 1 - i] {\n   |                             ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let half_text_rev = reverse(half_text)\n  return half_text == half_text_rev\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmp7dcfhv_l.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7dcfhv_l.rs:16:30\n   |\n16 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n17 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7dcfhv_l.rs:17:42\n   |\n17 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n18 |   let half_text_rev = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp7dcfhv_l.rs:18:41\n   |\n18 |   let half_text_rev = reverse(half_text)\n   |                                         ^ help: add `;` here\n19 |   return half_text == half_text_rev\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp7dcfhv_l.rs:18:23\n   |\n18 |   let half_text_rev = reverse(half_text)\n   |                       ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7dcfhv_l.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmp7dcfhv_l.rs:17:24\n   |\n17 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let mut text_length = text.length();\n  let half_length = text_length / 2;\n  let i = 0;\n  let j = half_length;\n  while (i < half_length) {\n    if (text[i] != text[j]) {\n      return false;\n    }\n    i += 1;\n    j -= 1;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmph9m8nhh5.rs:15:9\n   |\n15 |   while (i < half_length) {\n   |         ^               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -   while (i < half_length) {\n15 +   while i < half_length {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmph9m8nhh5.rs:16:8\n   |\n16 |     if (text[i] != text[j]) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (text[i] != text[j]) {\n16 +     if text[i] != text[j] {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmph9m8nhh5.rs:11:30\n   |\n11 |   let mut text_length = text.length();\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmph9m8nhh5.rs:16:9\n   |\n16 |     if (text[i] != text[j]) {\n   |         ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  let half_text = text.substr(0, half_len)\n  let half_text_rev = reverse(half_text)\n  return half_text == half_text_rev\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmplhfwemdm.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmplhfwemdm.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   let half_text = text.substr(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmplhfwemdm.rs:16:43\n   |\n16 |   let half_text = text.substr(0, half_len)\n   |                                           ^ help: add `;` here\n17 |   let half_text_rev = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmplhfwemdm.rs:17:41\n   |\n17 |   let half_text_rev = reverse(half_text)\n   |                                         ^ help: add `;` here\n18 |   return half_text == half_text_rev\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmplhfwemdm.rs:17:23\n   |\n17 |   let half_text_rev = reverse(half_text)\n   |                       ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmplhfwemdm.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `substr` found for struct `String` in the current scope\n  --> /tmp/tmplhfwemdm.rs:16:24\n   |\n16 |   let half_text = text.substr(0, half_len)\n   |                        ^^^^^^ method not found in `String`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let mut text_iter = text.iter();\n  let mut text_iter_rev = text.iter();\n  let mut text_iter_rev_end = text.iter();\n  let mut text_iter_rev_end_rev = text.iter();\n\n  while (text_iter.next()) {\n    if (text_iter.is_space()) {\n      continue;\n    }\n\n    if (text_iter_rev.next()) {\n      if (text_iter_rev.is_space()) {\n        continue;\n      }\n\n      if (text_iter_rev.get() != text_iter.get()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  while (text_iter_rev_end.next()) {\n    if (text_iter_rev_end.is_space()) {\n      continue;\n    }\n\n    if (text_iter_rev_end.get() != text_iter_rev_end_rev.get()) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpgg9qop9o.rs:16:9\n   |\n16 |   while (text_iter.next()) {\n   |         ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -   while (text_iter.next()) {\n16 +   while text_iter.next() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg9qop9o.rs:17:8\n   |\n17 |     if (text_iter.is_space()) {\n   |        ^                    ^\n   |\nhelp: remove these parentheses\n   |\n17 -     if (text_iter.is_space()) {\n17 +     if text_iter.is_space() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg9qop9o.rs:21:8\n   |\n21 |     if (text_iter_rev.next()) {\n   |        ^                    ^\n   |\nhelp: remove these parentheses\n   |\n21 -     if (text_iter_rev.next()) {\n21 +     if text_iter_rev.next() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg9qop9o.rs:22:10\n   |\n22 |       if (text_iter_rev.is_space()) {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n22 -       if (text_iter_rev.is_space()) {\n22 +       if text_iter_rev.is_space() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg9qop9o.rs:26:10\n   |\n26 |       if (text_iter_rev.get() != text_iter.get()) {\n   |          ^                                      ^\n   |\nhelp: remove these parentheses\n   |\n26 -       if (text_iter_rev.get() != text_iter.get()) {\n26 +       if text_iter_rev.get() != text_iter.get() {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpgg9qop9o.rs:34:9\n   |\n34 |   while (text_iter_rev_end.next()) {\n   |         ^                        ^\n   |\nhelp: remove these parentheses\n   |\n34 -   while (text_iter_rev_end.next()) {\n34 +   while text_iter_rev_end.next() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgg9qop9o.rs:35:8\n   |\n35 |     if (text_iter_rev_end.is_space()) {\n   |        ^                            ^\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpla8o5lwo.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpla8o5lwo.rs:16:30\n   |\n16 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n17 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpla8o5lwo.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpla8o5lwo.rs:18:8\n   |\n18 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse();\n  return text == reversed;\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpd0l8o2fj.rs:11:23\n   |\n11 |   let reversed = text.reverse();\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() <= 1 {\n    return true\n  }\n\n  let left = 0\n  let right = text.length() - 1\n\n  while left < right {\n    if text[left] != text[right] {\n      return false\n    }\n\n    left += 1\n    right -= 1\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp684njhmx.rs:15:15\n   |\n15 |   let left = 0\n   |               ^ help: add `;` here\n16 |   let right = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp684njhmx.rs:16:32\n   |\n16 |   let right = text.length() - 1\n   |                                ^ help: add `;` here\n17 | \n18 |   while left < right {\n   |   ----- unexpected token\n\nerror: expected `;`, found `right`\n  --> /tmp/tmp684njhmx.rs:23:14\n   |\n23 |     left += 1\n   |              ^ help: add `;` here\n24 |     right -= 1\n   |     ----- unexpected token\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp684njhmx.rs:11:11\n   |\n11 |   if text.length() <= 1 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp684njhmx.rs:16:20\n   |\n16 |   let right = text.length() - 1\n   |                    ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp684njhmx.rs:19:8\n   |\n19 |     if text[left] != text[right] {\n   |        ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n    let text_len = text.length()\n    let half_len = text_len / 2\n\n    for i in 0..half_len {\n        if text[i] != text[text_len - i - 1] {\n            return false\n        }\n    }\n\n    return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvwe7xtxx.rs:11:33\n   |\n11 |     let text_len = text.length()\n   |                                 ^ help: add `;` here\n12 |     let half_len = text_len / 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvwe7xtxx.rs:12:32\n   |\n12 |     let half_len = text_len / 2\n   |                                ^ help: add `;` here\n13 | \n14 |     for i in 0..half_len {\n   |     --- unexpected token\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpvwe7xtxx.rs:11:25\n   |\n11 |     let text_len = text.length()\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpvwe7xtxx.rs:15:12\n   |\n15 |         if text[i] != text[text_len - i - 1] {\n   |            ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let reversed_half_text = reverse(half_text)\n  return half_text == reversed_half_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpdg208r1f.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdg208r1f.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdg208r1f.rs:16:42\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n17 |   let reversed_half_text = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpdg208r1f.rs:17:46\n   |\n17 |   let reversed_half_text = reverse(half_text)\n   |                                              ^ help: add `;` here\n18 |   return half_text == reversed_half_text\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpdg208r1f.rs:17:28\n   |\n17 |   let reversed_half_text = reverse(half_text)\n   |                            ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpdg208r1f.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpdg208r1f.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = reverse(text)\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmpskrn96f_.rs:11:31\n   |\n11 |   let reversed = reverse(text)\n   |                               ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpskrn96f_.rs:11:18\n   |\n11 |   let reversed = reverse(text)\n   |                  ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() < 2 {\n    return true\n  }\n  let i = 0\n  let j = text.length() - 1\n  while (i < j) {\n    if (text[i] != text[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppbjt38ox.rs:14:12\n   |\n14 |   let i = 0\n   |            ^ help: add `;` here\n15 |   let j = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmppbjt38ox.rs:15:28\n   |\n15 |   let j = text.length() - 1\n   |                            ^ help: add `;` here\n16 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmppbjt38ox.rs:20:11\n   |\n20 |     i += 1\n   |           ^ help: add `;` here\n21 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmppbjt38ox.rs:16:9\n   |\n16 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -   while (i < j) {\n16 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmppbjt38ox.rs:17:8\n   |\n17 |     if (text[i] != text[j]) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     if (text[i] != text[j]) {\n17 +     if text[i] != text[j] {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmppbjt38ox.rs:11:11\n   |\n11 |   if text.length() < 2 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmppbjt38ox.rs:15:16\n   |\n15 |   let j = text.length() - 1\n   |                ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmppbjt38ox.rs:17:9\n   |\n17 |     if (text[i] != text[j]) {\n   |         ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<Ra",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n  let i = 0\n  let j = half_len - 1\n  while (i < half_len) {\n    if (text[i] != text[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3ke0kokj.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3ke0kokj.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3ke0kokj.rs:13:12\n   |\n13 |   let i = 0\n   |            ^ help: add `;` here\n14 |   let j = half_len - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp3ke0kokj.rs:14:23\n   |\n14 |   let j = half_len - 1\n   |                       ^ help: add `;` here\n15 |   while (i < half_len) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmp3ke0kokj.rs:19:11\n   |\n19 |     i += 1\n   |           ^ help: add `;` here\n20 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp3ke0kokj.rs:15:9\n   |\n15 |   while (i < half_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -   while (i < half_len) {\n15 +   while i < half_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3ke0kokj.rs:16:8\n   |\n16 |     if (text[i] != text[j]) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (text[i] != text[j]) {\n16 +     if text[i] != text[j] {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp3ke0kokj.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp3ke0kokj.rs:16:9\n   |\n16 |     if (text[i] != text[j]) {\n   |         ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n    let mut text_length = text.length();\n    let half_length = text_length / 2;\n    let left_half = text.slice(0, half_length);\n    let right_half = text.slice(half_length, text_length);\n    return left_half == right_half.reverse();\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpupylrdxq.rs:11:32\n   |\n11 |     let mut text_length = text.length();\n   |                                ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpupylrdxq.rs:13:26\n   |\n13 |     let left_half = text.slice(0, half_length);\n   |                          ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpupylrdxq.rs:14:27\n   |\n14 |     let right_half = text.slice(half_length, text_length);\n   |                           ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let rev = text.reverse()\n  return text == rev\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp8l2oquhv.rs:11:27\n   |\n11 |   let rev = text.reverse()\n   |                           ^ help: add `;` here\n12 |   return text == rev\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp8l2oquhv.rs:11:18\n   |\n11 |   let rev = text.reverse()\n   |                  ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let rev_text = reverse(text)\n  return text == rev_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_r0p3yfn.rs:11:31\n   |\n11 |   let rev_text = reverse(text)\n   |                               ^ help: add `;` here\n12 |   return text == rev_text\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp_r0p3yfn.rs:11:18\n   |\n11 |   let rev_text = reverse(text)\n   |                  ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  if text_length < 2 {\n    return true\n  }\n  let half_length = text_length / 2\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpylj11qax.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   if text_length < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpylj11qax.rs:15:36\n   |\n15 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n16 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpylj11qax.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpylj11qax.rs:17:8\n   |\n17 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  let i = 0\n  let j = s.length() - 1\n  while (i < j) {\n    if (s[i] != s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:12:12\n   |\n12 |   let i = 0\n   |            ^ help: add `;` here\n13 |   let j = s.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpfj3de78b.rs:13:25\n   |\n13 |   let j = s.length() - 1\n   |                         ^ help: add `;` here\n14 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpfj3de78b.rs:18:11\n   |\n18 |     i += 1\n   |           ^ help: add `;` here\n19 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpfj3de78b.rs:14:9\n   |\n14 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -   while (i < j) {\n14 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfj3de78b.rs:15:8\n   |\n15 |     if (s[i] != s[j]) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n15 -     if (s[i] != s[j]) {\n15 +     if s[i] != s[j] {\n   | \n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmpfj3de78b.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length()\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let reversed_half_text = reverse(half_text)\n  return half_text === reversed_half_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpln7ovl0v.rs:11:31\n   |\n11 |   let text_len = text.length()\n   |                               ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpln7ovl0v.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpln7ovl0v.rs:16:42\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n17 |   let reversed_half_text = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpln7ovl0v.rs:17:46\n   |\n17 |   let reversed_half_text = reverse(half_text)\n   |                                              ^ help: add `;` here\n18 |   return half_text === reversed_half_text\n   |   ------ unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpln7ovl0v.rs:18:20\n   |\n18 |   return half_text === reversed_half_text\n   |                    ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpln7ovl0v.rs:17:28\n   |\n17 |   let reversed_half_text = reverse(half_text)\n   |                            ^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpln7ovl0v.rs:11:23\n   |\n11 |   let text_len = text.length()\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpln7ovl0v.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed ex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n  for i in range(0, half_len) {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpz8_s3vj1.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpz8_s3vj1.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 |   for i in range(0, half_len) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpz8_s3vj1.rs:13:12\n   |\n13 |   for i in range(0, half_len) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpz8_s3vj1.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() < 2 {\n    return true\n  }\n  for i in 0..text.length() - 1 {\n    if text[i] != text[text.length() - 1 - i] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpnig_sabc.rs:11:11\n   |\n11 |   if text.length() < 2 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpnig_sabc.rs:14:20\n   |\n14 |   for i in 0..text.length() - 1 {\n   |                    ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpnig_sabc.rs:15:8\n   |\n15 |     if text[i] != text[text.length() - 1 - i] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpnig_sabc.rs:15:29\n   |\n15 |     if text[i] != text[text.length() - 1 - i] {\n   |                             ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length == 0) {\n    return true\n  }\n  if (text.length == 1) {\n    return true\n  }\n  if (text.length == 2) {\n    return true\n  }\n  if (text.length == 3) {\n    return true\n  }\n  if (text.length == 4) {\n    return true\n  }\n  if (text.length == 5) {\n    return true\n  }\n  if (text.length == 6) {\n    return true\n  }\n  if (text.length == 7) {\n    return true\n  }\n  if (text.length == 8) {\n    return true\n  }\n  if (text.length == 9) {\n    return true\n  }\n  if (text.length == 10) {\n    return true\n  }\n  if (text.length == 11) {\n    return true\n  }\n  if (text.length == 12) {\n    return true\n  }\n  if (text.length == 13) {\n    return true\n  }\n  if (text.length == 14) {\n    return true\n  }\n  if (text.length == 15) {\n    return true\n  }\n  if (text.length == 16) {\n    return true\n  }\n  if (text.length == 17) {\n    return true\n  }\n  if (text.length == 18) {\n    return true\n  }\n  if (text.length == 19) {\n    return true\n  }\n  if (text.length == 20) {\n    return true\n  }\n  if (text.length == 21) {\n    return true\n  }\n  if (text.length == 22) {\n    return true\n  }\n  if (text.length == 23) {\n    return true\n  }\n  if (text.length == 24) {\n    return true\n  }\n  if (text.length == 25) {\n    return true\n  }\n  if (text.length == 26) {\n    return true\n  }\n  if (text.length == 27) {\n    return true\n  }\n  if (text.length == 28\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `{`, found `}`\n  --> /tmp/tmp117b6lbv.rs:96:1\n   |\n95 |   if (text.length == 28\n   |   -- this `if` expression has a condition, but no block\n96 | }\n   | ^ expected `{`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp117b6lbv.rs:95:6\n   |\n10 | fn is_palindrome(text: String) -> bool {\n   |                                        - closing delimiter possibly meant for this\n...\n95 |   if (text.length == 28\n   |      ^ unclosed delimiter\n96 | }\n   | ^ mismatched closing delimiter\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp117b6lbv.rs:11:6\n   |\n11 |   if (text.length == 0) {\n   |      ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length == 0) {\n11 +   if text.length == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp117b6lbv.rs:14:6\n   |\n14 |   if (text.length == 1) {\n   |      ^                ^\n   |\nhelp: remove these parentheses\n   |\n14 -   if (text.length == 1) {\n14 +   if text.length == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp117b6lbv.rs:17:6\n   |\n17 |   if (text.length == 2) {\n   |      ^                ^\n   |\nhelp: remove these parentheses\n   |\n17 -   if (text.length == 2) {\n17 +   if text.length == 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp117b6lbv.rs:20:6\n   |\n20 |   if (text.length == 3) {\n   |      ^                ^\n   |\nhelp: remove these parentheses\n   |\n20 -   if (text.length == 3) {\n20 +   if text.length == 3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp117b6lbv.rs:23:6\n   |\n23 |   if (text.length == 4) {\n   |      ^                ^\n   |\nhelp: remove these parentheses\n   |\n23 -   if (text.length == 4) {\n23 +   if text.length == 4 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp117b6lbv.rs:26:6\n   |\n26 |   if (text.length == 5) {\n   |      ^                ^\n   |\nhelp: remove these parentheses\n   |\n26 -   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() < 2 {\n    return true\n  }\n\n  for i in 0..text.length() - 1 {\n    if text[i] != text[text.length() - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp31nqpcx8.rs:11:11\n   |\n11 |   if text.length() < 2 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp31nqpcx8.rs:15:20\n   |\n15 |   for i in 0..text.length() - 1 {\n   |                    ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp31nqpcx8.rs:16:8\n   |\n16 |     if text[i] != text[text.length() - 1 - i] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp31nqpcx8.rs:16:29\n   |\n16 |     if text[i] != text[text.length() - 1 - i] {\n   |                             ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n    let reversed = text.reverse()\n    return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmpdlms0e7s.rs:11:34\n   |\n11 |     let reversed = text.reverse()\n   |                                  ^ help: add `;` here\n12 |     return text == reversed\n   |     ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpdlms0e7s.rs:11:25\n   |\n11 |     let reversed = text.reverse()\n   |                         ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let reversed_text = reverse(half_text)\n  return half_text === reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpjep3v2j8.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjep3v2j8.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjep3v2j8.rs:16:42\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n17 |   let reversed_text = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpjep3v2j8.rs:17:41\n   |\n17 |   let reversed_text = reverse(half_text)\n   |                                         ^ help: add `;` here\n18 |   return half_text === reversed_text\n   |   ------ unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpjep3v2j8.rs:18:20\n   |\n18 |   return half_text === reversed_text\n   |                    ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpjep3v2j8.rs:17:23\n   |\n17 |   let reversed_text = reverse(half_text)\n   |                       ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpjep3v2j8.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpjep3v2j8.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() < 2 {\n    return true\n  }\n  let left = 0\n  let right = text.length() - 1\n  while left < right {\n    if text[left] != text[right] {\n      return false\n    }\n    left += 1\n    right -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpr2zq8gzq.rs:14:15\n   |\n14 |   let left = 0\n   |               ^ help: add `;` here\n15 |   let right = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpr2zq8gzq.rs:15:32\n   |\n15 |   let right = text.length() - 1\n   |                                ^ help: add `;` here\n16 |   while left < right {\n   |   ----- unexpected token\n\nerror: expected `;`, found `right`\n  --> /tmp/tmpr2zq8gzq.rs:20:14\n   |\n20 |     left += 1\n   |              ^ help: add `;` here\n21 |     right -= 1\n   |     ----- unexpected token\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpr2zq8gzq.rs:11:11\n   |\n11 |   if text.length() < 2 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpr2zq8gzq.rs:15:20\n   |\n15 |   let right = text.length() - 1\n   |                    ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpr2zq8gzq.rs:17:8\n   |\n17 |     if text[left] != text[right] {\n   |        ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() < 2 {\n    return true\n  }\n\n  for i in 0..text.length() - 1 {\n    if text[i] != text[text.length() - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp31nqpcx8.rs:11:11\n   |\n11 |   if text.length() < 2 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp31nqpcx8.rs:15:20\n   |\n15 |   for i in 0..text.length() - 1 {\n   |                    ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp31nqpcx8.rs:16:8\n   |\n16 |     if text[i] != text[text.length() - 1 - i] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp31nqpcx8.rs:16:29\n   |\n16 |     if text[i] != text[text.length() - 1 - i] {\n   |                             ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_arr = text.split(\"\");\n  let rev_text_arr = text_arr.reverse();\n  return text_arr.join(\"\") === rev_text_arr.join(\"\");\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: invalid comparison operator `===`\n  --> /tmp/tmplo9nuwej.rs:13:28\n   |\n13 |   return text_arr.join(\"\") === rev_text_arr.join(\"\");\n   |                            ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0599]: no method named `reverse` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmplo9nuwej.rs:12:31\n   |\n12 |   let rev_text_arr = text_arr.reverse();\n   |                               ^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror[E0599]: no method named `join` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmplo9nuwej.rs:13:19\n   |\n13 |   return text_arr.join(\"\") === rev_text_arr.join(\"\");\n   |                   ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpdijczl3_.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdijczl3_.rs:16:30\n   |\n16 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n17 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpdijczl3_.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdijczl3_.rs:18:8\n   |\n18 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length() < 2) {\n    return true\n  }\n  let half = text.length() / 2\n  let left = text.substr(0, half)\n  let right = text.substr(half)\n  return left == right.reverse()\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpobc2ckjq.rs:14:31\n   |\n14 |   let half = text.length() / 2\n   |                               ^ help: add `;` here\n15 |   let left = text.substr(0, half)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpobc2ckjq.rs:15:34\n   |\n15 |   let left = text.substr(0, half)\n   |                                  ^ help: add `;` here\n16 |   let right = text.substr(half)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpobc2ckjq.rs:16:32\n   |\n16 |   let right = text.substr(half)\n   |                                ^ help: add `;` here\n17 |   return left == right.reverse()\n   |   ------ unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpobc2ckjq.rs:11:6\n   |\n11 |   if (text.length() < 2) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length() < 2) {\n11 +   if text.length() < 2 {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpobc2ckjq.rs:11:12\n   |\n11 |   if (text.length() < 2) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpobc2ckjq.rs:14:19\n   |\n14 |   let half = text.length() / 2\n   |                   ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `substr` found for struct `String` in the current scope\n  --> /tmp/tmpobc2ckjq.rs:15:19\n   |\n15 |   let left = text.substr(0, half)\n   |                   ^^^^^^ method not found in `String`\n\nerror[E0599]: no method named `substr` found for struct `String` in the current scope\n  --> /tmp/tmpobc2ckjq.rs:16:20\n   |\n16 |   let right = text.substr(half)\n   |                    ^^^^^^ method not found in `String`\n\nerror: aborting due to 7 previous errors; 1 warning emitted\n\nFor mor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half = text_len / 2\n  let half_index = 0\n  for half_index < half {\n    if text[half_index] != text[text_len - 1 - half_index] {\n      return false\n    }\n    half_index += 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpxa9gwy0j.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpxa9gwy0j.rs:15:26\n   |\n15 |   let half = text_len / 2\n   |                          ^ help: add `;` here\n16 |   let half_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxa9gwy0j.rs:16:21\n   |\n16 |   let half_index = 0\n   |                     ^ help: add `;` here\n17 |   for half_index < half {\n   |   --- unexpected token\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxa9gwy0j.rs:17:17\n   |\n17 |   for half_index < half {\n   |                 ^ help: try adding `in` here\n\nerror: expected one of `!`, `(`, `+`, `::`, `<`, `>`, or `as`, found `{`\n  --> /tmp/tmpxa9gwy0j.rs:17:25\n   |\n17 |   for half_index < half {\n   |                         ^ expected one of 7 possible tokens\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpxa9gwy0j.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length <= 1 {\n    return true\n  }\n\n  for i in 0..text.length - 1 {\n    if text[i] != text[text.length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `String`\n  --> /tmp/tmpl453x4fd.rs:11:11\n   |\n11 |   if text.length <= 1 {\n   |           ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpl453x4fd.rs:15:20\n   |\n15 |   for i in 0..text.length - 1 {\n   |                    ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpl453x4fd.rs:16:8\n   |\n16 |     if text[i] != text[text.length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpl453x4fd.rs:16:29\n   |\n16 |     if text[i] != text[text.length - i - 1] {\n   |                             ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgplwrcn.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptgplwrcn.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmptgplwrcn.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmptgplwrcn.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = reverse(text)\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmpskrn96f_.rs:11:31\n   |\n11 |   let reversed = reverse(text)\n   |                               ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpskrn96f_.rs:11:18\n   |\n11 |   let reversed = reverse(text)\n   |                  ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let half_text_rev = reverse(half_text)\n  return half_text == half_text_rev\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmp6vzszfzh.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6vzszfzh.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6vzszfzh.rs:16:42\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n17 |   let half_text_rev = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp6vzszfzh.rs:17:41\n   |\n17 |   let half_text_rev = reverse(half_text)\n   |                                         ^ help: add `;` here\n18 |   return half_text == half_text_rev\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp6vzszfzh.rs:17:23\n   |\n17 |   let half_text_rev = reverse(half_text)\n   |                       ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp6vzszfzh.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmp6vzszfzh.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgplwrcn.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptgplwrcn.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmptgplwrcn.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmptgplwrcn.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgplwrcn.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptgplwrcn.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmptgplwrcn.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmptgplwrcn.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let rev_text = reverse(text)\n  return text == rev_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_r0p3yfn.rs:11:31\n   |\n11 |   let rev_text = reverse(text)\n   |                               ^ help: add `;` here\n12 |   return text == rev_text\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp_r0p3yfn.rs:11:18\n   |\n11 |   let rev_text = reverse(text)\n   |                  ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed_text = reverse(text);\n  return text == reversed_text;\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpxdsbev8o.rs:11:23\n   |\n11 |   let reversed_text = reverse(text);\n   |                       ^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = reverse(text)\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmpskrn96f_.rs:11:31\n   |\n11 |   let reversed = reverse(text)\n   |                               ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpskrn96f_.rs:11:18\n   |\n11 |   let reversed = reverse(text)\n   |                  ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length == 0) {\n    return true\n  }\n  let left_half = text.slice(0, text.length / 2)\n  let right_half = text.slice(text.length / 2)\n  return left_half == right_half.reverse()\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbp7g7giw.rs:14:49\n   |\n14 |   let left_half = text.slice(0, text.length / 2)\n   |                                                 ^ help: add `;` here\n15 |   let right_half = text.slice(text.length / 2)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpbp7g7giw.rs:15:47\n   |\n15 |   let right_half = text.slice(text.length / 2)\n   |                                               ^ help: add `;` here\n16 |   return left_half == right_half.reverse()\n   |   ------ unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbp7g7giw.rs:11:6\n   |\n11 |   if (text.length == 0) {\n   |      ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length == 0) {\n11 +   if text.length == 0 {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpbp7g7giw.rs:11:12\n   |\n11 |   if (text.length == 0) {\n   |            ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpbp7g7giw.rs:14:24\n   |\n14 |   let left_half = text.slice(0, text.length / 2)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpbp7g7giw.rs:14:38\n   |\n14 |   let left_half = text.slice(0, text.length / 2)\n   |                                      ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpbp7g7giw.rs:15:25\n   |\n15 |   let right_half = text.slice(text.length / 2)\n   |                         ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpbp7g7giw.rs:15:36\n   |\n15 |   let right_half = text.slice(text.length / 2)\n   |                                    ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors; 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let mut text_copy = text.copy();\n  let mut text_length = text_copy.length();\n  let mut mid_index = text_length / 2;\n  let mut mid_char = text_copy[mid_index];\n  let mut mid_char_lower = mid_char.to_lower();\n  let mut mid_char_upper = mid_char.to_upper();\n  let mut mid_char_lower_index = mid_char_lower.index();\n  let mut mid_char_upper_index = mid_char_upper.index();\n  let mut mid_char_lower_index_plus_one = mid_char_lower_index + 1;\n  let mut mid_char_upper_index_plus_one = mid_char_upper_index + 1;\n  let mut mid_char_lower_index_minus_one = mid_char_lower_index - 1;\n  let mut mid_char_upper_index_minus_one = mid_char_upper_index - 1;\n  let mut mid_char_lower_index_plus_one_minus_one = mid_char_lower_index_plus_one - 1;\n  let mut mid_char_upper_index_plus_one_minus_one = mid_char_upper_index_plus_one - 1;\n  let mut mid_char_lower_index_minus_one_plus_one = mid_char_lower_index_minus_one + 1;\n  let mut mid_char_upper_index_minus_one_plus_one = mid_char_upper_index_minus_one + 1;\n  let mut mid_char_lower_index_minus_one_minus_one = mid_char_lower_index_minus_one - 1;\n  let mut mid_char_upper_index_minus_one_minus_one = mid_char_upper_index_minus_one - 1;\n  let mut mid_char_lower_index_plus_one_plus_one = mid_char_lower_index_plus_one + 1;\n  let mut mid_char_upper_index_plus_one_plus_one = mid_char_upper_index_plus_one + 1;\n  let mut mid\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpg9pe03li.rs:31:14\n   |\n31 |   let mut mid\n   |              ^ help: add `;` here\n32 | }\n   | - unexpected token\n\nerror[E0599]: no method named `copy` found for struct `String` in the current scope\n  --> /tmp/tmpg9pe03li.rs:11:28\n   |\n11 |   let mut text_copy = text.copy();\n   |                            ^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg9pe03li.rs:10:35\n   |\n10 | fn is_palindrome(text: String) -> bool {\n   |    -------------                  ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let reversed_half_text = reverse(half_text)\n  return half_text == reversed_half_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpdg208r1f.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdg208r1f.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdg208r1f.rs:16:42\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n17 |   let reversed_half_text = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpdg208r1f.rs:17:46\n   |\n17 |   let reversed_half_text = reverse(half_text)\n   |                                              ^ help: add `;` here\n18 |   return half_text == reversed_half_text\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpdg208r1f.rs:17:28\n   |\n17 |   let reversed_half_text = reverse(half_text)\n   |                            ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpdg208r1f.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpdg208r1f.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_arr = text.split('')\n  let len = text_arr.length\n  let half = len / 2\n  let i = 0\n  let j = half - 1\n  while (i < half) {\n    if (text_arr[i] != text_arr[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: empty character literal\n  --> /tmp/tmp0t58f5wq.rs:11:30\n   |\n11 |   let text_arr = text.split('')\n   |                              ^ empty character literal\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp0t58f5wq.rs:11:32\n   |\n11 |   let text_arr = text.split('')\n   |                                ^ help: add `;` here\n12 |   let len = text_arr.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp0t58f5wq.rs:12:28\n   |\n12 |   let len = text_arr.length\n   |                            ^ help: add `;` here\n13 |   let half = len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp0t58f5wq.rs:13:21\n   |\n13 |   let half = len / 2\n   |                     ^ help: add `;` here\n14 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp0t58f5wq.rs:14:12\n   |\n14 |   let i = 0\n   |            ^ help: add `;` here\n15 |   let j = half - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp0t58f5wq.rs:15:19\n   |\n15 |   let j = half - 1\n   |                   ^ help: add `;` here\n16 |   while (i < half) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmp0t58f5wq.rs:20:11\n   |\n20 |     i += 1\n   |           ^ help: add `;` here\n21 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp0t58f5wq.rs:16:9\n   |\n16 |   while (i < half) {\n   |         ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -   while (i < half) {\n16 +   while i < half {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0t58f5wq.rs:17:8\n   |\n17 |     if (text_arr[i] != text_arr[j]) {\n   |        ^                          ^\n   |\nhelp: remove these parentheses\n   |\n17 -     if (text_arr[i] != text_arr[j]) {\n17 +     if text_arr[i] != text_arr[j] {\n   | \n\nerror[E0609]: no field `length` on type `std::str::Split<'_, _>`\n  --> /tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length() < 2) {\n    return true\n  }\n  let half = text.length() / 2\n  for (let i = 0; i < half; i++) {\n    if (text[i] != text[text.length() - 1 - i]) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp6bz45xqp.rs:14:31\n   |\n14 |   let half = text.length() / 2\n   |                               ^ help: add `;` here\n15 |   for (let i = 0; i < half; i++) {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp6bz45xqp.rs:15:8\n   |\n15 |   for (let i = 0; i < half; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp6bz45xqp.rs:15:12\n   |\n15 |   for (let i = 0; i < half; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp6bz45xqp.rs:15:14\n   |\n15 |   for (let i = 0; i < half; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp6bz45xqp.rs:15:13\n   |\n15 |   for (let i = 0; i < half; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp6bz45xqp.rs:15:14\n   |\n15 |   for (let i = 0; i < half; i++) {\n   |              ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6bz45xqp.rs:11:6\n   |\n11 |   if (text.length() < 2) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length() < 2) {\n11 +   if text.length() < 2 {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp6bz45xqp.rs:11:12\n   |\n11 |   if (text.length() < 2) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp6bz45xqp.rs:14:19\n   |\n14 |   let half = text.length() / 2\n   |                   ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 8 previous errors; 1 warning emitted\n\nFor more infor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length < 2 {\n    return true\n  }\n  for i in 0..text.length - 1 {\n    if text[i] != text[text.length - 1 - i] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `String`\n  --> /tmp/tmp9m9yhw0g.rs:11:11\n   |\n11 |   if text.length < 2 {\n   |           ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp9m9yhw0g.rs:14:20\n   |\n14 |   for i in 0..text.length - 1 {\n   |                    ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp9m9yhw0g.rs:15:8\n   |\n15 |     if text[i] != text[text.length - 1 - i] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp9m9yhw0g.rs:15:29\n   |\n15 |     if text[i] != text[text.length - 1 - i] {\n   |                             ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  let i = 0\n  let j = s.length() - 1\n  while (i < j) {\n    if (s[i] != s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:12:12\n   |\n12 |   let i = 0\n   |            ^ help: add `;` here\n13 |   let j = s.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpfj3de78b.rs:13:25\n   |\n13 |   let j = s.length() - 1\n   |                         ^ help: add `;` here\n14 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpfj3de78b.rs:18:11\n   |\n18 |     i += 1\n   |           ^ help: add `;` here\n19 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpfj3de78b.rs:14:9\n   |\n14 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -   while (i < j) {\n14 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfj3de78b.rs:15:8\n   |\n15 |     if (s[i] != s[j]) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n15 -     if (s[i] != s[j]) {\n15 +     if s[i] != s[j] {\n   | \n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmpfj3de78b.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let mut text_copy = text.copy();\n  let mut text_length = text_copy.length();\n  let mut i = 0;\n  let mut j = text_length - 1;\n  while (i < j) {\n    if (text_copy[i] != text_copy[j]) {\n      return false;\n    }\n    i += 1;\n    j -= 1;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpwgawlh5o.rs:15:9\n   |\n15 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -   while (i < j) {\n15 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwgawlh5o.rs:16:8\n   |\n16 |     if (text_copy[i] != text_copy[j]) {\n   |        ^                            ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (text_copy[i] != text_copy[j]) {\n16 +     if text_copy[i] != text_copy[j] {\n   | \n\nerror[E0599]: no method named `copy` found for struct `String` in the current scope\n  --> /tmp/tmpwgawlh5o.rs:11:28\n   |\n11 |   let mut text_copy = text.copy();\n   |                            ^^^^ method not found in `String`\n\nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  let i = 0\n  let j = s.length() - 1\n  while (i < j) {\n    if (s[i] != s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:12:12\n   |\n12 |   let i = 0\n   |            ^ help: add `;` here\n13 |   let j = s.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpfj3de78b.rs:13:25\n   |\n13 |   let j = s.length() - 1\n   |                         ^ help: add `;` here\n14 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpfj3de78b.rs:18:11\n   |\n18 |     i += 1\n   |           ^ help: add `;` here\n19 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpfj3de78b.rs:14:9\n   |\n14 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -   while (i < j) {\n14 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfj3de78b.rs:15:8\n   |\n15 |     if (s[i] != s[j]) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n15 -     if (s[i] != s[j]) {\n15 +     if s[i] != s[j] {\n   | \n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmpfj3de78b.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let reversed_half_text = reverse(half_text)\n  return half_text === reversed_half_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpef5ni6b7.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpef5ni6b7.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpef5ni6b7.rs:16:42\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n17 |   let reversed_half_text = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpef5ni6b7.rs:17:46\n   |\n17 |   let reversed_half_text = reverse(half_text)\n   |                                              ^ help: add `;` here\n18 |   return half_text === reversed_half_text\n   |   ------ unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpef5ni6b7.rs:18:20\n   |\n18 |   return half_text === reversed_half_text\n   |                    ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpef5ni6b7.rs:17:28\n   |\n17 |   let reversed_half_text = reverse(half_text)\n   |                            ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpef5ni6b7.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpef5ni6b7.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E04",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5pe3mb9j.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5pe3mb9j.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp5pe3mb9j.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5pe3mb9j.rs:14:8\n   |\n14 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  if text_length < 2 {\n    return true\n  }\n  let half_length = text_length / 2\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpylj11qax.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   if text_length < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpylj11qax.rs:15:36\n   |\n15 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n16 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpylj11qax.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpylj11qax.rs:17:8\n   |\n17 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  if text_length < 2 {\n    return true\n  }\n\n  let half_length = text_length / 2\n  let half_text = text.slice(0, half_length)\n  let reversed_text = reverse(half_text)\n\n  return half_text === reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpspspulyq.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   if text_length < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpspspulyq.rs:16:36\n   |\n16 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n17 |   let half_text = text.slice(0, half_length)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpspspulyq.rs:17:45\n   |\n17 |   let half_text = text.slice(0, half_length)\n   |                                             ^ help: add `;` here\n18 |   let reversed_text = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpspspulyq.rs:18:41\n   |\n18 |   let reversed_text = reverse(half_text)\n   |                                         ^ help: add `;` here\n19 | \n20 |   return half_text === reversed_text\n   |   ------ unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpspspulyq.rs:20:20\n   |\n20 |   return half_text === reversed_text\n   |                    ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpspspulyq.rs:18:23\n   |\n18 |   let reversed_text = reverse(half_text)\n   |                       ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpspspulyq.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpspspulyq.rs:17:24\n   |\n17 |   let half_text = text.slice(0, half_length)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length() == 0) {\n    return true\n  }\n\n  let i = 0\n  let j = text.length() - 1\n\n  while (i < j) {\n    if (text[i] != text[j]) {\n      return false\n    }\n\n    i += 1\n    j -= 1\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbyra61ng.rs:15:12\n   |\n15 |   let i = 0\n   |            ^ help: add `;` here\n16 |   let j = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpbyra61ng.rs:16:28\n   |\n16 |   let j = text.length() - 1\n   |                            ^ help: add `;` here\n17 | \n18 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpbyra61ng.rs:23:11\n   |\n23 |     i += 1\n   |           ^ help: add `;` here\n24 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbyra61ng.rs:11:6\n   |\n11 |   if (text.length() == 0) {\n   |      ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length() == 0) {\n11 +   if text.length() == 0 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpbyra61ng.rs:18:9\n   |\n18 |   while (i < j) {\n   |         ^     ^\n   |\nhelp: remove these parentheses\n   |\n18 -   while (i < j) {\n18 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbyra61ng.rs:19:8\n   |\n19 |     if (text[i] != text[j]) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -     if (text[i] != text[j]) {\n19 +     if text[i] != text[j] {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpbyra61ng.rs:11:12\n   |\n11 |   if (text.length() == 0) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpbyra61ng.rs:16:16\n   |\n16 |   let j = text.length() - 1\n   |                ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpbyra61ng.rs:19:9\n   |\n19 |     if (text[i] != text[j]) {\n   |       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5pe3mb9j.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5pe3mb9j.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp5pe3mb9j.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5pe3mb9j.rs:14:8\n   |\n14 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.isEmpty() {\n    return true\n  }\n  let s = text.toLower()\n  let i = 0\n  let j = s.length() - 1\n  while (i < j) {\n    if (s[i] != s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpixk3gppu.rs:14:25\n   |\n14 |   let s = text.toLower()\n   |                         ^ help: add `;` here\n15 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpixk3gppu.rs:15:12\n   |\n15 |   let i = 0\n   |            ^ help: add `;` here\n16 |   let j = s.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpixk3gppu.rs:16:25\n   |\n16 |   let j = s.length() - 1\n   |                         ^ help: add `;` here\n17 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpixk3gppu.rs:21:11\n   |\n21 |     i += 1\n   |           ^ help: add `;` here\n22 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpixk3gppu.rs:17:9\n   |\n17 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -   while (i < j) {\n17 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixk3gppu.rs:18:8\n   |\n18 |     if (s[i] != s[j]) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n18 -     if (s[i] != s[j]) {\n18 +     if s[i] != s[j] {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpixk3gppu.rs:11:11\n   |\n11 |   if text.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0599]: no method named `toLower` found for struct `String` in the current scope\n  --> /tmp/tmpixk3gppu.rs:14:16\n   |\n14 |   let s = text.toLower()\n   |                ^^^^^^^ method not found in `String`\n\nerror: aborting due to 6 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgplwrcn.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptgplwrcn.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmptgplwrcn.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmptgplwrcn.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  if text_length < 2 {\n    return true\n  }\n\n  let half_length = text_length / 2\n  let left_half = text.slice(0, half_length)\n  let right_half = text.slice(half_length)\n  return left_half == right_half.reverse()\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmppqiuiofm.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   if text_length < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmppqiuiofm.rs:16:36\n   |\n16 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n17 |   let left_half = text.slice(0, half_length)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmppqiuiofm.rs:17:45\n   |\n17 |   let left_half = text.slice(0, half_length)\n   |                                             ^ help: add `;` here\n18 |   let right_half = text.slice(half_length)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmppqiuiofm.rs:18:43\n   |\n18 |   let right_half = text.slice(half_length)\n   |                                           ^ help: add `;` here\n19 |   return left_half == right_half.reverse()\n   |   ------ unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmppqiuiofm.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmppqiuiofm.rs:17:24\n   |\n17 |   let left_half = text.slice(0, half_length)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmppqiuiofm.rs:18:25\n   |\n18 |   let right_half = text.slice(half_length)\n   |                         ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_arr = text.split(\"\").reverse()\n  let text_arr_len = len(text_arr)\n  let i = 0\n  let j = text_arr_len - 1\n  while i < j {\n    if text_arr[i] != text_arr[j] {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkp85hrxx.rs:11:42\n   |\n11 |   let text_arr = text.split(\"\").reverse()\n   |                                          ^ help: add `;` here\n12 |   let text_arr_len = len(text_arr)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkp85hrxx.rs:12:35\n   |\n12 |   let text_arr_len = len(text_arr)\n   |                                   ^ help: add `;` here\n13 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkp85hrxx.rs:13:12\n   |\n13 |   let i = 0\n   |            ^ help: add `;` here\n14 |   let j = text_arr_len - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpkp85hrxx.rs:14:27\n   |\n14 |   let j = text_arr_len - 1\n   |                           ^ help: add `;` here\n15 |   while i < j {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpkp85hrxx.rs:19:11\n   |\n19 |     i += 1\n   |           ^ help: add `;` here\n20 |     j -= 1\n   |     - unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpkp85hrxx.rs:12:22\n   |\n12 |   let text_arr_len = len(text_arr)\n   |                      ^^^ not found in this scope\n\nerror[E0599]: no method named `reverse` found for struct `std::str::Split` in the current scope\n  --> /tmp/tmpkp85hrxx.rs:11:33\n   |\n11 |   let text_arr = text.split(\"\").reverse()\n   |                                 ^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length < 2) {\n    return true\n  }\n\n  let left = 0\n  let right = text.length - 1\n\n  while (left < right) {\n    if (text[left] != text[right]) {\n      return false\n    }\n\n    left += 1\n    right -= 1\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgc6_tbtt.rs:15:15\n   |\n15 |   let left = 0\n   |               ^ help: add `;` here\n16 |   let right = text.length - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpgc6_tbtt.rs:16:30\n   |\n16 |   let right = text.length - 1\n   |                              ^ help: add `;` here\n17 | \n18 |   while (left < right) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `right`\n  --> /tmp/tmpgc6_tbtt.rs:23:14\n   |\n23 |     left += 1\n   |              ^ help: add `;` here\n24 |     right -= 1\n   |     ----- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgc6_tbtt.rs:11:6\n   |\n11 |   if (text.length < 2) {\n   |      ^               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length < 2) {\n11 +   if text.length < 2 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpgc6_tbtt.rs:18:9\n   |\n18 |   while (left < right) {\n   |         ^            ^\n   |\nhelp: remove these parentheses\n   |\n18 -   while (left < right) {\n18 +   while left < right {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgc6_tbtt.rs:19:8\n   |\n19 |     if (text[left] != text[right]) {\n   |        ^                         ^\n   |\nhelp: remove these parentheses\n   |\n19 -     if (text[left] != text[right]) {\n19 +     if text[left] != text[right] {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpgc6_tbtt.rs:11:12\n   |\n11 |   if (text.length < 2) {\n   |            ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpgc6_tbtt.rs:16:20\n   |\n16 |   let right = text.length - 1\n   |                    ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpgc6_tbtt.rs:19:9\n   |\n19 |     if (text[left] != text[right]) {\n   |         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Ind",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgplwrcn.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptgplwrcn.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmptgplwrcn.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmptgplwrcn.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length() < 2) {\n    return true\n  }\n\n  let i = 0\n  let j = text.length() - 1\n  while (i < j) {\n    if (text[i] != text[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx_2e8klj.rs:15:12\n   |\n15 |   let i = 0\n   |            ^ help: add `;` here\n16 |   let j = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpx_2e8klj.rs:16:28\n   |\n16 |   let j = text.length() - 1\n   |                            ^ help: add `;` here\n17 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpx_2e8klj.rs:21:11\n   |\n21 |     i += 1\n   |           ^ help: add `;` here\n22 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx_2e8klj.rs:11:6\n   |\n11 |   if (text.length() < 2) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length() < 2) {\n11 +   if text.length() < 2 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpx_2e8klj.rs:17:9\n   |\n17 |   while (i < j) {\n   |         ^     ^\n   |\nhelp: remove these parentheses\n   |\n17 -   while (i < j) {\n17 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx_2e8klj.rs:18:8\n   |\n18 |     if (text[i] != text[j]) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     if (text[i] != text[j]) {\n18 +     if text[i] != text[j] {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpx_2e8klj.rs:11:12\n   |\n11 |   if (text.length() < 2) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpx_2e8klj.rs:16:16\n   |\n16 |   let j = text.length() - 1\n   |                ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpx_2e8klj.rs:18:9\n   |\n18 |     if (text[i] != text[j]) {\n   |         ^^^^^^^ `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgplwrcn.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptgplwrcn.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmptgplwrcn.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmptgplwrcn.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length == 0 {\n    return true\n  }\n\n  for i in range(0, text.length / 2) {\n    if text[i] != text[text.length - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp7u341k6v.rs:15:12\n   |\n15 |   for i in range(0, text.length / 2) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7u341k6v.rs:11:11\n   |\n11 |   if text.length == 0 {\n   |           ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7u341k6v.rs:15:26\n   |\n15 |   for i in range(0, text.length / 2) {\n   |                          ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7u341k6v.rs:16:29\n   |\n16 |     if text[i] != text[text.length - 1 - i] {\n   |                             ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = reverse(text)\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmpskrn96f_.rs:11:31\n   |\n11 |   let reversed = reverse(text)\n   |                               ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpskrn96f_.rs:11:18\n   |\n11 |   let reversed = reverse(text)\n   |                  ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() == 0 {\n    return true\n  }\n\n  let left = 0\n  let right = text.length() - 1\n\n  while left < right {\n    if text[left] != text[right] {\n      return false\n    }\n\n    left += 1\n    right -= 1\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp806cqgkg.rs:15:15\n   |\n15 |   let left = 0\n   |               ^ help: add `;` here\n16 |   let right = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp806cqgkg.rs:16:32\n   |\n16 |   let right = text.length() - 1\n   |                                ^ help: add `;` here\n17 | \n18 |   while left < right {\n   |   ----- unexpected token\n\nerror: expected `;`, found `right`\n  --> /tmp/tmp806cqgkg.rs:23:14\n   |\n23 |     left += 1\n   |              ^ help: add `;` here\n24 |     right -= 1\n   |     ----- unexpected token\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp806cqgkg.rs:11:11\n   |\n11 |   if text.length() == 0 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp806cqgkg.rs:16:20\n   |\n16 |   let right = text.length() - 1\n   |                    ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp806cqgkg.rs:19:8\n   |\n19 |     if text[left] != text[right] {\n   |        ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed: String = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp11k16msa.rs:11:40\n   |\n11 |   let reversed: String = text.reverse()\n   |                                        ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp11k16msa.rs:11:31\n   |\n11 |   let reversed: String = text.reverse()\n   |                               ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let mut text_copy = text\n  let mut text_length = text_copy.length()\n  let mut i = 0\n  let mut j = 0\n  let mut mid = 0\n\n  while i < text_length {\n    mid = text_length / 2\n    j = mid\n\n    while j >= 0 and text_copy[i] == text_copy[j] {\n      i += 1\n      j -= 1\n    }\n\n    if j < 0 {\n      return true\n    }\n\n    text_copy = text_copy.substr(i)\n    text_length = text_length - i\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpm3y8uu3w.rs:11:27\n   |\n11 |   let mut text_copy = text\n   |                           ^ help: add `;` here\n12 |   let mut text_length = text_copy.length()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpm3y8uu3w.rs:12:43\n   |\n12 |   let mut text_length = text_copy.length()\n   |                                           ^ help: add `;` here\n13 |   let mut i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpm3y8uu3w.rs:13:16\n   |\n13 |   let mut i = 0\n   |                ^ help: add `;` here\n14 |   let mut j = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpm3y8uu3w.rs:14:16\n   |\n14 |   let mut j = 0\n   |                ^ help: add `;` here\n15 |   let mut mid = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpm3y8uu3w.rs:15:18\n   |\n15 |   let mut mid = 0\n   |                  ^ help: add `;` here\n16 | \n17 |   while i < text_length {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpm3y8uu3w.rs:18:26\n   |\n18 |     mid = text_length / 2\n   |                          ^ help: add `;` here\n19 |     j = mid\n   |     - unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpm3y8uu3w.rs:19:12\n   |\n19 |     j = mid\n   |            ^ help: add `;` here\n20 | \n21 |     while j >= 0 and text_copy[i] == text_copy[j] {\n   |     ----- unexpected token\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpm3y8uu3w.rs:21:18\n   |\n21 |     while j >= 0 and text_copy[i] == text_copy[j] {\n   |                  ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpm3y8uu3w.rs:22:13\n   |\n22 |       i += 1\n   |             ^ help: add `;` here\n23 |       j -= 1\n   |       - unexpected token\n\nerror: expected `;`, found `text_length`\n  --> /tmp/tmpm3y8uu3w.rs:30:3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length() < 2) {\n    return true\n  }\n\n  let half = text.length() / 2\n  let start = 0\n  let end = text.length() - 1\n\n  while (start < half) {\n    if (text[start] != text[end]) {\n      return false\n    }\n    start += 1\n    end -= 1\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpm43batqg.rs:15:31\n   |\n15 |   let half = text.length() / 2\n   |                               ^ help: add `;` here\n16 |   let start = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpm43batqg.rs:16:16\n   |\n16 |   let start = 0\n   |                ^ help: add `;` here\n17 |   let end = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpm43batqg.rs:17:30\n   |\n17 |   let end = text.length() - 1\n   |                              ^ help: add `;` here\n18 | \n19 |   while (start < half) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `end`\n  --> /tmp/tmpm43batqg.rs:23:15\n   |\n23 |     start += 1\n   |               ^ help: add `;` here\n24 |     end -= 1\n   |     --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm43batqg.rs:11:6\n   |\n11 |   if (text.length() < 2) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length() < 2) {\n11 +   if text.length() < 2 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpm43batqg.rs:19:9\n   |\n19 |   while (start < half) {\n   |         ^            ^\n   |\nhelp: remove these parentheses\n   |\n19 -   while (start < half) {\n19 +   while start < half {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpm43batqg.rs:20:8\n   |\n20 |     if (text[start] != text[end]) {\n   |        ^                        ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (text[start] != text[end]) {\n20 +     if text[start] != text[end] {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpm43batqg.rs:11:12\n   |\n11 |   if (text.length() < 2) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed_text = reverse(text)\n  return text == reversed_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp79rz5paa.rs:11:36\n   |\n11 |   let reversed_text = reverse(text)\n   |                                    ^ help: add `;` here\n12 |   return text == reversed_text\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp79rz5paa.rs:11:23\n   |\n11 |   let reversed_text = reverse(text)\n   |                       ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  if text_length < 2 {\n    return true\n  }\n  let half_length = text_length / 2\n  let half_text = text.slice(0, half_length)\n  let reversed_half_text = reverse_string(half_text)\n  return half_text === reversed_half_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpphj0lkb8.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   if text_length < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpphj0lkb8.rs:15:36\n   |\n15 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_length)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpphj0lkb8.rs:16:45\n   |\n16 |   let half_text = text.slice(0, half_length)\n   |                                             ^ help: add `;` here\n17 |   let reversed_half_text = reverse_string(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpphj0lkb8.rs:17:53\n   |\n17 |   let reversed_half_text = reverse_string(half_text)\n   |                                                     ^ help: add `;` here\n18 |   return half_text === reversed_half_text\n   |   ------ unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpphj0lkb8.rs:18:20\n   |\n18 |   return half_text === reversed_half_text\n   |                    ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0425]: cannot find function `reverse_string` in this scope\n  --> /tmp/tmpphj0lkb8.rs:17:28\n   |\n17 |   let reversed_half_text = reverse_string(half_text)\n   |                            ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpphj0lkb8.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpphj0lkb8.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_length)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  let i = 0\n  let j = s.length() - 1\n  while (i < j) {\n    if (s[i] != s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:12:12\n   |\n12 |   let i = 0\n   |            ^ help: add `;` here\n13 |   let j = s.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpfj3de78b.rs:13:25\n   |\n13 |   let j = s.length() - 1\n   |                         ^ help: add `;` here\n14 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpfj3de78b.rs:18:11\n   |\n18 |     i += 1\n   |           ^ help: add `;` here\n19 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpfj3de78b.rs:14:9\n   |\n14 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -   while (i < j) {\n14 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfj3de78b.rs:15:8\n   |\n15 |     if (s[i] != s[j]) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n15 -     if (s[i] != s[j]) {\n15 +     if s[i] != s[j] {\n   | \n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmpfj3de78b.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let reversed_half_text = reverse_string(half_text)\n  return half_text === reversed_half_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmps4m3aaf0.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4m3aaf0.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4m3aaf0.rs:16:42\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n17 |   let reversed_half_text = reverse_string(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmps4m3aaf0.rs:17:53\n   |\n17 |   let reversed_half_text = reverse_string(half_text)\n   |                                                     ^ help: add `;` here\n18 |   return half_text === reversed_half_text\n   |   ------ unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmps4m3aaf0.rs:18:20\n   |\n18 |   return half_text === reversed_half_text\n   |                    ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0425]: cannot find function `reverse_string` in this scope\n  --> /tmp/tmps4m3aaf0.rs:17:28\n   |\n17 |   let reversed_half_text = reverse_string(half_text)\n   |                            ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmps4m3aaf0.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmps4m3aaf0.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more informatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let rev_text = reverse(text)\n  return text == rev_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_r0p3yfn.rs:11:31\n   |\n11 |   let rev_text = reverse(text)\n   |                               ^ help: add `;` here\n12 |   return text == rev_text\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp_r0p3yfn.rs:11:18\n   |\n11 |   let rev_text = reverse(text)\n   |                  ^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let reversed_half_text = reverse(half_text)\n  return half_text === reversed_half_text\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpef5ni6b7.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpef5ni6b7.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpef5ni6b7.rs:16:42\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n17 |   let reversed_half_text = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpef5ni6b7.rs:17:46\n   |\n17 |   let reversed_half_text = reverse(half_text)\n   |                                              ^ help: add `;` here\n18 |   return half_text === reversed_half_text\n   |   ------ unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpef5ni6b7.rs:18:20\n   |\n18 |   return half_text === reversed_half_text\n   |                    ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpef5ni6b7.rs:17:28\n   |\n17 |   let reversed_half_text = reverse(half_text)\n   |                            ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpef5ni6b7.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpef5ni6b7.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E04",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  let l = len(s)\n  let i = 0\n  let j = l - 1\n  while (i < j) {\n    if (s[i] != s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprlebkjbc.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   let l = len(s)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprlebkjbc.rs:12:17\n   |\n12 |   let l = len(s)\n   |                 ^ help: add `;` here\n13 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprlebkjbc.rs:13:12\n   |\n13 |   let i = 0\n   |            ^ help: add `;` here\n14 |   let j = l - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmprlebkjbc.rs:14:16\n   |\n14 |   let j = l - 1\n   |                ^ help: add `;` here\n15 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmprlebkjbc.rs:19:11\n   |\n19 |     i += 1\n   |           ^ help: add `;` here\n20 |     j -= 1\n   |     - unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprlebkjbc.rs:12:11\n   |\n12 |   let l = len(s)\n   |           ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmprlebkjbc.rs:15:9\n   |\n15 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -   while (i < j) {\n15 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprlebkjbc.rs:16:8\n   |\n16 |     if (s[i] != s[j]) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (s[i] != s[j]) {\n16 +     if s[i] != s[j] {\n   | \n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmprlebkjbc.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 7 previous errors; 2 warnings emitted\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  let i = 0\n  let j = s.length() - 1\n\n  while (i < j) {\n    if (s[i] != s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4gjn_oko.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4gjn_oko.rs:12:12\n   |\n12 |   let i = 0\n   |            ^ help: add `;` here\n13 |   let j = s.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp4gjn_oko.rs:13:25\n   |\n13 |   let j = s.length() - 1\n   |                         ^ help: add `;` here\n14 | \n15 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmp4gjn_oko.rs:19:11\n   |\n19 |     i += 1\n   |           ^ help: add `;` here\n20 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp4gjn_oko.rs:15:9\n   |\n15 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -   while (i < j) {\n15 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4gjn_oko.rs:16:8\n   |\n16 |     if (s[i] != s[j]) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (s[i] != s[j]) {\n16 +     if s[i] != s[j] {\n   | \n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmp4gjn_oko.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprrja5r05.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprrja5r05.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmprrja5r05.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmprrja5r05.rs:15:8\n   |\n15 |     if text[i] != text[text_length - 1 - i] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length == 0 {\n    return true\n  }\n\n  for i in range(0, text.length / 2) {\n    if text[i] != text[text.length - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp7u341k6v.rs:15:12\n   |\n15 |   for i in range(0, text.length / 2) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7u341k6v.rs:11:11\n   |\n11 |   if text.length == 0 {\n   |           ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7u341k6v.rs:15:26\n   |\n15 |   for i in range(0, text.length / 2) {\n   |                          ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7u341k6v.rs:16:29\n   |\n16 |     if text[i] != text[text.length - 1 - i] {\n   |                             ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length() < 2) {\n    return true\n  }\n\n  let left = 0\n  let right = text.length() - 1\n\n  while (left < right) {\n    if (text[left] != text[right]) {\n      return false\n    }\n\n    left += 1\n    right -= 1\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpi_94ja6c.rs:15:15\n   |\n15 |   let left = 0\n   |               ^ help: add `;` here\n16 |   let right = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpi_94ja6c.rs:16:32\n   |\n16 |   let right = text.length() - 1\n   |                                ^ help: add `;` here\n17 | \n18 |   while (left < right) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `right`\n  --> /tmp/tmpi_94ja6c.rs:23:14\n   |\n23 |     left += 1\n   |              ^ help: add `;` here\n24 |     right -= 1\n   |     ----- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpi_94ja6c.rs:11:6\n   |\n11 |   if (text.length() < 2) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length() < 2) {\n11 +   if text.length() < 2 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpi_94ja6c.rs:18:9\n   |\n18 |   while (left < right) {\n   |         ^            ^\n   |\nhelp: remove these parentheses\n   |\n18 -   while (left < right) {\n18 +   while left < right {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpi_94ja6c.rs:19:8\n   |\n19 |     if (text[left] != text[right]) {\n   |        ^                         ^\n   |\nhelp: remove these parentheses\n   |\n19 -     if (text[left] != text[right]) {\n19 +     if text[left] != text[right] {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpi_94ja6c.rs:11:12\n   |\n11 |   if (text.length() < 2) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpi_94ja6c.rs:16:20\n   |\n16 |   let right = text.length() - 1\n   |                    ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be ind",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length() < 2) {\n    return true\n  }\n\n  let i = 0\n  let j = text.length() - 1\n  while (i < j) {\n    if (text[i] != text[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx_2e8klj.rs:15:12\n   |\n15 |   let i = 0\n   |            ^ help: add `;` here\n16 |   let j = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpx_2e8klj.rs:16:28\n   |\n16 |   let j = text.length() - 1\n   |                            ^ help: add `;` here\n17 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpx_2e8klj.rs:21:11\n   |\n21 |     i += 1\n   |           ^ help: add `;` here\n22 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx_2e8klj.rs:11:6\n   |\n11 |   if (text.length() < 2) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length() < 2) {\n11 +   if text.length() < 2 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpx_2e8klj.rs:17:9\n   |\n17 |   while (i < j) {\n   |         ^     ^\n   |\nhelp: remove these parentheses\n   |\n17 -   while (i < j) {\n17 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx_2e8klj.rs:18:8\n   |\n18 |     if (text[i] != text[j]) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     if (text[i] != text[j]) {\n18 +     if text[i] != text[j] {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpx_2e8klj.rs:11:12\n   |\n11 |   if (text.length() < 2) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpx_2e8klj.rs:16:16\n   |\n16 |   let j = text.length() - 1\n   |                ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpx_2e8klj.rs:18:9\n   |\n18 |     if (text[i] != text[j]) {\n   |         ^^^^^^^ `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let mut text_rev = String::from(text).reverse();\n  return text == text_rev;\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmppizv4l4y.rs:11:41\n   |\n11 |   let mut text_rev = String::from(text).reverse();\n   |                                         ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgplwrcn.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptgplwrcn.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmptgplwrcn.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmptgplwrcn.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let mut text_copy = text.to_lower()\n  let mut text_length = text_copy.length()\n  let mut i = 0\n  let mut j = text_length - 1\n  let mut is_palindrome = true\n\n  while i < j {\n    if text_copy[i] != text_copy[j] {\n      is_palindrome = false\n      break\n    }\n    i += 1\n    j -= 1\n  }\n\n  return is_palindrome\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3w1gamfg.rs:11:38\n   |\n11 |   let mut text_copy = text.to_lower()\n   |                                      ^ help: add `;` here\n12 |   let mut text_length = text_copy.length()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3w1gamfg.rs:12:43\n   |\n12 |   let mut text_length = text_copy.length()\n   |                                           ^ help: add `;` here\n13 |   let mut i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3w1gamfg.rs:13:16\n   |\n13 |   let mut i = 0\n   |                ^ help: add `;` here\n14 |   let mut j = text_length - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3w1gamfg.rs:14:30\n   |\n14 |   let mut j = text_length - 1\n   |                              ^ help: add `;` here\n15 |   let mut is_palindrome = true\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp3w1gamfg.rs:15:31\n   |\n15 |   let mut is_palindrome = true\n   |                               ^ help: add `;` here\n16 | \n17 |   while i < j {\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp3w1gamfg.rs:19:28\n   |\n19 |       is_palindrome = false\n   |                            ^ help: add `;` here\n20 |       break\n   |       ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmp3w1gamfg.rs:22:11\n   |\n22 |     i += 1\n   |           ^ help: add `;` here\n23 |     j -= 1\n   |     - unexpected token\n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmp3w1gamfg.rs:11:28\n   |\n11 |   let mut text_copy = text.to_lower()\n   |                            ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 8 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n  let i = 0\n  let j = half_len - 1\n  while (i < half_len) {\n    if (text[i] != text[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3ke0kokj.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3ke0kokj.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3ke0kokj.rs:13:12\n   |\n13 |   let i = 0\n   |            ^ help: add `;` here\n14 |   let j = half_len - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp3ke0kokj.rs:14:23\n   |\n14 |   let j = half_len - 1\n   |                       ^ help: add `;` here\n15 |   while (i < half_len) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmp3ke0kokj.rs:19:11\n   |\n19 |     i += 1\n   |           ^ help: add `;` here\n20 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp3ke0kokj.rs:15:9\n   |\n15 |   while (i < half_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -   while (i < half_len) {\n15 +   while i < half_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3ke0kokj.rs:16:8\n   |\n16 |     if (text[i] != text[j]) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (text[i] != text[j]) {\n16 +     if text[i] != text[j] {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp3ke0kokj.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp3ke0kokj.rs:16:9\n   |\n16 |     if (text[i] != text[j]) {\n   |         ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length() < 2) {\n    return true\n  }\n\n  let left = 0\n  let right = text.length() - 1\n\n  while (left < right) {\n    if (text[left] != text[right]) {\n      return false\n    }\n\n    left += 1\n    right -= 1\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpi_94ja6c.rs:15:15\n   |\n15 |   let left = 0\n   |               ^ help: add `;` here\n16 |   let right = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpi_94ja6c.rs:16:32\n   |\n16 |   let right = text.length() - 1\n   |                                ^ help: add `;` here\n17 | \n18 |   while (left < right) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `right`\n  --> /tmp/tmpi_94ja6c.rs:23:14\n   |\n23 |     left += 1\n   |              ^ help: add `;` here\n24 |     right -= 1\n   |     ----- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpi_94ja6c.rs:11:6\n   |\n11 |   if (text.length() < 2) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length() < 2) {\n11 +   if text.length() < 2 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpi_94ja6c.rs:18:9\n   |\n18 |   while (left < right) {\n   |         ^            ^\n   |\nhelp: remove these parentheses\n   |\n18 -   while (left < right) {\n18 +   while left < right {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpi_94ja6c.rs:19:8\n   |\n19 |     if (text[left] != text[right]) {\n   |        ^                         ^\n   |\nhelp: remove these parentheses\n   |\n19 -     if (text[left] != text[right]) {\n19 +     if text[left] != text[right] {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpi_94ja6c.rs:11:12\n   |\n11 |   if (text.length() < 2) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpi_94ja6c.rs:16:20\n   |\n16 |   let right = text.length() - 1\n   |                    ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be ind",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let rev = text.reverse()\n  return text == rev\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp8l2oquhv.rs:11:27\n   |\n11 |   let rev = text.reverse()\n   |                           ^ help: add `;` here\n12 |   return text == rev\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp8l2oquhv.rs:11:18\n   |\n11 |   let rev = text.reverse()\n   |                  ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  return half_text == half_text.reverse()\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpnfdj_di2.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnfdj_di2.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpnfdj_di2.rs:16:42\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n17 |   return half_text == half_text.reverse()\n   |   ------ unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpnfdj_di2.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmpnfdj_di2.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length < 2 {\n    return true\n  }\n\n  for i in 0..text.length - 1 {\n    if text[i] != text[text.length - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0609]: no field `length` on type `String`\n  --> /tmp/tmpzogama8x.rs:11:11\n   |\n11 |   if text.length < 2 {\n   |           ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpzogama8x.rs:15:20\n   |\n15 |   for i in 0..text.length - 1 {\n   |                    ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpzogama8x.rs:16:8\n   |\n16 |     if text[i] != text[text.length - 1 - i] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpzogama8x.rs:16:29\n   |\n16 |     if text[i] != text[text.length - 1 - i] {\n   |                             ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  let l = s.length\n  let i = 0\n  let j = l - 1\n  while (i < j) {\n    if (s[i] != s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcblmh7q1.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   let l = s.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpcblmh7q1.rs:12:19\n   |\n12 |   let l = s.length\n   |                   ^ help: add `;` here\n13 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpcblmh7q1.rs:13:12\n   |\n13 |   let i = 0\n   |            ^ help: add `;` here\n14 |   let j = l - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpcblmh7q1.rs:14:16\n   |\n14 |   let j = l - 1\n   |                ^ help: add `;` here\n15 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpcblmh7q1.rs:19:11\n   |\n19 |     i += 1\n   |           ^ help: add `;` here\n20 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpcblmh7q1.rs:15:9\n   |\n15 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -   while (i < j) {\n15 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcblmh7q1.rs:16:8\n   |\n16 |     if (s[i] != s[j]) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (s[i] != s[j]) {\n16 +     if s[i] != s[j] {\n   | \n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmpcblmh7q1.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 6 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  let l = s.length\n  for i in 0..l/2 {\n    if s[i] != s[l-i-1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwmughsc7.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   let l = s.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwmughsc7.rs:12:19\n   |\n12 |   let l = s.length\n   |                   ^ help: add `;` here\n13 |   for i in 0..l/2 {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmpwmughsc7.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() < 2 {\n    return true\n  }\n\n  for i in 0..text.length() - 1 {\n    if text[i] != text[text.length() - 1 - i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp31nqpcx8.rs:11:11\n   |\n11 |   if text.length() < 2 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp31nqpcx8.rs:15:20\n   |\n15 |   for i in 0..text.length() - 1 {\n   |                    ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp31nqpcx8.rs:16:8\n   |\n16 |     if text[i] != text[text.length() - 1 - i] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp31nqpcx8.rs:16:29\n   |\n16 |     if text[i] != text[text.length() - 1 - i] {\n   |                             ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  let i = 0\n  let j = s.length() - 1\n  while (i < j) {\n    if (s[i] != s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:12:12\n   |\n12 |   let i = 0\n   |            ^ help: add `;` here\n13 |   let j = s.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpfj3de78b.rs:13:25\n   |\n13 |   let j = s.length() - 1\n   |                         ^ help: add `;` here\n14 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpfj3de78b.rs:18:11\n   |\n18 |     i += 1\n   |           ^ help: add `;` here\n19 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpfj3de78b.rs:14:9\n   |\n14 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -   while (i < j) {\n14 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfj3de78b.rs:15:8\n   |\n15 |     if (s[i] != s[j]) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n15 -     if (s[i] != s[j]) {\n15 +     if s[i] != s[j] {\n   | \n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmpfj3de78b.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  let i = 0\n  let j = s.length() - 1\n  while (i < j) {\n    if (s[i] != s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpfj3de78b.rs:12:12\n   |\n12 |   let i = 0\n   |            ^ help: add `;` here\n13 |   let j = s.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpfj3de78b.rs:13:25\n   |\n13 |   let j = s.length() - 1\n   |                         ^ help: add `;` here\n14 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpfj3de78b.rs:18:11\n   |\n18 |     i += 1\n   |           ^ help: add `;` here\n19 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpfj3de78b.rs:14:9\n   |\n14 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -   while (i < j) {\n14 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfj3de78b.rs:15:8\n   |\n15 |     if (s[i] != s[j]) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n15 -     if (s[i] != s[j]) {\n15 +     if s[i] != s[j] {\n   | \n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmpfj3de78b.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  let half_len = text_len / 2\n\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7gkrl3qy.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   let half_len = text_len / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7gkrl3qy.rs:12:30\n   |\n12 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n13 | \n14 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp7gkrl3qy.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp7gkrl3qy.rs:15:8\n   |\n15 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  let l = len(s)\n  if l < 2 {\n    return true\n  }\n  let i = 0\n  let j = l - 1\n  while (i < j) {\n    if (s[i] != s[j]) {\n      return false\n    }\n    i += 1\n    j -= 1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgrwlnm44.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   let l = len(s)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpgrwlnm44.rs:12:17\n   |\n12 |   let l = len(s)\n   |                 ^ help: add `;` here\n13 |   if l < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgrwlnm44.rs:16:12\n   |\n16 |   let i = 0\n   |            ^ help: add `;` here\n17 |   let j = l - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpgrwlnm44.rs:17:16\n   |\n17 |   let j = l - 1\n   |                ^ help: add `;` here\n18 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpgrwlnm44.rs:22:11\n   |\n22 |     i += 1\n   |           ^ help: add `;` here\n23 |     j -= 1\n   |     - unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgrwlnm44.rs:12:11\n   |\n12 |   let l = len(s)\n   |           ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpgrwlnm44.rs:18:9\n   |\n18 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   while (i < j) {\n18 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgrwlnm44.rs:19:8\n   |\n19 |     if (s[i] != s[j]) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n19 -     if (s[i] != s[j]) {\n19 +     if s[i] != s[j] {\n   | \n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmpgrwlnm44.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 7 previous errors; 2 warnings emitted\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  let half_text = text.slice(0, half_len)\n  let half_text_rev = reverse(half_text)\n  return half_text == half_text_rev\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmp6vzszfzh.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6vzszfzh.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   let half_text = text.slice(0, half_len)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6vzszfzh.rs:16:42\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                                          ^ help: add `;` here\n17 |   let half_text_rev = reverse(half_text)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp6vzszfzh.rs:17:41\n   |\n17 |   let half_text_rev = reverse(half_text)\n   |                                         ^ help: add `;` here\n18 |   return half_text == half_text_rev\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp6vzszfzh.rs:17:23\n   |\n17 |   let half_text_rev = reverse(half_text)\n   |                       ^^^^^^^ not found in this scope\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp6vzszfzh.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `slice` found for struct `String` in the current scope\n  --> /tmp/tmp6vzszfzh.rs:16:24\n   |\n16 |   let half_text = text.slice(0, half_len)\n   |                        ^^^^^ help: there is an associated function with a similar name: `split_once`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgplwrcn.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptgplwrcn.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmptgplwrcn.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmptgplwrcn.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() < 2 {\n    return true\n  }\n  let half = text.length() / 2\n  for i in 0..half - 1 {\n    if text[i] != text[text.length() - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp2vz7ov7k.rs:14:31\n   |\n14 |   let half = text.length() / 2\n   |                               ^ help: add `;` here\n15 |   for i in 0..half - 1 {\n   |   --- unexpected token\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp2vz7ov7k.rs:11:11\n   |\n11 |   if text.length() < 2 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp2vz7ov7k.rs:14:19\n   |\n14 |   let half = text.length() / 2\n   |                   ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp2vz7ov7k.rs:16:8\n   |\n16 |     if text[i] != text[text.length() - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp2vz7ov7k.rs:16:29\n   |\n16 |     if text[i] != text[text.length() - i - 1] {\n   |                             ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in range(0, half_length) {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdxgzp_e8.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdxgzp_e8.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in range(0, half_length) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpdxgzp_e8.rs:14:12\n   |\n14 |   for i in range(0, half_length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpdxgzp_e8.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length() < 2) {\n    return true\n  }\n\n  for (i = 0; i < text.length() / 2; i++) {\n    if (text[i] != text[text.length() - i - 1]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpzdrtkt6n.rs:15:10\n   |\n15 |   for (i = 0; i < text.length() / 2; i++) {\n   |          ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpzdrtkt6n.rs:15:9\n   |\n15 |   for (i = 0; i < text.length() / 2; i++) {\n   |         ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpzdrtkt6n.rs:15:10\n   |\n15 |   for (i = 0; i < text.length() / 2; i++) {\n   |          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzdrtkt6n.rs:11:6\n   |\n11 |   if (text.length() < 2) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length() < 2) {\n11 +   if text.length() < 2 {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpzdrtkt6n.rs:11:12\n   |\n11 |   if (text.length() < 2) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if text.length() < 2 {\n    return true\n  }\n  for i in 0..text.length() - 1 {\n    if text[i] != text[text.length() - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp2zcid939.rs:11:11\n   |\n11 |   if text.length() < 2 {\n   |           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp2zcid939.rs:14:20\n   |\n14 |   for i in 0..text.length() - 1 {\n   |                    ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp2zcid939.rs:15:8\n   |\n15 |     if text[i] != text[text.length() - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp2zcid939.rs:15:29\n   |\n15 |     if text[i] != text[text.length() - i - 1] {\n   |                             ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_length = text.length\n  let half_length = text_length / 2\n\n  for i in 0..half_length {\n    if text[i] != text[text_length - i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc69h2w5a.rs:11:32\n   |\n11 |   let text_length = text.length\n   |                                ^ help: add `;` here\n12 |   let half_length = text_length / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc69h2w5a.rs:12:36\n   |\n12 |   let half_length = text_length / 2\n   |                                    ^ help: add `;` here\n13 | \n14 |   for i in 0..half_length {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpc69h2w5a.rs:11:26\n   |\n11 |   let text_length = text.length\n   |                          ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpc69h2w5a.rs:15:8\n   |\n15 |     if text[i] != text[text_length - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let text_len = text.length\n  if text_len < 2 {\n    return true\n  }\n  let half_len = text_len / 2\n  for i in 0..half_len {\n    if text[i] != text[text_len - i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgplwrcn.rs:11:29\n   |\n11 |   let text_len = text.length\n   |                             ^ help: add `;` here\n12 |   if text_len < 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptgplwrcn.rs:15:30\n   |\n15 |   let half_len = text_len / 2\n   |                              ^ help: add `;` here\n16 |   for i in 0..half_len {\n   |   --- unexpected token\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmptgplwrcn.rs:11:23\n   |\n11 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmptgplwrcn.rs:17:8\n   |\n17 |     if text[i] != text[text_len - i - 1] {\n   |        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = reverse(text);\n  return text == reversed;\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmpc1duoksd.rs:11:18\n   |\n11 |   let reversed = reverse(text);\n   |                  ^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let s = text.to_lower()\n  for i in s.ranges() {\n    if s[i] != s[i.next()] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp1yskayyi.rs:11:26\n   |\n11 |   let s = text.to_lower()\n   |                          ^ help: add `;` here\n12 |   for i in s.ranges() {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_lower` found for struct `String` in the current scope\n  --> /tmp/tmp1yskayyi.rs:11:16\n   |\n11 |   let s = text.to_lower()\n   |                ^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  let reversed = text.reverse()\n  return text == reversed\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `return`\n  --> /tmp/tmp_p0sghfn.rs:11:32\n   |\n11 |   let reversed = text.reverse()\n   |                                ^ help: add `;` here\n12 |   return text == reversed\n   |   ------ unexpected token\n\nerror[E0599]: no method named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp_p0sghfn.rs:11:23\n   |\n11 |   let reversed = text.reverse()\n   |                       ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>> is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n  if (text.length() <= 1) {\n    return true\n  }\n\n  let i = 0\n  let j = text.length() - 1\n\n  while (i < j) {\n    if (text[i] != text[j]) {\n      return false\n    }\n\n    i += 1\n    j -= 1\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n    assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n}\n",
      "timestamp": 1664293284,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpk3_83c6v.rs:15:12\n   |\n15 |   let i = 0\n   |            ^ help: add `;` here\n16 |   let j = text.length() - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpk3_83c6v.rs:16:28\n   |\n16 |   let j = text.length() - 1\n   |                            ^ help: add `;` here\n17 | \n18 |   while (i < j) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpk3_83c6v.rs:23:11\n   |\n23 |     i += 1\n   |           ^ help: add `;` here\n24 |     j -= 1\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpk3_83c6v.rs:11:6\n   |\n11 |   if (text.length() <= 1) {\n   |      ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -   if (text.length() <= 1) {\n11 +   if text.length() <= 1 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpk3_83c6v.rs:18:9\n   |\n18 |   while (i < j) {\n   |         ^     ^\n   |\nhelp: remove these parentheses\n   |\n18 -   while (i < j) {\n18 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpk3_83c6v.rs:19:8\n   |\n19 |     if (text[i] != text[j]) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -     if (text[i] != text[j]) {\n19 +     if text[i] != text[j] {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpk3_83c6v.rs:11:12\n   |\n11 |   if (text.length() <= 1) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpk3_83c6v.rs:16:16\n   |\n16 |   let j = text.length() - 1\n   |                ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpk3_83c6v.rs:19:9\n   |\n19 |     if (text[i] != text[j]) {\n   |       ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}