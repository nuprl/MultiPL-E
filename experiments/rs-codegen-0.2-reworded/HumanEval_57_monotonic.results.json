{
  "name": "HumanEval_57_monotonic",
  "language": "rs",
  "prompt": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n",
  "tests": "}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  let last = l[0]\n  for i in l.iter().next() {\n    if last > i {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp6400t2gp.rs:12:18\n   |\n12 |   let last = l[0]\n   |                  ^ help: add `;` here\n13 |   for i in l.iter().next() {\n   |   --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6400t2gp.rs:14:15\n   |\n14 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6400t2gp.rs:17:12\n   |\n12 |   let last = l[0]\n   |              ---- expected due to this value\n...\n17 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |     last = *i\n   |            +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n\n  if l[0] == 0 {\n    return false\n  }\n\n  for i in l.iter() {\n    if i != 0 && (i < 0 != l[i - 1] > 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: comparison operators cannot be chained\n  --> /tmp/tmp1_08vbsh.rs:18:21\n   |\n18 |     if i != 0 && (i < 0 != l[i - 1] > 0) {\n   |                     ^   ^^\n\nerror: comparison operators cannot be chained\n  --> /tmp/tmp1_08vbsh.rs:18:25\n   |\n18 |     if i != 0 && (i < 0 != l[i - 1] > 0) {\n   |                         ^^          ^\n   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1_08vbsh.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp1_08vbsh.rs:18:10\n   |\n18 |     if i != 0 && (i < 0 != l[i - 1] > 0) {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n    if l[i] < l[i + 1] {\n      return true\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpnxg94pxx.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp14z1kv6m.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp14z1kv6m.rs:15:15\n   |\n15 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n\n  if l.len() == 1 {\n    return true\n  }\n\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpu1ffapzf.rs:37:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < 0 {\n        return false\n      }\n    }\n  } else {\n    for i in l.iter() {\n      if i > 0 {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpqvfxgbv5.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqvfxgbv5.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqvfxgbv5.rs:20:14\n   |\n20 |       if i < 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqvfxgbv5.rs:26:14\n   |\n26 |       if i > 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < 0 {\n        return false\n      }\n    }\n  } else {\n    for i in l.iter() {\n      if i > 0 {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpqvfxgbv5.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqvfxgbv5.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqvfxgbv5.rs:20:14\n   |\n20 |       if i < 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqvfxgbv5.rs:26:14\n   |\n26 |       if i > 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[len(l) - 1] <= l[len(l) - 2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpdyi68dy8.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdyi68dy8.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdyi68dy8.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdyi68dy8.rs:18:28\n   |\n18 |   return l[0] <= l[1] && l[len(l) - 1] <= l[len(l) - 2]\n   |                            ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdyi68dy8.rs:18:45\n   |\n18 |   return l[0] <= l[1] && l[len(l) - 1] <= l[len(l) - 2]\n   |                                             ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] < 0 {\n    return false\n  }\n  for i in 1..len(l) {\n    if l[i] < l[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpmh08eomx.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmh08eomx.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmh08eomx.rs:21:15\n   |\n21 |   for i in 1..len(l) {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < l[0] {\n        return false\n      }\n    }\n    return true\n  }\n  if l[0] < 0 {\n    for i in l.iter() {\n      if i > l[0] {\n        return false\n      }\n    }\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp6rty8htt.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp6rty8htt.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6rty8htt.rs:20:14\n   |\n20 |       if i < l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6rty8htt.rs:28:14\n   |\n28 |       if i > l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 2] <= l[l.len() - 1]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpynodr8gn.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[len(l) - 1] < l[len(l) - 2] {\n    return false\n  }\n  for i in range(1, len(l) - 1) {\n    if l[i] > l[i - 1] && l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpyo3nmwd2.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpyo3nmwd2.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpyo3nmwd2.rs:18:8\n   |\n18 |   if l[len(l) - 1] < l[len(l) - 2] {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpyo3nmwd2.rs:18:24\n   |\n18 |   if l[len(l) - 1] < l[len(l) - 2] {\n   |                        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpyo3nmwd2.rs:21:12\n   |\n21 |   for i in range(1, len(l) - 1) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpyo3nmwd2.rs:21:21\n   |\n21 |   for i in range(1, len(l) - 1) {\n   |                     ^^^ not found in this scope\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp14z1kv6m.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp14z1kv6m.rs:15:15\n   |\n15 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] < 0 {\n    return false\n  }\n  for i in range(1, len(l) - 1) {\n    if l[i] > l[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmprsej5ety.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprsej5ety.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprsej5ety.rs:21:12\n   |\n21 |   for i in range(1, len(l) - 1) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprsej5ety.rs:21:21\n   |\n21 |   for i in range(1, len(l) - 1) {\n   |                     ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpm0kt5m9n.rs:21:24\n   |\n21 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpm0kt5m9n.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm0kt5m9n.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp9epla7gz.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9epla7gz.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9epla7gz.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpt0a3zc8t.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpt0a3zc8t.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  if l.len() == 5 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4]\n  }\n  if l.len() == 6 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5]\n  }\n  if l.len() == 7 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6]\n  }\n  if l.len() == 8 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7]\n  }\n  if l.len() == 9 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8]\n  \n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp7ma2dc5q.rs:51:3\n   |\n8  | fn monotonic(l: Vec<isize>) -> bool {\n   |                                     - unclosed delimiter\n...\n36 |   if l.len() == 9 {\n   |                   - this delimiter might not be properly closed...\n...\n39 | }\n   | - ...as it matches this but it has different indentation\n...\n51 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7ma2dc5q.rs:8:32\n  |\n8 | fn monotonic(l: Vec<isize>) -> bool {\n  |    ---------                   ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && monotonic(l.slice(1))\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp9vuffemk.rs:15:38\n   |\n15 |   return l[0] <= l[1] && monotonic(l.slice(1))\n   |                                      ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n15 |   return l[0] <= l[1] && monotonic(l.as_slice(1))\n   |                                      ~~~~~~~~\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[len(l)-1] < l[len(l)-2] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp0f_rsq65.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:18:8\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:18:22\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |                      ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  if l[1] > l[2] {\n    return false\n  }\n  if l[1] < l[2] {\n    return true\n  }\n  if l[2] > l[3] {\n    return false\n  }\n  if l[2] < l[3] {\n    return true\n  }\n  if l[3] > l[0] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp7zgggz9b.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp7zgggz9b.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp7zgggz9b.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] <= l[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp_olsi93b.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_olsi93b.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_olsi93b.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  let last = l[0]\n  for i in l.iter() {\n    if i < last {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpdsqlcxbv.rs:12:18\n   |\n12 |   let last = l[0]\n   |                  ^ help: add `;` here\n13 |   for i in l.iter() {\n   |   --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdsqlcxbv.rs:14:12\n   |\n14 |     if i < last {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdsqlcxbv.rs:17:12\n   |\n12 |   let last = l[0]\n   |              ---- expected due to this value\n...\n17 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |     last = *i\n   |            +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n    if l[i] < l[i + 1] {\n      return true\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpnxg94pxx.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp1o8sqyx1.rs:15:24\n   |\n15 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1o8sqyx1.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  return l[0] < l[1]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmps0tw6_m5.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n\n  if len(l) == 1 {\n    return true\n  }\n\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n\n  if l[0] > l[1] {\n    return false\n  }\n\n  for i in l.iter() {\n    if i < l[0] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpkm7wnakn.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpkm7wnakn.rs:13:6\n   |\n13 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpkm7wnakn.rs:17:6\n   |\n17 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkm7wnakn.rs:26:12\n   |\n26 |     if i < l[0] {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&l[0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  let last = l.get(0)\n  for i in l.range(1, l.len() - 1) {\n    if (last > l.get(i)) {\n      return false\n    }\n    last = l.get(i)\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmptpq8merb.rs:12:22\n   |\n12 |   let last = l.get(0)\n   |                      ^ help: add `;` here\n13 |   for i in l.range(1, l.len() - 1) {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptpq8merb.rs:14:8\n   |\n14 |     if (last > l.get(i)) {\n   |        ^               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (last > l.get(i)) {\n14 +     if last > l.get(i) {\n   | \n\nerror[E0599]: no method named `range` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmptpq8merb.rs:13:14\n   |\n13 |   for i in l.range(1, l.len() - 1) {\n   |              ^^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n\n  if l.len() == 1 {\n    return true\n  }\n\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpu1ffapzf.rs:37:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i - 1] && l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1pyhnsy9.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n    if l[i] < l[i + 1] {\n      return true\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpnxg94pxx.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in 0..len(l)-1 {\n      if l[i] < l[i+1] {\n        return true\n      }\n    }\n  } else {\n    for i in 0..len(l)-1 {\n      if l[i] > l[i+1] {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmplcjbfnk3.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmplcjbfnk3.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmplcjbfnk3.rs:19:17\n   |\n19 |     for i in 0..len(l)-1 {\n   |                 ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmplcjbfnk3.rs:25:17\n   |\n25 |     for i in 0..len(l)-1 {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < l[0] {\n        return false\n      }\n    }\n  } else {\n    for i in l.iter() {\n      if i > l[0] {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpsw0s3ely.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsw0s3ely.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsw0s3ely.rs:20:14\n   |\n20 |       if i < l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsw0s3ely.rs:26:14\n   |\n26 |       if i > l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 1] <= l[l.len() - 2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpp7v8pecz.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp14z1kv6m.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp14z1kv6m.rs:15:15\n   |\n15 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i - 1] && l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1pyhnsy9.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp1o8sqyx1.rs:15:24\n   |\n15 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1o8sqyx1.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp1o8sqyx1.rs:15:24\n   |\n15 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1o8sqyx1.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l.get(0) <= l.get(1)\n  }\n  return l.get(0) <= l.get(1) && l.get(l.len() - 2) <= l.get(l.len() - 1)\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpepeh7btf.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpt0a3zc8t.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpt0a3zc8t.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp1o8sqyx1.rs:15:24\n   |\n15 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1o8sqyx1.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 1] <= l[l.len() - 2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpp7v8pecz.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp9epla7gz.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9epla7gz.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9epla7gz.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] <= l[1] {\n    return true\n  }\n  if l[1] <= l[0] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp1mr7i10j.rs:24:24\n   |\n24 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1mr7i10j.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1mr7i10j.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1mr7i10j.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 2] <= l[l.len() - 1]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpynodr8gn.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < l[0] {\n        return false\n      }\n    }\n    return true\n  }\n  for i in l.iter() {\n    if i < l[0] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpq8_0b7qb.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpq8_0b7qb.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq8_0b7qb.rs:20:14\n   |\n20 |       if i < l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq8_0b7qb.rs:27:12\n   |\n27 |     if i < l[0] {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&l[0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmphm_7uaf1.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  let last = l[0]\n  for i in l.iter() {\n    if i < last {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpdsqlcxbv.rs:12:18\n   |\n12 |   let last = l[0]\n   |                  ^ help: add `;` here\n13 |   for i in l.iter() {\n   |   --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdsqlcxbv.rs:14:12\n   |\n14 |     if i < last {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdsqlcxbv.rs:17:12\n   |\n12 |   let last = l[0]\n   |              ---- expected due to this value\n...\n17 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |     last = *i\n   |            +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp9epla7gz.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9epla7gz.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9epla7gz.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l.0 == l.1\n  }\n  if l.len() == 3 {\n    return l.0 <= l.1 && l.1 <= l.2\n  }\n  if l.len() == 4 {\n    return l.0 <= l.1 && l.1 <= l.2 && l.2 <= l.3\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpsup5u_ap.rs:16:14\n   |\n16 |     return l.0 == l.1\n   |              ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpsup5u_ap.rs:16:21\n   |\n16 |     return l.0 == l.1\n   |                     ^ unknown field\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpsup5u_ap.rs:19:14\n   |\n19 |     return l.0 <= l.1 && l.1 <= l.2\n   |              ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpsup5u_ap.rs:19:21\n   |\n19 |     return l.0 <= l.1 && l.1 <= l.2\n   |                     ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpsup5u_ap.rs:19:28\n   |\n19 |     return l.0 <= l.1 && l.1 <= l.2\n   |                            ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmpsup5u_ap.rs:19:35\n   |\n19 |     return l.0 <= l.1 && l.1 <= l.2\n   |                                   ^ unknown field\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpsup5u_ap.rs:22:14\n   |\n22 |     return l.0 <= l.1 && l.1 <= l.2 && l.2 <= l.3\n   |              ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpsup5u_ap.rs:22:21\n   |\n22 |     return l.0 <= l.1 && l.1 <= l.2 && l.2 <= l.3\n   |                     ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpsup5u_ap.rs:22:28\n   |\n22 |     return l.0 <= l.1 && l.1 <= l.2 && l.2 <= l.3\n   |                            ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmpsup5u_ap.rs:22:35\n   |\n22 |     return l.0 <= l.1 && l.1 <= l.2 && l.2 <= l.3\n   |                                   ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmpsup5u_ap.rs:22:42\n   |\n22 |     return l.0 <= l.1 && l.1 <= l.2 && l.2 <= l.3\n   |                                          ^ unknown field\n\nerror[E0609]: no field `3` on type `Vec<isize>`\n  --> /tmp/tmpsup5u_ap.rs:22:49\n   |\n22 |     return l.0 <= l.1 && l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpabqlbfm7.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] < 0 {\n    return false\n  }\n  for i in l.iter() {\n    if i != l[i] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpzv0tg_ap.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzv0tg_ap.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpzv0tg_ap.rs:22:13\n   |\n22 |     if i != l[i] {\n   |             ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  let last = l[0]\n  for i in 1..l.len() {\n    if (last > l[i]) {\n      return false\n    }\n    last = l[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe_fdahnd.rs:12:18\n   |\n12 |   let last = l[0]\n   |                  ^ help: add `;` here\n13 |   for i in 1..l.len() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe_fdahnd.rs:14:8\n   |\n14 |     if (last > l[i]) {\n   |        ^           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (last > l[i]) {\n14 +     if last > l[i] {\n   | \n\nerror: aborting due to previous error; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp1o8sqyx1.rs:15:24\n   |\n15 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1o8sqyx1.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n\n  if len(l) == 1 {\n    return true\n  }\n\n  if l[0] > l[1] {\n    return false\n  }\n\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp_ifuda3w.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_ifuda3w.rs:13:6\n   |\n13 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_ifuda3w.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[len(l)-1] < l[len(l)-2] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp0f_rsq65.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:18:8\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:18:22\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |                      ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < l[0] {\n        return false\n      }\n    }\n    return true\n  }\n  if l[0] < 0 {\n    for i in l.iter() {\n      if i > l[0] {\n        return false\n      }\n    }\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp6rty8htt.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp6rty8htt.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6rty8htt.rs:20:14\n   |\n20 |       if i < l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6rty8htt.rs:28:14\n   |\n28 |       if i > l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n\n  if l.len() == 1 {\n    return true\n  }\n\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpu1ffapzf.rs:37:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l.get(0) <= l.get(1)\n  }\n  if l.len() == 3 {\n    return l.get(0) <= l.get(1) && l.get(1) <= l.get(2)\n  }\n  if l.len() == 4 {\n    return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3)\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpcrv4yxpg.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 2] <= l[l.len() - 1]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpynodr8gn.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n    if l[i] < l[i + 1] {\n      return true\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpnxg94pxx.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[len(l)-1] < l[len(l)-2] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp4ouc16p9.rs:21:24\n   |\n21 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp4ouc16p9.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp4ouc16p9.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp4ouc16p9.rs:18:8\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp4ouc16p9.rs:18:22\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |                      ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[len(l)-1] < l[len(l)-2] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp4ouc16p9.rs:21:24\n   |\n21 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp4ouc16p9.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp4ouc16p9.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp4ouc16p9.rs:18:8\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp4ouc16p9.rs:18:22\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |                      ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 2] <= l[l.len() - 1]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpynodr8gn.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n\n  if l[0] == 0 {\n    return false\n  }\n\n  for i in 1..len(l) {\n    if l[i] != l[i-1] {\n      return l[i] > l[i-1]\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpis13tvp4.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpis13tvp4.rs:17:15\n   |\n17 |   for i in 1..len(l) {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[len(l)-1] < l[len(l)-2] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp0f_rsq65.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:18:8\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:18:22\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |                      ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n\n  if len(l) == 1 {\n    return true\n  }\n\n  if l[0] > l[1] {\n    return false\n  }\n\n  for i in 1..len(l) - 1 {\n    if l[i] < l[i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpwg833twq.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwg833twq.rs:13:6\n   |\n13 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwg833twq.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpabqlbfm7.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i - 1] && l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1pyhnsy9.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpabqlbfm7.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 1] <= l[l.len() - 2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpp7v8pecz.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 1] <= l[l.len() - 2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpp7v8pecz.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 2] <= l[l.len() - 1]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpynodr8gn.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i > 0 {\n        return false\n      }\n    }\n    return true\n  }\n  for i in l.iter() {\n    if i < 0 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp53fxfb07.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp53fxfb07.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp53fxfb07.rs:20:14\n   |\n20 |       if i > 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp53fxfb07.rs:27:12\n   |\n27 |     if i < 0 {\n   |            ^\n   |            |\n   |            expected `&isize`, found integer\n   |            help: consider borrowing here: `&0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp7l00h6hp.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp7l00h6hp.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < 0 {\n        return false\n      }\n    }\n  } else {\n    for i in l.iter() {\n      if i > 0 {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpqvfxgbv5.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqvfxgbv5.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqvfxgbv5.rs:20:14\n   |\n20 |       if i < 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqvfxgbv5.rs:26:14\n   |\n26 |       if i > 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i > 0 {\n        return false\n      }\n    }\n    return true\n  }\n  if l[0] < 0 {\n    for i in l.iter() {\n      if i < 0 {\n        return false\n      }\n    }\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpgfe64bqk.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgfe64bqk.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgfe64bqk.rs:20:14\n   |\n20 |       if i > 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgfe64bqk.rs:28:14\n   |\n28 |       if i < 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 1] <= l[l.len() - 2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpp7v8pecz.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp9epla7gz.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9epla7gz.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9epla7gz.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 2] <= l[l.len() - 1]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpynodr8gn.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n    if l[i] < l[i + 1] {\n      return true\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpnxg94pxx.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if len(l) == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if len(l) == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmps3muiwgf.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps3muiwgf.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps3muiwgf.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps3muiwgf.rs:18:6\n   |\n18 |   if len(l) == 3 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps3muiwgf.rs:21:6\n   |\n21 |   if len(l) == 4 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len == 0 {\n    return true\n  }\n  if l.len == 1 {\n    return true\n  }\n  if l.len == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len - 2] <= l[l.len - 1]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmpp3siz9u8.rs:9:8\n  |\n9 |   if l.len == 0 {\n  |        ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n9 |   if l.len() == 0 {\n  |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp3siz9u8.rs:12:8\n   |\n12 |   if l.len == 1 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n12 |   if l.len() == 1 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp3siz9u8.rs:15:8\n   |\n15 |   if l.len == 2 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |   if l.len() == 2 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp3siz9u8.rs:18:30\n   |\n18 |   return l[0] <= l[1] && l[l.len - 2] <= l[l.len - 1]\n   |                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   return l[0] <= l[1] && l[l.len() - 2] <= l[l.len - 1]\n   |                                 ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp3siz9u8.rs:18:46\n   |\n18 |   return l[0] <= l[1] && l[l.len - 2] <= l[l.len - 1]\n   |                                              ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   return l[0] <= l[1] && l[l.len - 2] <= l[l.len() - 1]\n   |                                                 ++\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len == 0 {\n    return true\n  }\n  if l.len == 1 {\n    return true\n  }\n  if l.len == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmp796vo7ut.rs:9:8\n  |\n9 |   if l.len == 0 {\n  |        ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n9 |   if l.len() == 0 {\n  |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp796vo7ut.rs:12:8\n   |\n12 |   if l.len == 1 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n12 |   if l.len() == 1 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp796vo7ut.rs:15:8\n   |\n15 |   if l.len == 2 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |   if l.len() == 2 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp796vo7ut.rs:18:8\n   |\n18 |   if l.len == 3 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   if l.len() == 3 {\n   |           ++\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in 0..len(l) - 1 {\n      if l[i] < l[i + 1] {\n        return true\n      }\n    }\n  } else {\n    for i in 0..len(l) - 1 {\n      if l[i] > l[i + 1] {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpsstwhbot.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsstwhbot.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsstwhbot.rs:19:17\n   |\n19 |     for i in 0..len(l) - 1 {\n   |                 ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsstwhbot.rs:25:17\n   |\n25 |     for i in 0..len(l) - 1 {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp14z1kv6m.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp14z1kv6m.rs:15:15\n   |\n15 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i > 0 {\n        return false\n      }\n    }\n    return true\n  }\n  for i in l.iter() {\n    if i < 0 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp53fxfb07.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp53fxfb07.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp53fxfb07.rs:20:14\n   |\n20 |       if i > 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp53fxfb07.rs:27:12\n   |\n27 |     if i < 0 {\n   |            ^\n   |            |\n   |            expected `&isize`, found integer\n   |            help: consider borrowing here: `&0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] < l[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpdb0dia5r.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdb0dia5r.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdb0dia5r.rs:18:15\n   |\n18 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 1] <= l[l.len() - 2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpp7v8pecz.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[len(l)-1] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in range(1, len(l) - 1) {\n      if l[i] > l[i-1] {\n        return true\n      }\n    }\n  } else {\n    for i in range(1, len(l) - 1) {\n      if l[i] < l[i-1] {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpm_mrur7s.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_mrur7s.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_mrur7s.rs:18:8\n   |\n18 |   if l[len(l)-1] == 0 {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpm_mrur7s.rs:22:14\n   |\n22 |     for i in range(1, len(l) - 1) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_mrur7s.rs:22:23\n   |\n22 |     for i in range(1, len(l) - 1) {\n   |                       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpm_mrur7s.rs:28:14\n   |\n28 |     for i in range(1, len(l) - 1) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm_mrur7s.rs:28:23\n   |\n28 |     for i in range(1, len(l) - 1) {\n   |                       ^^^ not found in this scope\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp1o8sqyx1.rs:15:24\n   |\n15 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1o8sqyx1.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  if l.len() == 5 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4]\n  }\n  if l.len() == 6 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5]\n  }\n  if l.len() == 7 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6]\n  }\n  if l.len() == 8 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7]\n  }\n  if l.len() == 9 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8]\n  \n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp7ma2dc5q.rs:51:3\n   |\n8  | fn monotonic(l: Vec<isize>) -> bool {\n   |                                     - unclosed delimiter\n...\n36 |   if l.len() == 9 {\n   |                   - this delimiter might not be properly closed...\n...\n39 | }\n   | - ...as it matches this but it has different indentation\n...\n51 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7ma2dc5q.rs:8:32\n  |\n8 | fn monotonic(l: Vec<isize>) -> bool {\n  |    ---------                   ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] <= l[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp_olsi93b.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_olsi93b.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_olsi93b.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len == 0 {\n    return true\n  }\n  if l.len == 1 {\n    return true\n  }\n  if l.len == 2 {\n    return l.data[0] <= l.data[1]\n  }\n  if l.len == 3 {\n    return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n  }\n  if l.len == 4 {\n    return l.data[0] <= l.data[1] && l.data[1] <= l.data[2] && l.data[2] <= l.data[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmpifue2fxw.rs:9:8\n  |\n9 |   if l.len == 0 {\n  |        ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n9 |   if l.len() == 0 {\n  |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:12:8\n   |\n12 |   if l.len == 1 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n12 |   if l.len() == 1 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:15:8\n   |\n15 |   if l.len == 2 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |   if l.len() == 2 {\n   |           ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:16:14\n   |\n16 |     return l.data[0] <= l.data[1]\n   |              ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:16:27\n   |\n16 |     return l.data[0] <= l.data[1]\n   |                           ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:18:8\n   |\n18 |   if l.len == 3 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   if l.len() == 3 {\n   |           ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:14\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |              ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:27\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |                           ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:40\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |                                        ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:53",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  if l.len() == 5 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4]\n  }\n  if l.len() == 6 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5]\n  }\n  if l.len() == 7 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6]\n  }\n  if l.len() == 8 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7]\n  }\n  if l.len() == 9 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8]\n  \n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp7ma2dc5q.rs:51:3\n   |\n8  | fn monotonic(l: Vec<isize>) -> bool {\n   |                                     - unclosed delimiter\n...\n36 |   if l.len() == 9 {\n   |                   - this delimiter might not be properly closed...\n...\n39 | }\n   | - ...as it matches this but it has different indentation\n...\n51 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7ma2dc5q.rs:8:32\n  |\n8 | fn monotonic(l: Vec<isize>) -> bool {\n  |    ---------                   ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i > 0 {\n        return false\n      }\n    }\n  } else {\n    for i in l.iter() {\n      if i < 0 {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpfyusa1tu.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpfyusa1tu.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyusa1tu.rs:20:14\n   |\n20 |       if i > 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyusa1tu.rs:26:14\n   |\n26 |       if i < 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if len(l) == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if len(l) == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmps3muiwgf.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps3muiwgf.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps3muiwgf.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps3muiwgf.rs:18:6\n   |\n18 |   if len(l) == 3 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps3muiwgf.rs:21:6\n   |\n21 |   if len(l) == 4 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] == l[len(l) - 1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp36w659rd.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp36w659rd.rs:15:16\n   |\n15 |   if l[0] == l[len(l) - 1] {\n   |                ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp321x__yf.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp321x__yf.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp321x__yf.rs:18:15\n   |\n18 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if len(l) == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if len(l) == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmps3muiwgf.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps3muiwgf.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps3muiwgf.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps3muiwgf.rs:18:6\n   |\n18 |   if len(l) == 3 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps3muiwgf.rs:21:6\n   |\n21 |   if len(l) == 4 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n\n  if len(l) == 1 {\n    return true\n  }\n\n  if l[0] == 0 {\n    return false\n  }\n\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < l[0] {\n        return false\n      }\n    }\n  } else {\n    for i in l.iter() {\n      if i > l[0] {\n        return false\n      }\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp5haxhfqc.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp5haxhfqc.rs:13:6\n   |\n13 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5haxhfqc.rs:23:14\n   |\n23 |       if i < l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5haxhfqc.rs:29:14\n   |\n29 |       if i > l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len == 0 {\n    return true\n  }\n  if l.len == 1 {\n    return true\n  }\n  if l.len == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmppxvfpyad.rs:9:8\n  |\n9 |   if l.len == 0 {\n  |        ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n9 |   if l.len() == 0 {\n  |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppxvfpyad.rs:12:8\n   |\n12 |   if l.len == 1 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n12 |   if l.len() == 1 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppxvfpyad.rs:15:8\n   |\n15 |   if l.len == 2 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |   if l.len() == 2 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppxvfpyad.rs:18:8\n   |\n18 |   if l.len == 3 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   if l.len() == 3 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppxvfpyad.rs:21:8\n   |\n21 |   if l.len == 4 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   if l.len() == 4 {\n   |           ++\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && monotonic(l.slice(1))\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp9vuffemk.rs:15:38\n   |\n15 |   return l[0] <= l[1] && monotonic(l.slice(1))\n   |                                      ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n15 |   return l[0] <= l[1] && monotonic(l.as_slice(1))\n   |                                      ~~~~~~~~\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n    if l[i] < l[i + 1] {\n      return true\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpnxg94pxx.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i - 1] {\n      return false\n    }\n    if l[i] < l[i - 1] {\n      return true\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp71h7l_sf.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp71h7l_sf.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp71h7l_sf.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n    if l[i] < l[i + 1] {\n      return true\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpnxg94pxx.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 2] <= l[l.len() - 1]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpynodr8gn.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] < l[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpgtglb6u5.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgtglb6u5.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgtglb6u5.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgtglb6u5.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp7l00h6hp.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp7l00h6hp.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[len(l)-1] <= l[len(l)-2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpb1a9wkk8.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb1a9wkk8.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb1a9wkk8.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb1a9wkk8.rs:18:28\n   |\n18 |   return l[0] <= l[1] && l[len(l)-1] <= l[len(l)-2]\n   |                            ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb1a9wkk8.rs:18:43\n   |\n18 |   return l[0] <= l[1] && l[len(l)-1] <= l[len(l)-2]\n   |                                           ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len == 0 {\n    return true\n  }\n  if l.len == 1 {\n    return true\n  }\n  if l.len == 2 {\n    return l.data[0] <= l.data[1]\n  }\n  if l.len == 3 {\n    return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n  }\n  if l.len == 4 {\n    return l.data[0] <= l.data[1] && l.data[1] <= l.data[2] && l.data[2] <= l.data[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmpifue2fxw.rs:9:8\n  |\n9 |   if l.len == 0 {\n  |        ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n9 |   if l.len() == 0 {\n  |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:12:8\n   |\n12 |   if l.len == 1 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n12 |   if l.len() == 1 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:15:8\n   |\n15 |   if l.len == 2 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |   if l.len() == 2 {\n   |           ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:16:14\n   |\n16 |     return l.data[0] <= l.data[1]\n   |              ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:16:27\n   |\n16 |     return l.data[0] <= l.data[1]\n   |                           ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:18:8\n   |\n18 |   if l.len == 3 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   if l.len() == 3 {\n   |           ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:14\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |              ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:27\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |                           ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:40\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |                                        ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:53",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[1] <= l[2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmppwensgis.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[len(l)-1] < l[len(l)-2] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp0f_rsq65.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:18:8\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:18:22\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |                      ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[len(l)-1] < l[len(l)-2] {\n    return false\n  }\n  for i in 0..(len(l)-2) {\n    if l[i] > l[i+1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpglaxt3e9.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpglaxt3e9.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpglaxt3e9.rs:18:8\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpglaxt3e9.rs:18:22\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |                      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpglaxt3e9.rs:21:16\n   |\n21 |   for i in 0..(len(l)-2) {\n   |                ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[1] <= l[2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmppwensgis.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[len(l) - 1] <= l[len(l) - 2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpdyi68dy8.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdyi68dy8.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdyi68dy8.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdyi68dy8.rs:18:28\n   |\n18 |   return l[0] <= l[1] && l[len(l) - 1] <= l[len(l) - 2]\n   |                            ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdyi68dy8.rs:18:45\n   |\n18 |   return l[0] <= l[1] && l[len(l) - 1] <= l[len(l) - 2]\n   |                                             ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 1] <= l[l.len() - 2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpp7v8pecz.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp14z1kv6m.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp14z1kv6m.rs:15:15\n   |\n15 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  if l.len() == 5 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4]\n  }\n  if l.len() == 6 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5]\n  }\n  if l.len() == 7 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6]\n  }\n  if l.len() == 8 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7]\n  }\n  if l.len() == 9 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8]\n  \n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp7ma2dc5q.rs:51:3\n   |\n8  | fn monotonic(l: Vec<isize>) -> bool {\n   |                                     - unclosed delimiter\n...\n36 |   if l.len() == 9 {\n   |                   - this delimiter might not be properly closed...\n...\n39 | }\n   | - ...as it matches this but it has different indentation\n...\n51 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7ma2dc5q.rs:8:32\n  |\n8 | fn monotonic(l: Vec<isize>) -> bool {\n  |    ---------                   ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return monotonic(l[1..])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp9n2rn42l.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9n2rn42l.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9n2rn42l.rs:21:20\n   |\n21 |   return monotonic(l[1..])\n   |                    ^^^^^^- help: try using a conversion method: `.to_vec()`\n   |                    |\n   |                    expected struct `Vec`, found slice `[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpabqlbfm7.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpz7xucl8m.rs:18:24\n   |\n18 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpz7xucl8m.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 2] <= l[l.len() - 1]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpynodr8gn.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 2] <= l[l.len() - 1]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpynodr8gn.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[1] > l[2] {\n    return false\n  }\n  if l[2] > l[3] {\n    return false\n  }\n  if l[3] > l[4] {\n    return false\n  }\n  if l[4] > l[5] {\n    return false\n  }\n  if l[5] > l[6] {\n    return false\n  }\n  if l[6] > l[7] {\n    return false\n  }\n  if l[7] > l[8] {\n    return false\n  }\n  if l[8] > l[9] {\n    return false\n  }\n  if l[9] > l[10] {\n    return false\n  }\n  if l[10] > l[11] {\n    return false\n  }\n  if l[11] > l[12] {\n    return false\n  }\n  if l[12] > l[13] {\n    return false\n  }\n  if l[13] > l[14] {\n    return false\n  }\n  if l[14] > l[15] {\n    return false\n  }\n  if l[15] > l[16] {\n    return false\n  }\n  if l[16] > l[17] {\n    return false\n  }\n  if l[17] > l[18] {\n    return false\n  }\n  if l[18] > l[19] {\n    return false\n  }\n  if l[19] > l[0] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpc196e204.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpc196e204.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpc196e204.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] < 0 {\n    return false\n  }\n  if l[len(l)-1] < 0 {\n    return false\n  }\n  for i in range(1, len(l)-1) {\n    if l[i] > l[i-1] {\n      return true\n    }\n    if l[i] < l[i-1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpzamfyr2w.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzamfyr2w.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzamfyr2w.rs:21:8\n   |\n21 |   if l[len(l)-1] < 0 {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpzamfyr2w.rs:24:12\n   |\n24 |   for i in range(1, len(l)-1) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzamfyr2w.rs:24:21\n   |\n24 |   for i in range(1, len(l)-1) {\n   |                     ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpm0kt5m9n.rs:21:24\n   |\n21 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpm0kt5m9n.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm0kt5m9n.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[1] > l[2] {\n    return false\n  }\n  if l[2] > l[3] {\n    return false\n  }\n  if l[3] > l[4] {\n    return false\n  }\n  if l[4] > l[5] {\n    return false\n  }\n  if l[5] > l[6] {\n    return false\n  }\n  if l[6] > l[7] {\n    return false\n  }\n  if l[7] > l[8] {\n    return false\n  }\n  if l[8] > l[9] {\n    return false\n  }\n  if l[9] > l[10] {\n    return false\n  }\n  if l[10] > l[11] {\n    return false\n  }\n  if l[11] > l[12] {\n    return false\n  }\n  if l[12] > l[13] {\n    return false\n  }\n  if l[13] > l[14] {\n    return false\n  }\n  if l[14] > l[15] {\n    return false\n  }\n  if l[15] > l[16] {\n    return false\n  }\n  if l[16] > l[17] {\n    return false\n  }\n  if l[17] > l[18] {\n    return false\n  }\n  if l[18] > l[19] {\n    return false\n  }\n  if l[19] > l[0] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpc196e204.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpc196e204.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpc196e204.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] < 0 {\n    return false\n  }\n  for i in 1..len(l) {\n    if l[i] != l[i-1] {\n      return l[i] < l[i-1]\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp_e670940.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_e670940.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_e670940.rs:21:15\n   |\n21 |   for i in 1..len(l) {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp14z1kv6m.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp14z1kv6m.rs:15:15\n   |\n15 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < 0 {\n        return false\n      }\n    }\n    return true\n  }\n  for i in l.iter() {\n    if i < 0 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpb7da8rkr.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb7da8rkr.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb7da8rkr.rs:20:14\n   |\n20 |       if i < 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb7da8rkr.rs:27:12\n   |\n27 |     if i < 0 {\n   |            ^\n   |            |\n   |            expected `&isize`, found integer\n   |            help: consider borrowing here: `&0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpm0kt5m9n.rs:21:24\n   |\n21 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpm0kt5m9n.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm0kt5m9n.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] == l[len(l) - 1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmplcph1ksz.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmplcph1ksz.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmplcph1ksz.rs:18:16\n   |\n18 |   if l[0] == l[len(l) - 1] {\n   |                ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[len(l)-1] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < 0 {\n        return false\n      }\n    }\n  } else {\n    for i in l.iter() {\n      if i > 0 {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp5us5yax1.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp5us5yax1.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp5us5yax1.rs:18:8\n   |\n18 |   if l[len(l)-1] == 0 {\n   |        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5us5yax1.rs:23:14\n   |\n23 |       if i < 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5us5yax1.rs:29:14\n   |\n29 |       if i > 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && monotonic(l.slice(1))\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp9vuffemk.rs:15:38\n   |\n15 |   return l[0] <= l[1] && monotonic(l.slice(1))\n   |                                      ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n15 |   return l[0] <= l[1] && monotonic(l.as_slice(1))\n   |                                      ~~~~~~~~\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  let last = l[0]\n  for i in l.subvec(1) {\n    if last > i {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp7q63pkmx.rs:12:18\n   |\n12 |   let last = l[0]\n   |                  ^ help: add `;` here\n13 |   for i in l.subvec(1) {\n   |   --- unexpected token\n\nerror[E0599]: no method named `subvec` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp7q63pkmx.rs:13:14\n   |\n13 |   for i in l.subvec(1) {\n   |              ^^^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[l.len() - 1] <= l[l.len() - 2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpp7v8pecz.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp1o8sqyx1.rs:15:24\n   |\n15 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1o8sqyx1.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[1] > l[2] {\n    return false\n  }\n  if l[2] > l[3] {\n    return false\n  }\n  if l[3] > l[4] {\n    return false\n  }\n  if l[4] > l[5] {\n    return false\n  }\n  if l[5] > l[6] {\n    return false\n  }\n  if l[6] > l[7] {\n    return false\n  }\n  if l[7] > l[8] {\n    return false\n  }\n  if l[8] > l[9] {\n    return false\n  }\n  if l[9] > l[10] {\n    return false\n  }\n  if l[10] > l[11] {\n    return false\n  }\n  if l[11] > l[12] {\n    return false\n  }\n  if l[12] > l[13] {\n    return false\n  }\n  if l[13] > l[14] {\n    return false\n  }\n  if l[14] > l[15] {\n    return false\n  }\n  if l[15] > l[16] {\n    return false\n  }\n  if l[16] > l[17] {\n    return false\n  }\n  if l[17] > l[18] {\n    return false\n  }\n  if l[18] > l[19] {\n    return false\n  }\n  if l[19] > l[0] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpc196e204.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpc196e204.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpc196e204.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i > 0 {\n        return false\n      }\n    }\n    return true\n  }\n  for i in l.iter() {\n    if i < 0 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp53fxfb07.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp53fxfb07.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp53fxfb07.rs:20:14\n   |\n20 |       if i > 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp53fxfb07.rs:27:12\n   |\n27 |     if i < 0 {\n   |            ^\n   |            |\n   |            expected `&isize`, found integer\n   |            help: consider borrowing here: `&0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n    if l[i] < l[i + 1] {\n      return true\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpnxg94pxx.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpabqlbfm7.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n\n  for i in 0..l.len() - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp3fshdyqv.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpm0kt5m9n.rs:21:24\n   |\n21 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpm0kt5m9n.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpm0kt5m9n.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n    if l[i] < l[i + 1] {\n      return true\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpnxg94pxx.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnxg94pxx.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpt0a3zc8t.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpt0a3zc8t.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp9epla7gz.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9epla7gz.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9epla7gz.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < l[0] {\n        return false\n      }\n    }\n    return true\n  }\n  if l[0] < 0 {\n    for i in l.iter() {\n      if i > l[0] {\n        return false\n      }\n    }\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp6rty8htt.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp6rty8htt.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6rty8htt.rs:20:14\n   |\n20 |       if i < l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6rty8htt.rs:28:14\n   |\n28 |       if i > l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len == 0 {\n    return true\n  }\n  if l.len == 1 {\n    return true\n  }\n  if l.len == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  if l.len == 5 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4]\n  }\n  if l.len == 6 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5]\n  }\n  if l.len == 7 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6]\n  }\n  if l.len == 8 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7]\n  }\n  if l.len == 9 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8]\n  }\n  if l.len == 10 {\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpou4ho9i2.rs:52:3\n   |\n8  | fn monotonic(l: Vec<isize>) -> bool {\n   |                                     - unclosed delimiter\n...\n39 |   if l.len == 10 {\n   |                  - this delimiter might not be properly closed...\n40 | }\n   | - ...as it matches this but it has different indentation\n...\n52 | }\n   |   ^\n\nerror[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmpou4ho9i2.rs:9:8\n  |\n9 |   if l.len == 0 {\n  |        ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n9 |   if l.len() == 0 {\n  |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpou4ho9i2.rs:12:8\n   |\n12 |   if l.len == 1 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n12 |   if l.len() == 1 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpou4ho9i2.rs:15:8\n   |\n15 |   if l.len == 2 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |   if l.len() == 2 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpou4ho9i2.rs:18:8\n   |\n18 |   if l.len == 3 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   if l.len() == 3 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpou4ho9i2.rs:21:8\n   |\n21 |   if l.len == 4 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   if l.len() == 4 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpou4ho9i2.rs:24:8\n   |\n24 |   if l.len == 5 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n24 |   if l.len() == 5 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpou4ho9i2.rs:27:8\n   |\n27 |   if l.len == 6 {\n   |        ^^^ private field\n   |\nhe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i - 1] && l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1pyhnsy9.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i - 1] && l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1pyhnsy9.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp1pyhnsy9.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len == 0 {\n    return true\n  }\n  if l.len == 1 {\n    return true\n  }\n  if l.len == 2 {\n    return l.data[0] <= l.data[1]\n  }\n  if l.len == 3 {\n    return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n  }\n  if l.len == 4 {\n    return l.data[0] <= l.data[1] && l.data[1] <= l.data[2] && l.data[2] <= l.data[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmpifue2fxw.rs:9:8\n  |\n9 |   if l.len == 0 {\n  |        ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n9 |   if l.len() == 0 {\n  |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:12:8\n   |\n12 |   if l.len == 1 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n12 |   if l.len() == 1 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:15:8\n   |\n15 |   if l.len == 2 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |   if l.len() == 2 {\n   |           ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:16:14\n   |\n16 |     return l.data[0] <= l.data[1]\n   |              ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:16:27\n   |\n16 |     return l.data[0] <= l.data[1]\n   |                           ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:18:8\n   |\n18 |   if l.len == 3 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   if l.len() == 3 {\n   |           ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:14\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |              ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:27\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |                           ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:40\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |                                        ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:53",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[len(l)-1] < l[len(l)-2] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp0f_rsq65.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:18:8\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp0f_rsq65.rs:18:22\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |                      ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() < 2 {\n    return true\n  }\n  let last = l[0]\n  for i in l.iter().next() {\n    if last > i {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp6400t2gp.rs:12:18\n   |\n12 |   let last = l[0]\n   |                  ^ help: add `;` here\n13 |   for i in l.iter().next() {\n   |   --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6400t2gp.rs:14:15\n   |\n14 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6400t2gp.rs:17:12\n   |\n12 |   let last = l[0]\n   |              ---- expected due to this value\n...\n17 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |     last = *i\n   |            +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i > 0 {\n        return false\n      }\n    }\n    return true\n  }\n  for i in l.iter() {\n    if i < 0 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp53fxfb07.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp53fxfb07.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp53fxfb07.rs:20:14\n   |\n20 |       if i > 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp53fxfb07.rs:27:12\n   |\n27 |     if i < 0 {\n   |            ^\n   |            |\n   |            expected `&isize`, found integer\n   |            help: consider borrowing here: `&0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < l[0] {\n        return false\n      }\n    }\n    return true\n  }\n  if l[0] < 0 {\n    for i in l.iter() {\n      if i > l[0] {\n        return false\n      }\n    }\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp6rty8htt.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp6rty8htt.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6rty8htt.rs:20:14\n   |\n20 |       if i < l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6rty8htt.rs:28:14\n   |\n28 |       if i > l[0] {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&l[0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  return l[0] <= l[1] && l[len(l)-1] <= l[len(l)-2]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpb1a9wkk8.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb1a9wkk8.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb1a9wkk8.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb1a9wkk8.rs:18:28\n   |\n18 |   return l[0] <= l[1] && l[len(l)-1] <= l[len(l)-2]\n   |                            ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb1a9wkk8.rs:18:43\n   |\n18 |   return l[0] <= l[1] && l[len(l)-1] <= l[len(l)-2]\n   |                                           ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpt0a3zc8t.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpt0a3zc8t.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return monotonic(l[1..])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmph1oem2_x.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph1oem2_x.rs:15:20\n   |\n15 |   return monotonic(l[1..])\n   |                    ^^^^^^- help: try using a conversion method: `.to_vec()`\n   |                    |\n   |                    expected struct `Vec`, found slice `[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp1o8sqyx1.rs:15:24\n   |\n15 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp1o8sqyx1.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if len(l) == 2 {\n    return l[0] <= l[1]\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[1] > l[2] {\n    return false\n  }\n  if l[2] > l[3] {\n    return false\n  }\n  if l[3] > l[4] {\n    return false\n  }\n  if l[4] > l[5] {\n    return false\n  }\n  if l[5] > l[6] {\n    return false\n  }\n  if l[6] > l[7] {\n    return false\n  }\n  if l[7] > l[8] {\n    return false\n  }\n  if l[8] > l[9] {\n    return false\n  }\n  if l[9] > l[10] {\n    return false\n  }\n  if l[10] > l[11] {\n    return false\n  }\n  if l[11] > l[12] {\n    return false\n  }\n  if l[12] > l[13] {\n    return false\n  }\n  if l[13] > l[14] {\n    return false\n  }\n  if l[14] > l[15] {\n    return false\n  }\n  if l[15] > l[16] {\n    return false\n  }\n  if l[16] > l[17] {\n    return false\n  }\n  if l[17] > l[18] {\n    return false\n  }\n  if l[18] > l[19] {\n    return false\n  }\n  if l[19] > l[0] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpc196e204.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpc196e204.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpc196e204.rs:15:6\n   |\n15 |   if len(l) == 2 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[len(l)-1] < l[len(l)-2] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp4ouc16p9.rs:21:24\n   |\n21 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmp4ouc16p9.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp4ouc16p9.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp4ouc16p9.rs:18:8\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp4ouc16p9.rs:18:22\n   |\n18 |   if l[len(l)-1] < l[len(l)-2] {\n   |                      ^^^ not found in this scope\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] > 0 {\n    for i in l.iter() {\n      if i < 0 {\n        return false\n      }\n    }\n  } else {\n    for i in l.iter() {\n      if i > 0 {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpqvfxgbv5.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqvfxgbv5.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqvfxgbv5.rs:20:14\n   |\n20 |       if i < 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqvfxgbv5.rs:26:14\n   |\n26 |       if i > 0 {\n   |              ^\n   |              |\n   |              expected `&isize`, found integer\n   |              help: consider borrowing here: `&0`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  if l.len() == 5 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4]\n  }\n  if l.len() == 6 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5]\n  }\n  if l.len() == 7 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6]\n  }\n  if l.len() == 8 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7]\n  }\n  if l.len() == 9 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8]\n  \n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp7ma2dc5q.rs:51:3\n   |\n8  | fn monotonic(l: Vec<isize>) -> bool {\n   |                                     - unclosed delimiter\n...\n36 |   if l.len() == 9 {\n   |                   - this delimiter might not be properly closed...\n...\n39 | }\n   | - ...as it matches this but it has different indentation\n...\n51 | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7ma2dc5q.rs:8:32\n  |\n8 | fn monotonic(l: Vec<isize>) -> bool {\n  |    ---------                   ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len == 0 {\n    return true\n  }\n  if l.len == 1 {\n    return true\n  }\n  if l.len == 2 {\n    return l.data[0] <= l.data[1]\n  }\n  if l.len == 3 {\n    return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n  }\n  if l.len == 4 {\n    return l.data[0] <= l.data[1] && l.data[1] <= l.data[2] && l.data[2] <= l.data[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmpifue2fxw.rs:9:8\n  |\n9 |   if l.len == 0 {\n  |        ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n9 |   if l.len() == 0 {\n  |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:12:8\n   |\n12 |   if l.len == 1 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n12 |   if l.len() == 1 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:15:8\n   |\n15 |   if l.len == 2 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |   if l.len() == 2 {\n   |           ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:16:14\n   |\n16 |     return l.data[0] <= l.data[1]\n   |              ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:16:27\n   |\n16 |     return l.data[0] <= l.data[1]\n   |                           ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:18:8\n   |\n18 |   if l.len == 3 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   if l.len() == 3 {\n   |           ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:14\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |              ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:27\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |                           ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:40\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |                                        ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:53",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n\n  if l.len() == 1 {\n    return true\n  }\n\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n\n  return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpodrglunv.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) < 2 {\n    return true\n  }\n  if l[0] == l[1] {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  return monotonic(l[1:])\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpz7xucl8m.rs:18:24\n   |\n18 |   return monotonic(l[1:])\n   |                       -^ expected type\n   |                       |\n   |                       tried to parse a type due to this\n\nerror[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpz7xucl8m.rs:9:6\n  |\n9 |   if len(l) < 2 {\n  |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] == 0 {\n    return false\n  }\n  if l[0] < 0 {\n    return false\n  }\n  for i in range(1, len(l) - 1) {\n    if l[i] < l[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpqf98zxnb.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqf98zxnb.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpqf98zxnb.rs:21:12\n   |\n21 |   for i in range(1, len(l) - 1) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqf98zxnb.rs:21:21\n   |\n21 |   for i in range(1, len(l) - 1) {\n   |                     ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len() == 0 {\n    return true\n  }\n  if l.len() == 1 {\n    return true\n  }\n  if l.len() == 2 {\n    return l[0] <= l[1]\n  }\n  if l.len() == 3 {\n    return l[0] <= l[1] && l[1] <= l[2]\n  }\n  if l.len() == 4 {\n    return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp_1v81k2u.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if l.len == 0 {\n    return true\n  }\n  if l.len == 1 {\n    return true\n  }\n  if l.len == 2 {\n    return l.data[0] <= l.data[1]\n  }\n  if l.len == 3 {\n    return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n  }\n  if l.len == 4 {\n    return l.data[0] <= l.data[1] && l.data[1] <= l.data[2] && l.data[2] <= l.data[3]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmpifue2fxw.rs:9:8\n  |\n9 |   if l.len == 0 {\n  |        ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n9 |   if l.len() == 0 {\n  |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:12:8\n   |\n12 |   if l.len == 1 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n12 |   if l.len() == 1 {\n   |           ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:15:8\n   |\n15 |   if l.len == 2 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |   if l.len() == 2 {\n   |           ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:16:14\n   |\n16 |     return l.data[0] <= l.data[1]\n   |              ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:16:27\n   |\n16 |     return l.data[0] <= l.data[1]\n   |                           ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpifue2fxw.rs:18:8\n   |\n18 |   if l.len == 3 {\n   |        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   if l.len() == 3 {\n   |           ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:14\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |              ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:27\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |                           ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:40\n   |\n19 |     return l.data[0] <= l.data[1] && l.data[1] <= l.data[2]\n   |                                        ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpifue2fxw.rs:19:53",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return true is vector elements are monotonically increasing or decreasing.\n/// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20, 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l: Vec<isize>) -> bool {\n  if len(l) == 0 {\n    return true\n  }\n  if len(l) == 1 {\n    return true\n  }\n  if l[0] > l[1] {\n    return false\n  }\n  if l[0] < l[1] {\n    return true\n  }\n  for i in 1..len(l) - 1 {\n    if l[i] > l[i - 1] && l[i] > l[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n",
      "timestamp": 1664293472,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n --> /tmp/tmpgnu_xgkc.rs:9:6\n  |\n9 |   if len(l) == 0 {\n  |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgnu_xgkc.rs:12:6\n   |\n12 |   if len(l) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgnu_xgkc.rs:21:15\n   |\n21 |   for i in 1..len(l) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}