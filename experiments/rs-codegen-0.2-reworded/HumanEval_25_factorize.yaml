name: HumanEval_25_factorize
language: rs
prompt: "/// Return vector of prime factors of given integer in the order from smallest\
  \ to largest.\n/// Each of the factors should be vectored number of times corresponding\
  \ to how many times it appeares in factorization.\n/// Input number should be equal\
  \ to the product of all factors\n/// >>> factorize(8)\n/// vec![2, 2, 2]\n/// >>>\
  \ factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2, 5, 7]\nfn factorize(n:\
  \ isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
  \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
  \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
  \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
  \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
  \ vec![2, 3, 3]);\n}\n"
completions: ["  let factors = Vec::new();\n  for isize i = 2; i <= n; i *= 2 {\n\
    \    while n % i == 0 {\n      factors.push_back(i);\n      n /= i;\n    }\n \
    \ }\n  if n != 1 {\n    factors.push_back(n);\n  }\n  return factors;", "  let\
    \ factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    while (n %\
    \ i == 0) {\n      factors = factors.concat(vec![i, 1]);\n      n /= i;\n    }\n\
    \    i += 1;\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n, 1]);\n\
    \  }\n  return factors;", "  let factors = vec![];\n  for isize i = 2; i < n;\
    \ i++ {\n    while n % i == 0 {\n      factors = append(factors, i);\n      n\
    \ /= i;\n    }\n  }\n  if n != 1 {\n    factors = append(factors, n);\n  }\n \
    \ return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i\
    \ <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n\
    \      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n\
    \    factors = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors\
    \ = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i == 0)\
    \ {\n      factors.push_back(i);\n      n /= i;\n    }\n    i += 1;\n  }\n  if\
    \ (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;", "  let factors\
    \ = vec![];\n  for isize i = 2; i < n; i++ {\n    while n % i == 0 {\n      factors\
    \ = append(factors, i);\n      n /= i;\n    }\n  }\n  if n > 1 {\n    factors\
    \ = append(factors, n);\n  }\n  factors", "  let factors = Vec::new(n);\n  let\
    \ i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n\
    \      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = Vec::new();\n  let i =\
    \ 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n\
    \      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  return factors;", "  let factors = Vec::new();\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors =\
    \ factors.concat(vec![i, n / i]);\n      n = n / i;\n    } else {\n      i +=\
    \ 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n  }\n\
    \  return factors;", "  let factors = vec![];\n  let i = 2;\n  while (i * i <=\
    \ n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n\
    \      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n\
    \    factors = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors\
    \ = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n\
    \      factors = factors.plus(i);\n      n /= i;\n    } else {\n      i += 1;\n\
    \    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n  return factors;",
  "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  factors", "  let factors = vec![];\n  for isize i = 0; i < n; i++ {\n    if\
    \ n % i == 0 {\n      factors = factors.concat(vec![i, n / i]);\n    }\n  }\n\
    \  return factors;", "  let factors = Vec::new(0);\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n /\
    \ i]);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1)\
    \ {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors\
    \ = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n\
    \      factors = factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n\
    \    }\n  }\n  if (n > 1) {\n    factors = factors.push(n);\n  }\n  return factors;",
  "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    while (n\
    \ % i == 0) {\n      factors.push_back(i);\n      n /= i;\n    }\n    i += 1;\n\
    \  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;", "  let\
    \ factors = Vec::new();\n  for isize i = 2; i < n; i++ {\n    while n % i == 0\
    \ {\n      factors.push_back(i);\n      n /= i;\n    }\n  }\n  if n > 1 {\n  \
    \  factors.push_back(n);\n  }\n  return factors;", "  let factors = vec![];\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors =\
    \ factors.concat(vec![i, n / i]);\n      n = n / i;\n    } else {\n      i = i\
    \ + 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n \
    \ }\n  return factors;", "  let factors = Vec::new(0);\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = Vec::new(0);\n  let i\
    \ = 2;\n  while (n > 1) {\n    while (n % i == 0) {\n      factors = factors.push_back(i);\n\
    \      n /= i;\n    }\n    i += 1;\n  }\n  factors", "  let factors = Vec::new();\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors =\
    \ factors.concat(vec![i, n / i]);\n      n = n / i;\n    } else {\n      i +=\
    \ 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n  }\n\
    \  return factors;", "  let factors = Vec::new();\n  for isize i = 2; i < n; i++\
    \ {\n    while n % i == 0 {\n      factors.push_back(i);\n      n /= i;\n    }\n\
    \  }\n  if n != 1 {\n    factors.push_back(n);\n  }\n  return factors;", "  let\
    \ factors = vec![];\n  for isize i = 2; i < n; i++ {\n    if n % i == 0 {\n  \
    \    factors = factors.concat(vec![i, n / i]);\n    }\n  }\n  return factors;",
  "  let factors = vec![];\n  let i = 2;\n  while i * i <= n {\n    if n % i == 0\
    \ {\n      factors = factors.concat(vec![i, n / i]);\n      n = n / i;\n    }\
    \ else {\n      i += 1;\n    }\n  }\n  if n > 1 {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = Vec::new(0);\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n\
    \ > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", " \
    \ let factors = vec![];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i ==\
    \ 0) {\n      factors = factors.concat(vec![i, n / i]);\n      n = n / i;\n  \
    \  } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = vec![];\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n /\
    \ i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n\
    \ > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", " \
    \ let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    while (n % i == 0) {\n      factors = factors.push(i);\n    \
    \  n /= i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors = factors.push(n);\n\
    \  }\n  return factors;", "  let factors = vec![];\n  for isize i = 2; i < n;\
    \ i++ {\n    while n % i == 0 {\n      factors = vec![i, factors];\n      n /=\
    \ i;\n    }\n  }\n  if n != 1 {\n    factors = vec![n, factors];\n  }\n  factors",
  "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    while (n\
    \ % i == 0) {\n      factors.push_back(i);\n      n /= i;\n    }\n    i += 1;\n\
    \  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;", "  let\
    \ factors = Vec::new(0);\n  let i = 2;\n  while (i * i <= n) {\n    while (n %\
    \ i == 0) {\n      factors = factors.concat(vec![i, 1]);\n      n /= i;\n    }\n\
    \    i += 1;\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n, 1]);\n\
    \  }\n  return factors;", "  let factors = Vec::new(n);\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = vec![];\n  let i = 2;\n\
    \  while (i * i <= n) {\n    if (n % i == 0) {\n      factors = vec![i, n / i];\n\
    \      break;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors = vec![n];\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n      n\
    \ /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new(0);\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = Vec::new();\n  let i =\
    \ 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.push(i);\n\
    \      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.push(n);\n  }\n  return factors;", "  let factors = Vec::new();\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n\
    \      n /= i;\n    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  factors", "  let factors = Vec::new(0);\n  let i = 2;\n  while (i * i\
    \ <= n) {\n    while (n % i == 0) {\n      factors = factors.concat(vec![i, 1]);\n\
    \      n /= i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n,\
    \ 1]);\n  }\n  return factors;", "  let factors = vec![];\n  let i = 2;\n  while\
    \ i * i <= n {\n    if n % i == 0 {\n      factors = vec![i, n / i];\n      break;\n\
    \    }\n    i += 1;\n  }\n  if n > 1 {\n    factors = vec![n];\n  }\n  return\
    \ factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n\
    \  }\n  factors", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <=\
    \ n) {\n    while (n % i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n\
    \      n = n / i;\n    }\n    i = i + 1;\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if\
    \ (n > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;",
  "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  return factors;", "  let factors = Vec::new(0);\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    while (n % i == 0) {\n      factors = factors.plus(i);\n    \
    \  n /= i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n\
    \  }\n  factors", "  let factors = vec![];\n  for isize i = 2; i < n; i++ {\n\
    \    while n % i == 0 {\n      factors = append(factors, i);\n      n /= i;\n\
    \    }\n  }\n  if n > 1 {\n    factors = append(factors, n);\n  }\n  factors",
  "  let factors = Vec::new(0);\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  factors", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    while (n % i == 0) {\n      factors.push_back(i);\n      n /= i;\n  \
    \  }\n    i += 1;\n  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return\
    \ factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    if (n % i == 0) {\n      factors.push_back(i);\n      n /= i;\n    }\
    \ else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.push(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.push(n);\n  }\n  return factors;", "  let factors = Vec::new();\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors =\
    \ factors.concat(vec![i, n / i]);\n      n = n / i;\n    } else {\n      i = i\
    \ + 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n \
    \ }\n  return factors;", "  let factors = vec![];\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n /\
    \ i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n\
    \ > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", " \
    \ let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  factors", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    if (n % i == 0) {\n      factors = factors.push(i);\n      n /= i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.push(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n\
    \ > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", " \
    \ let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n /\
    \ i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n\
    \ > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", " \
    \ let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n      n\
    \ /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = Vec::new();\n  let i =\
    \ 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n\
    \      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  factors.push_back(1);\n  return factors;", "  let factors = vec![];\n\
    \  let i = 2;\n  while (n % i == 0) {\n    factors = vec![i, n / i];\n    n =\
    \ n / i;\n    i = i + 1;\n  }\n  if (n > 1) {\n    factors = vec![n, n];\n  }\n\
    \  return factors;", "  let factors = Vec::new(0);\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    while (n % i == 0) {\n      factors = factors.plus(i);\n    \
    \  n /= i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n\
    \  }\n  factors", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <=\
    \ n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n\
    \  }\n  factors", "  let factors = Vec::new();\n  for isize i = 2; i < n; i++\
    \ {\n    while n % i == 0 {\n      factors.push_back(i);\n      n /= i;\n    }\n\
    \  }\n  if n != 1 {\n    factors.push_back(n);\n  }\n  return factors;", "  let\
    \ factors = Vec::new(0);\n  let i = 2;\n  while (i * i <= n) {\n    while (n %\
    \ i == 0) {\n      factors = factors.concat(vec![i, 1]);\n      n /= i;\n    }\n\
    \    i += 1;\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n, 1]);\n\
    \  }\n  return factors;", "  let factors = Vec::new(0);\n  let i = 2;\n  while\
    \ (n > 1) {\n    while (n % i == 0) {\n      factors = factors.plus(i);\n    \
    \  n /= i;\n    }\n    i += 1;\n  }\n  factors", "  let factors = Vec::new();\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n\
    \      n /= i;\n    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    while (n % i == 0) {\n      factors.push_back(i);\n    \
    \  n /= i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  return factors;", "  let factors = vec![];\n  let\
    \ i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if\
    \ (n > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;",
  "  let factors = vec![];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i ==\
    \ 0) {\n      factors = factors.concat(vec![i, n / i]);\n      n = n / i;\n  \
    \  } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = vec![];\n  let i = 2;\n  while i *\
    \ i <= n {\n    if n % i == 0 {\n      factors = factors.concat(vec![i, n / i]);\n\
    \      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if n > 1 {\n\
    \    factors = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors\
    \ = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n\
    \      factors = factors.plus(i);\n      n /= i;\n    } else {\n      i += 1;\n\
    \    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n  factors",
  "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  return factors;", "  let factors = vec![];\n  let i = 2;\n  while (i * i <=\
    \ n) {\n    if (n % i == 0) {\n      factors = factors.push(i);\n      n /= i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.push(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    while (n % i == 0) {\n      factors = factors.push(i);\n\
    \      n /= i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors = factors.push(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    while (n % i == 0) {\n      factors.push_back(i);\n    \
    \  n /= i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n\
    \ > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", " \
    \ let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  factors", "  let factors = Vec::new(0);\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n\
    \  }\n  factors", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <=\
    \ n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n      n /= i;\n  \
    \  } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n      n\
    \ /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = vec![];\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n /\
    \ i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n\
    \ > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", " \
    \ let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    while (n\
    \ % i == 0) {\n      factors.push_back(i);\n      n /= i;\n    }\n    i += 1;\n\
    \  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;", "  let\
    \ factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    while (n %\
    \ i == 0) {\n      factors.push_back(i);\n      n /= i;\n    }\n    i += 1;\n\
    \  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;", "  let\
    \ factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i ==\
    \ 0) {\n      factors.push_back(i);\n      n /= i;\n    } else {\n      i += 1;\n\
    \    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;",
  "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.push(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.push(n);\n  }\n\
    \  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n      n\
    \ /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = Vec::new();\n  let i =\
    \ 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n\
    \ > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", " \
    \ let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    while (n\
    \ % i == 0) {\n      factors.push_back(i);\n      n /= i;\n    }\n    i += 1;\n\
    \  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;", "  let\
    \ factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i ==\
    \ 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n      i\
    \ += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n  factors",
  "  let factors = Vec::new(0);\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  factors", "  let factors = vec![];\n  let i = 2;\n  while (i * i <= n) {\n\
    \    if (n % i == 0) {\n      factors = vec![i, n / i];\n      break;\n    }\n\
    \    i += 1;\n  }\n  if (n > 1) {\n    factors = vec![n];\n  }\n  return factors;",
  "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n      n = n / i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = Vec::new(n);\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = vec![];\n  for isize i\
    \ = 2; i < n; i++ {\n    if n % i == 0 {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n    }\n  }\n  return factors;", "  let factors = Vec::new();\n  let\
    \ i = 2;\n  while (i * i <= n) {\n    while (n % i == 0) {\n      factors.push_back(i);\n\
    \      n /= i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new(0);\n  let i = 2;\n  while\
    \ (n > 1) {\n    while (n % i == 0) {\n      factors = factors.plus(i);\n    \
    \  n /= i;\n    }\n    i += 1;\n  }\n  factors", "  let factors = Vec::new(0);\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors =\
    \ factors.plus(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n \
    \ if (n > 1) {\n    factors = factors.plus(n);\n  }\n  return factors;", "  let\
    \ factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i ==\
    \ 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n      i\
    \ += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n  return\
    \ factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if\
    \ (n > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;",
  "  let factors = Vec::new(0);\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n      n = n / i;\n\
    \    } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = vec![];\n  for isize i = 2; i < n;\
    \ i++ {\n    while n % i == 0 {\n      factors = append(factors, i);\n      n\
    \ /= i;\n    }\n  }\n  if n != 1 {\n    factors = append(factors, n);\n  }\n \
    \ factors", "  let factors = Vec::new(0);\n  for isize i = 2; i < n; i++ {\n \
    \   while n % i == 0 {\n      factors = factors.concat(vec![i]);\n      n /= i;\n\
    \    }\n  }\n  if n != 1 {\n    factors = factors.concat(vec![n]);\n  }\n  return\
    \ factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    if (n % i == 0) {\n      factors.push_back(i);\n      n /= i;\n    }\
    \ else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new(0);\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = Vec::new(0);\n  for isize\
    \ i = 2; i < n; i++ {\n    while n % i == 0 {\n      factors = factors.concat(i);\n\
    \      n /= i;\n    }\n  }\n  if n > 1 {\n    factors = factors.concat(n);\n \
    \ }\n  factors", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <=\
    \ n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n\
    \ > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", " \
    \ let factors = Vec::new(n);\n  let i = 2;\n  while (i * i <= n) {\n    if (n\
    \ % i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n\
    \      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n \
    \ }\n  factors", "  let factors = vec![];\n  let i = 2;\n  while i * i <= n {\n\
    \    if n % i == 0 {\n      factors = factors.concat(vec![i, n / i]);\n      n\
    \ = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if n > 1 {\n    factors\
    \ = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors = Vec::new();\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n\
    \      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  return factors;", "  let factors = Vec::new();\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors =\
    \ factors.plus(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n \
    \ if (n > 1) {\n    factors = factors.plus(n);\n  }\n  return factors;", "  let\
    \ factors = Vec::new(0);\n  let i = 2;\n  while (i * i <= n) {\n    while (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    }\n    i +=\
    \ 1;\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n  factors", " \
    \ let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n      n = n / i;\n\
    \    } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if\
    \ (n > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;",
  "  let factors = vec![];\n  let i = 2;\n  while i * i <= n {\n    if n % i == 0\
    \ {\n      factors = factors.concat(vec![i, n / i]);\n      n = n / i;\n    }\
    \ else {\n      i = i + 1;\n    }\n  }\n  if n > 1 {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = vec![];\n  for isize i\
    \ = 0; i < n; i++ {\n    if n % i == 0 {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n    }\n  }\n  return factors;", "  let factors = Vec::new(n);\n  let\
    \ i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n\
    \      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = vec![];\n  for isize i\
    \ = 2; i < n; i++ {\n    while n % i == 0 {\n      factors = vec![i, factors];\n\
    \      n /= i;\n    }\n  }\n  if n != 1 {\n    factors = vec![n, factors];\n \
    \ }\n  factors", "  let factors = vec![];\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n\
    \      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n\
    \    factors = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors\
    \ = vec![];\n  for isize i = 0; i < n; i++ {\n    if n % i == 0 {\n      factors\
    \ = factors.concat(vec![i, n / i]);\n    }\n  }\n  return factors;", "  let factors\
    \ = Vec::new(0);\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i == 0)\
    \ {\n      factors = factors.concat(vec![i, 1]);\n      n /= i;\n    }\n    i\
    \ += 1;\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n, 1]);\n  }\n\
    \  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    while (n % i == 0) {\n      factors.push_back(i);\n      n /=\
    \ i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n\
    \  return factors;", "  let factors = vec![];\n  let i = 2;\n  while (i * i <=\
    \ n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n\
    \      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n\
    \    factors = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors\
    \ = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n\
    \      factors = factors.plus(i);\n      n /= i;\n    } else {\n      i += 1;\n\
    \    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n  factors",
  "  let factors = Vec::new(n);\n  let i = 2;\n  while (i * i <= n) {\n    while (n\
    \ % i == 0) {\n      factors = factors.push(i);\n      n /= i;\n    }\n    i +=\
    \ 1;\n  }\n  if (n > 1) {\n    factors = factors.push(n);\n  }\n  return factors;",
  "  let factors = Vec::new(n);\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  factors", "  let factors = vec![];\n  let i = 2;\n  while i * i <= n {\n  \
    \  if n % i == 0 {\n      factors = factors.concat(vec![i, n / i]);\n      n =\
    \ n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if n > 1 {\n    factors =\
    \ factors.concat(vec![n]);\n  }\n  return factors;", "  let factors = Vec::new(0);\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors =\
    \ factors.concat(vec![i, n / i]);\n      n = n / i;\n    } else {\n      i +=\
    \ 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n  }\n\
    \  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    while (n % i == 0) {\n      factors.push_back(i);\n      n /=\
    \ i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n\
    \  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n /\
    \ i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n\
    \ > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", " \
    \ let factors = Vec::new(0);\n  let i = 2;\n  while (i * i <= n) {\n    if (n\
    \ % i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n\
    \      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n \
    \ }\n  factors", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <=\
    \ n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n\
    \  }\n  factors", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <=\
    \ n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n      n /= i;\n  \
    \  } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new(0);\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  return factors;", "  let factors = Vec::new(0);\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors =\
    \ factors.plus(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n \
    \ if (n > 1) {\n    factors = factors.plus(n);\n  }\n  return factors;", "  let\
    \ factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    while (n %\
    \ i == 0) {\n      factors = factors.push_back(i);\n      n /= i;\n    }\n   \
    \ i += 1;\n  }\n  if (n > 1) {\n    factors = factors.push_back(n);\n  }\n  return\
    \ factors;", "  let factors = Vec::new(n);\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n\
    \  }\n  factors", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <=\
    \ n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n      n /= i;\n  \
    \  } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = vec![];\n  for isize i\
    \ = 2; i < n; i++ {\n    while n % i == 0 {\n      factors = vec![i, factors];\n\
    \      n /= i;\n    }\n  }\n  if n != 1 {\n    factors = vec![n, factors];\n \
    \ }\n  factors", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <=\
    \ n) {\n    if (n % i == 0) {\n      factors = factors.push_back(i);\n      n\
    \ /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.push_back(n);\n  }\n  return factors;", "  let factors = Vec::new();\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors =\
    \ factors.plus(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n \
    \ if (n > 1) {\n    factors = factors.plus(n);\n  }\n  return factors;", "  let\
    \ factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i ==\
    \ 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n      i\
    \ += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n  return\
    \ factors;", "  let factors = vec![];\n  let i = 2;\n  while (i * i <= n) {\n\
    \    if (n % i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n    \
    \  n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n  \
    \  factors = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors\
    \ = vec![];\n  for isize i = 2; i < n; i++ {\n    if n % i == 0 {\n      factors\
    \ = factors.concat(vec![i, n / i]);\n    }\n  }\n  return factors;", "  let factors\
    \ = vec![];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n   \
    \   factors = factors.concat(vec![i, n / i]);\n      n = n / i;\n    } else {\n\
    \      i = i + 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = vec![];\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    while (n % i == 0) {\n      factors = vec![i, factors];\n   \
    \   n /= i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors = vec![n, factors];\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  return factors;", "  let factors = vec![];\n  for\
    \ isize i = 2; i < n; i++ {\n    while n % i == 0 {\n      factors = vec![i, n\
    \ / i];\n      n /= i;\n    }\n  }\n  if n > 1 {\n    factors = vec![n];\n  }\n\
    \  return factors;", "  let factors = vec![];\n  let i = 2;\n  while i * i <=\
    \ n {\n    if n % i == 0 {\n      factors = factors.concat(vec![i, n / i]);\n\
    \      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if n > 1 {\n   \
    \ factors = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors\
    \ = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n\
    \      factors.push_back(i);\n      n /= i;\n    } else {\n      i += 1;\n   \
    \ }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;",
  "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    while (n % i == 0) {\n      factors.push_back(i);\n      n /=\
    \ i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n\
    \  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n      n /= i;\n\
    \    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  factors.reverse();\n  return factors;", "  let factors = Vec::new(n);\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors =\
    \ factors.plus(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n \
    \ if (n > 1) {\n    factors = factors.plus(n);\n  }\n  factors", "  let factors\
    \ = Vec::new(n);\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n\
    \      factors = factors.plus(i);\n      n /= i;\n    } else {\n      i += 1;\n\
    \    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n  factors",
  "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n      n = n / i;\n\
    \    } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = vec![];\n  for isize i = 2; i <= n;\
    \ i++ {\n    while n % i == 0 {\n      factors = vec![i, factors];\n      n /=\
    \ i;\n    }\n  }\n  if n != 1 {\n    factors = vec![n, factors];\n  }\n  factors",
  "  let factors = Vec::new(0);\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  factors", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n\
    \      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n\
    \    factors = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors\
    \ = vec![];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n   \
    \   factors = factors.concat(vec![i, n / i]);\n      n = n / i;\n    } else {\n\
    \      i = i + 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = vec![];\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n /\
    \ i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n\
    \ > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", " \
    \ let factors = vec![];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i ==\
    \ 0) {\n      factors = factors.push(i);\n      n /= i;\n    } else {\n      i\
    \ += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.push(n);\n  }\n  return\
    \ factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n\
    \  }\n  factors", "  let factors = vec![];\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n\
    \      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n\
    \    factors = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors\
    \ = Vec::new();\n  for isize i = 2; i < n; i++ {\n    while n % i == 0 {\n   \
    \   factors.push_back(i);\n      n /= i;\n    }\n  }\n  if n > 1 {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = Vec::new();\n  let i =\
    \ 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n\
    \      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  factors.push_back(1);\n  return factors;", "  let factors = Vec::new(0);\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors =\
    \ factors.plus(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n \
    \ if (n > 1) {\n    factors = factors.plus(n);\n  }\n  factors", "  let factors\
    \ = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i == 0)\
    \ {\n      factors.push_back(i);\n      n /= i;\n    }\n    i += 1;\n  }\n  if\
    \ (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;", "  let factors\
    \ = Vec::new(0);\n  let i = 2;\n  while i * i <= n {\n    if n % i == 0 {\n  \
    \    factors = factors.plus(i);\n      n /= i;\n    } else {\n      i += 1;\n\
    \    }\n  }\n  if n > 1 {\n    factors = factors.plus(n);\n  }\n  factors", " \
    \ let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n \
    \     i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n\
    \  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    if (n % i == 0) {\n      factors = factors.push(i);\n      n\
    \ /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.push(n);\n  }\n  return factors;", "  let factors = vec![];\n  for\
    \ isize i = 2; i <= n; i *= 2 {\n    if n % i == 0 {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n    }\n  }\n  return factors;", "  let factors = Vec::new();\n  let\
    \ i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.plus(i);\n\
    \      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.plus(n);\n  }\n  factors", "  let factors = Vec::new(0);\n  let i\
    \ = 2;\n  while (i * i <= n) {\n    while (n % i == 0) {\n      factors = factors.plus(i);\n\
    \      n /= i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n      n\
    \ /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if\
    \ (n > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;",
  "  let factors = Vec::new(0);\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n      n = n / i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = vec![];\n  let i = 2;\n  while (i *\
    \ i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n /\
    \ i]);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1)\
    \ {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors\
    \ = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n\
    \      factors.push_back(i);\n      n /= i;\n    } else {\n      i += 1;\n   \
    \ }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;",
  "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors.push_back(i);\n      n /= i;\n    } else {\n      i\
    \ += 1;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return\
    \ factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n)\
    \ {\n    while (n % i == 0) {\n      factors = factors.concat(vec![i, 1]);\n \
    \     n /= i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n,\
    \ 1]);\n  }\n  return factors;", "  let factors = vec![];\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i,\
    \ n / i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if\
    \ (n > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;",
  "  let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n %\
    \ i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n      n = n / i;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors = factors.push(i);\n  \
    \    n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors\
    \ = factors.push(n);\n  }\n  return factors;", "  let factors = Vec::new();\n\
    \  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      factors =\
    \ factors.concat(vec![i, n / i]);\n      n = n / i;\n    } else {\n      i = i\
    \ + 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n \
    \ }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while (i\
    \ * i <= n) {\n    if (n % i == 0) {\n      factors = factors.concat(vec![i, n\
    \ / i]);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n\
    \ > 1) {\n    factors = factors.concat(vec![n]);\n  }\n  return factors;", " \
    \ let factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    while (n\
    \ % i == 0) {\n      factors = factors.concat(vec![i, n / i]);\n      n = n /\
    \ i;\n    }\n    i = i + 1;\n  }\n  if (n > 1) {\n    factors = factors.concat(vec![n]);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    while (n % i == 0) {\n      factors = factors.push(i);\n\
    \      n /= i;\n    }\n    i += 1;\n  }\n  if (n > 1) {\n    factors = factors.push(n);\n\
    \  }\n  return factors;", "  let factors = Vec::new();\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i == 0) {\n      factors.push_back(i);\n      n\
    \ /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n\
    \  }\n  return factors;", "  let factors = vec![];\n  let i = 2;\n  while i *\
    \ i <= n {\n    if n % i == 0 {\n      factors = factors.concat(vec![i, n / i]);\n\
    \      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if n > 1 {\n   \
    \ factors = factors.concat(vec![n]);\n  }\n  return factors;", "  let factors\
    \ = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i == 0)\
    \ {\n      factors.push_back(i);\n      n /= i;\n    }\n    i += 1;\n  }\n  if\
    \ (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;", "  let factors\
    \ = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n\
    \      factors.push_back(i);\n      n /= i;\n    } else {\n      i++;\n    }\n\
    \  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;", "  let\
    \ factors = Vec::new();\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i ==\
    \ 0) {\n      factors = factors.plus(i);\n      n /= i;\n    } else {\n      i\
    \ += 1;\n    }\n  }\n  if (n > 1) {\n    factors = factors.plus(n);\n  }\n  return\
    \ factors;"]
stop_tokens:
- "\n}"
