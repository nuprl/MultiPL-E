name: HumanEval_152_compare
language: rs
prompt: "/// I think we all remember that feeling when the result of some long-awaited\n\
  /// event is finally known. The feelings and thoughts you have at that moment are\n\
  /// definitely worth noting down and comparing.\n/// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n/// You are given\
  \ two vectors of scores and guesses of equal length, where each index shows a match.\
  \ \n/// Return a vector of the same length denoting how far off each guess was.\
  \ If they have guessed correctly,\n/// the value is 0, and if not, the value is\
  \ the absolute difference between the guess and the score.\n/// example:\n/// >>>\
  \ compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0,\
  \ 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4,\
  \ 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
  \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
  \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
completions: ["    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game)\
    \ {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;", "    let diffs\
    \ = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score\
    \ - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;", "    let diffs\
    \ = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score\
    \ - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;", "    let diffs\
    \ = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score\
    \ - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;", "    let diffs\
    \ = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score ==\
    \ guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i]\
    \ = abs(score - guess_);\n        }\n    });\n    return diffs;", "    let diffs\
    \ = Vec.new(game.len);\n    for (i, (score, guess) in guess.zip(game)) {\n   \
    \     diffs[i] = abs(score - guess);\n    }\n    return diffs;", "    let diffs\
    \ = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score\
    \ - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;", "    let diff\
    \ = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n   \
    \ }\n    return Vec::from(diff);", "    let diffs = Vec.new(guess.len);\n    for\
    \ (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i]\
    \ = diff;\n    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (score, guess) in guess.enumerate()) {\n        diffs[i] = abs(score\
    \ - guess);\n    }\n    return diffs;", "    let diff = Vec.of_len(game.len);\n\
    \    for (i, (g, gt)) in guess.zip(game) {\n        diff[i] = gt - g;\n    }\n\
    \    return diff;", "    let diffs = Vec.new(game.len);\n    for i in 0..game.len\
    \ {\n        let guess_i = guess[i];\n        let game_i = game[i];\n        if\
    \ guess_i == game_i {\n            diffs[i] = 0;\n        } else {\n         \
    \   diffs[i] = abs(guess_i - game_i);\n        }\n    }\n    return diffs;", " \
    \   let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n       \
    \ let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;",
  "    let diffs = Vec.new(guess.len);\n    for (i, (score, guess_) => {\n       \
    \ let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;",
  "    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j -\
    \ i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));", "    let\
    \ diffs = Vec.new(game.len);\n    for (i, (g, s)) in guess.iter().zip(game) {\n\
    \        diffs.set(i, abs(g - s));\n    }\n    return diffs;", "    let diffs\
    \ = Vec.new(game.len);\n    for i in 0..game.len {\n        let score = game[i];\n\
    \        let guess = guess[i];\n        let diff = abs(score - guess);\n     \
    \   diffs[i] = diff;\n    }\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for i in 0..game.len {\n        let score = game[i];\n        let guess =\
    \ guess[i];\n        let diff = score - guess;\n        diffs[i] = diff;\n   \
    \ }\n    return diffs;", "    let diff = 0;\n    for (i, j) in guess.zip(game)\
    \ {\n        diff += abs(j - i);\n    }\n    return Vec::from(game) * diff;",
  "    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let\
    \ diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;",
  "    let diff = Vec.of_ints(game.len);\n    for (i, v) in guess.iter().zip(game)\
    \ {\n        diff[i] = abs(v - guess[i]);\n    }\n    return diff;", "    let\
    \ diff = Vec.from(game);\n    for (i, v) in guess {\n        diff[i] = v - game[i];\n\
    \    }\n    return diff;", "    let diffs = Vec.new(game.len);\n    for i in 0..game.len\
    \ {\n        let guess_i = guess[i];\n        let game_i = game[i];\n        if\
    \ guess_i == game_i {\n            diffs[i] = 0;\n        } else {\n         \
    \   diffs[i] = abs(guess_i - game_i);\n        }\n    }\n    return diffs;", " \
    \   let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game)\
    \ {\n        diff[i] = abs(g - game[i]);\n    }\n    return diff;", "    let diffs\
    \ = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score\
    \ - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;", "    let diffs\
    \ = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score\
    \ - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;", "    let diffs\
    \ = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score\
    \ - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;", "    let diffs\
    \ = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        if (score ==\
    \ guess_) {\n            diffs[i] = 0;\n        } else {\n            diffs[i]\
    \ = abs(score - guess_);\n        }\n    });\n    return diffs;", "    let diff\
    \ = 0;\n    for (i, j) in guess.zip(game) {\n        if (j != i) {\n         \
    \   diff += 1;\n        }\n    }\n    return game.map(i => diff - i);", "    let\
    \ diffs = Vec.new(guess.len);\n    for (i, _) in guess.iter() {\n        let guess_score\
    \ = game[i];\n        let diff = guess_score - guess[i];\n        diffs[i] = diff;\n\
    \    }\n    return diffs;", "    let diffs = Vec.new(game.len);\n    for (i, (score,\
    \ guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n  \
    \      } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n\
    \    return diffs;", "    let diff = Vec.of_ints(game.len);\n    for i in 0..game.len\
    \ {\n        if game[i] != guess[i] {\n            diff[i] = game[i] - guess[i];\n\
    \        }\n    }\n    return diff;", "    let diffs = Vec.new(game.len);\n  \
    \  for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i]\
    \ = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n      \
    \  }\n    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n    for\
    \ i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i] =\
    \ 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n    \
    \    }\n    }\n    return diffs;", "    let diffs = Vec.new(guess.len);\n    for\
    \ (i, _) in guess {\n        diffs[i] = game[i] - guess[i];\n    }\n    return\
    \ diffs;", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) =>\
    \ {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n \
    \   return diffs;", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess_)\
    \ => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n\
    \    return diffs;", "    let diffs = Vec.new(guess.len);\n    for (i, g) in guess.iter()\
    \ {\n        let guess_score = game[i];\n        let diff = guess_score - g;\n\
    \        diffs[i] = diff;\n    }\n    return diffs;", "    let diff = Vec::new();\n\
    \    for (i, j) in guess.zip(game) {\n        diff.push(abs(j - i));\n    }\n\
    \    return diff;", "    let diffs = Vec.new(game.len);\n    for i in 0..game.len\
    \ {\n        let guess_i = guess[i];\n        let game_i = game[i];\n        if\
    \ guess_i == game_i {\n            diffs[i] = 0;\n        } else {\n         \
    \   diffs[i] = abs(guess_i - game_i);\n        }\n    }\n    return diffs;", " \
    \   let diff = 0;\n    for i in 0..game.len() {\n        if game[i] != guess[i]\
    \ {\n            diff += abs(game[i] - guess[i]);\n        }\n    }\n    return\
    \ Vec::from(diff);", "    let diffs = Vec.new(game.len);\n    for (i, (score,\
    \ guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n\
    \    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n    for i in\
    \ 0..game.len {\n        let diff = guess[i] - game[i];\n        diffs[i] = diff;\n\
    \    }\n    return diffs;", "    let diffs = Vec.new(game.len);\n    for (i, (score,\
    \ guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n\
    \    });\n    return diffs;", "    let diffs = Vec.new(guess.len);\n    for (i,\
    \ (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] =\
    \ diff;\n    });\n    return diffs;", "    let diffs = Vec.new(guess.len);\n \
    \   for (i, g) in guess.iter().zip(game) {\n        if (g) {\n            diffs[i]\
    \ = 0;\n        } else {\n            diffs[i] = abs(g - game[i]);\n        }\n\
    \    }\n    return diffs;", "    let diffs = Vec.new(guess.len);\n    for (i,\
    \ (_, guess_val) in guess) {\n        let score = game[i];\n        diffs[i] =\
    \ abs(guess_val - score);\n    }\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (score, guess_) => {\n        if (score == guess_) {\n          \
    \  diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n\
    \        }\n    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (score, guess_) => {\n        let diff = score - guess_;\n      \
    \  diffs[i] = diff;\n    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (g, g2) in guess.iter()) {\n        if (g2 == game[i]) {\n      \
    \      diffs[i] = 0;\n        } else {\n            diffs[i] = abs(g2 - game[i]);\n\
    \        }\n    }\n    return diffs;", "    let diffs = Vec.new(game.len);\n \
    \   for (i, (score, guess_) => {\n        let diff = score - guess_;\n       \
    \ diffs[i] = diff;\n    });\n    return diffs;", "    let diff = Vec.of_len(game.len);\n\
    \    for (i, (g, g2) in guess.zip(game)) {\n        diff[i] = g2 - g;\n    }\n\
    \    return diff;", "    let diff = 0;\n    for (i, g) in guess.iter().zip(game)\
    \ {\n        diff += abs(g - i);\n    }\n    return Vec::from(diff);", "    let\
    \ diff = 0;\n    for (i, j) in guess.zip(game) {\n        if (i != j) {\n    \
    \        diff += abs(i - j);\n        }\n    }\n    return Vec::from(diff);",
  "    let diff = Vec.from(game);\n    for i in guess {\n        diff[i] = abs(guess[i]\
    \ - game[i]);\n    }\n    return diff;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (score, guess_) => {\n        let diff = score - guess_;\n      \
    \  diffs[i] = diff;\n    });\n    return diffs;", "    let diffs = Vec.new(guess.len);\n\
    \    for (i, (score, guess_) => {\n        if (score == guess_) {\n          \
    \  diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n\
    \        }\n    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (score, guess_) => {\n        let diff = score - guess_;\n      \
    \  diffs[i] = diff;\n    });\n    return diffs;", "    let diff = Vec.of_ints(game.len);\n\
    \    for (i, (g, gi) => {\n        if (game[i] == guess[gi]) {\n            diff[i]\
    \ = 0;\n        } else {\n            diff[i] = abs(game[i] - guess[gi]);\n  \
    \      }\n    });\n    return diff;", "    let diffs = Vec.new(game.len);\n  \
    \  for (i, (score, guess_) => {\n        if (score == guess_) {\n            diffs[i]\
    \ = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n      \
    \  }\n    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n    for\
    \ (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i]\
    \ = diff;\n    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (score, guess_) => {\n        let diff = score - guess_;\n      \
    \  diffs[i] = diff;\n    });\n    return diffs;", "    let diff = Vec.from_iter(game.len,\
    \ 0);\n    for i in 0..game.len {\n        diff[i] = guess[i] - game[i];\n   \
    \ }\n    return diff;", "    let diffs = Vec.new(game.len);\n    for (i, (score,\
    \ guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n\
    \    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n    for (i,\
    \ (g, g2) in guess.iter()) {\n        diffs[i] = abs(g - g2);\n    }\n    return\
    \ diffs;", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in\
    \ guess.iter()) {\n        diffs[i] = score - guess;\n    }\n    return diffs;",
  "    let diffs = Vec.new(game.len);\n    for (i, (_, g) in guess) {\n        diffs[i]\
    \ = game[i] - g;\n    }\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (score, guess_) => {\n        if (score == guess_) {\n          \
    \  diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n\
    \        }\n    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (score, guess_) => {\n        let diff = score - guess_;\n      \
    \  diffs[i] = diff;\n    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i]\
    \ = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n  \
    \      }\n    }\n    return diffs;", "    let diffs = Vec.new(guess.len);\n  \
    \  for (i, _) in guess.iter() {\n        diffs[i] = game[i] - guess[i];\n    }\n\
    \    return diffs;", "    let diffs = Vec.new(game.len);\n    for (i, (score,\
    \ guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n\
    \    });\n    return diffs;", "    let diff = Vec.of_ints(game.len);\n    for\
    \ (i, (g, gi) => {\n        if (game[i] == gi) {\n            diff[i] = 0;\n \
    \       } else {\n            diff[i] = abs(gi - g);\n        }\n    });\n   \
    \ return diff;", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess_)\
    \ => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n\
    \    return diffs;", "    let diff = Vec.from_iter(game.len, 0);\n    for (i,\
    \ g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n\
    \    return diff;", "    let diff = Vec.from(game);\n    for i in guess {\n  \
    \      diff[i] = abs(guess[i] - game[i]);\n    }\n    return diff;", "    let\
    \ diff = 0;\n    for (i, g) in guess.iter().zip(game) {\n        if (g) {\n  \
    \          diff += 1;\n        }\n    }\n    return Vec::from(diff);", "    let\
    \ diff = Vec.from_iter(game.len, 0);\n    for i in 0..game.len {\n        if guess[i]\
    \ == game[i] {\n            diff[i] = 0;\n        } else {\n            diff[i]\
    \ = game[i] - guess[i];\n        }\n    }\n    return diff;", "    let diff =\
    \ Vec.from(game);\n    for (i, v) in guess {\n        diff[i] = v - game[i];\n\
    \    }\n    return diff;", "    let diffs = Vec.new(game.len);\n    for (i, (g,\
    \ gt) => {\n        if (g == gt) {\n            diffs[i] = 0;\n        } else\
    \ {\n            diffs[i] = abs(g - gt);\n        }\n    });\n    return diffs;",
  "    let diff = Vec::new();\n    for (i, j) in guess.zip(game) {\n        if (j\
    \ == i) {\n            diff.push(0);\n        } else {\n            diff.push(abs(j\
    \ - i));\n        }\n    }\n    return diff;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (score, guess_) => {\n        if (score == guess_) {\n          \
    \  diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n\
    \        }\n    });\n    return diffs;", "    let diff = Vec.of_ints(game.len);\n\
    \    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n\
    \    }\n    return diff;", "    let diff = Vec.of_len(game.len);\n    for (i,\
    \ g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n\
    \    return diff;", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess)\
    \ in guess.zip(game)) {\n        diffs[i] = abs(score - guess);\n    }\n    return\
    \ diffs;", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) =>\
    \ {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else\
    \ {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return\
    \ diffs;", "    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        if\
    \ (j == i) {\n            diff = 0;\n        } else {\n            diff = j -\
    \ i;\n        }\n    }\n    return game.map(i => abs(i - guess.get(i))).sum();",
  "    let diffs = Vec.new(guess.len);\n    for i in guess {\n        if i == game[i]\
    \ {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = game[i]\
    \ - guess[i];\n        }\n    }\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (score, guess_) => {\n        let diff = score - guess_;\n      \
    \  diffs[i] = diff;\n    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for i in 0..game.len {\n        if guess[i] != game[i] {\n            diffs[i]\
    \ = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs;", "    let diff\
    \ = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n   \
    \ }\n    return Vec::from(diff);", "    let diff = Vec.of_len(game.len);\n   \
    \ for i in 0..game.len {\n        diff[i] = abs(game[i] - guess[i]);\n    }\n\
    \    return diff;", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess_)\
    \ => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else\
    \ {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return\
    \ diffs;", "    let diff = Vec.from(game);\n    for i in guess {\n        diff[i]\
    \ = game[i] - guess[i];\n    }\n    return diff;", "    let diffs = Vec.new(game.len);\n\
    \    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i]\
    \ = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n  \
    \      }\n    }\n    return diffs", "    let diffs = Vec.new(game.len);\n    for\
    \ (i, (score, guess) in guess.enumerate()) {\n        diffs[i] = abs(score - guess);\n\
    \    }\n    return diffs;", "    let diff = game.map(guess);\n    let diff_len\
    \ = diff.length;\n    let correct = game.map(guess.filter(x => x == 0));\n   \
    \ let correct_len = correct.length;\n    let diff_correct = diff.filter(x => x\
    \ == 0);\n    let diff_correct_len = diff_correct.length;\n    let correct_guess\
    \ = guess.filter(x => x == 0);\n    let correct_guess_len = correct_guess.length;\n\
    \    let diff_correct_guess = diff_correct.filter(x => x == 0);\n    let diff_correct_guess_len\
    \ = diff_correct_guess.length;\n    let correct_guess_diff = correct_guess.map(x\
    \ => x - correct_guess_len);\n    let correct_guess_diff_len = correct_guess_diff.length;\n\
    \    let diff_correct_guess_diff = diff_correct_guess.map(x => x - correct_guess_diff_len);\n\
    \    let diff_correct_guess_diff_len = diff_correct_guess_diff.length;\n    let\
    \ correct_guess_diff_correct = correct_guess.map(x => x - correct_guess_diff_len);\n\
    \    let correct_guess_diff_correct_len = correct_guess_diff_correct.length;\n\
    \    let diff_correct_guess_diff_correct = diff_correct_guess_diff.map(x => x\
    \ - correct_guess_diff_correct_len);\n    let diff_correct_guess_diff_correct_len\
    \ = diff_correct_guess_diff_correct.length;\n    let correct_guess_diff_correct_diff\
    \ = correct_guess.map(x => x - correct_guess_diff_correct_len);\n    let correct_guess_diff_correct_diff_len\
    \ = correct_guess_diff_correct_diff.length;\n    let diff_correct_guess_diff_correct_diff\
    \ = diff_correct_guess_diff_correct.map(x => x - correct_guess_diff_correct_diff_len);\n\
    \    let diff", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess)\
    \ in guess.enumerate()) {\n        diffs[i] = score - guess;\n    }\n    return\
    \ diffs;", "    let diff = Vec.of_len(game.len);\n    for i in 0..game.len {\n\
    \        diff[i] = guess[i] - game[i];\n    }\n    return diff;", "    let diffs\
    \ = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i]\
    \ {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i]\
    \ - game[i]);\n        }\n    }\n    return diffs;", "    let diff = Vec.from(game);\n\
    \    for (i, v) in guess {\n        diff[i] = v - game[i];\n    }\n    return\
    \ diff;", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) =>\
    \ {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n \
    \   return diffs;", "    let diff = Vec.of_ints(game.len);\n    for (i, (g, gt))\
    \ in guess.zip(game) {\n        diff[i] = gt - g;\n    }\n    return diff;", " \
    \   let diff = 0;\n    for (i, j) in guess.zip(game) {\n        if (i != j) {\n\
    \            diff += abs(i - j);\n        }\n    }\n    return Vec::from(diff);",
  "    let diff = 0;\n    for (i, g) in guess.iter().zip(game) {\n        diff +=\
    \ abs(g - i);\n    }\n    return Vec::from(diff);", "    let diff = 0;\n    for\
    \ (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return\
    \ Vec::from(diff);", "    let diffs = Vec.new(game.len);\n    for (i, (score,\
    \ guess) in guess.enumerate()) {\n        diffs[i] = score - guess;\n    }\n \
    \   return diffs;", "    let diff = Vec.of_ints(game.len());\n    for (i, g) in\
    \ guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return\
    \ diff;", "    let diffs = Vec.new(game.len);\n    for (i, (_, g) in guess) {\n\
    \        diffs[i] = game[i] - g;\n    }\n    return diffs;", "    let diff = Vec.of_ints(game.len);\n\
    \    for (i, g) in guess.iter().zip(game) {\n        diff[i] = g - game[i];\n\
    \    }\n    return diff;", "    let diffs = Vec.new(game.len);\n    for (i, (score,\
    \ guess_) => {\n        if (score == guess_) {\n            diffs[i] = 0;\n  \
    \      } else {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n\
    \    return diffs;", "    let diff = Vec.of_ints(game.len);\n    for (i, g) in\
    \ guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return\
    \ diff;", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) =>\
    \ {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n \
    \   return diffs;", "    let diff = Vec.of_ints(game.len);\n    for (i, g) in\
    \ guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n    }\n    return\
    \ diff;", "    let diff = 0;\n    for i in 0..game.len() {\n        if game[i]\
    \ != guess[i] {\n            diff += abs(game[i] - guess[i]);\n        }\n   \
    \ }\n    return Vec::from(diff);", "    let diff = game.map(guess);\n    let diff_abs\
    \ = diff.map(abs);\n    let diff_sum = diff_abs.fold(0, (a, b) => a + b);\n  \
    \  return diff_sum;", "    let diffs = Vec.new(game.len);\n    for (i, (score,\
    \ guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n\
    \    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n    for (i,\
    \ (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i] =\
    \ diff;\n    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n  \
    \  for (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i]\
    \ = diff;\n    });\n    return diffs;", "    let diff = 0;\n    for (i, j) in\
    \ guess.zip(game) {\n        diff = max(diff, abs(j - i));\n    }\n    return\
    \ game.map(i => diff - abs(i - guess.get(i)));", "    let diff = game.map(guess.map(x\
    \ => abs(x - guess[x])));\n    return diff;", "    let diffs = Vec.new(game.len);\n\
    \    for i in 0..game.len {\n        if guess[i] == game[i] {\n            diffs[i]\
    \ = 0;\n        } else {\n            diffs[i] = abs(guess[i] - game[i]);\n  \
    \      }\n    }\n    return diffs", "    let diffs = Vec.new(game.len);\n    for\
    \ (i, (score, guess) in guess.enumerate()) {\n        diffs.set(i, abs(score -\
    \ guess));\n    }\n    return diffs;", "    let diffs = Vec.new(guess.len);\n\
    \    for (i, (score, guess_) => {\n        let diff = score - guess_;\n      \
    \  diffs[i] = diff;\n    });\n    return diffs;", "    let diff = 0;\n    for\
    \ (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return\
    \ diff;", "    let diff = Vec.of_len(game.len);\n    for (i, (score, guess_) =>\
    \ {\n        diff[i] = score - guess_;\n    });\n    return diff;", "    let diff\
    \ = Vec.of_ints(game.len);\n    for (i, v) in guess.iter().zip(game) {\n     \
    \   diff[i] = v - guess[i];\n    }\n    return diff;", "    let diff = 0;\n  \
    \  for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return\
    \ Vec::from(diff);", "    let scores = game;\n    let guesses = guess;\n    let\
    \ diffs = Vec.new(guesses.len);\n    for (i in 0..guesses.len) {\n        let\
    \ score = scores[i];\n        let guess = guesses[i];\n        let diff = score\
    \ - guess;\n        diffs[i] = diff;\n    }\n    return diffs;", "    let diff\
    \ = Vec.of_ints(game.len);\n    for (i, v) in guess.iter().zip(game) {\n     \
    \   diff[i] = v - guess[i];\n    }\n    return diff;", "    let diff = Vec.of_ints(game.len);\n\
    \    for (i, v) in guess.iter().zip(game) {\n        diff[i] = v - v;\n    }\n\
    \    return diff;", "    let diffs = Vec.new(game.len);\n    for i in 0..game.len\
    \ {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else\
    \ {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return\
    \ diffs;", "    let diff = 0;\n    for (i, v) in guess.iter().zip(game) {\n  \
    \      diff += abs(v - i);\n    }\n    return Vec::from(diff);", "    let diff\
    \ = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n   \
    \ }\n    return Vec::from(diff);", "    let diffs = Vec.new(game.len);\n    for\
    \ (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i]\
    \ = diff;\n    });\n    return diffs;", "    let diff = Vec.of_len(game.len);\n\
    \    for (i, (g, g2) in guess.zip(game)) {\n        diff[i] = g2 - g;\n    }\n\
    \    return diff;", "    let diff = 0;\n    for (i, j) in guess.zip(game) {\n\
    \        diff += abs(j - i);\n    }\n    return Vec::from(diff);", "    let diff\
    \ = Vec.from(game);\n    for (i, g) in guess.iter() {\n        diff[i] = game[i]\
    \ - g;\n    }\n    return diff;", "    let diff = 0;\n    for (i, j) in guess.zip(game)\
    \ {\n        diff += abs(j - i);\n    }\n    return game.map(i => diff - abs(i\
    \ - guess.get(i)));", "    let diffs = Vec.new(game.len);\n    for i in 0..game.len\
    \ {\n        let guess_i = guess[i];\n        let game_i = game[i];\n        if\
    \ guess_i == game_i {\n            diffs[i] = 0;\n        } else {\n         \
    \   diffs[i] = abs(guess_i - game_i);\n        }\n    }\n    return diffs;", " \
    \   let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n       \
    \ let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;",
  "    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.enumerate())\
    \ {\n        let diff = score - guess;\n        diffs[i] = diff;\n    }\n    return\
    \ diffs;", "    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n \
    \       let diff = guess[i] - game[i];\n        diffs[i] = diff;\n    }\n    return\
    \ diffs;", "    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n \
    \       if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else {\n\
    \            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return\
    \ diffs;", "    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff\
    \ = diff + abs(j - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));",
  "    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff = diff + abs(j\
    \ - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));", "  \
    \  let diff = 0;\n    for (i, j) in guess.zip(game) {\n        if (i != j) {\n\
    \            diff += abs(i - j);\n        }\n    }\n    return game.map(i => diff\
    \ - i);", "    let diff = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game)\
    \ {\n        diff[i] = g - game[i];\n    }\n    return diff;", "    let diffs\
    \ = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i] == game[i]\
    \ {\n            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess[i]\
    \ - game[i]);\n        }\n    }\n    return diffs;", "    let diff = 0;\n    for\
    \ (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n    return\
    \ game.map(i => diff - abs(i - guess.get(i)));", "    let diffs = Vec.new(game.len);\n\
    \    for i in 0..game.len {\n        diffs[i] = guess[i] - game[i];\n    }\n \
    \   return diffs;", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess_)\
    \ => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n\
    \    return diffs;", "    let diffs = Vec.new(game.len);\n    for (i, (score,\
    \ guess_) => {\n        let diff = score - guess_;\n        diffs[i] = diff;\n\
    \    });\n    return diffs;", "    let diff = 0;\n    for (i, j) in guess.zip(game)\
    \ {\n        if (i != j) {\n            diff += abs(i - j);\n        }\n    }\n\
    \    return Vec::from(diff);", "    let diff = 0;\n    for (i, j) in guess.zip(game)\
    \ {\n        diff += abs(j - i);\n    }\n    return Vec::from(game) * diff;",
  "    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j -\
    \ i);\n    }\n    return Vec::from(diff);", "    let diff = Vec.of_len(game.len);\n\
    \    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n\
    \    }\n    return diff;", "    let diffs = Vec.new(guess.len);\n    for (i, _)\
    \ in guess {\n        diffs[i] = game[i] - guess[i];\n    }\n    return diffs;",
  "    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let\
    \ diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;",
  "  let diffs = Vec.new(game.len);\n  for (i, (score, guess_) => {\n    let diff\
    \ = score - guess_;\n    diffs[i] = diff;\n  });\n  return diffs;", "    let diffs\
    \ = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff = score\
    \ - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;", "    let diffs\
    \ = Vec.new(game.len);\n    for (i, (score, guess) in guess.zip(game)) {\n   \
    \     diffs[i] = abs(score - guess);\n    }\n    return diffs;", "    let diff\
    \ = 0;\n    for (i, j) in guess.zip(game) {\n        if (i != j) {\n         \
    \   diff += abs(i - j);\n        }\n    }\n    return Vec::from(diff);", "   \
    \ let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        let guess_i\
    \ = guess[i];\n        let game_i = game[i];\n        if guess_i == game_i {\n\
    \            diffs[i] = 0;\n        } else {\n            diffs[i] = abs(guess_i\
    \ - game_i);\n        }\n    }\n    return diffs;", "    let diff = 0;\n    for\
    \ (i, j) in guess.zip(game) {\n        diff = max(diff, abs(j - i));\n    }\n\
    \    return game.map(i => diff - i);", "    let diffs = Vec.new(game.len);\n \
    \   for (i, (g, g2) in guess.iter()) {\n        if (g2 == 0) {\n            diffs[i]\
    \ = 0;\n        } else {\n            diffs[i] = abs(g2 - g);\n        }\n   \
    \ }\n    return diffs;", "    let diff = Vec.of_ints(game.len);\n    for (i, g)\
    \ in guess.iter().zip(game) {\n        diff[i] = g - game[i];\n    }\n    return\
    \ diff;", "    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff\
    \ = diff + abs(j - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));",
  "    let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff = diff + abs(j\
    \ - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));", "  \
    \  let diff = 0;\n    for (i, g) in guess.iter().zip(game) {\n        diff +=\
    \ abs(g - i);\n    }\n    return Vec::from(diff);", "    let diffs = Vec.new(game.len);\n\
    \    for i in 0..game.len {\n        let diff = guess[i] - game[i];\n        diffs[i]\
    \ = diff;\n    }\n    return diffs;", "    let diffs = Vec.new(guess.len);\n \
    \   for (i, (score, guess_) => {\n        let diff = score - guess_;\n       \
    \ diffs[i] = diff;\n    });\n    return diffs;", "    let diff = Vec.of_len(game.len);\n\
    \    for i in 0..game.len {\n        diff[i] = guess[i] - game[i];\n    }\n  \
    \  return diff;", "    let diff = 0;\n    for (i, j) in guess.zip(game) {\n  \
    \      if (j != i) {\n            diff += 1;\n        }\n    }\n    return Vec::from(diff);",
  "    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        diffs[i]\
    \ = guess[i] - game[i];\n    }\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (g, g2) in guess.zip(game)) {\n        if (g2 == g) {\n         \
    \   diffs[i] = 0;\n        } else {\n            diffs[i] = abs(g2 - g);\n   \
    \     }\n    }\n    return diffs;", "    let diffs = Vec.new(game.len);\n    for\
    \ (i, (score, guess_) => {\n        let diff = score - guess_;\n        diffs[i]\
    \ = diff;\n    });\n    return diffs;", "    let diff = Vec.of_ints(game.len);\n\
    \    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n\
    \    }\n    return diff;", "    let diffs = Vec.new(game.len);\n    for i in 0..game.len\
    \ {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else\
    \ {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return\
    \ diffs;", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess_) =>\
    \ {\n        let diff = score - guess_;\n        diffs[i] = diff;\n    });\n \
    \   return diffs;", "    let diffs = Vec.new(game.len);\n    for i in 0..game.len\
    \ {\n        if guess[i] == game[i] {\n            diffs[i] = 0;\n        } else\
    \ {\n            diffs[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return\
    \ diffs;", "    let diff = Vec.from(game);\n    for i in guess {\n        diff[i]\
    \ = abs(guess[i] - game[i]);\n    }\n    return diff;", "    let diff = Vec.of_ints(game.len);\n\
    \    for (i, g) in guess.iter().zip(game) {\n        diff[i] = abs(g - game[i]);\n\
    \    }\n    return diff;", "    let diff = Vec.of_ints(game.len);\n    for (i,\
    \ g) in guess.iter().zip(game) {\n        diff[i] = g - game[i];\n    }\n    return\
    \ diff;", "    let diff = Vec.of_len(game.len);\n    for i in 0..game.len {\n\
    \        diff[i] = guess[i] - game[i];\n    }\n    return diff;", "    let diff\
    \ = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n     \
    \   diff[i] = abs(g - game[i]);\n    }\n    return diff;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (score, guess_) => {\n        if (score == guess_) {\n          \
    \  diffs[i] = 0;\n        } else {\n            diffs[i] = abs(score - guess_);\n\
    \        }\n    });\n    return diffs;", "    let diffs = Vec.new(game.len);\n\
    \    for (i, (g, gt)) in guess.iter().zip(game) {\n        if (g == gt) {\n  \
    \          diffs[i] = 0;\n        } else {\n            diffs[i] = abs(g - gt);\n\
    \        }\n    }\n    return diffs;", "    let diffs = Vec.new(game.len);\n \
    \   for i in 0..game.len {\n        let guess_score = guess[i];\n        let game_score\
    \ = game[i];\n        if guess_score == game_score {\n            diffs[i] = 0;\n\
    \        } else {\n            diffs[i] = guess_score - game_score;\n        }\n\
    \    }\n    return diffs;", "    let diff = 0;\n    for (i, j) in guess.zip(game)\
    \ {\n        if (j == 0) {\n            diff += 1;\n        } else {\n       \
    \     diff += abs(j - i);\n        }\n    }\n    return Vec::from(diff);", " \
    \   let diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n       \
    \ let diff = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;",
  "    let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.iter())\
    \ {\n        diffs[i] = abs(score - guess);\n    }\n    return diffs;", "    let\
    \ diffs = Vec.new(game.len);\n    for (i, (score, guess_) => {\n        let diff\
    \ = score - guess_;\n        diffs[i] = diff;\n    });\n    return diffs;", " \
    \   let diff = 0;\n    for (i, j) in guess.zip(game) {\n        diff += abs(j\
    \ - i);\n    }\n    return game.map(i => diff - abs(i - guess.get(i)));", "  \
    \  let diffs = Vec.new(game.len);\n    for (i, (score, guess) in guess.iter())\
    \ {\n        diffs[i] = abs(score - guess);\n    }\n    return diffs;", "    let\
    \ diffs = Vec.new(game.len);\n    for i in 0..game.len {\n        if guess[i]\
    \ == game[i] {\n            diffs[i] = 0;\n        } else {\n            diffs[i]\
    \ = abs(guess[i] - game[i]);\n        }\n    }\n    return diffs", "    let diff\
    \ = Vec.of_ints(game.len);\n    for (i, g) in guess.iter().zip(game) {\n     \
    \   diff[i] = abs(g - game[i]);\n    }\n    return diff;", "    let diff = 0;\n\
    \    for (i, j) in guess.zip(game) {\n        diff += abs(j - i);\n    }\n   \
    \ return diff;", "    let diffs = Vec.new(game.len);\n    for (i, (score, guess_)\
    \ => {\n        if (score == guess_) {\n            diffs[i] = 0;\n        } else\
    \ {\n            diffs[i] = abs(score - guess_);\n        }\n    });\n    return\
    \ diffs;", "    let diffs = Vec.new(game.len);\n    for i in 0..game.len {\n \
    \       let guess_i = guess[i];\n        let game_i = game[i];\n        if guess_i\
    \ == game_i {\n            diffs[i] = 0;\n        } else {\n            diffs[i]\
    \ = abs(guess_i - game_i);\n        }\n    }\n    return diffs;"]
stop_tokens:
- "\n}"
