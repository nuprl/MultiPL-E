{
  "name": "HumanEval_53_add",
  "language": "rs",
  "prompt": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n",
  "tests": "}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpmyhp641s.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let result = x + y;\n  if result < 0 {\n    result = -result;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `result`\n --> /tmp/tmpsgheuo2q.rs:9:5\n  |\n7 |   let result = x + y;\n  |       ------\n  |       |\n  |       first assignment to `result`\n  |       help: consider making this binding mutable: `mut result`\n8 |   if result < 0 {\n9 |     result = -result;\n  |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9 + 1\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmprs6fsovh.rs:9:16\n  |\n9 |     sum += 10 ** 9 + 1\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9 + 1\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmprs6fsovh.rs:9:16\n  |\n9 |     sum += 10 ** 9 + 1\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x == 0 {\n    return y\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z %= 10;\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmplu13a073.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `z`\n  --> /tmp/tmplu13a073.rs:11:3\n   |\n7  |   let z = x + y;\n   |       -\n   |       |\n   |       first assignment to `z`\n   |       help: consider making this binding mutable: `mut z`\n...\n11 |   z %= 10;\n   |   ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x == 0 {\n    return y\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z %= 10;\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmplu13a073.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `z`\n  --> /tmp/tmplu13a073.rs:11:3\n   |\n7  |   let z = x + y;\n   |       -\n   |       |\n   |       first assignment to `z`\n   |       help: consider making this binding mutable: `mut z`\n...\n11 |   z %= 10;\n   |   ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpmyhp641s.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z %= 10;\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmplu13a073.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `z`\n  --> /tmp/tmplu13a073.rs:11:3\n   |\n7  |   let z = x + y;\n   |       -\n   |       |\n   |       first assignment to `z`\n   |       help: consider making this binding mutable: `mut z`\n...\n11 |   z %= 10;\n   |   ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    return add(z + 10, y);\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x == 0 {\n    return y\n  }\n  if y == 0 {\n    return x\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z > MAX {\n    return MAX\n  } else if z < MIN {\n    return MIN\n  } else {\n    return z\n  }\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `MAX` in this scope\n --> /tmp/tmp0b7h2a1c.rs:8:10\n  |\n8 |   if z > MAX {\n  |          ^^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::char::MAX;\n  |\n1 | use std::f32::MAX;\n  |\n1 | use std::f64::MAX;\n  |\n1 | use std::i128::MAX;\n  |\n    and 11 other candidates\n\nerror[E0425]: cannot find value `MAX` in this scope\n --> /tmp/tmp0b7h2a1c.rs:9:12\n  |\n9 |     return MAX\n  |            ^^^ not found in this scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::char::MAX;\n  |\n1 | use std::f32::MAX;\n  |\n1 | use std::f64::MAX;\n  |\n1 | use std::i128::MAX;\n  |\n    and 11 other candidates\n\nerror[E0425]: cannot find value `MIN` in this scope\n  --> /tmp/tmp0b7h2a1c.rs:10:17\n   |\n10 |   } else if z < MIN {\n   |                 ^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::f32::MIN;\n   |\n1  | use std::f64::MIN;\n   |\n1  | use std::i128::MIN;\n   |\n1  | use std::i16::MIN;\n   |\n     and 10 other candidates\n\nerror[E0425]: cannot find value `MIN` in this scope\n  --> /tmp/tmp0b7h2a1c.rs:11:12\n   |\n11 |     return MIN\n   |            ^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::f32::MIN;\n   |\n1  | use std::f64::MIN;\n   |\n1  | use std::i128::MIN;\n   |\n1  | use std::i16::MIN;\n   |\n     and 10 other candidates\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let result = x + y;\n  if result < 0 {\n    result += 10;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `result`\n --> /tmp/tmpmv71l6si.rs:9:5\n  |\n7 |   let result = x + y;\n  |       ------\n  |       |\n  |       first assignment to `result`\n  |       help: consider making this binding mutable: `mut result`\n8 |   if result < 0 {\n9 |     result += 10;\n  |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x == 0 {\n    return y\n  }\n  return add(x - 1, y) + x\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6`,\n right: `5`', /tmp/tmpfg1p14_2.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z = -z;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpzjiqbq6t.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z = -z;\n  |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    return -z;\n  } else {\n    return z;\n  }\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x == 0 {\n    return y\n  }\n  if y == 0 {\n    return x\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let result = x + y;\n  if result < 0 {\n    result = -result;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `result`\n --> /tmp/tmpsgheuo2q.rs:9:5\n  |\n7 |   let result = x + y;\n  |       ------\n  |       |\n  |       first assignment to `result`\n  |       help: consider making this binding mutable: `mut result`\n8 |   if result < 0 {\n9 |     result = -result;\n  |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x == 0 {\n    return y\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z = -z;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpzjiqbq6t.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z = -z;\n  |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    return add(z + 10, y);\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpv3don4v1.rs:6:31\n   |\n6  | fn add(x: isize, y: isize) -> isize {\n   |    ---                        ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n...\n11 |   z;\n   |    - help: remove this semicolon\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let result = x + y;\n  if result < 0 {\n    result = -result;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `result`\n --> /tmp/tmpsgheuo2q.rs:9:5\n  |\n7 |   let result = x + y;\n  |       ------\n  |       |\n  |       first assignment to `result`\n  |       help: consider making this binding mutable: `mut result`\n8 |   if result < 0 {\n9 |     result = -result;\n  |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z %= 10;\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmplu13a073.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `z`\n  --> /tmp/tmplu13a073.rs:11:3\n   |\n7  |   let z = x + y;\n   |       -\n   |       |\n   |       first assignment to `z`\n   |       help: consider making this binding mutable: `mut z`\n...\n11 |   z %= 10;\n   |   ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let result = x + y;\n  if result < 0 {\n    result = -result;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `result`\n --> /tmp/tmpsgheuo2q.rs:9:5\n  |\n7 |   let result = x + y;\n  |       ------\n  |       |\n  |       first assignment to `result`\n  |       help: consider making this binding mutable: `mut result`\n8 |   if result < 0 {\n9 |     result = -result;\n  |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let result = x + y;\n  if result < 0 {\n    result = -result;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `result`\n --> /tmp/tmpsgheuo2q.rs:9:5\n  |\n7 |   let result = x + y;\n  |       ------\n  |       |\n  |       first assignment to `result`\n  |       help: consider making this binding mutable: `mut result`\n8 |   if result < 0 {\n9 |     result = -result;\n  |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let result = x + y;\n  if result < 0 {\n    result = -result;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `result`\n --> /tmp/tmpsgheuo2q.rs:9:5\n  |\n7 |   let result = x + y;\n  |       ------\n  |       |\n  |       first assignment to `result`\n  |       help: consider making this binding mutable: `mut result`\n8 |   if result < 0 {\n9 |     result = -result;\n  |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z = -z;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpzjiqbq6t.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z = -z;\n  |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let result = x + y;\n  if result < 0 {\n    result = -result;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `result`\n --> /tmp/tmpsgheuo2q.rs:9:5\n  |\n7 |   let result = x + y;\n  |       ------\n  |       |\n  |       first assignment to `result`\n  |       help: consider making this binding mutable: `mut result`\n8 |   if result < 0 {\n9 |     result = -result;\n  |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x == 0 {\n    return y\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z = -z;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpzjiqbq6t.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z = -z;\n  |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpmyhp641s.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let result = x + y;\n  if result < 0 {\n    result += 10;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `result`\n --> /tmp/tmpmv71l6si.rs:9:5\n  |\n7 |   let result = x + y;\n  |       ------\n  |       |\n  |       first assignment to `result`\n  |       help: consider making this binding mutable: `mut result`\n8 |   if result < 0 {\n9 |     result += 10;\n  |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z: isize = x + y;\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let result = x + y;\n  if result < 0 {\n    result += 10;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `result`\n --> /tmp/tmpmv71l6si.rs:9:5\n  |\n7 |   let result = x + y;\n  |       ------\n  |       |\n  |       first assignment to `result`\n  |       help: consider making this binding mutable: `mut result`\n8 |   if result < 0 {\n9 |     result += 10;\n  |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9 + 1\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmprs6fsovh.rs:9:16\n  |\n9 |     sum += 10 ** 9 + 1\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    return -z;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z = -z;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpzjiqbq6t.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z = -z;\n  |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpmyhp641s.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z = -z;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpzjiqbq6t.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z = -z;\n  |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpmyhp641s.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpmyhp641s.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    return add(z + 10, y);\n  } else {\n    return z;\n  }\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    return -z;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    return add(z + 10, y);\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z = -z;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpzjiqbq6t.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z = -z;\n  |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x == 0 {\n    return y\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpmyhp641s.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let result = x + y;\n  if result < 0 {\n    result = -result;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `result`\n --> /tmp/tmpsgheuo2q.rs:9:5\n  |\n7 |   let result = x + y;\n  |       ------\n  |       |\n  |       first assignment to `result`\n  |       help: consider making this binding mutable: `mut result`\n8 |   if result < 0 {\n9 |     result = -result;\n  |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    return -z;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    return -z;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let result = x + y;\n  if result < 0 {\n    result += 10;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `result`\n --> /tmp/tmpmv71l6si.rs:9:5\n  |\n7 |   let result = x + y;\n  |       ------\n  |       |\n  |       first assignment to `result`\n  |       help: consider making this binding mutable: `mut result`\n8 |   if result < 0 {\n9 |     result += 10;\n  |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z %= 10;\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmplu13a073.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `z`\n  --> /tmp/tmplu13a073.rs:11:3\n   |\n7  |   let z = x + y;\n   |       -\n   |       |\n   |       first assignment to `z`\n   |       help: consider making this binding mutable: `mut z`\n...\n11 |   z %= 10;\n   |   ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x == 0 {\n    return y\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9 + 1\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmprs6fsovh.rs:9:16\n  |\n9 |     sum += 10 ** 9 + 1\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x == 0 {\n    return y\n  }\n  if y == 0 {\n    return x\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpmyhp641s.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    return add(z + 10, y);\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10 ** 9\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpnsmmtm0p.rs:9:16\n  |\n9 |     sum += 10 ** 9\n  |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    return -z;\n  } else {\n    return z;\n  }\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let sum = x + y;\n  if sum < 0 {\n    sum += 10;\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n --> /tmp/tmpmw6_jprl.rs:9:5\n  |\n7 |   let sum = x + y;\n  |       ---\n  |       |\n  |       first assignment to `sum`\n  |       help: consider making this binding mutable: `mut sum`\n8 |   if sum < 0 {\n9 |     sum += 10;\n  |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x < y {\n    return add(y, x)\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprakxrkpu.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  let z = x + y;\n  if z < 0 {\n    z += 10;\n  }\n  z %= 10;\n  return z;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmplu13a073.rs:9:5\n  |\n7 |   let z = x + y;\n  |       -\n  |       |\n  |       first assignment to `z`\n  |       help: consider making this binding mutable: `mut z`\n8 |   if z < 0 {\n9 |     z += 10;\n  |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `z`\n  --> /tmp/tmplu13a073.rs:11:3\n   |\n7  |   let z = x + y;\n   |       -\n   |       |\n   |       first assignment to `z`\n   |       help: consider making this binding mutable: `mut z`\n...\n11 |   z %= 10;\n   |   ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5, 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n  if x == 0 {\n    return y\n  }\n  if y == 0 {\n    return x\n  }\n  return x + y\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}