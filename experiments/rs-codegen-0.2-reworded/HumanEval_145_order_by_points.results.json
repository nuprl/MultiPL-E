{
  "name": "HumanEval_145_order_by_points",
  "language": "rs",
  "prompt": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  let sorted = nums.clone();\n  for i in nums {\n    sum += i;\n  }\n  for i in nums {\n    sorted[i] = sum - sorted[i];\n  }\n  sorted.sort();\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvivfcbji.rs:17:5\n   |\n17 |     sorted[i] = sum - sorted[i];\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvivfcbji.rs:17:23\n   |\n17 |     sorted[i] = sum - sorted[i];\n   |                       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in 0..sorted.len() - 1 {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpyakdplpw.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i() * i.to_i();\n    }\n    let sorted = nums.sort_by(|&i| i.to_i() * i.to_i() - sum);\n    if len(nums) == 0 {\n        return sorted;\n    }\n    let min_sum = sorted[0].to_i() * sorted[0].to_i();\n    let min_index = 0;\n    for i in nums {\n        if i.to_i() * i.to_i() - sum < min_sum {\n            min_sum = i.to_i() * i.to_i() - sum;\n            min_index = i.to_i();\n        }\n    }\n    let sorted_min = sorted.filter(|&i| i.to_i() == min_index);\n    return sorted_min.concat(sorted.filter(|&i| i.to_i() != min_index));\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp553ewy33.rs:16:8\n   |\n16 |     if len(nums) == 0 {\n   |        ^^^ not found in this scope\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmp553ewy33.rs:13:18\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                  ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmp553ewy33.rs:13:29\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                             ^^^^ method not found in `isize`\n\nerror[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n  --> /tmp/tmp553ewy33.rs:15:23\n   |\n15 |     let sorted = nums.sort_by(|&i| i.to_i() * i.to_i() - sum);\n   |                       ^^^^^^^ ---- takes 1 argument\n   |                       |\n   |                       expected closure that takes 2 arguments\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp553ewy33.rs:17:16\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n17 |         return sorted;\n   |                ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmp553ewy33.rs:19:19\n   |\n19 |     let min_sum = sorted[0].to_i() * sorted[0].to_i();\n   |                   ^^^^^^^^^ help: to access tuple elements, use: `sorted.0`\n\nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmp553ewy33.rs:19:38\n   |\n19 |     let min_sum = sorted[0].to_i() * sorted[0].to_i();\n   |                                      ^^^^^^^^^ help: to access tuple elements, use: `sorted.0`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmp553ewy33.rs:22:14\n   |\n22 |         if i.to_i() * i.to_i() - sum < min_sum {\n   |              ^^^^ method not found in `isize`\n\nerr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let result = Vec::new();\n    for i in nums {\n        sum += i;\n        result.push(i);\n    }\n    let sorted = sort_by(result, (a, b) => a - b);\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpct_zi7ro.rs:17:41\n   |\n17 |     let sorted = sort_by(result, (a, b) => a - b);\n   |                                         ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = fn(n) {\n        let sum = 0;\n        for i in n {\n            sum += i;\n        }\n        return sum;\n    };\n    let sorted = nums.sort((a, b) => {\n        let asum = sum_digits(a);\n        let bsum = sum_digits(b);\n        if (asum < bsum) {\n            return -1;\n        } else if (asum > bsum) {\n            return 1;\n        } else {\n            return a - b;\n        }\n    });\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmp2mmo8xnz.rs:11:22\n   |\n11 |     let sum_digits = fn(n) {\n   |                      ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  let res = Vec::new();\n  for i in sorted {\n    res.push(i);\n  }\n  return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpj9r3u_0y.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmptdt981gy.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = nums.map(n => n.to_i()).fold(0, (acc, n) => acc + n);\n    let sorted = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpr5i16u7v.rs:11:33\n   |\n11 |     let sum_digits = nums.map(n => n.to_i()).fold(0, (acc, n) => acc + n);\n   |                                 ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in range(len(sorted) - 1) {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmprgn089th.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = nums.map(|x| x.to_i()).fold(0, (a, b) => a + b);\n    let sorted = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp22cx2f3_.rs:11:60\n   |\n11 |     let sum_digits = nums.map(|x| x.to_i()).fold(0, (a, b) => a + b);\n   |                                                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = nums.map(|x| x.to_i()).fold(0, |(acc, x) {\n        acc += x.to_i();\n        return acc;\n    });\n    let sorted_nums = nums.sort_by(|x| x.to_i() - sum_digits);\n    return sorted_nums;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `,` or `:`, found `{`\n  --> /tmp/tmpszrlzh9c.rs:11:63\n   |\n11 |     let sum_digits = nums.map(|x| x.to_i()).fold(0, |(acc, x) {\n   |                                                               ^ expected one of `,` or `:`\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort_by(|x, y| x + y);\n    let result = Vec::new();\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpas97kge5.rs:15:38\n   |\n15 |     let sorted = nums.sort_by(|x, y| x + y);\n   |                                      ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0277]: `()` is not an iterator\n  --> /tmp/tmpas97kge5.rs:17:14\n   |\n17 |     for i in sorted {\n   |              ^^^^^^ `()` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `()`\n   = note: required because of the requirements on the impl of `IntoIterator` for `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut sum = 0;\n    for num in nums {\n        sum += num;\n    }\n    for i in 0..nums.len() {\n        let num = nums[i];\n        let sum_of_digits = sum % 10;\n        let index = i;\n        if (sum_of_digits > 0) {\n            index += 1;\n        }\n        result.push(index);\n        sum /= 10;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpubwkw0iw.rs:20:12\n   |\n20 |         if (sum_of_digits > 0) {\n   |            ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n20 -         if (sum_of_digits > 0) {\n20 +         if sum_of_digits > 0 {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubwkw0iw.rs:26:12\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n26 |     return result;\n   |            ^^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut sorted = Vec::new();\n  let mut sorted_nums = Vec::new();\n  let mut sorted_sum = Vec::new();\n  let mut sorted_sum_nums = Vec::new();\n  let mut sorted_sum_nums_sum = Vec::new();\n  let mut sorted_sum_nums_sum_nums = Vec::new();\n  let mut sorted_sum_nums_sum_nums_sum = Vec::new();\n  let mut sorted_sum_nums_sum_nums_sum_nums = Vec::new();\n  let mut sorted_sum_nums_sum_nums_sum_nums_sum = Vec::new();\n  let mut sorted_sum_nums_sum_nums_sum_nums_sum_nums = Vec::new();\n  let mut sorted_sum_nums_sum_nums_sum_nums_sum_nums_sum = Vec::new();\n  let mut sorted_sum_nums_sum_nums_sum_nums_sum_nums_sum_nums = Vec::new();\n\n  for (let num of nums) {\n    let num_sum = num.to_i() * 10;\n    let num_sum_nums = num_sum.to_i();\n    let num_sum_nums_sum = num_sum_nums * 10;\n    let num_sum_nums_sum_nums = num_sum_nums_sum.to_i();\n    let num_sum_nums_sum_nums_sum = num_sum_nums_sum_nums * 10;\n    let num_sum_nums_sum_nums_sum_nums = num_sum_nums_sum_nums_sum.to_i();\n    let num_sum_nums_sum_nums_sum_nums_sum = num_sum_nums_sum_nums_sum_nums * 10;\n    let num_sum_nums_sum_nums_sum_nums_sum_nums = num_sum_nums_sum_nums_sum_nums_sum.to_i();\n    let\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpr_6d_nt_.rs:44:3\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n24 |   for (let num of nums) {\n   |                         - this delimiter might not be properly closed...\n...\n34 | }\n   | - ...as it matches this but it has different indentation\n...\n44 | }\n   |   ^\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpr_6d_nt_.rs:24:8\n   |\n24 |   for (let num of nums) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `num`\n  --> /tmp/tmpr_6d_nt_.rs:24:12\n   |\n24 |   for (let num of nums) {\n   |           -^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpr_6d_nt_.rs:24:16\n   |\n24 |   for (let num of nums) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `nums`\n  --> /tmp/tmpr_6d_nt_.rs:24:19\n   |\n24 |   for (let num of nums) {\n   |                  -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpr_6d_nt_.rs:24:24\n   |\n24 |   for (let num of nums) {\n   |                        ^ help: try adding `in` here\n\nerror: expected pattern, found `}`\n  --> /tmp/tmpr_6d_nt_.rs:34:1\n   |\n34 | }\n   | ^ expected pattern\n\nerror: expected `{`, found keyword `fn`\n  --> /tmp/tmpr_6d_nt_.rs:36:1\n   |\n36 | fn main() {\n   | ^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n36 ~ { fn main() {\n37 |     let candidate = order_by_points;\n38 |     assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n39 |     assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 12",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.copy();\n    for i in sorted {\n        sum += i;\n    }\n    let sorted_by_sum = sorted.sort((a, b) => a - b);\n    let sorted_by_index = sorted.sort((a, b) => a - b);\n    let sorted_by_sum_and_index = sorted.sort((a, b) => a - b);\n    return sorted_by_sum_and_index;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpmf5lmrge.rs:16:44\n   |\n16 |     let sorted_by_sum = sorted.sort((a, b) => a - b);\n   |                                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for num in nums {\n        sum += num % 10;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let sorted_sum = 0;\n    for num in sorted {\n        sorted_sum += num % 10;\n    }\n    if (sum != sorted_sum) {\n        let index = 0;\n        for num in nums {\n            if (num % 10 == sorted_sum - sum) {\n                break;\n            }\n            index += 1;\n        }\n        sorted = sorted.slice(index);\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpwa4y9pjc.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = fn(i: isize) {\n        let sum = 0;\n        let n = nums[i];\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n    let sorted = nums.sort_by(sum_digits);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpdko4oc9m.rs:11:22\n   |\n11 |     let sum_digits = fn(i: isize) {\n   |                      ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort_by(|i| i - sum);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n  --> /tmp/tmp_mn6pw0i.rs:15:23\n   |\n15 |     let sorted = nums.sort_by(|i| i - sum);\n   |                       ^^^^^^^ --- takes 1 argument\n   |                       |\n   |                       expected closure that takes 2 arguments\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_mn6pw0i.rs:16:12\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n16 |     return sorted;\n   |            ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0593.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in 0..sorted.len() - 1 {\n        if sorted[i] == sorted[i + 1] {\n            sorted[i] = -1;\n        }\n    }\n    sorted.sort((a, b) => a - b);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpwywdybe2.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = nums.map(n => n.to_i()).fold(0, (acc, n) => acc + n);\n    let sorted = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpr5i16u7v.rs:11:33\n   |\n11 |     let sum_digits = nums.map(n => n.to_i()).fold(0, (acc, n) => acc + n);\n   |                                 ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.copy();\n    for i in nums {\n        sum += i;\n    }\n    for i in nums {\n        sorted[sum - i] = i;\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `copy` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpmnkq229v.rs:12:23\n   |\n12 |     let sorted = nums.copy();\n   |                       ^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i.to_i() * i.to_i();\n  }\n  let sorted = nums.sort_by(|i| i.to_i() * i.to_i() - sum);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmplsndh7d2.rs:13:14\n   |\n13 |     sum += i.to_i() * i.to_i();\n   |              ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmplsndh7d2.rs:13:25\n   |\n13 |     sum += i.to_i() * i.to_i();\n   |                         ^^^^ method not found in `isize`\n\nerror[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n  --> /tmp/tmplsndh7d2.rs:15:21\n   |\n15 |   let sorted = nums.sort_by(|i| i.to_i() * i.to_i() - sum);\n   |                     ^^^^^^^ --- takes 1 argument\n   |                     |\n   |                     expected closure that takes 2 arguments\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplsndh7d2.rs:16:10\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n16 |   return sorted;\n   |          ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0593, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let result = Vec::new();\n    for i in nums {\n        result.push(i);\n        if (sum - i < 0) {\n            break;\n        }\n    }\n    for i in nums {\n        result.push(i);\n        if (sum - i > 0) {\n            break;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxov2oiv8.rs:18:12\n   |\n18 |         if (sum - i < 0) {\n   |            ^           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -         if (sum - i < 0) {\n18 +         if sum - i < 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxov2oiv8.rs:24:12\n   |\n24 |         if (sum - i > 0) {\n   |            ^           ^\n   |\nhelp: remove these parentheses\n   |\n24 -         if (sum - i > 0) {\n24 +         if sum - i > 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpxov2oiv8.rs:13:9\n   |\n11 |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n12 |     for i in nums {\n13 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `nums`\n   --> /tmp/tmpxov2oiv8.rs:16:14\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n11  |     let sum = 0;\n12  |     for i in nums {\n    |              ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |     for i in nums {\n    |              ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n12  |     for i in &nums {\n    |              +\n\nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmpxov2oiv8.rs:17:9\n   |\n15 |     let result = Vec::new();\n   |         ------ help: consider changing this to be mutable: `mut result`\n16 |     for i in nums {\n17 |         result.push(i);\n   |         ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0382]: use of moved value: `nums`\n  -->",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in nums.iter() {\n        let sum = 0;\n        for j in i.iter() {\n            sum += j.as_u8();\n        }\n        result.push(sum);\n    }\n    result.sort_by(|a, b| a.as_u8() - b.as_u8());\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `iter` found for reference `&isize` in the current scope\n  --> /tmp/tmptkdasm4x.rs:14:20\n   |\n14 |         for j in i.iter() {\n   |                    ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `as_u8` found for reference `&{integer}` in the current scope\n  --> /tmp/tmptkdasm4x.rs:19:29\n   |\n19 |     result.sort_by(|a, b| a.as_u8() - b.as_u8());\n   |                             ^^^^^ method not found in `&{integer}`\n\nerror[E0599]: no method named `as_u8` found for reference `&{integer}` in the current scope\n  --> /tmp/tmptkdasm4x.rs:19:41\n   |\n19 |     result.sort_by(|a, b| a.as_u8() - b.as_u8());\n   |                                         ^^^^^ method not found in `&{integer}`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut sum = 0;\n    for num in nums {\n        sum += num % 10;\n        result.push(num);\n    }\n    sort_by_points(result, sum);\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `sort_by_points` in this scope\n  --> /tmp/tmptfuo_xoe.rs:17:5\n   |\n17 |     sort_by_points(result, sum);\n   |     ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a.sum - b.sum);\n    if (sum % 10 == 0) {\n        return sorted;\n    } else {\n        let sorted_sum = 0;\n        for i in sorted {\n            sorted_sum += i;\n        }\n        let index = 0;\n        for i in nums {\n            if (sorted_sum == sum) {\n                return sorted.slice(0, index + 1);\n            }\n            sorted_sum += i;\n            index += 1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmposza1t44.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a.sum - b.sum);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort_by(|x, y| x + y);\n    for i in 0..sorted.len() - 1 {\n        if sorted[i] + sorted[i + 1] == sum {\n            sorted[i], sorted[i + 1] = sorted[i + 1], sorted[i];\n        }\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n  --> /tmp/tmpqy39z9xl.rs:18:22\n   |\n18 |             sorted[i], sorted[i + 1] = sorted[i + 1], sorted[i];\n   |                      ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqy39z9xl.rs:15:38\n   |\n15 |     let sorted = nums.sort_by(|x, y| x + y);\n   |                                      ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0599]: no method named `len` found for unit type `()` in the current scope\n  --> /tmp/tmpqy39z9xl.rs:16:24\n   |\n16 |     for i in 0..sorted.len() - 1 {\n   |                        ^^^ method not found in `()`\n\nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmpqy39z9xl.rs:17:12\n   |\n17 |         if sorted[i] + sorted[i + 1] == sum {\n   |            ^^^^^^^^^\n   |\n   = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmpqy39z9xl.rs:17:24\n   |\n17 |         if sorted[i] + sorted[i + 1] == sum {\n   |                        ^^^^^^^^^^^^^\n   |\n   = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqy39z9xl.rs:21:12\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n21 |     return sorted;\n   |            ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvo9ydx8s.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for num in nums {\n    sum += num % 10;\n  }\n  for num in nums {\n    result.push(num);\n    if (sum == 0) {\n      break;\n    }\n    sum -= num % 10;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_hwwev1d.rs:18:8\n   |\n18 |     if (sum == 0) {\n   |        ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (sum == 0) {\n18 +     if sum == 0 {\n   | \n\nerror[E0382]: use of moved value: `nums`\n   --> /tmp/tmp_hwwev1d.rs:16:14\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n13  |   for num in nums {\n    |              ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |   for num in nums {\n    |              ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n13  |   for num in &nums {\n    |              +\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for num in nums {\n        sum += num % 10;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in 0..sorted.len() - 1 {\n        if sorted[i] == sorted[i + 1] {\n            sorted[i] = -1;\n        }\n    }\n    sorted.sort((a, b) => a - b);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp8ucxfbns.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let result = Vec::new();\n    for i in nums {\n        result.push(i);\n        if (sum == i) {\n            break;\n        }\n    }\n    for i in nums {\n        if (sum == i) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpuvd5dh0o.rs:18:12\n   |\n18 |         if (sum == i) {\n   |            ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -         if (sum == i) {\n18 +         if sum == i {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpuvd5dh0o.rs:23:12\n   |\n23 |         if (sum == i) {\n   |            ^        ^\n   |\nhelp: remove these parentheses\n   |\n23 -         if (sum == i) {\n23 +         if sum == i {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpuvd5dh0o.rs:13:9\n   |\n11 |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n12 |     for i in nums {\n13 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `nums`\n   --> /tmp/tmpuvd5dh0o.rs:16:14\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n11  |     let sum = 0;\n12  |     for i in nums {\n    |              ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |     for i in nums {\n    |              ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n12  |     for i in &nums {\n    |              +\n\nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmpuvd5dh0o.rs:17:9\n   |\n15 |     let result = Vec::new();\n   |         ------ help: consider changing this to be mutable: `mut result`\n16 |     for i in nums {\n17 |         result.push(i);\n   |         ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0382]: use of moved value: `nums`\n  --> /tmp/tmpuvd5dh0o.rs:22:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in sorted {\n        if (sum % 10 == 0) {\n            return sorted.slice(0, i + 1);\n        }\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpdda34r1r.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  let res = Vec::new();\n  for i in sorted {\n    res.push_back(i);\n  }\n  return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmppf52u6du.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvo9ydx8s.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  for i in nums {\n    if sum - i == 0 {\n      result.push(i);\n    } else {\n      result.push(sum - i);\n      break;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmp5683wtx3.rs:16:12\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n13  |   for i in nums {\n    |            ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |   for i in nums {\n    |            ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n13  |   for i in &nums {\n    |            +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmptdt981gy.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in 0..sorted.len() - 1 {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpyakdplpw.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in sorted {\n        if (sum == 0) {\n            break;\n        }\n        sum -= sorted[i];\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpubu9w121.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut sorted = Vec::new();\n    let mut sorted_nums = Vec::new();\n    let mut sorted_sum = Vec::new();\n    let mut sorted_sum_nums = Vec::new();\n    let mut sorted_sum_nums_sum = Vec::new();\n    let mut sorted_sum_nums_sum_sum = Vec::new();\n    let mut sorted_sum_nums_sum_sum_nums = Vec::new();\n    let mut sorted_sum_nums_sum_sum_nums_sum = Vec::new();\n    let mut sorted_sum_nums_sum_sum_nums_sum_nums = Vec::new();\n    let mut sorted_sum_nums_sum_sum_nums_sum_nums_sum = Vec::new();\n    let mut sorted_sum_nums_sum_sum_nums_sum_nums_sum_nums = Vec::new();\n    let mut sorted_sum_nums_sum_sum_nums_sum_nums_sum_nums_sum = Vec::new();\n    let mut sorted_sum_nums_sum_sum_nums_sum_nums_sum_nums_sum_nums = Vec::new();\n    let mut sorted_sum_nums_sum_sum_nums_sum_nums_sum_nums_sum_nums_sum = Vec::new();\n    let mut sorted_sum_nums_sum_sum_nums_sum_nums_sum_nums_sum_nums_sum_nums = Vec::new();\n    let mut sorted_sum_nums_sum_sum_nums_sum_nums_sum_nums_sum_nums_sum_nums_sum = Vec::new();\n    let mut sorted_sum_nums_sum_sum_nums_sum_nums_sum_nums_sum_nums_sum_nums_sum_nums = Vec::new();\n    let mut sorted_sum_nums_sum_sum_nums_sum_nums_sum_nums_sum_nums_sum_nums_sum_nums_sum = Vec::new();\n\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbxwflpgt.rs:10:41\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |    ---------------                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmptdt981gy.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let index = 0;\n    for i in nums {\n        sum += i;\n        index += 1;\n    }\n    let sorted = nums.clone();\n    sorted.sort_by(|x, y| x + y);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp0m57skt0.rs:18:27\n   |\n18 |     sorted.sort_by(|x, y| x + y);\n   |                           ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in sorted {\n        if sum == 0 {\n            break;\n        }\n        sum -= sorted[i];\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpv70l1i83.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i.to_i() * i.to_i();\n  }\n  let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpauiyfjme.rs:13:14\n   |\n13 |     sum += i.to_i() * i.to_i();\n   |              ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpauiyfjme.rs:13:25\n   |\n13 |     sum += i.to_i() * i.to_i();\n   |                         ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmpauiyfjme.rs:15:38\n   |\n15 |   let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                      ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmpauiyfjme.rs:15:49\n   |\n15 |   let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                                 ^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpauiyfjme.rs:16:10\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n16 |   return sorted;\n   |          ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    for i in nums {\n        if sum == 0 {\n            result.push(i);\n            sum += i;\n        } else if sum < 0 {\n            result.push(i);\n            sum += i;\n        } else {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpet9jjij6.rs:24:20\n   |\n24 |             result.push_back(i);\n   |                    ^^^^^^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let index = 0;\n    for i in nums {\n        sum += i;\n        index += 1;\n    }\n    let sorted = nums.clone();\n    sorted.sort_by(|x, y| x + y);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp0m57skt0.rs:18:27\n   |\n18 |     sorted.sort_by(|x, y| x + y);\n   |                           ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for num in nums {\n    sum += num;\n  }\n  for num in nums {\n    let diff = sum - num;\n    let index = diff.to_i();\n    result.push(index);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpu1znmwdw.rs:18:22\n   |\n18 |     let index = diff.to_i();\n   |                      ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum_digits = nums.map(n => n.to_i()).reduce(0, (a, b) => a + b);\n  let sorted_nums = nums.sort((a, b) => a.to_i() - b.to_i());\n  let sorted_sum_digits = sorted_nums.map(n => n.to_i()).reduce(0, (a, b) => a + b);\n  let result = sorted_nums.map(n => n.to_i()).filter(n => n.to_i() == sum_digits);\n  return result.map(n => n.to_i());\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpwkb6sn84.rs:11:31\n   |\n11 |   let sum_digits = nums.map(n => n.to_i()).reduce(0, (a, b) => a + b);\n   |                               ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sorted = nums.sort_by(|x, y| x + y);\n    sorted.reverse();\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpd8q28_fd.rs:11:38\n   |\n11 |     let sorted = nums.sort_by(|x, y| x + y);\n   |                                      ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0599]: no method named `reverse` found for unit type `()` in the current scope\n  --> /tmp/tmpd8q28_fd.rs:12:12\n   |\n12 |     sorted.reverse();\n   |            ^^^^^^^ method not found in `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd8q28_fd.rs:13:12\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n13 |     return sorted;\n   |            ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in 0..sorted.len() - 1 {\n        if sorted[i] == sorted[i + 1] {\n            sorted[i] = -1;\n        }\n    }\n    sorted.sort((a, b) => a - b);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpwywdybe2.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sorted = nums.sort_by(|x, y| x + y);\n  if (sorted.len() == 0) {\n    return Vec::new();\n  }\n  let sum = 0;\n  for (let i = 0; i < sorted.len(); i++) {\n    sum += sorted[i];\n  }\n  let sorted2 = sorted.sort_by(|x, y| x - y);\n  for (let i = 0; i < sorted2.len(); i++) {\n    if (sorted2[i] == sum) {\n      return sorted2.slice(i, sorted2.len());\n    }\n  }\n  return sorted2;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpp6xvhkfn.rs:16:8\n   |\n16 |   for (let i = 0; i < sorted.len(); i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpp6xvhkfn.rs:16:12\n   |\n16 |   for (let i = 0; i < sorted.len(); i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpp6xvhkfn.rs:16:14\n   |\n16 |   for (let i = 0; i < sorted.len(); i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp6xvhkfn.rs:16:13\n   |\n16 |   for (let i = 0; i < sorted.len(); i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpp6xvhkfn.rs:16:14\n   |\n16 |   for (let i = 0; i < sorted.len(); i++) {\n   |              ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpp6xvhkfn.rs:12:6\n   |\n12 |   if (sorted.len() == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n12 -   if (sorted.len() == 0) {\n12 +   if sorted.len() == 0 {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp6xvhkfn.rs:11:36\n   |\n11 |   let sorted = nums.sort_by(|x, y| x + y);\n   |                                    ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0599]: no method named `len` found for unit type `()` in the current scope\n  --> /tmp/tmpp6xvhkfn.rs:12:14\n   |\n12 |   if (sorted.len() == 0) {\n   |              ^^^ method not found in `()`\n\nerror: aborting due to 7 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i() * i.to_i();\n    }\n    let sorted = nums.sort((a, b) => a.to_i() + b.to_i() - sum);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpcyfc6zht.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a.to_i() + b.to_i() - sum);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i.to_i() * i.to_i();\n  }\n  let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpauiyfjme.rs:13:14\n   |\n13 |     sum += i.to_i() * i.to_i();\n   |              ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpauiyfjme.rs:13:25\n   |\n13 |     sum += i.to_i() * i.to_i();\n   |                         ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmpauiyfjme.rs:15:38\n   |\n15 |   let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                      ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmpauiyfjme.rs:15:49\n   |\n15 |   let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                                 ^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpauiyfjme.rs:16:10\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n16 |   return sorted;\n   |          ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum_digits = nums.map(n => n % 10).fold(0, (acc, n) => acc + n);\n  let sorted = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp_p6vws2n.rs:11:31\n   |\n11 |   let sum_digits = nums.map(n => n % 10).fold(0, (acc, n) => acc + n);\n   |                               ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n\n  let sorted = nums.clone();\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b);\n  sorted.sort((a, b) => a - b\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp1vyea6w0.rs:17:22\n   |\n17 |   sorted.sort((a, b) => a - b);\n   |                      ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp1vyea6w0.rs:46:14\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                                    - closing delimiter possibly meant for this\n...\n46 |   sorted.sort((a, b) => a - b\n   |              ^ unclosed delimiter\n47 | }\n   | ^ mismatched closing delimiter\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut last_sum = 0;\n    let mut last_index = 0;\n    for i in nums.iter() {\n        let sum = i.as_u32() + last_sum;\n        if last_index == 0 || sum < last_sum {\n            last_sum = sum;\n            last_index = i.as_u32();\n        }\n        result.push(last_index);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmp0w_ob903.rs:15:21\n   |\n15 |         let sum = i.as_u32() + last_sum;\n   |                     ^^^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmp0w_ob903.rs:18:28\n   |\n18 |             last_index = i.as_u32();\n   |                            ^^^^^^ method not found in `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in 0..sorted.len() - 1 {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpyakdplpw.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.clone();\n    for i in 0..sorted.len() {\n        sum += sorted[i].to_i() * 10;\n        sorted[i] = sum;\n    }\n    sorted.sort_by(|a, b| a - b);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmp3bjtcn1d.rs:14:26\n   |\n14 |         sum += sorted[i].to_i() * 10;\n   |                          ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3bjtcn1d.rs:17:27\n   |\n17 |     sorted.sort_by(|a, b| a - b);\n   |                           ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = nums.map(|n| n.to_i()).fold(0, (acc, n) => acc + n.to_i());\n    let sorted = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpi7xn6khq.rs:11:62\n   |\n11 |     let sum_digits = nums.map(|n| n.to_i()).fold(0, (acc, n) => acc + n.to_i());\n   |                                                              ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sorted = Vec::new();\n\n  for (let i = 0; i < nums.len(); i++) {\n    let num = nums[i];\n    let sum = 0;\n    let index = 0;\n\n    for (let j = 0; j < num.len(); j++) {\n      sum += num[j].to_i();\n      index += 1;\n    }\n\n    if (sorted.len() == 0 || sorted[sorted.len() - 1] != index) {\n      sorted.push(index);\n    }\n\n    if (result.len() == 0 || result[result.len() - 1] != sum) {\n      result.push(sum);\n    }\n  }\n\n  for (let i = 0; i < sorted.len(); i++) {\n    let num = nums[sorted[i]];\n    result.push(num);\n  }\n\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpeakp68ye.rs:14:8\n   |\n14 |   for (let i = 0; i < nums.len(); i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpeakp68ye.rs:14:12\n   |\n14 |   for (let i = 0; i < nums.len(); i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpeakp68ye.rs:14:14\n   |\n14 |   for (let i = 0; i < nums.len(); i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpeakp68ye.rs:14:13\n   |\n14 |   for (let i = 0; i < nums.len(); i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpeakp68ye.rs:14:14\n   |\n14 |   for (let i = 0; i < nums.len(); i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in 0..sorted.len() - 1 {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpyakdplpw.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut sorted = Vec::new();\n    let mut sorted_sum = Vec::new();\n    let mut sorted_index = Vec::new();\n    let mut sorted_sum_index = Vec::new();\n    let mut sorted_index_sum = Vec::new();\n    let mut sorted_index_sum_sum = Vec::new();\n    let mut sorted_index_sum_index = Vec::new();\n    let mut sorted_index_sum_sum_index = Vec::new();\n    let mut sorted_index_sum_index_sum = Vec::new();\n    let mut sorted_index_sum_sum_index_sum = Vec::new();\n    let mut sorted_index_sum_index_sum_sum = Vec::new();\n    let mut sorted_index_sum_sum_index_sum_sum = Vec::new();\n    let mut sorted_index_sum_index_sum_sum_sum = Vec::new();\n    let mut sorted_index_sum_sum_index_sum_sum_sum = Vec::new();\n    let mut sorted_index_sum_index_sum_sum_sum_sum = Vec::new();\n    let mut sorted_index_sum_sum_index_sum_sum_sum_sum = Vec::new();\n    let mut sorted_index_sum_index_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_index_sum_sum_index_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_index_sum_index_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_index_sum_sum_index_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_index_sum_index_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_index_sum_sum_index_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_index_sum_index_sum_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_index_sum_sum_index_sum_sum_sum\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpixn9lqvw.rs:34:51\n   |\n34 |     let mut sorted_index_sum_sum_index_sum_sum_sum\n   |                                                   ^ help: add `;` here\n35 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpixn9lqvw.rs:10:41\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |    ---------------                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let result = Vec::new();\n    for num in nums {\n        sum += num % 10;\n        result.push(num);\n    }\n    for i in 0..result.len() - 1 {\n        for j in i + 1..result.len() - 1 {\n            if result[i] + result[j] == sum {\n                result.swap(i, j);\n                break;\n            }\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpx8c76lk_.rs:14:9\n   |\n11 |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n14 |         sum += num % 10;\n   |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmpx8c76lk_.rs:15:9\n   |\n12 |     let result = Vec::new();\n   |         ------ help: consider changing this to be mutable: `mut result`\n...\n15 |         result.push(num);\n   |         ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmpx8c76lk_.rs:20:17\n   |\n12 |     let result = Vec::new();\n   |         ------ help: consider changing this to be mutable: `mut result`\n...\n20 |                 result.swap(i, j);\n   |                 ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0384, E0596.\nFor more information about an error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmptdt981gy.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i() * i.to_i();\n    }\n    let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:13:18\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                  ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:13:29\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                             ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:15:40\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                        ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:15:51\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                                   ^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplmmtbvkk.rs:16:12\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n16 |     return sorted;\n   |            ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a.sum - b.sum);\n    if (sum == 0) {\n        return sorted;\n    }\n    let res = Vec::new();\n    for i in sorted {\n        if (i.sum == sum) {\n            res.push(i);\n        }\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmprkk0cnmx.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a.sum - b.sum);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmptdt981gy.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let index = 0;\n    for i in nums {\n        sum += i;\n        index += 1;\n    }\n    let sorted = nums.clone();\n    sorted.sort_by(|x, y| x + y);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp0m57skt0.rs:18:27\n   |\n18 |     sorted.sort_by(|x, y| x + y);\n   |                           ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmptdt981gy.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  let res = Vec::new();\n  for i in sorted {\n    res.push_back(i);\n  }\n  return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmppf52u6du.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for num in nums {\n        sum += num % 10;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for num in sorted {\n        result.push(num);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp9ph128no.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.clone();\n    for i in sorted {\n        sum += i;\n    }\n    for i in sorted {\n        let j = sorted.find(x => x == i);\n        if (sum - i != sum - sorted[j]) {\n            sorted[j] = i;\n        }\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpcpq9jkj4.rs:17:31\n   |\n17 |         let j = sorted.find(x => x == i);\n   |                               ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum_digits = nums.map(|n| n.to_i()).fold(0, (acc, n) => acc + n);\n  let sorted = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpqoz9g1lg.rs:11:60\n   |\n11 |   let sum_digits = nums.map(|n| n.to_i()).fold(0, (acc, n) => acc + n);\n   |                                                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i() * i.to_i();\n    }\n    let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:13:18\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                  ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:13:29\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                             ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:15:40\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                        ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:15:51\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                                   ^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplmmtbvkk.rs:16:12\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n16 |     return sorted;\n   |            ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let sorted_sum = 0;\n    for i in sorted {\n        sorted_sum += i;\n    }\n    let result = Vec::new();\n    for i in sorted {\n        if sorted_sum == sum {\n            result.push_back(i);\n        } else {\n            break;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpjztn7qjd.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut sorted = Vec::new();\n  let mut sum = 0;\n  for num in nums {\n    sum += num;\n  }\n  for i in 0..nums.len() {\n    let num = nums[i];\n    let index = i;\n    if (sum == num) {\n      sorted.push(num);\n      sum -= num;\n    } else if (sum < num) {\n      sorted.push(num);\n      sum -= num;\n    } else {\n      sorted.push(num);\n      sum -= num;\n    }\n  }\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7iqe8c2e.rs:19:8\n   |\n19 |     if (sum == num) {\n   |        ^          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -     if (sum == num) {\n19 +     if sum == num {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7iqe8c2e.rs:22:15\n   |\n22 |     } else if (sum < num) {\n   |               ^         ^\n   |\nhelp: remove these parentheses\n   |\n22 -     } else if (sum < num) {\n22 +     } else if sum < num {\n   | \n\nwarning: unused variable: `index`\n  --> /tmp/tmp7iqe8c2e.rs:18:9\n   |\n18 |     let index = i;\n   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_index`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\nerror[E0382]: borrow of moved value: `nums`\n   --> /tmp/tmp7iqe8c2e.rs:16:15\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n13  |   for num in nums {\n    |              ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |   for i in 0..nums.len() {\n    |               ^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n13  |   for num in &nums {\n    |              +\n\nerror: aborting due to previous error; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum_digits = nums.map(n => n % 10).sum();\n  let sorted_nums = nums.sort((a, b) => a.sum_digits - b.sum_digits);\n  let sorted_nums_by_index = nums.sort((a, b) => a.index - b.index);\n  let sorted_nums_by_sum_digits = nums.sort((a, b) => a.sum_digits - b.sum_digits);\n  let sorted_nums_by_sum_digits_and_index = nums.sort((a, b) => a.sum_digits - b.sum_digits);\n  return sorted_nums_by_sum_digits_and_index;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpmbbaupki.rs:11:31\n   |\n11 |   let sum_digits = nums.map(n => n % 10).sum();\n   |                               ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for num in nums {\n    sum += num;\n  }\n  for i in nums.iter() {\n    if nums[i] == 0 {\n      result.push(i);\n    } else {\n      let diff = sum - nums[i];\n      let index = nums.find_index(diff);\n      result.insert(index, i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp29wuhy_c.rs:17:8\n   |\n17 |     if nums[i] == 0 {\n   |        ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp29wuhy_c.rs:20:24\n   |\n20 |       let diff = sum - nums[i];\n   |                        ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0599]: no method named `find_index` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp29wuhy_c.rs:21:24\n   |\n21 |       let index = nums.find_index(diff);\n   |                        ^^^^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp29wuhy_c.rs:25:10\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n25 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvo9ydx8s.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  let res = Vec::new();\n  for i in sorted {\n    res.push(i);\n  }\n  return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpj9r3u_0y.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    for i in nums {\n        if sum - i == 0 {\n            result.push(i);\n        } else {\n            result.push(sum - i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmpc_0bljas.rs:16:14\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n13  |     for i in nums {\n    |              ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |     for i in nums {\n    |              ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n13  |     for i in &nums {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let index = 0;\n    for i in nums {\n        sum += i;\n        index += 1;\n    }\n    let sorted = nums.clone();\n    sorted.sort((a, b) => a - b);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp8_u5fn1h.rs:18:24\n   |\n18 |     sorted.sort((a, b) => a - b);\n   |                        ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sorted = nums.sort_by(|x, y| x + y);\n    if len(nums) == 0 {\n        return sorted;\n    }\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted_sum = sorted.map(|x, y| x + y);\n    let index = 0;\n    for i in sorted_sum {\n        if i == sum {\n            return sorted.slice(0, index);\n        }\n        index += 1;\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpc3dgo7hi.rs:12:8\n   |\n12 |     if len(nums) == 0 {\n   |        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc3dgo7hi.rs:11:38\n   |\n11 |     let sorted = nums.sort_by(|x, y| x + y);\n   |                                      ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc3dgo7hi.rs:13:16\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n13 |         return sorted;\n   |                ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0599]: `()` is not an iterator\n  --> /tmp/tmpc3dgo7hi.rs:19:29\n   |\n19 |     let sorted_sum = sorted.map(|x, y| x + y);\n   |                             ^^^ `()` is not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n           `(): Iterator`\n           which is required by `&mut (): Iterator`\n\nerror[E0599]: no method named `slice` found for unit type `()` in the current scope\n  --> /tmp/tmpc3dgo7hi.rs:23:27\n   |\n23 |             return sorted.slice(0, index);\n   |                           ^^^^^ method not found in `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = fn(x: isize) {\n        let sum = 0;\n        while x > 0 {\n            sum += x % 10;\n            x /= 10;\n        }\n        return sum;\n    }\n    let sorted = nums.sort_by(sum_digits);\n    if len(nums) == 0 {\n        return sorted;\n    }\n    let last = sorted[0];\n    let last_sum = sum_digits(last);\n    let last_index = 0;\n    for i in range(1, len(sorted)) {\n        let sum = sum_digits(sorted[i]);\n        if sum != last_sum {\n            last_index = i;\n            last_sum = sum;\n        }\n    }\n    let last_index_sorted = sorted.slice(0, last_index + 1);\n    let last_index_sorted_rev = reverse(last_index_sorted);\n    return concat(last_index_sorted_rev, sorted.slice(last_index + 1));\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpuk4je13u.rs:11:22\n   |\n11 |     let sum_digits = fn(x: isize) {\n   |                      ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sorted = Vec::new();\n\n  for i in nums {\n    let sum = 0;\n    let num = i;\n    while num > 0 {\n      sum += num % 10;\n      num /= 10;\n    }\n    let index = result.find(sum);\n    if index.is_none() {\n      result.push(sum);\n      sorted.push(i);\n    } else {\n      sorted.push(i);\n    }\n  }\n\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `find` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpzm82tqvs.rs:21:24\n   |\n21 |     let index = result.find(sum);\n   |                        ^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum_digits = nums.map(n => n.to_i()).fold(0, (acc, n) => acc + n);\n  let sorted = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmptu_vp04u.rs:11:31\n   |\n11 |   let sum_digits = nums.map(n => n.to_i()).fold(0, (acc, n) => acc + n);\n   |                               ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in 0..sorted.len() - 1 {\n        let a = sorted[i];\n        let b = sorted[i + 1];\n        if a - b == sum {\n            sorted[i] = a;\n            sorted[i + 1] = b;\n        }\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpxilvg9fv.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.clone();\n    for i in nums {\n        sum += i;\n    }\n    for i in nums {\n        sorted[sum - i] = i;\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8l7mdsz8.rs:17:9\n   |\n17 |         sorted[sum - i] = i;\n   |         ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i() * i.to_i();\n    }\n    let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:13:18\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                  ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:13:29\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                             ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:15:40\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                        ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:15:51\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                                   ^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplmmtbvkk.rs:16:12\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n16 |     return sorted;\n   |            ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvo9ydx8s.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for num in nums {\n    sum += num % 10;\n  }\n  for num in nums {\n    result.push(num);\n    if num % 10 == sum % 10 {\n      result.push(num);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmpeuylmw09.rs:16:14\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n13  |   for num in nums {\n    |              ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |   for num in nums {\n    |              ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n13  |   for num in &nums {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sorted = Vec::new();\n  let mut sorted_index = Vec::new();\n  let mut sorted_sum = Vec::new();\n  let mut sorted_sum_index = Vec::new();\n  let mut sorted_sum_sum = Vec::new();\n  let mut sorted_sum_sum_index = Vec::new();\n  let mut sorted_sum_sum_sum = Vec::new();\n  let mut sorted_sum_sum_sum_index = Vec::new();\n  let mut sorted_sum_sum_sum_sum = Vec::new();\n  let mut sorted_sum_sum_sum_sum_index = Vec::new();\n  let mut sorted_sum_sum_sum_sum_sum = Vec::new();\n  let mut sorted_sum_sum_sum_sum_sum_index = Vec::new();\n\n  for (let i = 0; i < nums.len(); i++) {\n    let num = nums[i];\n    let sum = 0;\n    let index = 0;\n    let sum_index = 0;\n    let sum_sum = 0;\n    let sum_sum_index = 0;\n    let sum_sum_sum = 0;\n    let sum_sum_sum_index = 0;\n    let sum_sum_sum_sum = 0;\n    let sum_sum_sum_sum_index = 0;\n    let sum_sum_sum_sum_sum = 0;\n    let sum_sum_sum_sum_sum_index = 0;\n\n    for (let j = 0; j < num.len(); j++) {\n      sum += num[j];\n      index += 1;\n    }\n\n    let num_index = nums.index(num);\n    let num_sum = sum;\n    let num_sum_index = index;\n    let num_sum_sum = sum;\n    let num_sum_sum_index = index;\n    let num_sum_sum_sum = sum;\n    let num_sum_sum_sum_index = index;\n    let num_sum_sum_sum_sum = sum;\n    let num_sum_sum_sum_sum_index = index;\n\n    \n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp4nb87ah1.rs:65:3\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n25 |   for (let i = 0; i < nums.len(); i++) {\n   |                                        - this delimiter might not be properly closed...\n...\n55 | }\n   | - ...as it matches this but it has different indentation\n...\n65 | }\n   |   ^\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp4nb87ah1.rs:25:8\n   |\n25 |   for (let i = 0; i < nums.len(); i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp4nb87ah1.rs:25:12\n   |\n25 |   for (let i = 0; i < nums.len(); i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp4nb87ah1.rs:25:14\n   |\n25 |   for (let i = 0; i < nums.len(); i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp4nb87ah1.rs:25:13\n   |\n25 |   for (let i = 0; i < nums.len(); i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp4nb87ah1.rs:25:14\n   |\n25 |   for (let i = 0; i < nums.len(); i++) {\n   |              ^ expected expression\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let result = Vec::new();\n    for num in nums {\n        sum += num % 10;\n        result.push(num);\n    }\n    for i in 0..result.len() - 1 {\n        for j in i + 1..result.len() - 1 {\n            if sum - result[i] - result[j] > 0 {\n                result[i], result[j] = result[j], result[i];\n            }\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n  --> /tmp/tmp58af1gvv.rs:20:26\n   |\n20 |                 result[i], result[j] = result[j], result[i];\n   |                          ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  let res = Vec::new();\n  for i in sorted {\n    res.push_back(i);\n  }\n  return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmppf52u6du.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a.sum - b.sum);\n    if (sorted.length == 0) {\n        return Vec::new();\n    }\n    let res = Vec::new();\n    let prev = sorted[0];\n    for i in range(1, sorted.length) {\n        if (sorted[i].sum - prev.sum != 0) {\n            res = res.append(prev.index);\n            prev = sorted[i];\n        }\n    }\n    res = res.append(prev.index);\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmphpb2f850.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a.sum - b.sum);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sorted = nums.copy();\n  sorted.sort_by(|x, y| x + y);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `copy` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpu_ttg_3x.rs:11:21\n   |\n11 |   let sorted = nums.copy();\n   |                     ^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in 0..sorted.len() - 1 {\n        if sorted[i] == sorted[i + 1] {\n            sorted[i] = -1;\n        }\n    }\n    let res = Vec::new();\n    for i in 0..sorted.len() - 1 {\n        if sorted[i] != -1 {\n            res.add(sorted[i]);\n        }\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpww7woqm1.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for num in nums {\n        sum += num % 10;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in 0..sorted.len() - 1 {\n        let a = sorted[i];\n        let b = sorted[i + 1];\n        if a - b == sum {\n            sorted[i] = a;\n            sorted[i + 1] = b;\n        }\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp9bxe2fgh.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum_digits = nums.map(n => n.to_i()).fold(0, (acc, n) => acc + n);\n  let sorted = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmptu_vp04u.rs:11:31\n   |\n11 |   let sum_digits = nums.map(n => n.to_i()).fold(0, (acc, n) => acc + n);\n   |                               ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in 0..sorted.len() - 1 {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpyakdplpw.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sorted = nums.sort((a, b) => a.sum_of_digits() - b.sum_of_digits());\n  if (sorted.is_empty()) {\n    return sorted;\n  }\n  let sorted_by_index = nums.map(n => n.index);\n  let sorted_by_sum = sorted.map(n => n.sum_of_digits());\n  let sorted_by_index_and_sum = sorted_by_index.zip(sorted_by_sum);\n  return sorted_by_index_and_sum.sort((a, b) => a[0] - b[0]);\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp0zz0v61r.rs:11:33\n   |\n11 |   let sorted = nums.sort((a, b) => a.sum_of_digits() - b.sum_of_digits());\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in 0..sorted.len() - 1 {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpyakdplpw.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in 0..sorted.len() - 1 {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpyakdplpw.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = nums.map(|x| x.to_i()).fold(0, (a, b) => a + b);\n    let sorted_nums = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n    return sorted_nums;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp7ao124yy.rs:11:60\n   |\n11 |     let sum_digits = nums.map(|x| x.to_i()).fold(0, (a, b) => a + b);\n   |                                                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.clone();\n    for i in sorted {\n        sum += i;\n    }\n    let sorted_by_sum = sorted.clone();\n    sorted_by_sum.sort((a, b) => a.sum - b.sum);\n    return sorted_by_sum;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpjmu25xxq.rs:17:31\n   |\n17 |     sorted_by_sum.sort((a, b) => a.sum - b.sum);\n   |                               ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut sorted = Vec::new();\n    let mut sorted_index = Vec::new();\n    let mut sorted_sum = Vec::new();\n\n    for i in nums {\n        let sum = i.to_i() * i.to_i();\n        let index = sorted.find(sum);\n        if index.is_none() {\n            sorted.push(sum);\n            sorted_index.push(i);\n            sorted_sum.push(sum);\n        } else {\n            let index_of_sum = sorted_index.index(index.get());\n            if index_of_sum < i.to_i() {\n                sorted_index.set(index_of_sum, i);\n                sorted_sum.set(index_of_sum, sum);\n            }\n        }\n    }\n\n    for i in sorted_index {\n        result.push(sorted_index.get(i));\n    }\n\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpjf73ygmc.rs:17:21\n   |\n17 |         let sum = i.to_i() * i.to_i();\n   |                     ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpjf73ygmc.rs:17:32\n   |\n17 |         let sum = i.to_i() * i.to_i();\n   |                                ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `find` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpjf73ygmc.rs:18:28\n   |\n18 |         let index = sorted.find(sum);\n   |                            ^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `index` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpjf73ygmc.rs:24:45\n   |\n24 |             let index_of_sum = sorted_index.index(index.get());\n   |                                             ^^^^^ method not found in `Vec<isize>`\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::ops::Index;\n   |\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpjf73ygmc.rs:25:33\n   |\n25 |             if index_of_sum < i.to_i() {\n   |                                 ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `set` found for struct `Vec<isize>` in the current scope\n   --> /tmp/tmpjf73ygmc.rs:26:30\n    |\n26  |                 sorted_index.set(index_of_sum, i);\n    |                              ^^^\n    |\nhelp: consider wrapping the receiver expression with the appropriate type\n    |\n26  |                 Pin::new(sorted_index).set(index_of_sum, i);\n    |                 +++++++++            +\nhelp: consider wrapping the receiver expression with the appropriate type\n    |\n26  |                 Pin::new(&mut sorted_index).set(index_of_sum, i);\n    |                 +++++++++++++             +\nhelp: there is an associ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.clone();\n    for i in nums {\n        sum += i;\n    }\n    let sorted_by_sum = sorted.clone();\n    for i in sorted {\n        let j = sorted_by_sum.find(j => j.sum() == sum);\n        if (j.is_none()) {\n            sorted_by_sum.insert(i);\n        } else {\n            sorted_by_sum.insert_before(i, j);\n        }\n    }\n    return sorted_by_sum;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpo52904qq.rs:18:38\n   |\n18 |         let j = sorted_by_sum.find(j => j.sum() == sum);\n   |                                      ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  for i in nums {\n    if sum == 0 {\n      result.push(i);\n      break;\n    }\n    if sum % 10 == 0 {\n      result.push(i);\n      sum /= 10;\n    } else {\n      sum -= i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmpey793tvl.rs:16:12\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n13  |   for i in nums {\n    |            ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |   for i in nums {\n    |            ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n13  |   for i in &nums {\n    |            +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in sorted {\n        if (sum - i) {\n            sorted.insert(i, sorted.indexOf(i));\n        }\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpw0_ynda8.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let result = Vec::new();\n    for num in nums {\n        sum += num % 10;\n        result.push(num);\n    }\n    sort_by(result, (a, b) => a - b);\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmppp_qrvzc.rs:17:28\n   |\n17 |     sort_by(result, (a, b) => a - b);\n   |                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let index = 0;\n    for i in nums {\n        sum += i;\n        index += 1;\n    }\n    let sorted = nums.clone();\n    sorted.sort((a, b) => a - b);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp8_u5fn1h.rs:18:24\n   |\n18 |     sorted.sort((a, b) => a - b);\n   |                        ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  let index = 0;\n  for i in nums {\n    sum += i;\n    index += 1;\n  }\n  let sorted = nums.clone();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpy_md8oli.rs:18:22\n   |\n18 |   sorted.sort((a, b) => a - b);\n   |                      ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let result = Vec::new();\n    for i in nums {\n        result.push(i);\n        if (sum == i) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp338lgydy.rs:18:12\n   |\n18 |         if (sum == i) {\n   |            ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -         if (sum == i) {\n18 +         if sum == i {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmp338lgydy.rs:13:9\n   |\n11 |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n12 |     for i in nums {\n13 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `nums`\n   --> /tmp/tmp338lgydy.rs:16:14\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n11  |     let sum = 0;\n12  |     for i in nums {\n    |              ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |     for i in nums {\n    |              ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n12  |     for i in &nums {\n    |              +\n\nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmp338lgydy.rs:17:9\n   |\n15 |     let result = Vec::new();\n   |         ------ help: consider changing this to be mutable: `mut result`\n16 |     for i in nums {\n17 |         result.push(i);\n   |         ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmp338lgydy.rs:19:13\n   |\n15 |     let result = Vec::new();\n   |         ------ help: consider changing this to be mutable: `mut result`\n...\n19 |             result.push(i);\n   |             ^^^^^^^^^^^^^^ cannot borrow as mutabl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut sorted = Vec::new();\n    let mut sorted_nums = Vec::new();\n    let mut sorted_nums_sum = Vec::new();\n    let mut sorted_nums_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n    let mut sorted_nums_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = Vec::new();\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4lkqriat.rs:10:41\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |    ---------------                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in 0..sorted.len() - 1 {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpyakdplpw.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in sorted {\n        if (sum == 0) {\n            break;\n        }\n        sum -= sorted[i];\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpubu9w121.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in 0..sorted.len() - 1 {\n        let a = sorted[i];\n        let b = sorted[i + 1];\n        if (a - b == sum) {\n            sorted[i] = a;\n            sorted[i + 1] = b;\n        }\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpp1mokscv.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut sorted = Vec::new();\n    let mut sorted_index = Vec::new();\n    let mut sorted_sum = Vec::new();\n    let mut sorted_sum_index = Vec::new();\n\n    for i in nums {\n        let sum = i.to_i() * i.to_i();\n        let index = i.to_i();\n        sorted_index.push(index);\n        sorted_sum.push(sum);\n        sorted_sum_index.push(i);\n    }\n\n    sorted = sorted.sort_by(|&i, &j| {\n        let a = sorted_sum[i];\n        let b = sorted_sum[j];\n        if (a < b) {\n            return -1;\n        } else if (a > b) {\n            return 1;\n        } else {\n            return sorted_index[i] - sorted_index[j];\n        }\n    });\n\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpatsujw4f.rs:27:12\n   |\n27 |         if (a < b) {\n   |            ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n27 -         if (a < b) {\n27 +         if a < b {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpatsujw4f.rs:29:19\n   |\n29 |         } else if (a > b) {\n   |                   ^     ^\n   |\nhelp: remove these parentheses\n   |\n29 -         } else if (a > b) {\n29 +         } else if a > b {\n   | \n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpatsujw4f.rs:17:21\n   |\n17 |         let sum = i.to_i() * i.to_i();\n   |                     ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpatsujw4f.rs:17:32\n   |\n17 |         let sum = i.to_i() * i.to_i();\n   |                                ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpatsujw4f.rs:18:23\n   |\n18 |         let index = i.to_i();\n   |                       ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpatsujw4f.rs:28:20\n   |\n28 |             return -1;\n   |                    ^^ expected enum `std::cmp::Ordering`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpatsujw4f.rs:24:14\n   |\n11 |       let mut sorted = Vec::new();\n   |                        ---------- expected due to this value\n...\n24 |       sorted = sorted.sort_by(|&i, &j| {\n   |  ______________^\n25 | |         let a = sorted_sum[i];\n26 | |         let b = sorted_sum[j];\n27 | |         if (a < b) {\n...  |\n33 | |         }\n34 | |     });\n   | |______^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpatsujw4f.rs:25:17\n   |\n25 |         let a = sorted_sum[i];\n   |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i() * i.to_i();\n    }\n    let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:13:18\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                  ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:13:29\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                             ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:15:40\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                        ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmplmmtbvkk.rs:15:51\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                                   ^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplmmtbvkk.rs:16:12\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n16 |     return sorted;\n   |            ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.clone();\n    for i in nums {\n        sum += i;\n    }\n    for i in nums {\n        sorted.insert(sum - i, i);\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmplwchy4lt.rs:17:23\n   |\n17 |         sorted.insert(sum - i, i);\n   |                       ^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n17 |         sorted.insert((sum - i).try_into().unwrap(), i);\n   |                       +       +++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let index = 0;\n    for i in nums {\n        sum += i;\n        index += 1;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for i in sorted {\n        result.append(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvl6huit1.rs:17:35\n   |\n17 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for num in nums {\n    sum += num;\n  }\n  for i in nums.iter() {\n    let num = nums[i];\n    let diff = sum - num;\n    let index = diff.to_i();\n    result.push(index);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp922w2xk0.rs:17:15\n   |\n17 |     let num = nums[i];\n   |               ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvo9ydx8s.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in sorted {\n        if sum == 0 {\n            break;\n        }\n        sum -= sorted[i];\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpv70l1i83.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  let index = 0;\n  for i in nums {\n    sum += i;\n    index += 1;\n  }\n  let sorted = nums.clone();\n  sorted.sort_by(|x, y| {\n    let x_sum = x + y;\n    let y_sum = y + x;\n    if (x_sum == y_sum) {\n      return x - index;\n    } else {\n      return x_sum - y_sum;\n    }\n  });\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdr5hx0jd.rs:21:8\n   |\n21 |     if (x_sum == y_sum) {\n   |        ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n21 -     if (x_sum == y_sum) {\n21 +     if x_sum == y_sum {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdr5hx0jd.rs:22:14\n   |\n22 |       return x - index;\n   |              ^^^^^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i() % 10;\n    }\n    let sorted = nums.sort_by(|i| i.to_i() % 10);\n    if (sum == 0) {\n        return sorted;\n    }\n    let result = Vec::new();\n    for i in nums {\n        if (sum == i.to_i() % 10) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxf6xp6tt.rs:16:8\n   |\n16 |     if (sum == 0) {\n   |        ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (sum == 0) {\n16 +     if sum == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxf6xp6tt.rs:21:12\n   |\n21 |         if (sum == i.to_i() % 10) {\n   |            ^                    ^\n   |\nhelp: remove these parentheses\n   |\n21 -         if (sum == i.to_i() % 10) {\n21 +         if sum == i.to_i() % 10 {\n   | \n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpxf6xp6tt.rs:13:18\n   |\n13 |         sum += i.to_i() % 10;\n   |                  ^^^^ method not found in `isize`\n\nerror[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n  --> /tmp/tmpxf6xp6tt.rs:15:23\n   |\n15 |     let sorted = nums.sort_by(|i| i.to_i() % 10);\n   |                       ^^^^^^^ --- takes 1 argument\n   |                       |\n   |                       expected closure that takes 2 arguments\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxf6xp6tt.rs:17:16\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n17 |         return sorted;\n   |                ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpxf6xp6tt.rs:21:22\n   |\n21 |         if (sum == i.to_i() % 10) {\n   |                      ^^^^ method not found in `isize`\n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nSome errors have detailed explanations: E0308, E0593, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum_digits = nums.map(n => n.to_i()).fold(0, (acc, n) => acc + n);\n  let sorted_nums = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n  return sorted_nums;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp_2_qjdx3.rs:11:31\n   |\n11 |   let sum_digits = nums.map(n => n.to_i()).fold(0, (acc, n) => acc + n);\n   |                               ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i.to_i() * i.to_i();\n  }\n\n  let sorted = nums.clone();\n  sorted.sort_by(|&x, &y| x.to_i() + y.to_i() - sum);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmp3er_91gm.rs:13:14\n   |\n13 |     sum += i.to_i() * i.to_i();\n   |              ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmp3er_91gm.rs:13:25\n   |\n13 |     sum += i.to_i() * i.to_i();\n   |                         ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmp3er_91gm.rs:17:29\n   |\n17 |   sorted.sort_by(|&x, &y| x.to_i() + y.to_i() - sum);\n   |                             ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmp3er_91gm.rs:17:40\n   |\n17 |   sorted.sort_by(|&x, &y| x.to_i() + y.to_i() - sum);\n   |                                        ^^^^ method not found in `isize`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i() % 10;\n    }\n    let sorted = nums.sort_by(|x| x.to_i() % 10);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpbd4tfyzh.rs:13:18\n   |\n13 |         sum += i.to_i() % 10;\n   |                  ^^^^ method not found in `isize`\n\nerror[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n  --> /tmp/tmpbd4tfyzh.rs:15:23\n   |\n15 |     let sorted = nums.sort_by(|x| x.to_i() % 10);\n   |                       ^^^^^^^ --- takes 1 argument\n   |                       |\n   |                       expected closure that takes 2 arguments\n\nerror[E0277]: `()` is not an iterator\n  --> /tmp/tmpbd4tfyzh.rs:17:14\n   |\n17 |     for i in sorted {\n   |              ^^^^^^ `()` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `()`\n   = note: required because of the requirements on the impl of `IntoIterator` for `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0593, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in 0..sorted.len() - 1 {\n        if sorted[i] == sorted[i + 1] {\n            sorted[i] = -1;\n        }\n    }\n    sorted.sort((a, b) => a - b);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpwywdybe2.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i() * i.to_i();\n    }\n    let sorted = nums.sort((a, b) => a.to_i() + b.to_i() - sum);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpcyfc6zht.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a.to_i() + b.to_i() - sum);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in 0..sorted.len() - 1 {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpyakdplpw.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = nums.map(|x| x.to_i()).fold(0, (a, b) => a + b);\n    let sorted = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp22cx2f3_.rs:11:60\n   |\n11 |     let sum_digits = nums.map(|x| x.to_i()).fold(0, (a, b) => a + b);\n   |                                                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in range(len(sorted) - 1) {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmprgn089th.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort_by(|x, y| x + y);\n    if sum == 0 {\n        return sorted;\n    }\n    let res = Vec::new();\n    for i in sorted {\n        if sum - i >= 0 {\n            res.push(sum - i);\n        }\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpptqnptqk.rs:15:38\n   |\n15 |     let sorted = nums.sort_by(|x, y| x + y);\n   |                                      ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpptqnptqk.rs:17:16\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n17 |         return sorted;\n   |                ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0277]: `()` is not an iterator\n  --> /tmp/tmpptqnptqk.rs:20:14\n   |\n20 |     for i in sorted {\n   |              ^^^^^^ `()` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `()`\n   = note: required because of the requirements on the impl of `IntoIterator` for `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = fn(i, j) {\n        let sum = 0;\n        while i <= j {\n            sum += nums[i] * 10;\n            i += 1;\n        }\n        return sum;\n    };\n    let sorted = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmp518gv85h.rs:11:22\n   |\n11 |     let sum_digits = fn(i, j) {\n   |                      ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let index = 0;\n    for i in nums {\n        sum += i;\n        index += 1;\n    }\n    let sorted = nums.clone();\n    sorted.sort_by(|x, y| x + y);\n    if (sum == 0) {\n        return sorted;\n    }\n    let result = Vec::new();\n    for i in sorted {\n        if (sum - i == 0) {\n            result.append(index);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7he1dw3m.rs:19:8\n   |\n19 |     if (sum == 0) {\n   |        ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -     if (sum == 0) {\n19 +     if sum == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7he1dw3m.rs:24:12\n   |\n24 |         if (sum - i == 0) {\n   |            ^            ^\n   |\nhelp: remove these parentheses\n   |\n24 -         if (sum - i == 0) {\n24 +         if sum - i == 0 {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7he1dw3m.rs:18:27\n   |\n18 |     sorted.sort_by(|x, y| x + y);\n   |                           ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7he1dw3m.rs:25:27\n   |\n25 |             result.append(index);\n   |                           ^^^^^ expected `&mut Vec<_>`, found integer\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `{integer}`\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  let sorted = nums.clone();\n  for i in nums {\n    sum += i;\n  }\n  for i in nums {\n    sorted[sum - i] = i;\n  }\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptj_7blef.rs:17:5\n   |\n17 |     sorted[sum - i] = i;\n   |     ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for i in sorted {\n        result.push_back(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp2mg7uhww.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.clone();\n    for i in nums {\n        sum += i;\n    }\n    let sorted_by_sum = sorted.clone();\n    for i in sorted {\n        let j = sorted_by_sum.find(i);\n        if j != -1 {\n            let k = sorted_by_sum.find(sum - i);\n            if k != -1 {\n                sorted_by_sum[j] = k;\n            }\n        }\n    }\n    return sorted_by_sum;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0599]: no method named `find` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpajxyve6c.rs:18:31\n   |\n18 |         let j = sorted_by_sum.find(i);\n   |                               ^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method named `find` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpajxyve6c.rs:20:35\n   |\n20 |             let k = sorted_by_sum.find(sum - i);\n   |                                   ^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in 0..sorted.len() - 1 {\n        if sorted[i] == sorted[i + 1] {\n            sorted[i] = -1;\n        }\n    }\n    sorted.sort((a, b) => a - b);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpwywdybe2.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let index = 0;\n    for i in nums {\n        sum += i;\n        index += 1;\n    }\n    let sorted = nums.sort((a, b) => a.sum - b.sum);\n    if (sum % 10 == 0) {\n        return sorted;\n    }\n    let result = Vec::new();\n    for i in sorted {\n        if (i.sum % 10 == 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpr3npvlvr.rs:17:35\n   |\n17 |     let sorted = nums.sort((a, b) => a.sum - b.sum);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.clone();\n    for i in 0..sorted.len() {\n        sum += nums[i].to_i() * 10;\n        sorted[i] = nums[i];\n    }\n    sorted.sort_by(|&(a, b) {\n        let a_sum = a.to_i() * 10;\n        let b_sum = b.to_i() * 10;\n        return a_sum - b_sum;\n    });\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `,` or `:`, found `{`\n  --> /tmp/tmp_04f56iq.rs:17:29\n   |\n17 |     sorted.sort_by(|&(a, b) {\n   |                             ^ expected one of `,` or `:`\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort_by(|x, y| x + y);\n    let result = Vec::new();\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpas97kge5.rs:15:38\n   |\n15 |     let sorted = nums.sort_by(|x, y| x + y);\n   |                                      ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0277]: `()` is not an iterator\n  --> /tmp/tmpas97kge5.rs:17:14\n   |\n17 |     for i in sorted {\n   |              ^^^^^^ `()` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `()`\n   = note: required because of the requirements on the impl of `IntoIterator` for `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n\n  let result = Vec::new();\n  for i in nums {\n    result.push(i);\n  }\n\n  let sorted = sort_by_points(result, sum);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `sort_by_points` in this scope\n  --> /tmp/tmpcr2_1r3w.rs:21:16\n   |\n21 |   let sorted = sort_by_points(result, sum);\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  let res = Vec::new();\n  for i in sorted {\n    res.push(i);\n  }\n  return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpj9r3u_0y.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = nums.map(|x| x.to_i()).fold(0, (acc, x) => acc + x);\n    let sorted_nums = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n    return sorted_nums;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpa0flwu2h.rs:11:62\n   |\n11 |     let sum_digits = nums.map(|x| x.to_i()).fold(0, (acc, x) => acc + x);\n   |                                                              ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.clone();\n    for i in sorted {\n        sum += i;\n    }\n    let sorted_by_sum = sorted.clone();\n    sorted_by_sum.sort((a, b) => a.sum - b.sum);\n    for i in sorted_by_sum {\n        sorted.push_back(i);\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp8fj1iuk6.rs:17:31\n   |\n17 |     sorted_by_sum.sort((a, b) => a.sum - b.sum);\n   |                               ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = nums.map(|x| x.to_i()).fold(0, |(acc, x) {\n        acc += x.to_i();\n        return acc;\n    });\n    let sorted = nums.sort_by(|x| x.to_i() - sum_digits);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `,` or `:`, found `{`\n  --> /tmp/tmpjz44_rrj.rs:11:63\n   |\n11 |     let sum_digits = nums.map(|x| x.to_i()).fold(0, |(acc, x) {\n   |                                                               ^ expected one of `,` or `:`\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sorted = nums.sort((a, b) => a.points() - b.points());\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpk1t7mnx3.rs:11:33\n   |\n11 |   let sorted = nums.sort((a, b) => a.points() - b.points());\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort_by(|x, y| x + y);\n    let res = Vec::new();\n    for i in sorted {\n        res.append(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpcfjo9dv7.rs:15:38\n   |\n15 |     let sorted = nums.sort_by(|x, y| x + y);\n   |                                      ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0277]: `()` is not an iterator\n  --> /tmp/tmpcfjo9dv7.rs:17:14\n   |\n17 |     for i in sorted {\n   |              ^^^^^^ `()` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `()`\n   = note: required because of the requirements on the impl of `IntoIterator` for `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let index = 0;\n    for i in nums {\n        sum += i;\n        index += 1;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpi2tiowza.rs:17:35\n   |\n17 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i() * i.to_i();\n    }\n    let sorted = nums.sort_by(|i| i.to_i() * i.to_i() - sum);\n    if len(nums) == 0 {\n        return sorted;\n    }\n    let last = nums[0];\n    for i in nums[1..] {\n        if (last.to_i() * last.to_i() - sum) > (i.to_i() * i.to_i() - sum) {\n            last = i;\n        }\n    }\n    return sorted.append(last);\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpv372rkod.rs:16:8\n   |\n16 |     if len(nums) == 0 {\n   |        ^^^ not found in this scope\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpv372rkod.rs:13:18\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                  ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpv372rkod.rs:13:29\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                             ^^^^ method not found in `isize`\n\nerror[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n  --> /tmp/tmpv372rkod.rs:15:23\n   |\n15 |     let sorted = nums.sort_by(|i| i.to_i() * i.to_i() - sum);\n   |                       ^^^^^^^ --- takes 1 argument\n   |                       |\n   |                       expected closure that takes 2 arguments\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv372rkod.rs:17:16\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n17 |         return sorted;\n   |                ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation time\n  --> /tmp/tmpv372rkod.rs:20:14\n   |\n20 |     for i in nums[1..] {\n   |              ^^^^^^^^^ expected an implementor of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n   = note: required because of the requirements on the impl of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n20 |     for i in &nums[1..] {\n   |              +\n20 |     for i in &mut nums[1..] {\n   |              ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmpv372rkod.rs:20:14\n   |\n20 |     for i in nums[1..] {\n   |              ^^^^^^^^^ expected an implementor of trait ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.clone();\n    for i in nums {\n        sum += i;\n    }\n    for i in nums {\n        sorted[i] = sum - sorted[i];\n    }\n    sorted.sort();\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppc_aj86z.rs:17:9\n   |\n17 |         sorted[i] = sum - sorted[i];\n   |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppc_aj86z.rs:17:27\n   |\n17 |         sorted[i] = sum - sorted[i];\n   |                           ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sorted = nums.sort_by(|x, y| x + y);\n  if (sorted.is_empty()) {\n    return sorted;\n  }\n  let sum = 0;\n  for (let i = 0; i < sorted.len(); i++) {\n    sum += sorted[i];\n  }\n  let sorted2 = sorted.sort_by(|x, y| x - y);\n  if (sorted2.is_empty()) {\n    return sorted2;\n  }\n  for (let i = 0; i < sorted2.len(); i++) {\n    if (sorted2[i] == sum) {\n      return sorted2.slice(i, sorted2.len());\n    }\n  }\n  return sorted2;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpyj40xice.rs:16:8\n   |\n16 |   for (let i = 0; i < sorted.len(); i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpyj40xice.rs:16:12\n   |\n16 |   for (let i = 0; i < sorted.len(); i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpyj40xice.rs:16:14\n   |\n16 |   for (let i = 0; i < sorted.len(); i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyj40xice.rs:16:13\n   |\n16 |   for (let i = 0; i < sorted.len(); i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpyj40xice.rs:16:14\n   |\n16 |   for (let i = 0; i < sorted.len(); i++) {\n   |              ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyj40xice.rs:12:6\n   |\n12 |   if (sorted.is_empty()) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n12 -   if (sorted.is_empty()) {\n12 +   if sorted.is_empty() {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyj40xice.rs:11:36\n   |\n11 |   let sorted = nums.sort_by(|x, y| x + y);\n   |                                    ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0599]: no method named `is_empty` found for unit type `()` in the current scope\n  --> /tmp/tmpyj40xice.rs:12:14\n   |\n12 |   if (sorted.is_empty()) {\n   |              ^^^^^^^^ method not found in `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyj40xice.rs:13:12\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n13 |     return sorted;\n   |            ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<is",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = nums.map(|x| x.to_i()).fold(0, (a, b) => a + b);\n    let sorted = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp22cx2f3_.rs:11:60\n   |\n11 |     let sum_digits = nums.map(|x| x.to_i()).fold(0, (a, b) => a + b);\n   |                                                            ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i.to_i() * i.to_i();\n  }\n  let sorted = nums.sort((a, b) => a.to_i() + b.to_i() - sum);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp8_ntzn9g.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a.to_i() + b.to_i() - sum);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort_by(|x, y| x + y);\n    let result = Vec::new();\n    for i in sorted {\n        result.append(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpk49ze2ye.rs:15:38\n   |\n15 |     let sorted = nums.sort_by(|x, y| x + y);\n   |                                      ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0277]: `()` is not an iterator\n  --> /tmp/tmpk49ze2ye.rs:17:14\n   |\n17 |     for i in sorted {\n   |              ^^^^^^ `()` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `()`\n   = note: required because of the requirements on the impl of `IntoIterator` for `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut sum = 0;\n    for num in nums {\n        sum += num;\n    }\n    for i in 0..nums.len() {\n        let num = nums[i];\n        let index = nums.len() - i - 1;\n        let diff = sum - num;\n        if diff == 0 {\n            result.push(num);\n        } else if diff > 0 {\n            result.push(num);\n        } else {\n            result.insert(index, num);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `nums`\n   --> /tmp/tmpo3q1gqws.rs:16:17\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n13  |     for num in nums {\n    |                ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |     for i in 0..nums.len() {\n    |                 ^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n13  |     for num in &nums {\n    |                +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvo9ydx8s.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i() * i.to_i();\n    }\n    let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n    if len(nums) == 0 {\n        return sorted;\n    }\n    let prev = sorted[0];\n    for i in range(1, len(sorted)) {\n        if sorted[i].to_i() + prev.to_i() - sum < 0 {\n            return sorted.slice(0, i);\n        }\n        prev = sorted[i];\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxckcc9kw.rs:16:8\n   |\n16 |     if len(nums) == 0 {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpxckcc9kw.rs:20:14\n   |\n20 |     for i in range(1, len(sorted)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxckcc9kw.rs:20:23\n   |\n20 |     for i in range(1, len(sorted)) {\n   |                       ^^^ not found in this scope\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpxckcc9kw.rs:13:18\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                  ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpxckcc9kw.rs:13:29\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                             ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmpxckcc9kw.rs:15:40\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                        ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmpxckcc9kw.rs:15:51\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                                   ^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxckcc9kw.rs:17:16\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n17 |         return sorted;\n   |                ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0608]: cannot index into a ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for num in nums {\n    sum += num.as_i32() % 10;\n  }\n  for num in nums {\n    result.push(num.as_i32() % 10 - sum);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_i32` found for type `isize` in the current scope\n  --> /tmp/tmpxreqcvpf.rs:14:16\n   |\n14 |     sum += num.as_i32() % 10;\n   |                ^^^^^^ method not found in `isize`\n\nerror[E0599]: no method named `as_i32` found for type `isize` in the current scope\n  --> /tmp/tmpxreqcvpf.rs:17:21\n   |\n17 |     result.push(num.as_i32() % 10 - sum);\n   |                     ^^^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  for i in nums {\n    if sum - i == 0 {\n      result.push(i);\n    } else {\n      result.push(sum - i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmpok7x4qt3.rs:16:12\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n13  |   for i in nums {\n    |            ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |   for i in nums {\n    |            ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n13  |   for i in &nums {\n    |            +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for num in nums {\n    sum += num;\n  }\n  for i in 0..nums.len() {\n    let num = nums[i];\n    if nums.len() == 1 || num == 0 {\n      result.append(num);\n      continue;\n    }\n    let j = i;\n    while j < nums.len() && nums[j] == num {\n      j += 1;\n    }\n    let diff = j - i;\n    if diff == 1 {\n      result.append(num);\n    } else if diff > 1 {\n      result.append(num);\n      for j in i + 1..diff {\n        result.append(nums[j]);\n      }\n    }\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpya2oyw9v.rs:19:21\n   |\n19 |       result.append(num);\n   |                     ^^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpya2oyw9v.rs:28:21\n   |\n28 |       result.append(num);\n   |                     ^^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpya2oyw9v.rs:30:21\n   |\n30 |       result.append(num);\n   |                     ^^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpya2oyw9v.rs:32:23\n   |\n32 |         result.append(nums[j]);\n   |                       ^^^^^^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in range(len(sorted) - 1) {\n        if sorted[i] == sorted[i + 1] {\n            sorted[i] = -1;\n        }\n    }\n    sorted.sort((a, b) => a - b);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpfv36oi80.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.clone();\n    for i in 0..sorted.len() {\n        sum += nums[i].to_i() * 10;\n        sorted[i] = nums[i];\n    }\n    sorted.sort_by(|a, b| a.to_i() + b.to_i() - sum);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmp0nh3nscc.rs:14:24\n   |\n14 |         sum += nums[i].to_i() * 10;\n   |                        ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmp0nh3nscc.rs:17:29\n   |\n17 |     sorted.sort_by(|a, b| a.to_i() + b.to_i() - sum);\n   |                             ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmp0nh3nscc.rs:17:40\n   |\n17 |     sorted.sort_by(|a, b| a.to_i() + b.to_i() - sum);\n   |                                        ^^^^ method not found in `&isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvo9ydx8s.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    for i in sorted {\n        if (sum == 0) {\n            break;\n        }\n        sum -= sorted[i];\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpubu9w121.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmptdt981gy.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let result = Vec::new();\n    for num in nums {\n        sum += num % 10;\n        result.push(num);\n    }\n    for i in 0..result.len() - 1 {\n        for j in i + 1..result.len() - 1 {\n            if result[i] + result[j] == sum {\n                result.swap(i, j);\n                break;\n            }\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpx8c76lk_.rs:14:9\n   |\n11 |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n14 |         sum += num % 10;\n   |         ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmpx8c76lk_.rs:15:9\n   |\n12 |     let result = Vec::new();\n   |         ------ help: consider changing this to be mutable: `mut result`\n...\n15 |         result.push(num);\n   |         ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmpx8c76lk_.rs:20:17\n   |\n12 |     let result = Vec::new();\n   |         ------ help: consider changing this to be mutable: `mut result`\n...\n20 |                 result.swap(i, j);\n   |                 ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0384, E0596.\nFor more information about an error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n\n  let result = Vec::new();\n  for i in nums {\n    if i == 0 {\n      result.append(i);\n    } else {\n      let j = nums.find(i);\n      if j != -1 && sum - i < sum - nums[j] {\n        result.append(i);\n      } else {\n        result.append(nums[j]);\n      }\n    }\n  }\n\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmph0ptb0l1.rs:19:21\n   |\n19 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0599]: no method named `find` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmph0ptb0l1.rs:21:20\n   |\n21 |       let j = nums.find(i);\n   |                    ^^^^ method not found in `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph0ptb0l1.rs:23:23\n   |\n23 |         result.append(i);\n   |                       ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvo9ydx8s.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  let result = Vec::new();\n  for i in sorted {\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp31kg8hgt.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i();\n    }\n    let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmp8n_pc1ua.rs:13:18\n   |\n13 |         sum += i.to_i();\n   |                  ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmp8n_pc1ua.rs:15:40\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                        ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmp8n_pc1ua.rs:15:51\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                                   ^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8n_pc1ua.rs:16:12\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n16 |     return sorted;\n   |            ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvo9ydx8s.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  for i in nums {\n    if sum - i == 0 {\n      result.push(i);\n    } else {\n      for j in nums {\n        if sum - j == i {\n          result.push(j);\n          break;\n        }\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmpltki98bh.rs:16:12\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n13  |   for i in nums {\n    |            ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |   for i in nums {\n    |            ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n13  |   for i in &nums {\n    |            +\n\nerror[E0382]: use of moved value: `nums`\n  --> /tmp/tmpltki98bh.rs:20:16\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n16 |   for i in nums {\n   |            ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n20 |       for j in nums {\n   |                ^^^^ value used here after move\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n   |\n16 |   for i in &nums {\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmptdt981gy.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  let res = Vec::new();\n  for i in sorted {\n    res.push(i);\n  }\n  return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpj9r3u_0y.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n\n  let sorted = nums.clone();\n  sorted.sort((a, b) => a - b);\n\n  let result = Vec::new();\n  for i in sorted {\n    result.push(i);\n  }\n\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpr32xku09.rs:17:22\n   |\n17 |   sorted.sort((a, b) => a - b);\n   |                      ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    for i in nums {\n        let diff = sum - i;\n        if diff == 0 {\n            result.push(i);\n        } else if diff > 0 {\n            result.push(i);\n        } else {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmpstk146nh.rs:16:14\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n13  |     for i in nums {\n    |              ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |     for i in nums {\n    |              ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n13  |     for i in &nums {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a.sum - b.sum);\n    for i in 0..sorted.len() - 1 {\n        if sorted[i].sum == sorted[i + 1].sum {\n            sorted[i] = sorted[i].index;\n        }\n    }\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpf26e49ji.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a.sum - b.sum);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i.to_i() * i.to_i();\n    }\n    let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n    if len(nums) == 0 {\n        return sorted;\n    }\n    let last = sorted[0];\n    for i in range(1, len(sorted)) {\n        if sorted[i].to_i() + last.to_i() - sum != 0 {\n            last = sorted[i];\n        }\n    }\n    return sorted.insert(0, last);\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpfigf16tn.rs:16:8\n   |\n16 |     if len(nums) == 0 {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpfigf16tn.rs:20:14\n   |\n20 |     for i in range(1, len(sorted)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpfigf16tn.rs:20:23\n   |\n20 |     for i in range(1, len(sorted)) {\n   |                       ^^^ not found in this scope\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpfigf16tn.rs:13:18\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                  ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpfigf16tn.rs:13:29\n   |\n13 |         sum += i.to_i() * i.to_i();\n   |                             ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmpfigf16tn.rs:15:40\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                        ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `to_i` found for reference `&isize` in the current scope\n  --> /tmp/tmpfigf16tn.rs:15:51\n   |\n15 |     let sorted = nums.sort_by(|x, y| x.to_i() + y.to_i() - sum);\n   |                                                   ^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfigf16tn.rs:17:16\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n17 |         return sorted;\n   |                ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0608]: cannot index into a ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  let sorted = nums.clone();\n  for i in sorted {\n    sum += i;\n  }\n  let sorted_by_sum = sorted.clone();\n  for i in sorted_by_sum {\n    let j = i;\n    while (j > 0) {\n      let k = j % 10;\n      if (k == 0) {\n        break;\n      }\n      j /= 10;\n    }\n    if (j == 0) {\n      break;\n    }\n    let l = sorted_by_sum.find(j);\n    if (l != -1) {\n      sorted_by_sum[l] = i;\n    }\n  }\n  return sorted_by_sum;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpqib85jfz.rs:19:11\n   |\n19 |     while (j > 0) {\n   |           ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -     while (j > 0) {\n19 +     while j > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpqib85jfz.rs:21:10\n   |\n21 |       if (k == 0) {\n   |          ^      ^\n   |\nhelp: remove these parentheses\n   |\n21 -       if (k == 0) {\n21 +       if k == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpqib85jfz.rs:26:8\n   |\n26 |     if (j == 0) {\n   |        ^      ^\n   |\nhelp: remove these parentheses\n   |\n26 -     if (j == 0) {\n26 +     if j == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpqib85jfz.rs:30:8\n   |\n30 |     if (l != -1) {\n   |        ^       ^\n   |\nhelp: remove these parentheses\n   |\n30 -     if (l != -1) {\n30 +     if l != -1 {\n   | \n\nerror[E0599]: no method named `find` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpqib85jfz.rs:29:27\n   |\n29 |     let l = sorted_by_sum.find(j);\n   |                           ^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error; 4 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  for i in nums {\n    if result.len() == 0 || result[result.len() - 1] != i {\n      result.push(i);\n    } else if result[result.len() - 1] == i && sum - result[result.len() - 1] > sum - i {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmp02itsvns.rs:16:12\n    |\n10  | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |                    ---- move occurs because `nums` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n13  |   for i in nums {\n    |            ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n16  |   for i in nums {\n    |            ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n13  |   for i in &nums {\n    |            +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i.to_i() * i.to_i();\n  }\n\n  let sorted = nums.sort_by(|i| i.to_i() * i.to_i() - sum);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmp6zjjq3if.rs:13:14\n   |\n13 |     sum += i.to_i() * i.to_i();\n   |              ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmp6zjjq3if.rs:13:25\n   |\n13 |     sum += i.to_i() * i.to_i();\n   |                         ^^^^ method not found in `isize`\n\nerror[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n  --> /tmp/tmp6zjjq3if.rs:16:21\n   |\n16 |   let sorted = nums.sort_by(|i| i.to_i() * i.to_i() - sum);\n   |                     ^^^^^^^ --- takes 1 argument\n   |                     |\n   |                     expected closure that takes 2 arguments\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6zjjq3if.rs:17:10\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n17 |   return sorted;\n   |          ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0593, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a.sum - b.sum);\n    if (sorted.length == 0) {\n        return Vec::new();\n    }\n    let sorted_sum = 0;\n    for i in sorted {\n        sorted_sum += i;\n    }\n    let result = Vec::new();\n    for i in nums {\n        if (sorted_sum == sum) {\n            result.push(i);\n        } else {\n            result.push(sorted[i]);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpb771s5ui.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a.sum - b.sum);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sorted = Vec::new();\n  let mut sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  for i in nums {\n    let index = sorted.find(i);\n    if index == -1 {\n      result.push(i);\n      sorted.push(i);\n    } else {\n      let index_sum = sorted[index];\n      if sum - index_sum < sum - i {\n        result.push(i);\n        sorted.push(i);\n      } else {\n        result.push(index_sum);\n        sorted.insert(index, index_sum);\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0599]: no method named `find` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpqse05z0c.rs:18:24\n   |\n18 |     let index = sorted.find(i);\n   |                        ^^^^ method not found in `Vec<_>`\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpqse05z0c.rs:19:17\n   |\n19 |     if index == -1 {\n   |                 ^^ the trait `Neg` is not implemented for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n             &i16\n             &i32\n             &i64\n             &i8\n             &isize\n           and 8 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvo9ydx8s.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut sorted = Vec::new();\n    let mut sorted_index = Vec::new();\n    let mut sorted_sum = Vec::new();\n    let mut sorted_sum_index = Vec::new();\n    let mut sorted_sum_index_sum = Vec::new();\n    let mut sorted_sum_index_sum_sum = Vec::new();\n\n    for i in nums.iter() {\n        let sum = 0;\n        for j in i.iter() {\n            sum += j;\n        }\n        sorted_sum.push(sum);\n        sorted_sum_index.push(i.index());\n        sorted_sum_index_sum.push(sum);\n        sorted_sum_index_sum_sum.push(sum);\n    }\n\n    for i in sorted_sum_index.iter() {\n        let sum = sorted_sum_index_sum[i];\n        let index = sorted_sum_index[i];\n        let index_sum = sorted_sum_index_sum_sum[i];\n        for j in sorted_sum_index_sum_sum.iter() {\n            if (sorted_sum_index_sum_sum[j] == sum) {\n                sorted.push(sorted_sum_index[j]);\n                sorted_index.push(index);\n                sorted_sum.push(index_sum);\n                sorted_sum_index.push(index);\n                sorted_sum_index_sum.push(index);\n                sorted_sum_index_sum_sum.push(index);\n                break;\n            }\n        }\n    }\n\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpy1u15ljk.rs:34:16\n   |\n34 |             if (sorted_sum_index_sum_sum[j] == sum) {\n   |                ^                                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n34 -             if (sorted_sum_index_sum_sum[j] == sum) {\n34 +             if sorted_sum_index_sum_sum[j] == sum {\n   | \n\nerror[E0599]: no method named `iter` found for reference `&isize` in the current scope\n  --> /tmp/tmpy1u15ljk.rs:20:20\n   |\n20 |         for j in i.iter() {\n   |                    ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `index` found for reference `&isize` in the current scope\n  --> /tmp/tmpy1u15ljk.rs:24:33\n   |\n24 |         sorted_sum_index.push(i.index());\n   |                                 ^^^^^ method not found in `&isize`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `&_`\n  --> /tmp/tmpy1u15ljk.rs:30:19\n   |\n30 |         let sum = sorted_sum_index_sum[i];\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `&_`\n   = note: required because of the requirements on the impl of `Index<&_>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `&_`\n  --> /tmp/tmpy1u15ljk.rs:31:21\n   |\n31 |         let index = sorted_sum_index[i];\n   |                     ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `&_`\n   = note: required because of the requirements on the impl of `Index<&_>` for `Vec<_>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `&_`\n  --> /tmp/tmpy1u15ljk.rs:32:25\n   |\n32 |         let index_sum = sorted_sum_index_sum_sum[i];\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemente",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort_by(|x, y| x + y);\n    for i in 0..sorted.len() - 1 {\n        if sorted[i] == sorted[i + 1] {\n            sorted[i] = -1;\n        }\n    }\n    sorted.sort_by(|x, y| x + y);\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpjyy58md4.rs:15:38\n   |\n15 |     let sorted = nums.sort_by(|x, y| x + y);\n   |                                      ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0599]: no method named `len` found for unit type `()` in the current scope\n  --> /tmp/tmpjyy58md4.rs:16:24\n   |\n16 |     for i in 0..sorted.len() - 1 {\n   |                        ^^^ method not found in `()`\n\nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmpjyy58md4.rs:17:12\n   |\n17 |         if sorted[i] == sorted[i + 1] {\n   |            ^^^^^^^^^\n   |\n   = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmpjyy58md4.rs:17:25\n   |\n17 |         if sorted[i] == sorted[i + 1] {\n   |                         ^^^^^^^^^^^^^\n   |\n   = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\nerror[E0608]: cannot index into a value of type `()`\n  --> /tmp/tmpjyy58md4.rs:18:13\n   |\n18 |             sorted[i] = -1;\n   |             ^^^^^^^^^\n   |\n   = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\nerror[E0599]: no method named `sort_by` found for unit type `()` in the current scope\n  --> /tmp/tmpjyy58md4.rs:21:12\n   |\n21 |     sorted.sort_by(|x, y| x + y);\n   |            ^^^^^^^ method not found in `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjyy58md4.rs:22:12\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n22 |     return sorted;\n   |            ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in 0..sorted.len() - 1 {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpyakdplpw.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum_digits = nums.map(|n| n.to_i()).fold(0, (acc, n) => acc + n);\n    let sorted = nums.sort((a, b) => sum_digits(a) - sum_digits(b));\n    return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpma58xi2q.rs:11:62\n   |\n11 |     let sum_digits = nums.map(|n| n.to_i()).fold(0, (acc, n) => acc + n);\n   |                                                              ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  let sorted = nums.sort((a, b) => a - b);\n  for i in 0..sorted.len() - 1 {\n    if sorted[i] == sorted[i + 1] {\n      sorted[i] = -1;\n    }\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpyakdplpw.rs:15:33\n   |\n15 |   let sorted = nums.sort((a, b) => a - b);\n   |                                 ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvo9ydx8s.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sorted = Vec::new();\n  let mut sum = 0;\n  for i in nums {\n    sum += i;\n  }\n  for i in nums {\n    let diff = sum - i;\n    let j = diff.to_i();\n    if j < 0 {\n      j = -j;\n    }\n    let index = j.to_i();\n    if index < sorted.len() {\n      let prev = sorted[index];\n      if prev < i {\n        result.push_back(i);\n        sorted.push_back(i);\n      } else {\n        result.push_back(prev);\n        sorted.insert(index, prev);\n      }\n    } else {\n      result.push_back(i);\n      sorted.push_back(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_i` found for type `isize` in the current scope\n  --> /tmp/tmpemxhnoj_.rs:19:18\n   |\n19 |     let j = diff.to_i();\n   |                  ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpemxhnoj_.rs:27:16\n   |\n27 |         result.push_back(i);\n   |                ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpemxhnoj_.rs:28:16\n   |\n28 |         sorted.push_back(i);\n   |                ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpemxhnoj_.rs:30:16\n   |\n30 |         result.push_back(prev);\n   |                ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpemxhnoj_.rs:34:14\n   |\n34 |       result.push_back(i);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpemxhnoj_.rs:35:14\n   |\n35 |       sorted.push_back(i);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let res = Vec::new();\n    for i in sorted {\n        res.push(i);\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvo9ydx8s.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  let sorted = nums.clone();\n  for i in nums {\n    sum += i;\n  }\n  for i in 0..sorted.len() - 1 {\n    for j in 0..i {\n      if sorted[j] + sorted[i] > sum {\n        sorted[i], sorted[j] = sorted[j], sorted[i];\n      }\n    }\n  }\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n  --> /tmp/tmpi3gacyga.rs:19:18\n   |\n19 |         sorted[i], sorted[j] = sorted[j], sorted[i];\n   |                  ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let sum = 0;\n  for i in nums {\n    sum += i;\n  }\n\n  let sorted = nums.sort_by(|x, y| x + y);\n  let sorted_sum = 0;\n  for i in sorted {\n    sorted_sum += i;\n  }\n\n  if sum != sorted_sum {\n    let idx = nums.index_of(sorted_sum);\n    sorted = sorted.slice(0, idx + 1);\n  }\n\n  return sorted;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsxp4wo_3.rs:16:36\n   |\n16 |   let sorted = nums.sort_by(|x, y| x + y);\n   |                                    ^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0277]: `()` is not an iterator\n  --> /tmp/tmpsxp4wo_3.rs:18:12\n   |\n18 |   for i in sorted {\n   |            ^^^^^^ `()` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `()`\n   = note: required because of the requirements on the impl of `IntoIterator` for `()`\n\nerror[E0599]: no method named `index_of` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpsxp4wo_3.rs:23:20\n   |\n23 |     let idx = nums.index_of(sorted_sum);\n   |                    ^^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method named `slice` found for unit type `()` in the current scope\n  --> /tmp/tmpsxp4wo_3.rs:24:21\n   |\n24 |     sorted = sorted.slice(0, idx + 1);\n   |                     ^^^^^ method not found in `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsxp4wo_3.rs:27:10\n   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |                                         ---------- expected `Vec<isize>` because of return type\n...\n27 |   return sorted;\n   |          ^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    for i in nums {\n        sum += i;\n    }\n    let sorted = nums.sort((a, b) => a - b);\n    let result = Vec::new();\n    for i in sorted {\n        result.push(i);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmptdt981gy.rs:15:35\n   |\n15 |     let sorted = nums.sort((a, b) => a - b);\n   |                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let sum = 0;\n    let sorted = nums.clone();\n    for i in 0..sorted.len() {\n        let num = sorted[i];\n        sum += num % 10;\n        sorted[i] = num / 10;\n    }\n    let sorted_by_sum = sorted.clone();\n    sorted_by_sum.sort_by(&|a, b| a + b);\n    let sorted_by_index = sorted.clone();\n    sorted_by_index.sort_by(&|a, b| a - b);\n    let sorted_by_sum_and_index = sorted.clone();\n    sorted_by_sum_and_index.sort_by(&|a, b| a + b - sum);\n    return sorted_by_sum_and_index;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0271]: type mismatch resolving `<&isize as Add<&isize>>::Output == std::cmp::Ordering`\n  --> /tmp/tmpn3z13sv0.rs:19:37\n   |\n19 |     sorted_by_sum.sort_by(&|a, b| a + b);\n   |                                     ^ expected `isize`, found enum `std::cmp::Ordering`\n\nerror[E0271]: type mismatch resolving `<&isize as Sub<&isize>>::Output == std::cmp::Ordering`\n  --> /tmp/tmpn3z13sv0.rs:21:39\n   |\n21 |     sorted_by_index.sort_by(&|a, b| a - b);\n   |                                       ^ expected `isize`, found enum `std::cmp::Ordering`\n\nerror[E0271]: type mismatch resolving `<isize as Sub>::Output == std::cmp::Ordering`\n  --> /tmp/tmpn3z13sv0.rs:23:51\n   |\n23 |     sorted_by_sum_and_index.sort_by(&|a, b| a + b - sum);\n   |                                                   ^ expected `isize`, found enum `std::cmp::Ordering`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0271`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function which sorts the given vector of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// Vec::<isize>::new()\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut sum = 0;\n  for i in nums {\n    sum += i.as_u8();\n  }\n  for i in nums {\n    if sum - i.as_u8() == 0 {\n      result.push(i);\n    } else {\n      for j in nums {\n        if i.as_u8() - j.as_u8() == 0 {\n          result.push(j);\n          break;\n        }\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u8` found for type `isize` in the current scope\n  --> /tmp/tmpoxnvb30p.rs:14:14\n   |\n14 |     sum += i.as_u8();\n   |              ^^^^^ method not found in `isize`\n\nerror[E0599]: no method named `as_u8` found for type `isize` in the current scope\n  --> /tmp/tmpoxnvb30p.rs:17:16\n   |\n17 |     if sum - i.as_u8() == 0 {\n   |                ^^^^^ method not found in `isize`\n\nerror[E0599]: no method named `as_u8` found for type `isize` in the current scope\n  --> /tmp/tmpoxnvb30p.rs:21:14\n   |\n21 |         if i.as_u8() - j.as_u8() == 0 {\n   |              ^^^^^ method not found in `isize`\n\nerror[E0599]: no method named `as_u8` found for type `isize` in the current scope\n  --> /tmp/tmpoxnvb30p.rs:21:26\n   |\n21 |         if i.as_u8() - j.as_u8() == 0 {\n   |                          ^^^^^ method not found in `isize`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}