{
  "name": "HumanEval_59_largest_prime_factor",
  "language": "rs",
  "prompt": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n",
  "tests": "}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n\n  if n > 1 {\n    return n\n  } else {\n    return i\n  }\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp81o4_msr.rs:11:12\n   |\n11 |   let i = 2\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp81o4_msr.rs:14:13\n   |\n14 |       n /= i\n   |             ^ help: add `;` here\n15 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmps2_cinrq.rs:15:21\n   |\n15 |   let max_factor = 1\n   |                     ^ help: add `;` here\n16 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmps2_cinrq.rs:18:21\n   |\n18 |       max_factor = i\n   |                     ^ help: add `;` here\n19 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let max = n\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      max = i\n      n /= i\n    } else {\n      i += 2\n    }\n  }\n  if n > 1 {\n    max = n\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp6gdxkeyv.rs:16:14\n   |\n16 |   let max = n\n   |              ^ help: add `;` here\n17 |   let i = 3\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp6gdxkeyv.rs:17:12\n   |\n17 |   let i = 3\n   |            ^ help: add `;` here\n18 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp6gdxkeyv.rs:20:14\n   |\n20 |       max = i\n   |              ^ help: add `;` here\n21 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmphh17sour.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `5`', /tmp/tmp4qsg3eu3.rs:48:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpftpg1rfz.rs:10:21\n   |\n10 |   let max_factor = 1\n   |                     ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpftpg1rfz.rs:13:21\n   |\n13 |       max_factor = i\n   |                     ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      n /= i\n    }\n  }\n\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwy6rlsvc.rs:11:14\n   |\n11 |   let max = 1\n   |              ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpwy6rlsvc.rs:14:14\n   |\n14 |       max = i\n   |              ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      n /= i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpiu09mkvo.rs:10:14\n   |\n10 |   let max = 1\n   |              ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpiu09mkvo.rs:13:14\n   |\n13 |       max = i\n   |              ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp_20rcpnl.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp_20rcpnl.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n  if n > 1 {\n    return n\n  }\n  return i\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpxppez0q_.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpxppez0q_.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max = 0\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      break\n    }\n  }\n\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpusl7md2i.rs:11:14\n   |\n11 |   let max = 0\n   |              ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpusl7md2i.rs:14:14\n   |\n14 |       max = i\n   |              ^ help: add `;` here\n15 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if is_prime(i) {\n      largest_prime_factor = i\n      break\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp71a1jxdf.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp71a1jxdf.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp71a1jxdf.rs:13:8\n   |\n13 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      n /= i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpiu09mkvo.rs:10:14\n   |\n10 |   let max = 1\n   |              ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpiu09mkvo.rs:13:14\n   |\n13 |       max = i\n   |              ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if is_prime(i) {\n      largest_prime_factor = i\n      break\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp71a1jxdf.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp71a1jxdf.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp71a1jxdf.rs:13:8\n   |\n13 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if is_prime(i) {\n      largest_prime_factor = i\n      break\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp71a1jxdf.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp71a1jxdf.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp71a1jxdf.rs:13:8\n   |\n13 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max = 0\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      n /= i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpxngfvu1j.rs:10:14\n   |\n10 |   let max = 0\n   |              ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpxngfvu1j.rs:13:14\n   |\n13 |       max = i\n   |              ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      continue\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmppqbcmdeb.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `continue`\n  --> /tmp/tmppqbcmdeb.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       continue\n   |       -------- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if is_prime(i) {\n      largest_prime_factor = i\n      break\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp71a1jxdf.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp71a1jxdf.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp71a1jxdf.rs:13:8\n   |\n13 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      n = n / i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppb_1sw41.rs:10:14\n   |\n10 |   let max = 1\n   |              ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmppb_1sw41.rs:13:14\n   |\n13 |       max = i\n   |              ^ help: add `;` here\n14 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n = n / i\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvxrbq2q5.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpvxrbq2q5.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max = 0\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      break\n    }\n  }\n\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpusl7md2i.rs:11:14\n   |\n11 |   let max = 0\n   |              ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpusl7md2i.rs:14:14\n   |\n14 |       max = i\n   |              ^ help: add `;` here\n15 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpv8w6sgke.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpv8w6sgke.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      continue\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmppqbcmdeb.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `continue`\n  --> /tmp/tmppqbcmdeb.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       continue\n   |       -------- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp_20rcpnl.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp_20rcpnl.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp_20rcpnl.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp_20rcpnl.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpv8w6sgke.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpv8w6sgke.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max = 0\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      break\n    }\n  }\n\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpusl7md2i.rs:11:14\n   |\n11 |   let max = 0\n   |              ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpusl7md2i.rs:14:14\n   |\n14 |       max = i\n   |              ^ help: add `;` here\n15 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n = n / i\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvxrbq2q5.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpvxrbq2q5.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpv8w6sgke.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpv8w6sgke.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp1b1dboii.rs:11:12\n   |\n11 |   let i = 2\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp1b1dboii.rs:14:13\n   |\n14 |       n /= i\n   |             ^ help: add `;` here\n15 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n\n  if n == 1 {\n    return i\n  } else {\n    return n\n  }\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpw17p1ifr.rs:11:12\n   |\n11 |   let i = 2\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpw17p1ifr.rs:14:13\n   |\n14 |       n /= i\n   |             ^ help: add `;` here\n15 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp_20rcpnl.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp_20rcpnl.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n = n / i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpg98oa1zq.rs:16:21\n   |\n16 |   let max_factor = 1\n   |                     ^ help: add `;` here\n17 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpg98oa1zq.rs:19:21\n   |\n19 |       max_factor = i\n   |                     ^ help: add `;` here\n20 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `5`', /tmp/tmp4qsg3eu3.rs:48:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n\n  let i = 3\n  while i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpes7fxjc7.rs:11:12\n   |\n11 |   let i = 3\n   |            ^ help: add `;` here\n12 |   while i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if is_prime(n) {\n    return n\n  }\n  for i in 1..n {\n    if n % i == 0 {\n      return i\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpn46a0pkg.rs:13:6\n   |\n13 |   if is_prime(n) {\n   |      ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpyfgcxym9.rs:11:12\n   |\n11 |   let i = 2\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n = n / i\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvxrbq2q5.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpvxrbq2q5.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpftpg1rfz.rs:10:21\n   |\n10 |   let max_factor = 1\n   |                     ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpftpg1rfz.rs:13:21\n   |\n13 |       max_factor = i\n   |                     ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n = n / i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvlfp0u43.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpvlfp0u43.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpjx28xi6n.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpjx28xi6n.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n = n / i\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp4649444m.rs:15:31\n   |\n15 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n16 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp4649444m.rs:18:31\n   |\n18 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n19 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpa_vlkegy.rs:13:21\n   |\n13 |   let max_factor = 1\n   |                     ^ help: add `;` here\n14 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpa_vlkegy.rs:16:21\n   |\n16 |       max_factor = i\n   |                     ^ help: add `;` here\n17 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n = n / i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvlfp0u43.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpvlfp0u43.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `5`', /tmp/tmp4qsg3eu3.rs:48:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n = n / i\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvxrbq2q5.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpvxrbq2q5.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpftpg1rfz.rs:10:21\n   |\n10 |   let max_factor = 1\n   |                     ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpftpg1rfz.rs:13:21\n   |\n13 |       max_factor = i\n   |                     ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpv8w6sgke.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpv8w6sgke.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  for i in 1..n {\n    if is_prime(i) {\n      return i\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplmz32jpl.rs:11:8\n   |\n11 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp_20rcpnl.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp_20rcpnl.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let mut max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpbrgjvgbu.rs:10:25\n   |\n10 |   let mut max_factor = 1\n   |                         ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpbrgjvgbu.rs:13:21\n   |\n13 |       max_factor = i\n   |                     ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if is_prime(i) {\n      largest_prime_factor = i\n      break\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp71a1jxdf.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp71a1jxdf.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp71a1jxdf.rs:13:8\n   |\n13 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if is_prime(i) {\n      largest_prime_factor = i\n      break\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp71a1jxdf.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp71a1jxdf.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp71a1jxdf.rs:13:8\n   |\n13 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp_20rcpnl.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp_20rcpnl.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpftpg1rfz.rs:10:21\n   |\n10 |   let max_factor = 1\n   |                     ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpftpg1rfz.rs:13:21\n   |\n13 |       max_factor = i\n   |                     ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n\n  if n == 1 {\n    return i\n  } else {\n    return n\n  }\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpw17p1ifr.rs:11:12\n   |\n11 |   let i = 2\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpw17p1ifr.rs:14:13\n   |\n14 |       n /= i\n   |             ^ help: add `;` here\n15 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpp3s3ktku.rs:11:12\n   |\n11 |   let i = 2\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if is_prime(i) {\n      largest_prime_factor = i\n      break\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp71a1jxdf.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp71a1jxdf.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp71a1jxdf.rs:13:8\n   |\n13 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp_20rcpnl.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp_20rcpnl.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      continue\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmppqbcmdeb.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `continue`\n  --> /tmp/tmppqbcmdeb.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       continue\n   |       -------- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpyfgcxym9.rs:11:12\n   |\n11 |   let i = 2\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n = n / i\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvxrbq2q5.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpvxrbq2q5.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpjx28xi6n.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpjx28xi6n.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if is_prime(n) {\n    return n\n  }\n  for i in 1..n {\n    if n % i == 0 {\n      return i\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpn46a0pkg.rs:13:6\n   |\n13 |   if is_prime(n) {\n   |      ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpq2p9c5wq.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      break\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmph9t9nr1l.rs:16:21\n   |\n16 |   let max_factor = 1\n   |                     ^ help: add `;` here\n17 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmph9t9nr1l.rs:19:21\n   |\n19 |       max_factor = i\n   |                     ^ help: add `;` here\n20 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n\n  if n > 1 {\n    return n\n  }\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp928rtn8r.rs:11:12\n   |\n11 |   let i = 2\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp928rtn8r.rs:14:13\n   |\n14 |       n /= i\n   |             ^ help: add `;` here\n15 |       i = 2\n   |       - unexpected token\n\nerror[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmp928rtn8r.rs:21:3\n   |\n6  |   fn largest_prime_factor(n: isize) -> isize {\n   |                                        ----- expected `isize` because of this return type\n...\n21 | /   if n > 1 {\n22 | |     return n\n23 | |   }\n   | |___^ expected `isize`, found `()`\n   |\n   = note: `if` expressions without `else` evaluate to `()`\n   = help: consider adding an `else` block that evaluates to the expected type\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0317`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpum8fiarl.rs:13:12\n   |\n13 |   let i = 2\n   |            ^ help: add `;` here\n14 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n = n / i\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvxrbq2q5.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpvxrbq2q5.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpe7cmk7r0.rs:11:12\n   |\n11 |   let i = 3\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let mut max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpexcmiyq8.rs:10:25\n   |\n10 |   let mut max_factor = 1\n   |                         ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpexcmiyq8.rs:13:21\n   |\n13 |       max_factor = i\n   |                     ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmphh17sour.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let max = n\n  let i = 3\n  while i * i <= max {\n    if max % i == 0 {\n      max = i\n      i = i + 2\n    } else {\n      i = i + 2\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppbe3o3qv.rs:16:14\n   |\n16 |   let max = n\n   |              ^ help: add `;` here\n17 |   let i = 3\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmppbe3o3qv.rs:17:12\n   |\n17 |   let i = 3\n   |            ^ help: add `;` here\n18 |   while i * i <= max {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmppbe3o3qv.rs:20:14\n   |\n20 |       max = i\n   |              ^ help: add `;` here\n21 |       i = i + 2\n   |       - unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if is_prime(i) {\n      largest_prime_factor = i\n      break\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp6xlqc5m9.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp6xlqc5m9.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6xlqc5m9.rs:12:8\n   |\n12 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpe7cmk7r0.rs:11:12\n   |\n11 |   let i = 3\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  let prime_factors = []\n\n  for i in 1..n {\n    if n % i == 0 {\n      prime_factors.push(i)\n      max_factor = i\n    }\n  }\n\n  if len(prime_factors) == 1 {\n    return prime_factors[0]\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwxowquqv.rs:15:21\n   |\n15 |   let max_factor = 1\n   |                     ^ help: add `;` here\n16 |   let prime_factors = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwxowquqv.rs:16:25\n   |\n16 |   let prime_factors = []\n   |                         ^ help: add `;` here\n17 | \n18 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_factor`\n  --> /tmp/tmpwxowquqv.rs:20:28\n   |\n20 |       prime_factors.push(i)\n   |                            ^ help: add `;` here\n21 |       max_factor = i\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwxowquqv.rs:25:6\n   |\n25 |   if len(prime_factors) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpwxowquqv.rs:20:21\n   |\n20 |       prime_factors.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  let prime_factors = []\n\n  for i in 1..n {\n    if is_prime(i) {\n      prime_factors.push(i)\n    } else {\n      let factor = largest_prime_factor(i)\n      if factor > max_factor {\n        max_factor = factor\n        prime_factors = [factor]\n      } else if factor == max_factor {\n        prime_factors.push(factor)\n      }\n    }\n  }\n\n  if len(prime_factors) == 1 {\n    return prime_factors[0]\n  } else {\n    return max_factor\n  }\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp36ps97m9.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   let prime_factors = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp36ps97m9.rs:12:25\n   |\n12 |   let prime_factors = []\n   |                         ^ help: add `;` here\n13 | \n14 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp36ps97m9.rs:18:43\n   |\n18 |       let factor = largest_prime_factor(i)\n   |                                           ^ help: add `;` here\n19 |       if factor > max_factor {\n   |       -- unexpected token\n\nerror: expected `;`, found `prime_factors`\n  --> /tmp/tmp36ps97m9.rs:20:28\n   |\n20 |         max_factor = factor\n   |                            ^ help: add `;` here\n21 |         prime_factors = [factor]\n   |         ------------- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp36ps97m9.rs:15:8\n   |\n15 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp36ps97m9.rs:28:6\n   |\n28 |   if len(prime_factors) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp36ps97m9.rs:16:21\n   |\n16 |       prime_factors.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp36ps97m9.rs:21:25\n   |\n21 |         prime_factors = [factor]\n   |                         ^^^^^^^^ expected an array with a fixed size of 0 elements, found one with 1 element\n\nerror[E0599]: no method named `push` found for array `[isize; 0]` in the current scope\n  --> /tmp/tmp36ps97m9.rs:23:23\n   |\n23 |         prime_factors.push(factor)\n   |                       ^^^^ method not found in `[isize; 0]`\n\nerror: aborting due to 9 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more inf",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpe7cmk7r0.rs:11:12\n   |\n11 |   let i = 3\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpftpg1rfz.rs:10:21\n   |\n10 |   let max_factor = 1\n   |                     ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpftpg1rfz.rs:13:21\n   |\n13 |       max_factor = i\n   |                     ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpftpg1rfz.rs:10:21\n   |\n10 |   let max_factor = 1\n   |                     ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpftpg1rfz.rs:13:21\n   |\n13 |       max_factor = i\n   |                     ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n = n / i\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvxrbq2q5.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpvxrbq2q5.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n = n / i\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpk1q0hbbj.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpk1q0hbbj.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpftpg1rfz.rs:10:21\n   |\n10 |   let max_factor = 1\n   |                     ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpftpg1rfz.rs:13:21\n   |\n13 |       max_factor = i\n   |                     ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if is_prime(i) {\n      largest_prime_factor = i\n      break\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp6xlqc5m9.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp6xlqc5m9.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6xlqc5m9.rs:12:8\n   |\n12 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpv8w6sgke.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpv8w6sgke.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmprvwsk4qd.rs:16:21\n   |\n16 |   let max_factor = 1\n   |                     ^ help: add `;` here\n17 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpftpg1rfz.rs:10:21\n   |\n10 |   let max_factor = 1\n   |                     ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpftpg1rfz.rs:13:21\n   |\n13 |       max_factor = i\n   |                     ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if is_prime(i) {\n      largest_prime_factor = i\n      break\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp6xlqc5m9.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp6xlqc5m9.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6xlqc5m9.rs:12:8\n   |\n12 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp_20rcpnl.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp_20rcpnl.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let max_factor = 3\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      break\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp3r5lewtr.rs:16:21\n   |\n16 |   let max_factor = 3\n   |                     ^ help: add `;` here\n17 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp3r5lewtr.rs:19:21\n   |\n19 |       max_factor = i\n   |                     ^ help: add `;` here\n20 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpq2p9c5wq.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp_20rcpnl.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp_20rcpnl.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      n = n / i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppb_1sw41.rs:10:14\n   |\n10 |   let max = 1\n   |              ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmppb_1sw41.rs:13:14\n   |\n13 |       max = i\n   |              ^ help: add `;` here\n14 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp_20rcpnl.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp_20rcpnl.rs:13:13\n   |\n13 |       n /= i\n   |             ^ help: add `;` here\n14 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpe7cmk7r0.rs:11:12\n   |\n11 |   let i = 3\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpe7cmk7r0.rs:11:12\n   |\n11 |   let i = 3\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpv8w6sgke.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpv8w6sgke.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpq2p9c5wq.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpftpg1rfz.rs:10:21\n   |\n10 |   let max_factor = 1\n   |                     ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpftpg1rfz.rs:13:21\n   |\n13 |       max_factor = i\n   |                     ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if is_prime(i) {\n      largest_prime_factor = i\n      break\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp71a1jxdf.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp71a1jxdf.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp71a1jxdf.rs:13:8\n   |\n13 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmprnzl2x69.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      n /= i\n    }\n  }\n\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwy6rlsvc.rs:11:14\n   |\n11 |   let max = 1\n   |              ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpwy6rlsvc.rs:14:14\n   |\n14 |       max = i\n   |              ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n = n / i\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpk1q0hbbj.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpk1q0hbbj.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpyfgcxym9.rs:11:12\n   |\n11 |   let i = 2\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpv8w6sgke.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpv8w6sgke.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if is_prime(n) {\n    return n\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpzt1ndcm4.rs:16:12\n   |\n16 |   let i = 2\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpzt1ndcm4.rs:13:6\n   |\n13 |   if is_prime(n) {\n   |      ^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  for i in 1..n {\n    if is_prime(i) {\n      return i\n    }\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplmz32jpl.rs:11:8\n   |\n11 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpyfgcxym9.rs:11:12\n   |\n11 |   let i = 2\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n = n / i\n    }\n  }\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvxrbq2q5.rs:10:31\n   |\n10 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpvxrbq2q5.rs:13:31\n   |\n13 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n14 |       n = n / i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 2\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let max_factor = 3\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      break\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp3r5lewtr.rs:16:21\n   |\n16 |   let max_factor = 3\n   |                     ^ help: add `;` here\n17 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp3r5lewtr.rs:19:21\n   |\n19 |       max_factor = i\n   |                     ^ help: add `;` here\n20 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      n /= i\n      i = 2\n    } else {\n      i += 1\n    }\n  }\n\n  if n > 1 {\n    return n\n  } else {\n    return i\n  }\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp81o4_msr.rs:11:12\n   |\n11 |   let i = 2\n   |            ^ help: add `;` here\n12 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp81o4_msr.rs:14:13\n   |\n14 |       n /= i\n   |             ^ help: add `;` here\n15 |       i = 2\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  if n % 31 == 0 {\n    return 31\n  }\n  if n % 37 == 0 {\n    return 37\n  }\n  if n % 41 == 0 {\n    return 41\n  }\n  if n % 43 == 0 {\n    return 43\n  }\n  if n % 47 == 0 {\n    return 47\n  }\n  if n % 53 == 0 {\n    return 53\n  }\n  if n % 59 == 0 {\n    return 59\n  }\n  if n % 61 == 0 {\n    return 61\n  }\n  if n % 67 == 0 {\n    return 67\n  }\n  if n % 71 == 0 {\n    return 71\n  }\n  if n % 73 == 0 {\n    return 73\n  }\n  if n % 79 == 0 {\n    return 79\n  }\n  if n % 83 == 0 {\n    return 83\n  }\n  if n % 89 == 0 {\n    return 89\n  }\n  if n % 97 == 0 {\n    return 97\n  }\n  if n % 101 == 0 {\n    return 101\n  }\n  if n % 103 == 0 {\n    return 103\n  }\n  if n % 107 == 0 {\n    return 107\n  }\n  if n % 109 == 0 {\n    return 109\n  }\n  if n % 113 == 0 {\n    return 113\n  }\n  if n %\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n   --> /tmp/tmpclg_3zu1.rs:104:1\n    |\n104 | }\n    | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpv8w6sgke.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpv8w6sgke.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpum8fiarl.rs:13:12\n   |\n13 |   let i = 2\n   |            ^ help: add `;` here\n14 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpftpg1rfz.rs:10:21\n   |\n10 |   let max_factor = 1\n   |                     ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpftpg1rfz.rs:13:21\n   |\n13 |       max_factor = i\n   |                     ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if is_prime(i) {\n      largest_prime_factor = i\n      break\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp71a1jxdf.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp71a1jxdf.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp71a1jxdf.rs:13:8\n   |\n13 |     if is_prime(i) {\n   |        ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let i = 3\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpwkh06uh_.rs:16:12\n   |\n16 |   let i = 3\n   |            ^ help: add `;` here\n17 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let mut max = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      n /= i\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpn4wf98s6.rs:10:18\n   |\n10 |   let mut max = 1\n   |                  ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpn4wf98s6.rs:13:14\n   |\n13 |       max = i\n   |              ^ help: add `;` here\n14 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let max = 0\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      break\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp75zkg2bo.rs:10:14\n   |\n10 |   let max = 0\n   |              ^ help: add `;` here\n11 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp75zkg2bo.rs:13:14\n   |\n13 |       max = i\n   |              ^ help: add `;` here\n14 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpq2p9c5wq.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  if n % 3 == 0 {\n    return 3\n  }\n  if n % 5 == 0 {\n    return 5\n  }\n  if n % 7 == 0 {\n    return 7\n  }\n  if n % 11 == 0 {\n    return 11\n  }\n  if n % 13 == 0 {\n    return 13\n  }\n  if n % 17 == 0 {\n    return 17\n  }\n  if n % 19 == 0 {\n    return 19\n  }\n  if n % 23 == 0 {\n    return 23\n  }\n  if n % 29 == 0 {\n    return 29\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `5`', /tmp/tmp4qsg3eu3.rs:48:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if n % 2 == 0 {\n    return 2\n  }\n  let max = n\n  for i in 1..max {\n    if n % i == 0 {\n      max = i\n      break\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpz1h1sdld.rs:16:14\n   |\n16 |   let max = n\n   |              ^ help: add `;` here\n17 |   for i in 1..max {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpz1h1sdld.rs:19:14\n   |\n19 |       max = i\n   |              ^ help: add `;` here\n20 |       break\n   |       ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n  let i = 2\n  while i * i <= n {\n    if n % i == 0 {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpq2p9c5wq.rs:10:12\n   |\n10 |   let i = 2\n   |            ^ help: add `;` here\n11 |   while i * i <= n {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let largest_prime_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n\n  return largest_prime_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpv8w6sgke.rs:11:31\n   |\n11 |   let largest_prime_factor = 1\n   |                               ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmpv8w6sgke.rs:14:31\n   |\n14 |       largest_prime_factor = i\n   |                               ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 1 {\n    return 1\n  }\n\n  let max_factor = 1\n  for i in 1..n {\n    if n % i == 0 {\n      max_factor = i\n      n /= i\n    }\n  }\n\n  return max_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_y0vvpqp.rs:11:21\n   |\n11 |   let max_factor = 1\n   |                     ^ help: add `;` here\n12 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `n`\n  --> /tmp/tmp_y0vvpqp.rs:14:21\n   |\n14 |       max_factor = i\n   |                     ^ help: add `;` here\n15 |       n /= i\n   |       - unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n/// 2\nfn largest_prime_factor(n: isize) -> isize {\n  if n == 2 {\n    return 2\n  }\n  if n == 1 {\n    return 1\n  }\n  if is_prime(n) {\n    return n\n  }\n  let max = 0\n  for i in 1..n {\n    if n % i == 0 {\n      max = i\n      break\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n",
      "timestamp": 1664293471,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpf72jpo6n.rs:16:14\n   |\n16 |   let max = 0\n   |              ^ help: add `;` here\n17 |   for i in 1..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpf72jpo6n.rs:19:14\n   |\n19 |       max = i\n   |              ^ help: add `;` here\n20 |       break\n   |       ----- unexpected token\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpf72jpo6n.rs:13:6\n   |\n13 |   if is_prime(n) {\n   |      ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}