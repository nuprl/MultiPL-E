{
  "name": "HumanEval_8_sum_product",
  "language": "rs",
  "prompt": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n",
  "tests": "}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for v in numbers {\n    sum += v;\n    product *= v;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmphi5ljkmq.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += v;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmphi5ljkmq.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= v;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmprh23dfwr.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += i;\n   |         ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmprh23dfwr.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= i;\n   |         ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for i in numbers {\n    sum += i;\n    product *= i;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpdrh_tgf7.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpdrh_tgf7.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= i;\n   |     ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n    let sum = 0;\n    let product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpbat2rwey.rs:11:9\n   |\n8  |     let sum = 0;\n   |         ---\n   |         |\n   |         first assignment to `sum`\n   |         help: consider making this binding mutable: `mut sum`\n...\n11 |         sum += number;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmpbat2rwey.rs:12:9\n   |\n9  |     let product = 1;\n   |         -------\n   |         |\n   |         first assignment to `product`\n   |         help: consider making this binding mutable: `mut product`\n...\n12 |         product *= number;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>) -> (isize, isize) {\n  let sum = 0;\n  let product = 1;\n  for number in numbers {\n    sum += number;\n    product *= number;\n  }\n  return (sum, product);\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n",
      "timestamp": 1664293031,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmptx_5r2mm.rs:11:5\n   |\n8  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n11 |     sum += number;\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `product`\n  --> /tmp/tmptx_5r2mm.rs:12:5\n   |\n9  |   let product = 1;\n   |       -------\n   |       |\n   |       first assignment to `product`\n   |       help: consider making this binding mutable: `mut product`\n...\n12 |     product *= number;\n   |     ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}