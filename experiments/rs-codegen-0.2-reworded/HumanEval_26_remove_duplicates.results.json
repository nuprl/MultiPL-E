{
  "name": "HumanEval_26_remove_duplicates",
  "language": "rs",
  "prompt": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7778idft.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      seen.push(v);\n      result.push(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv988lr33.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpu8vjff3n.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen.push(i);\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpvqidujvy.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for num in numbers {\n    if !seen.contains(num) {\n      seen.push(num);\n      result.push(num);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp4y314l3x.rs:9:23\n  |\n9 |     if !seen.contains(num) {\n  |                       ^^^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&num`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Set::new();\n  for i in numbers {\n    if !seen.has(i) {\n      seen.add(i);\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Set`\n --> /tmp/tmpu2ho47gy.rs:7:14\n  |\n7 |   let seen = Set::new();\n  |              ^^^ use of undeclared type `Set`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu2ho47gy.rs:11:21\n   |\n11 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last_seen = -1;\n  for i in numbers {\n    if i != last_seen {\n      result.append(i);\n      last_seen = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpbrrkleci.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpjpiqcisv.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpiqcisv.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpiqcisv.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen.push(i);\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpvqidujvy.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen.push(i);\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpvqidujvy.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpjpiqcisv.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpiqcisv.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpiqcisv.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkkdr0hse.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Set::new();\n  for v in numbers {\n    if !seen.has(v) {\n      seen.add(v);\n      result.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Set`\n --> /tmp/tmp1knmt_lc.rs:7:14\n  |\n7 |   let seen = Set::new();\n  |              ^^^ use of undeclared type `Set`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1knmt_lc.rs:11:21\n   |\n11 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last_seen = -1;\n  for i in numbers {\n    if i == last_seen {\n      continue;\n    }\n    last_seen = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpt2bnrxgm.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Set::new();\n  for v in numbers {\n    if !seen.has(v) {\n      seen.add(v);\n      result.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Set`\n --> /tmp/tmp1knmt_lc.rs:7:14\n  |\n7 |   let seen = Set::new();\n  |              ^^^ use of undeclared type `Set`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1knmt_lc.rs:11:21\n   |\n11 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last_seen = -1;\n  for num in numbers {\n    if num != last_seen {\n      result.push(num);\n      last_seen = num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpcv7mest4.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      seen.push(v);\n      result.push(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv988lr33.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last_seen = -1;\n  for i in numbers {\n    if i == last_seen {\n      continue;\n    }\n    last_seen = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpt2bnrxgm.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen.push(i);\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmponuhd3p0.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      seen.push(v);\n      result.push(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpr9y0h741.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for num in numbers {\n    if !seen.contains(num) {\n      result.append(num);\n      seen.append(num);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmptuyn8qow.rs:9:23\n  |\n9 |     if !seen.contains(num) {\n  |                       ^^^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&num`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptuyn8qow.rs:10:21\n   |\n10 |       result.append(num);\n   |                     ^^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptuyn8qow.rs:11:19\n   |\n11 |       seen.append(num);\n   |                   ^^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen = seen.append(i);\n      result = result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2hcrzb0g.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2hcrzb0g.rs:10:26\n   |\n10 |       seen = seen.append(i);\n   |                          ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2hcrzb0g.rs:10:14\n   |\n7  |   let seen = Vec::new();\n   |              ---------- expected due to this value\n...\n10 |       seen = seen.append(i);\n   |              ^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmp2hcrzb0g.rs:10:19\n   |\n10 |       seen = seen.append(i);\n   |              ---- ^^^^^^ this call modifies `seen` in-place\n   |              |\n   |              you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2hcrzb0g.rs:11:30\n   |\n11 |       result = result.append(i);\n   |                              ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2hcrzb0g.rs:11:16\n   |\n6  |   let result = Vec::new();\n   |                ---------- expected due to this value\n...\n11 |       result = result.append(i);\n   |                ^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmp2hcrzb0g.rs:11:23\n   |\n11 |       result = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpt6lob239.rs:13:19\n   |\n13 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7778idft.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7yk7mmse.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:10:21\n   |\n10 |       result.append(&i);\n   |                     ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:11:19\n   |\n11 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for num in numbers {\n    if num != last {\n      result.push(num);\n      last = num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmzz7hb2b.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp48_3xzui.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      seen = seen.append(v);\n      result = result.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpubkvgbhf.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubkvgbhf.rs:10:26\n   |\n10 |       seen = seen.append(v);\n   |                          ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubkvgbhf.rs:10:14\n   |\n7  |   let seen = Vec::new();\n   |              ---------- expected due to this value\n...\n10 |       seen = seen.append(v);\n   |              ^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpubkvgbhf.rs:10:19\n   |\n10 |       seen = seen.append(v);\n   |              ---- ^^^^^^ this call modifies `seen` in-place\n   |              |\n   |              you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubkvgbhf.rs:11:30\n   |\n11 |       result = result.append(v);\n   |                              ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubkvgbhf.rs:11:16\n   |\n6  |   let result = Vec::new();\n   |                ---------- expected due to this value\n...\n11 |       result = result.append(v);\n   |                ^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpubkvgbhf.rs:11:23\n   |\n11 |       result = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Set::new();\n  for v in numbers {\n    if !seen.has(v) {\n      result.append(v);\n      seen.add(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Set`\n --> /tmp/tmptnw3s1mo.rs:7:14\n  |\n7 |   let seen = Set::new();\n  |              ^^^ use of undeclared type `Set`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptnw3s1mo.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      seen.push(v);\n      result.push(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpr9y0h741.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen.push(i);\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpvqidujvy.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      seen.push(v);\n      result.push(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv988lr33.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen.push(i);\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmponuhd3p0.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7778idft.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for num in numbers {\n    if !seen.contains(num) {\n      seen.push(num);\n      result.push(num);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp4y314l3x.rs:9:23\n  |\n9 |     if !seen.contains(num) {\n  |                       ^^^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&num`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7yk7mmse.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last_seen = 0;\n  for i in numbers {\n    if i == last_seen {\n      continue;\n    }\n    last_seen = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpnfx43gsn.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpu8vjff3n.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7778idft.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:10:21\n   |\n10 |       result.append(&i);\n   |                     ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:11:19\n   |\n11 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(&i) {\n      result.push(&i);\n      seen.push(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp0tcop_5v.rs:11:17\n   |\n11 |       seen.push(&i);\n   |                 ^^ expected `isize`, found `&isize`\n   |\nhelp: consider removing the borrow\n   |\n11 -       seen.push(&i);\n11 +       seen.push(i);\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0tcop_5v.rs:14:10\n   |\n5  | fn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n   |                                              ---------- expected `Vec<isize>` because of return type\n...\n14 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Set::new();\n  for v in numbers {\n    if !seen.has(v) {\n      result.append(v);\n      seen.add(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Set`\n --> /tmp/tmptnw3s1mo.rs:7:14\n  |\n7 |   let seen = Set::new();\n  |              ^^^ use of undeclared type `Set`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptnw3s1mo.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:10:21\n   |\n10 |       result.append(&i);\n   |                     ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:11:19\n   |\n11 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen.push(i);\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpvqidujvy.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7778idft.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpjpiqcisv.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpiqcisv.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpiqcisv.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen.push(i);\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpvqidujvy.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for num in numbers {\n    if !seen.contains(num) {\n      seen.push(num);\n      result.push(num);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp4y314l3x.rs:9:23\n  |\n9 |     if !seen.contains(num) {\n  |                       ^^^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&num`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpjpiqcisv.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpiqcisv.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpiqcisv.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:10:21\n   |\n10 |       result.append(&i);\n   |                     ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:11:19\n   |\n11 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7778idft.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:10:21\n   |\n10 |       result.append(&i);\n   |                     ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:11:19\n   |\n11 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last_seen = -1;\n  for i in numbers {\n    if i == last_seen {\n      continue;\n    }\n    last_seen = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpt2bnrxgm.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:10:21\n   |\n10 |       result.append(&i);\n   |                     ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:11:19\n   |\n11 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7778idft.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkkdr0hse.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyxfomkpp.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxfomkpp.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.push(v);\n      seen.push(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpxqlvs4wm.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7778idft.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Set::new();\n  for v in numbers {\n    if !seen.has(v) {\n      result.append(v);\n      seen.add(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Set`\n --> /tmp/tmptnw3s1mo.rs:7:14\n  |\n7 |   let seen = Set::new();\n  |              ^^^ use of undeclared type `Set`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptnw3s1mo.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:10:21\n   |\n10 |       result.append(&i);\n   |                     ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:11:19\n   |\n11 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:10:21\n   |\n10 |       result.append(&i);\n   |                     ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:11:19\n   |\n11 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last_seen = -1;\n  for i in numbers {\n    if i == last_seen {\n      continue;\n    }\n    last_seen = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpt2bnrxgm.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:10:21\n   |\n10 |       result.append(&i);\n   |                     ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:11:19\n   |\n11 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkkdr0hse.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpjpiqcisv.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpiqcisv.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpiqcisv.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen.push(i);\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpvqidujvy.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpv0_6c9dn.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv0_6c9dn.rs:11:19\n   |\n11 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpp_ciydps.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut count = 0;\n  for i in numbers {\n    if count == 0 {\n      result.append(i);\n      count = 1;\n    } else if i != result[count - 1] {\n      result.append(i);\n      count = 1;\n    } else {\n      count += 1;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpxv64hbd_.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxv64hbd_.rs:13:21\n   |\n13 |       result.append(i);\n   |                     ^ expected `&mut Vec<isize>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                           found type `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for num in numbers {\n    if num != last {\n      result.push(num);\n      last = num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmzz7hb2b.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen.push(i);\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmponuhd3p0.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen = seen.append(i);\n      result = result.append(i);\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpi72ehe0k.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi72ehe0k.rs:10:26\n   |\n10 |       seen = seen.append(i);\n   |                          ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi72ehe0k.rs:10:14\n   |\n7  |   let seen = Vec::new();\n   |              ---------- expected due to this value\n...\n10 |       seen = seen.append(i);\n   |              ^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpi72ehe0k.rs:10:19\n   |\n10 |       seen = seen.append(i);\n   |              ---- ^^^^^^ this call modifies `seen` in-place\n   |              |\n   |              you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi72ehe0k.rs:11:30\n   |\n11 |       result = result.append(i);\n   |                              ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi72ehe0k.rs:11:16\n   |\n6  |   let result = Vec::new();\n   |                ---------- expected due to this value\n...\n11 |       result = result.append(i);\n   |                ^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpi72ehe0k.rs:11:23\n   |\n11 |       result = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpjpiqcisv.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpiqcisv.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjpiqcisv.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for v in numbers {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7778idft.rs:9:23\n  |\n9 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:10:21\n   |\n10 |       result.append(v);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7778idft.rs:11:19\n   |\n11 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let result = Vec::new();\n  let seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(i) {\n      seen = seen.append(i);\n      result = result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp2hcrzb0g.rs:9:23\n  |\n9 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2hcrzb0g.rs:10:26\n   |\n10 |       seen = seen.append(i);\n   |                          ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2hcrzb0g.rs:10:14\n   |\n7  |   let seen = Vec::new();\n   |              ---------- expected due to this value\n...\n10 |       seen = seen.append(i);\n   |              ^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmp2hcrzb0g.rs:10:19\n   |\n10 |       seen = seen.append(i);\n   |              ---- ^^^^^^ this call modifies `seen` in-place\n   |              |\n   |              you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2hcrzb0g.rs:11:30\n   |\n11 |       result = result.append(i);\n   |                              ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2hcrzb0g.rs:11:16\n   |\n6  |   let result = Vec::new();\n   |                ---------- expected due to this value\n...\n11 |       result = result.append(i);\n   |                ^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmp2hcrzb0g.rs:11:23\n   |\n11 |       result = ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnncceqlk.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in numbers {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp7yk7mmse.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in numbers {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 2, 4, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7157teo.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// From a vector of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(vec![1, 2, 3, 2, 4])\n/// vec![1, 3, 4]\nfn remove_duplicates(numbers: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in numbers {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_duplicates;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 3, 5]), vec![1, 4, 5]);\n}\n",
      "timestamp": 1664292909,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:10:21\n   |\n10 |       result.append(&i);\n   |                     ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4s_eyfj7.rs:11:19\n   |\n11 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}