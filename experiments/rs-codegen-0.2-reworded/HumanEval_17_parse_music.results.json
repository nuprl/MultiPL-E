{
  "name": "HumanEval_17_parse_music",
  "language": "rs",
  "prompt": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpeja0gc06.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n      current_note = 0;\n    } else if i == '|' {\n      current_note += 1;\n    } else if i == 'o' {\n      current_note += 1;\n      current_beat += 1;\n    } else if i == 'o' {\n      current_note += 1;\n      current_beat += 1;\n    } else if i == '|' {\n      current_note += 1;\n    } else if i == '.' {\n      current_note += 1;\n    } else if i == '|' {\n      current_note += 1;\n    } else if i == 'o' {\n      current_note += 1;\n      current_beat += 1;\n    } else if i == 'o' {\n      current_note += 1;\n      current_beat += 1;\n    } else if i == '|' {\n      current_note += 1;\n    } else if i == '.' {\n      current_note += 1;\n    } else if i == '|' {\n      current_note += 1;\n    } else if i == 'o' {\n      current_note += 1;\n      current_beat += 1;\n    } else if i == 'o' {\n      current_note += 1;\n      current_beat += 1;\n    } else if i == '|' {\n      current_note += 1;\n    } else if i == '.' {\n      current_note += 1;\n    } else if i == '|' {\n      current_note += 1;\n    } else if i == 'o' {\n      current_note += 1;\n      current_beat += 1;\n    } else if i == 'o' {\n      current_note += 1;\n      current_beat += 1;\n    } else if i == '|' {\n      current_note += 1;\n    } else if i == '.' {\n      current_note += 1;\n    } else if i\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpfgoii83t.rs:76:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n14 |   for i in music_string.chars() {\n   |                                 - this delimiter might not be properly closed...\n...\n67 | }\n   | - ...as it matches this but it has different indentation\n...\n76 | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpfgoii83t.rs:67:1\n   |\n66 |     } else if i\n   |            -- this `if` expression has a condition, but no block\n67 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfgoii83t.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note = 0;\n  let mut count = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '|' {\n      note += 2;\n      count += 1;\n      continue;\n    }\n    if i == 'o' {\n      note += 4;\n      count += 1;\n      continue;\n    }\n    if note == 0 {\n      result.push(count);\n      count = 0;\n    }\n    note -= 1;\n  }\n  result.push(count);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpzi9h_xmi.rs:45:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut beat_count = 0;\n  let mut note_count = 0;\n  let mut note_index = 0;\n  let mut note_index_prev = 0;\n  let mut note_index_next = 0;\n  let mut note_index_next_prev = 0;\n  let mut note_index_next_next = 0;\n  let mut note_index_next_next_prev = 0;\n  let mut note_index_next_next_next = 0;\n  let mut note_index_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpghdm2fxa.rs:36:56\n   |\n36 |   let mut note_index_next_next_next_next_next_next_next\n   |                                                        ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghdm2fxa.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut i = 0;\n  while i < music.len() {\n    let beat = music[i];\n    if beat == 0 {\n      beats.push(0);\n      i += 1;\n      continue;\n    }\n    let next_beat = i + 1;\n    while next_beat < music.len() && music[next_beat] == beat {\n      next_beat += 1;\n    }\n    beats.push(next_beat - i);\n    i = next_beat;\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmpc5qh1l5a.rs:11:78\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                                              ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `chomp` found for reference `&str` in the current scope\n  --> /tmp/tmpc5qh1l5a.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                     ^^^^^ method not found in `&str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmpc5qh1l5a.rs:11:70\n     |\n11   |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n     |                                                                      ^^^^^^^ ------------------- supplied 1 argument\n     |                                                                      |\n     |                                                                      expected 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0425, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_duration = 0;\n  let mut current_beats = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      current_note = 0;\n      current_duration = 0;\n      current_beats = 0;\n    } else if i == '.' {\n      current_note += 1;\n      current_duration = 0;\n      current_beats = 0;\n    } else if i == '|' {\n      current_note += 1;\n      current_duration += 1;\n      current_beats += 1;\n    } else if i == 'o' {\n      current_note += 1;\n      current_duration += 2;\n      current_beats += 1;\n    } else {\n      panic!(\"Unknown note character: '{}'\", i);\n    }\n    if current_note == 4 {\n      result.push(current_beats);\n      current_note = 0;\n      current_duration = 0;\n      current_beats = 0;\n    }\n  }\n  result.push(current_beats);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmp_n1e_l43.rs:48:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut last_beat = 0;\n  for (i, note in music) {\n    if (note == 0) {\n      last_beat += 1;\n    } else {\n      if (note == 1) {\n        beats.push_back(last_beat);\n        last_beat = 0;\n      } else {\n        last_beat += note;\n      }\n    }\n  }\n  beats.push_back(last_beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmp547v4xyk.rs:14:16\n   |\n14 |   for (i, note in music) {\n   |                ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp547v4xyk.rs:14:7\n   |\n14 |   for (i, note in music) {\n   |       ^                ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n14 -   for (i, note in music) {\n14 +   for i, note in music {\n   | \n\nerror[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmp547v4xyk.rs:11:78\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                                              ^^^^^^^^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp547v4xyk.rs:15:8\n   |\n15 |     if (note == 0) {\n   |        ^         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (note == 0) {\n15 +     if note == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp547v4xyk.rs:18:10\n   |\n18 |       if (note == 1) {\n   |          ^         ^\n   |\nhelp: remove these parentheses\n   |\n18 -       if (note == 1) {\n18 +       if note == 1 {\n   | \n\nerror[E0599]: no method named `chomp` found for reference `&str` in the current scope\n  --> /tmp/tmp547v4xyk.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                     ^^^^^ method not found in `&str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmp547v4xyk.rs:11:70\n     |\n11   |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n     |                                                                      ^^^^^^^ ------------------- supplied 1 argument\n     |                                                      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note += 1;\n    } else if i == '|' {\n      current_note += 2;\n    } else if i == 'o' {\n      current_note += 4;\n    } else {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpn8125sem.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut curr_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      curr_note += 1;\n    } else if i == '|' {\n      if curr_note == 0 {\n        result.push(0);\n      } else if curr_note == 1 {\n        result.push(1);\n      } else if curr_note == 2 {\n        result.push(2);\n      } else if curr_note == 3 {\n        result.push(3);\n      } else if curr_note == 4 {\n        result.push(4);\n      }\n      curr_note = 0;\n    } else {\n      curr_note += 1;\n    }\n  }\n  if curr_note > 0 {\n    result.push(curr_note);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[7]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpm2ubm57c.rs:42:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut last_note = 0;\n  let mut last_beat = 0;\n  let mut last_last_beat = 0;\n  let mut last_last_note = 0;\n  let mut last_last_last_beat = 0;\n  let mut last_last_last_note = 0;\n  let mut last_last_last_last_beat = 0;\n  let mut last_last_last_last_note = 0;\n  let mut last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpduy8crl_.rs:36:60\n   |\n36 |   let mut last_last_last_last_last_last_last_last_last_last\n   |                                                            ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpduy8crl_.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_duration = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_duration = 0;\n      continue;\n    }\n    if i == '|' {\n      current_note += current_duration;\n      current_duration = 0;\n      continue;\n    }\n    if i == 'o' {\n      current_duration += 4;\n      continue;\n    }\n    if i == 'o|' {\n      current_duration += 2;\n      continue;\n    }\n    current_duration += 1;\n  }\n  result.push_back(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmp4oe0aas3.rs:31:16\n   |\n31 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note = 0;\n  let mut count = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '|' {\n      note += 2;\n      count += 1;\n      continue;\n    }\n    if i == 'o' {\n      note += 4;\n      count += 1;\n      continue;\n    }\n    if note == 0 {\n      result.push(count);\n      count = 0;\n    }\n  }\n  result.push(count);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpiibwar5i.rs:44:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n      current_note = 0;\n    } else if i == '|' {\n      current_beat += 1;\n      current_note += 1;\n    } else if i == 'o' {\n      current_beat += 4;\n      current_note = 0;\n    } else {\n      current_beat += 1;\n      current_note += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_beat = 0;\n      current_note = 0;\n    }\n  }\n  if current_beat > 0 {\n    result.push(current_note);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpoonf4k2b.rs:43:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut beat_count = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(beat_count);\n      beat_count = 0;\n    } else if i == '|' {\n      beat_count += 1;\n    } else if i == 'o' {\n      beat_count += 4;\n    } else {\n      panic!(\"Unknown note: {}\", i);\n    }\n  }\n  result.push(beat_count);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpa3lnhdbx.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      beats.push(1);\n    } else if i == '|' {\n      beats.push(2);\n    } else if i == 'o' {\n      beats.push(4);\n    } else {\n      beats.push(0);\n    }\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpnlkoxwy0.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note = 0;\n  let mut count = 0;\n  for c in music_string.chars() {\n    if c == '.' {\n      note += 1;\n      count += 1;\n    } else if c == '|' {\n      note += 2;\n      count += 1;\n    } else if c == 'o' {\n      note += 4;\n      count += 1;\n    } else {\n      note += 0;\n      count += 1;\n    }\n    if note == 0 {\n      result.push(count);\n      note = 0;\n      count = 0;\n    }\n  }\n  result.push(count);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmphvtg9y4y.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    match i {\n      'o' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n        result.push(4);\n      },\n      'o|' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n      },\n      '.' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      '|' => {\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      'o' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n      },\n      'o|' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpmk_xre4f.rs:26:10\n   |\n26 |       'o|' => {\n   |          ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let note = music_string[i];\n    if note == '.' {\n      result.push(1);\n    } else if note == '|' {\n      result.push(2);\n    } else if note == 'o' {\n      result.push(4);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmpzy0iahyb.rs:12:12\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmpzy0iahyb.rs:12:18\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(current);\n      current = 0;\n    } else if i == '|' {\n      current += 1;\n    } else if i == 'o' {\n      current += 4;\n    }\n  }\n  result.push(current);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpwj6dopg3.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp_all(\".\").chomp_all(\"|\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"|\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"|\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"|\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"|\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"|\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"|\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"|\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"|\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"|\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"|\")).map(|s| s.chomp_all(\"o\")).map(|s| s.chomp_all(\"\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpnc5keoe8.rs:20:61\n   |\n20 |       assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n   |  _____________________________________________________________^\n21 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note_count = 0;\n  let mut beat_count = 0;\n  let mut beat_count_prev = 0;\n  let mut note_count_prev = 0;\n  let mut note_count_next = 0;\n  let mut note_count_next_prev = 0;\n  let mut note_count_next_next = 0;\n  let mut note_count_next_next_prev = 0;\n  let mut note_count_next_next_next = 0;\n  let mut note_count_next_next_next_prev = 0;\n  let mut note_count_next_next_next_next = 0;\n  let mut note_count_next_next_next_next_prev = 0;\n  let mut note_count_next_next_next_next_next = 0;\n  let mut note_count_next_next_next_next_next_prev = 0;\n  let mut note_count_next_next_next_next_next_next = 0;\n  let mut note_count_next_next_next_next_next_next_prev = 0;\n  let mut note_count_next_next_next_next_next_next_next = 0;\n  let mut note_count_next_next_next_next_next_next_next_prev = 0;\n  let mut note_count_next_next_next_next_next_next_next_next = 0;\n  let mut note_count_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_count_next_next_next_next_next_next_next_next_next = 0;\n  let mut note_count_next_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_count_next_next_next_next_next_next_next_next_next_next = 0;\n  let mut note_count_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_count_next_next_next_next_next_next\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmps4kx_4n9.rs:36:51\n   |\n36 |   let mut note_count_next_next_next_next_next_next\n   |                                                   ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps4kx_4n9.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note = 0;\n  let mut count = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      note += 1;\n      count += 1;\n    } else if i == '|' {\n      note += 1;\n      count += 1;\n    } else if i == 'o' {\n      note += 1;\n      count += 1;\n    } else if i == 'o' {\n      note += 1;\n      count += 1;\n    } else if i == '|' {\n      note += 1;\n      count += 1;\n    } else if i == 'o' {\n      note += 1;\n      count += 1;\n    } else if i == '.' {\n      note += 1;\n      count += 1;\n    } else if i == '|' {\n      note += 1;\n      count += 1;\n    } else if i == 'o' {\n      note += 1;\n      count += 1;\n    } else if i == 'o' {\n      note += 1;\n      count += 1;\n    } else if i == '.' {\n      note += 1;\n      count += 1;\n    } else if i == '|' {\n      note += 1;\n      count += 1;\n    } else if i == 'o' {\n      note += 1;\n      count += 1;\n    } else if i == 'o' {\n      note += 1;\n      count += 1;\n    } else if i == '.' {\n      note += 1;\n      count += 1;\n    } else if i == '|' {\n      note += 1;\n      count += 1;\n    } else if i == 'o' {\n      note += 1;\n      count += 1;\n    } else if i == 'o' {\n      note += 1;\n      count += 1;\n    } else if i == '.' {\n      note += 1;\n      count += 1;\n    } else if i == '|' {\n      note += 1;\n      count += 1;\n    } else if i == 'o' {\n      note += 1;\n      count +=\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp6z_56qus.rs:87:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n14 |   for i in music_string.chars() {\n   |                                 - unclosed delimiter\n...\n75 |     } else if i == 'o' {\n   |                        - this delimiter might not be properly closed...\n...\n78 | }\n   | - ...as it matches this but it has different indentation\n...\n87 | }\n   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmp6z_56qus.rs:78:1\n   |\n78 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6z_56qus.rs:14:3\n   |\n10 |   fn parse_music(music_string: String) -> Vec<isize> {\n   |                                           ---------- expected `Vec<isize>` because of return type\n...\n14 | /   for i in music_string.chars() {\n15 | |     if i == '.' {\n16 | |       note += 1;\n17 | |       count += 1;\n...  |\n86 | |     assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n87 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current = 0;\n  let mut last = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current += 1;\n      continue;\n    }\n    if i == '|' {\n      current += 2;\n      continue;\n    }\n    if i == 'o' {\n      current += 4;\n      continue;\n    }\n    if i == 'o' {\n      current += 4;\n      continue;\n    }\n    if i == '|' {\n      current += 2;\n      continue;\n    }\n    if i == 'o' {\n      current += 2;\n      continue;\n    }\n    if i == '|' {\n      current += 1;\n      continue;\n    }\n    if i == 'o' {\n      current += 1;\n      continue;\n    }\n    if i == '|' {\n      current += 1;\n      continue;\n    }\n    if i == 'o' {\n      current += 1;\n      continue;\n    }\n    if i == '|' {\n      current += 1;\n      continue;\n    }\n    if i == 'o' {\n      current += 1;\n      continue;\n    }\n    if i == '|' {\n      current += 1;\n      continue;\n    }\n    if i == 'o' {\n      current += 1;\n      continue;\n    }\n    if i == '|' {\n      current += 1;\n      continue;\n    }\n    if i == 'o' {\n      current += 1;\n      continue;\n    }\n    if i == '|' {\n      current += 1;\n      continue;\n    }\n    if i == 'o' {\n      current += 1;\n      continue;\n    }\n    if i == '|' {\n      current += 1;\n      continue;\n    }\n    if i == 'o' {\n      current += 1;\n      continue;\n    }\n    if i == '|' {\n      current += 1;\n      continue;\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n   --> /tmp/tmp6jgvt9xa.rs:111:3\n    |\n10  | fn parse_music(music_string: String) -> Vec<isize> {\n    |                                                    - unclosed delimiter\n...\n14  |   for i in music_string.chars() {\n    |                                 - unclosed delimiter\n...\n98  |     if i == '|' {\n    |                 - this delimiter might not be properly closed...\n...\n102 | }\n    | - ...as it matches this but it has different indentation\n...\n111 | }\n    |   ^\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp6jgvt9xa.rs:14:3\n    |\n10  |   fn parse_music(music_string: String) -> Vec<isize> {\n    |                                           ---------- expected `Vec<isize>` because of return type\n...\n14  | /   for i in music_string.chars() {\n15  | |     if i == ' ' {\n16  | |       continue;\n17  | |     }\n...   |\n110 | |     assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n111 | | }\n    | |__^ expected struct `Vec`, found `()`\n    |\n    = note: expected struct `Vec<isize>`\n            found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '|' {\n      current_beat += 2;\n      continue;\n    }\n    if i == 'o' {\n      current_beat += 4;\n      continue;\n    }\n    if i == 'o' || i == '.' || i == '|' {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpdn3hkxy5.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut count = 0;\n  let mut prev_note = 0;\n  let mut prev_count = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      note = 0;\n      continue;\n    }\n    if i == '|' {\n      note = 1;\n      continue;\n    }\n    if i == 'o' {\n      note = 2;\n      continue;\n    }\n    if note == 0 {\n      continue;\n    }\n    if note == 1 {\n      if prev_note == 2 {\n        count += 1;\n      } else {\n        count = 1;\n      }\n      prev_note = note;\n      prev_count = count;\n      note = 0;\n      continue;\n    }\n    if note == 2 {\n      count += 1;\n      prev_note = note;\n      prev_count = count;\n      note = 0;\n      continue;\n    }\n    if note == 3 {\n      count += 1;\n      prev_note = note;\n      prev_count = count;\n      note = 0;\n      continue;\n    }\n    if note == 4 {\n      count += 1;\n      prev_note = note;\n      prev_count = count;\n      note = 0;\n      continue;\n    }\n    if note == 5 {\n      count += 1;\n      prev_note = note;\n      prev_count = count;\n      note = 0;\n      continue;\n    }\n    if note == 6 {\n      count += 1;\n      prev_note = note;\n      prev_count = count;\n      note = 0;\n      continue;\n    }\n    if note == 7 {\n      count += 1;\n      prev_note = note;\n      prev_count = count;\n      note = 0;\n      continue;\n    }\n    if note == 8 {\n      count += 1;\n      prev_note = note;\n      prev_count = count;\n      note = 0;\n      continue;\n    }\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n   --> /tmp/tmpdn3tydrq.rs:105:3\n    |\n10  | fn parse_music(music_string: String) -> Vec<isize> {\n    |                                                    - unclosed delimiter\n...\n16  |   for i in music_string.chars() {\n    |                                 - this delimiter might not be properly closed...\n...\n96  | }\n    | - ...as it matches this but it has different indentation\n...\n105 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdn3tydrq.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n      current_note = 0;\n    } else if i == '|' {\n      current_beat += 1;\n      current_note += 1;\n    } else if i == 'o' {\n      current_beat += 4;\n      current_note = 0;\n    } else {\n      current_beat += 1;\n      current_note += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_beat = 0;\n      current_note = 0;\n    }\n  }\n  if current_beat > 0 {\n    result.push(current_note);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpoonf4k2b.rs:43:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let note = music_string[i];\n    let count = 1;\n    if note == '.' {\n      count = 0;\n    } else if note == '|' {\n      count = 2;\n    } else if note == 'o' {\n      count = 4;\n    }\n    result.push_back(count);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmpno9n2x4k.rs:12:12\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmpno9n2x4k.rs:12:18\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpl6i9g68y.rs:12:1\n   |\n12 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpl6i9g68y.rs:11:892\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - closing delimiter possibly meant for this\n11 |   let mut music = music_string.split(\" \").map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c| c - '0')).map(|s| s.chars().map(|c...\n   |
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_note = 0;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 4;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 2;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      continue;\n    }\n    if i == '.' {\n      current_note += 1;\n      continue;\n    }\n    if i == ' ' {\n      result.push(current_note);\n      current_note = 0;\n      continue;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmphyre_k7o.rs:53:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut i = 0;\n  while (i < music.len) {\n    let beat = music[i];\n    if (beat == 0) {\n      beats.push(0);\n      i += 1;\n    } else if (beat == 1) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 2) {\n      beats.push(2);\n      i += 1;\n    } else if (beat == 3) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 4) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 5) {\n      beats.push(2);\n      i += 1;\n    } else if (beat == 6) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 7) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 8) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 9) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 10) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 11) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 12) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 13) {\n      beats.push(2);\n      i += 1;\n    } else if (beat == 14) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 15) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 16) {\n      beats.push(1);\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwdr76byu.rs:76:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n14 |   while (i < music.len) {\n   |                         - unclosed delimiter\n...\n64 |     } else if (beat == 16) {\n   |                            - this delimiter might not be properly closed...\n...\n67 | }\n   | - ...as it matches this but it has different indentation\n...\n76 | }\n   |   ^\n\nerror[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmpwdr76byu.rs:11:78\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                                              ^^^^^^^^^^ not found in this scope\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpwdr76byu.rs:14:9\n   |\n14 |   while (i < music.len) {\n   |         ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -   while (i < music.len) {\n14 +   while i < music.len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwdr76byu.rs:16:8\n   |\n16 |     if (beat == 0) {\n   |        ^         ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (beat == 0) {\n16 +     if beat == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwdr76byu.rs:19:15\n   |\n19 |     } else if (beat == 1) {\n   |               ^         ^\n   |\nhelp: remove these parentheses\n   |\n19 -     } else if (beat == 1) {\n19 +     } else if beat == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwdr76byu.rs:22:15\n   |\n22 |     } else if (beat == 2) {\n   |               ^         ^\n   |\nhelp: remove these parentheses\n   |\n22 -     } else if (beat == 2) {\n22 +     } else if beat == 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpwdr76byu.rs:25:15\n   |\n25 |     } else if (beat == 3) {\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let note = music_string[i];\n    if note == '.' {\n      result.push(1);\n    } else if note == '|' {\n      result.push(2);\n    } else if note == 'o' {\n      result.push(4);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmpzy0iahyb.rs:12:12\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmpzy0iahyb.rs:12:18\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut last_note = 0;\n  let mut last_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      note = 0;\n      last_note = note;\n      last_beat = 0;\n    } else if i == '|' {\n      note = 1;\n      last_note = note;\n      last_beat = 0;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = 4;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = 2;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = 1;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = 0;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = 4;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = 2;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = 1;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = 0;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = 4;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = 2;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = 1;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = 0;\n    }\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpstt48mzh.rs:82:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n15 |   for i in music_string.chars() {\n   |                                 - this delimiter might not be properly closed...\n...\n73 | }\n   | - ...as it matches this but it has different indentation\n...\n82 | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpstt48mzh.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note += 1;\n      current_beat += 1;\n    } else if i == '|' {\n      current_note += 1;\n      current_beat += 2;\n    } else if i == 'o' {\n      current_note += 2;\n      current_beat += 4;\n    } else {\n      current_note += 1;\n      current_beat += 1;\n    }\n    if current_note == 4 {\n      result.push(current_beat);\n      current_note = 0;\n      current_beat = 0;\n    }\n  }\n  if current_note > 0 {\n    result.push(current_beat);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[19]`,\n right: `[4, 4, 4, 4]`', /tmp/tmphi8bftp6.rs:43:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(1);\n    } else if i == '|' {\n      result.push(2);\n    } else if i == 'o' {\n      result.push(4);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpy56x5xff.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_beat += 4;\n      continue;\n    }\n    if i == 'o|' {\n      current_beat += 2;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmphgj4t5ot.rs:31:16\n   |\n31 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_note = 0;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 4;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 2;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n   --> /tmp/tmp44ob48he.rs:104:3\n    |\n10  | fn parse_music(music_string: String) -> Vec<isize> {\n    |                                                    - unclosed delimiter\n...\n13  |   for i in music_string.chars() {\n    |                                 - unclosed delimiter\n...\n93  |     if i == 'o' {\n    |                 - this delimiter might not be properly closed...\n94  | \n95  | }\n    | - ...as it matches this but it has different indentation\n...\n104 | }\n    |   ^\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp44ob48he.rs:13:3\n    |\n10  |   fn parse_music(music_string: String) -> Vec<isize> {\n    |                                           ---------- expected `Vec<isize>` because of return type\n...\n13  | /   for i in music_string.chars() {\n14  | |     if i == ' ' {\n15  | |       continue;\n16  | |     }\n...   |\n103 | |     assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n104 | | }\n    | |__^ expected struct `Vec`, found `()`\n    |\n    = note: expected struct `Vec<isize>`\n            found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut beat = 0;\n  let mut note = 0;\n  let mut note_count = 0;\n  let mut note_count_prev = 0;\n  let mut note_count_prev_prev = 0;\n  let mut note_count_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpph_vjt2w.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      beats.push(1);\n    } else if i == '|' {\n      beats.push(2);\n    } else if i == 'o' {\n      beats.push(4);\n    }\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpvq30sm4z.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut beat = 0;\n  let mut note = 0;\n  let mut note_count = 0;\n  let mut note_count_max = 0;\n  let mut note_count_max_index = 0;\n  let mut note_count_max_index_prev = 0;\n  let mut note_count_max_index_next = 0;\n  let mut note_count_max_index_next_prev = 0;\n  let mut note_count_max_index_next_next = 0;\n  let mut note_count_max_index_next_next_prev = 0;\n  let mut note_count_max_index_next_next_next = 0;\n  let mut note_count_max_index_next_next_next_prev = 0;\n  let mut note_count_max_index_next_next_next_next = 0;\n  let mut note_count_max_index_next_next_next_next_prev = 0;\n  let mut note_count_max_index_next_next_next_next_next = 0;\n  let mut note_count_max_index_next_next_next_next_next_prev = 0;\n  let mut note_count_max_index_next_next_next_next_next_next = 0;\n  let mut note_count_max_index_next_next_next_next_next_next_prev = 0;\n  let mut note_count_max_index_next_next_next_next_next_next_next = 0;\n  let mut note_count_max_index_next_next_next_next_next_next_next_prev = 0;\n  let mut note_count_max_index_next_next_next_next_next_next_next_next = 0;\n  let mut note_count_max_index_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_count_max_index_next_next_next_next_next_next_next_next_next = 0;\n  let mut note_count_max_index_next_next_next_next\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmphb41d6i1.rs:35:51\n   |\n35 |   let mut note_count_max_index_next_next_next_next\n   |                                                   ^ help: add `;` here\n36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphb41d6i1.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpeja0gc06.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_note = 0;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 4;\n      continue;\n    }\n    if i == 'o|' {\n      current_note += 2;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      continue;\n    }\n    if current_note == 0 {\n      result.push(0);\n      continue;\n    }\n    result.push(current_note);\n    current_note = 0;\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpnoar179r.rs:29:16\n   |\n29 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1)).collect(Collectors.to_vec);\n  let mut beats = Vec::new();\n  let mut last_beat = 0;\n  for i in music {\n    if i == \".\" {\n      beats.push_back(last_beat);\n      last_beat = 0;\n    } else if i == \"|\" {\n      last_beat += 1;\n    } else if i == \"o\" {\n      last_beat += 4;\n    } else if i == \"o|\" {\n      last_beat += 2;\n    }\n  }\n  beats.push_back(last_beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmpfkma6vvo.rs:11:71\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1)).collect(Collectors.to_vec);\n   |                                                                       ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `chomp` found for reference `&str` in the current scope\n  --> /tmp/tmpfkma6vvo.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1)).collect(Collectors.to_vec);\n   |                                                     ^^^^^ method not found in `&str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmpfkma6vvo.rs:11:63\n     |\n11   |   let mut music = music_string.split(\" \").map(|s| s.chomp(1)).collect(Collectors.to_vec);\n     |                                                               ^^^^^^^ ----------------- supplied 1 argument\n     |                                                               |\n     |                                                               expected 0 arguments\n     |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpfkma6vvo.rs:16:13\n   |\n16 |       beats.push_back(last_beat);\n   |             ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpfkma6vvo.rs:26:9\n   |\n26 |   beats.push_back(last_beat);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0425, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  let mut current_measure = 0;\n  let mut current_measure_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_measure_beat = 0;\n      current_measure++;\n      current_beat = 0;\n    } else if i == '|' {\n      current_beat++;\n      current_measure_beat++;\n    } else if i == 'o' {\n      current_note++;\n      current_beat += 4;\n    } else if i == 'o|' {\n      current_note++;\n      current_beat += 2;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_note = 0;\n      current_beat = 0;\n    }\n  }\n  if current_beat > 0 {\n    result.push(current_note);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpzog_admp.rs:27:23\n   |\n27 |     } else if i == 'o|' {\n   |                       ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  let mut current_quarter_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_quarter_beat += 1;\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 1;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      current_beat += 1;\n    }\n    if current_beat == 4 {\n      current_beat = 0;\n      current_note += 1;\n    }\n    if current_note == 4 {\n      result.push(current_beat);\n      current_note = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpqe8s6d2b.rs:41:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note_count = 0;\n  let mut beat_count = 0;\n  let mut last_note = false;\n  let mut last_beat = false;\n  let mut last_quarter = false;\n  for i in music_string.chars() {\n    if is_note(i) {\n      if last_note {\n        result.push_back(beat_count);\n        beat_count = 0;\n      }\n      note_count += 1;\n      last_note = true;\n    } else if is_beat(i) {\n      if last_beat {\n        result.push_back(beat_count);\n        beat_count = 0;\n      }\n      last_beat = true;\n    } else if is_quarter(i) {\n      if last_quarter {\n        result.push_back(beat_count);\n        beat_count = 0;\n      }\n      last_quarter = true;\n    } else {\n      if last_note {\n        result.push_back(beat_count);\n        beat_count = 0;\n      }\n      last_note = false;\n      last_beat = false;\n      last_quarter = false;\n    }\n    beat_count += 1;\n  }\n  result.push_back(beat_count);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `is_note` in this scope\n  --> /tmp/tmpgj_lr6z1.rs:18:8\n   |\n18 |     if is_note(i) {\n   |        ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_beat` in this scope\n  --> /tmp/tmpgj_lr6z1.rs:25:15\n   |\n25 |     } else if is_beat(i) {\n   |               ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_quarter` in this scope\n  --> /tmp/tmpgj_lr6z1.rs:31:15\n   |\n31 |     } else if is_quarter(i) {\n   |               ^^^^^^^^^^ help: a local variable with a similar name exists: `last_quarter`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpgj_lr6z1.rs:20:16\n   |\n20 |         result.push_back(beat_count);\n   |                ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpgj_lr6z1.rs:27:16\n   |\n27 |         result.push_back(beat_count);\n   |                ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpgj_lr6z1.rs:33:16\n   |\n33 |         result.push_back(beat_count);\n   |                ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpgj_lr6z1.rs:39:16\n   |\n39 |         result.push_back(beat_count);\n   |                ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpgj_lr6z1.rs:48:10\n   |\n48 |   result.push_back(beat_count);\n   |          ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.parse_int()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut i = 0;\n  while i < music.len {\n    if music[i] == 0 {\n      beats.push(0);\n      i += 1;\n      continue;\n    }\n    let beat_len = 0;\n    while i + beat_len < music.len && music[i + beat_len] == 0 {\n      beat_len += 1;\n    }\n    beats.push(beat_len);\n    i += beat_len;\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmpr2_339k3.rs:11:74\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.parse_int()).collect(Collectors.to_vec());\n   |                                                                          ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `parse_int` found for reference `&str` in the current scope\n  --> /tmp/tmpr2_339k3.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.parse_int()).collect(Collectors.to_vec());\n   |                                                     ^^^^^^^^^ help: there is an associated function with a similar name: `parse`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmpr2_339k3.rs:11:66\n     |\n11   |   let mut music = music_string.split(\" \").map(|s| s.parse_int()).collect(Collectors.to_vec());\n     |                                                                  ^^^^^^^ ------------------- supplied 1 argument\n     |                                                                  |\n     |                                                                  expected 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0425, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      current_note += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_note = 0;\n      current_beat = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmponucp2ww.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n      current_note = 0;\n    } else if i == '|' {\n      current_beat += 1;\n      current_note += 1;\n    } else if i == 'o' {\n      current_beat += 4;\n      current_note = 0;\n    } else {\n      current_beat += 1;\n      current_note += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_beat = 0;\n      current_note = 0;\n    }\n  }\n  if current_beat > 0 {\n    result.push(current_note);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpoonf4k2b.rs:43:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  let mut current_measure = 0;\n  let mut current_bar = 0;\n  let mut current_chord = 0;\n  let mut current_chord_note = 0;\n  let mut current_chord_beat = 0;\n  let mut current_chord_measure = 0;\n  let mut current_chord_bar = 0;\n  let mut current_chord_chord = 0;\n  let mut current_chord_chord_note = 0;\n  let mut current_chord_chord_beat = 0;\n  let mut current_chord_chord_measure = 0;\n  let mut current_chord_chord_bar = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note += 1;\n      current_beat += 1;\n      current_measure += 1;\n      current_bar += 1;\n      current_chord += 1;\n      current_chord_note += 1;\n      current_chord_beat += 1;\n      current_chord_measure += 1;\n      current_chord_bar += 1;\n      current_chord_chord += 1;\n      current_chord_chord_note += 1;\n      current_chord_chord_beat += 1;\n      current_chord_chord_measure += 1;\n      current_chord_chord_bar += 1;\n    } else if i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      current_measure += 1;\n      current_bar += 1;\n      current_chord += 1;\n      current_chord_note += 1;\n      current_chord_beat += 1;\n      current_chord_measure += 1;\n      current_chord_bar += 1;\n      current_chord_chord += 1;\n      current_chord_chord_note += 1;\n      current_chord_chord_beat += 1;\n      current_\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8d6k41lg.rs:65:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n26 |   for i in music_string.chars() {\n   |                                 - unclosed delimiter\n...\n42 |     } else if i == '|' {\n   |                        - this delimiter might not be properly closed...\n...\n56 | }\n   | - ...as it matches this but it has different indentation\n...\n65 | }\n   |   ^\n\nerror[E0425]: cannot find value `current_` in this scope\n  --> /tmp/tmp8d6k41lg.rs:55:7\n   |\n55 |       current_\n   |       ^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8d6k41lg.rs:26:3\n   |\n10 |   fn parse_music(music_string: String) -> Vec<isize> {\n   |                                           ---------- expected `Vec<isize>` because of return type\n...\n26 | /   for i in music_string.chars() {\n27 | |     if i == '.' {\n28 | |       current_note += 1;\n29 | |       current_beat += 1;\n...  |\n64 | |     assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n65 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_duration = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_duration += 1;\n    } else if i == '|' {\n      current_duration += 2;\n    } else if i == 'o' {\n      current_duration += 4;\n    } else {\n      current_note += 1;\n      current_duration = 0;\n    }\n    if current_note == 4 {\n      result.push(current_duration);\n      current_note = 0;\n      current_duration = 0;\n    }\n  }\n  if current_note > 0 {\n    result.push(current_duration);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpdu2th2sv.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    match i {\n      'o' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n        result.push(4);\n      },\n      'o|' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n      },\n      '.' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      '|' => {\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      'o' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n      },\n      '.' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmp75n1kdd1.rs:26:10\n   |\n26 |       'o|' => {\n   |          ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(1);\n    } else if i == '|' {\n      result.push(2);\n    } else if i == 'o' {\n      result.push(4);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpqk6m4g6u.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  for i in music_string.chars() {\n    let beat = 0;\n    if i == 'o' {\n      beat = 4;\n    } else if i == 'o|' {\n      beat = 2;\n    } else if i == '.' {\n      beat = 1;\n    }\n    beats.push_back(beat);\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmp1b6bmma3.rs:16:23\n   |\n16 |     } else if i == 'o|' {\n   |                       ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp_all(\".\").chomp_all(\"|\")).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut beat = 0;\n  for (let i = 0; i < music.len; i++) {\n    if (music[i] == \".\") {\n      beat += 1;\n    } else if (music[i] == \"|\") {\n      beat += 1;\n      beats.push_back(beat);\n      beat = 0;\n    }\n  }\n  beats.push_back(beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpaj7dd_wj.rs:14:8\n   |\n14 |   for (let i = 0; i < music.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpaj7dd_wj.rs:14:12\n   |\n14 |   for (let i = 0; i < music.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpaj7dd_wj.rs:14:14\n   |\n14 |   for (let i = 0; i < music.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpaj7dd_wj.rs:14:13\n   |\n14 |   for (let i = 0; i < music.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpaj7dd_wj.rs:14:14\n   |\n14 |   for (let i = 0; i < music.len; i++) {\n   |              ^ expected expression\n\nerror[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmpaj7dd_wj.rs:11:92\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp_all(\".\").chomp_all(\"|\")).collect(Collectors.to_vec());\n   |                                                                                            ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `chomp_all` found for reference `&str` in the current scope\n  --> /tmp/tmpaj7dd_wj.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp_all(\".\").chomp_all(\"|\")).collect(Collectors.to_vec());\n   |                                                     ^^^^^^^^^ method not found in `&str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmpaj7dd_wj.rs:11:84\n     |\n11   |   let mut music = music_string.split(\" \").map(|s| s.chomp_all(\".\").chomp_all(\"|\")).collect(Collectors.to_vec());\n     |                                                                                    ^^^^^^^ ------------------- supplied 1 argument\n     |                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(1);\n    } else if i == '|' {\n      result.push(2);\n    } else if i == 'o' {\n      result.push(4);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpqk6m4g6u.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note = 0;\n  let mut count = 0;\n  for c in music_string.chars() {\n    if c == '.' {\n      note += 1;\n      count += 1;\n    } else if c == '|' {\n      note += 1;\n      count += 1;\n    } else if c == 'o' {\n      note += 1;\n      count += 1;\n    } else if c == 'o' {\n      note += 1;\n      count += 1;\n    } else if c == '|' {\n      note += 1;\n      count += 1;\n    } else if c == '.' {\n      note += 1;\n      count += 1;\n    } else if c == '|' {\n      note += 1;\n      count += 1;\n    } else if c == 'o' {\n      note += 1;\n      count += 1;\n    } else if c == 'o' {\n      note += 1;\n      count += 1;\n    } else if c == '|' {\n      note += 1;\n      count += 1;\n    } else if c == '.' {\n      note += 1;\n      count += 1;\n    } else if c == '|' {\n      note += 1;\n      count += 1;\n    } else if c == 'o' {\n      note += 1;\n      count += 1;\n    } else if c == 'o' {\n      note += 1;\n      count += 1;\n    } else if c == '|' {\n      note += 1;\n      count += 1;\n    } else if c == '.' {\n      note += 1;\n      count += 1;\n    } else if c == '|' {\n      note += 1;\n      count += 1;\n    } else if c == 'o' {\n      note += 1;\n      count += 1;\n    } else if c == 'o' {\n      note += 1;\n      count += 1;\n    } else if c == '|' {\n      note += 1;\n      count += 1;\n    } else if c == '.' {\n      note += 1;\n      count +=\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpkj8mfhxy.rs:87:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n14 |   for c in music_string.chars() {\n   |                                 - unclosed delimiter\n...\n75 |     } else if c == '.' {\n   |                        - this delimiter might not be properly closed...\n...\n78 | }\n   | - ...as it matches this but it has different indentation\n...\n87 | }\n   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmpkj8mfhxy.rs:78:1\n   |\n78 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkj8mfhxy.rs:14:3\n   |\n10 |   fn parse_music(music_string: String) -> Vec<isize> {\n   |                                           ---------- expected `Vec<isize>` because of return type\n...\n14 | /   for c in music_string.chars() {\n15 | |     if c == '.' {\n16 | |       note += 1;\n17 | |       count += 1;\n...  |\n86 | |     assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n87 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut last_note = 0;\n  let mut last_beat = 0;\n  let mut last_note_beat = 0;\n  let mut last_note_beat_count = 0;\n  let mut last_note_beat_count_count = 0;\n  let mut last_note_beat_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count_count_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count_count_count_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count_count_count_count_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let mut last_note_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpbyx8869q.rs:31:125\n   |\n31 |   let mut last_note_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n   |                                                                                                                             ^ help: add `;` here\n32 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbyx8869q.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    match i {\n      'o' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n        result.push(4);\n      },\n      'o|' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n      },\n      '.|' => {\n        result.push(4);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n      },\n      ' ' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmp7mellg6l.rs:26:10\n   |\n26 |       'o|' => {\n   |          ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let c = music_string[i];\n    if c == '.' {\n      beats.push(0);\n    } else if c == '|' {\n      beats.push(1);\n    } else if c == 'o' {\n      beats.push(4);\n    } else {\n      beats.push(2);\n    }\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmp6uo71b91.rs:12:12\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmp6uo71b91.rs:12:18\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut count = 0;\n  let mut last = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      count += 1;\n      last = 0;\n    } else if i == '|' {\n      count += 1;\n      last = 1;\n    } else if i == 'o' {\n      count += 1;\n      last = 2;\n    } else {\n      count += 1;\n      last = 3;\n    }\n    result.push(count);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7]`,\n right: `[4, 4, 4, 4]`', /tmp/tmptltcczkw.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut last_beat = 0;\n  for (i in music) {\n    if (i == 0) {\n      continue;\n    }\n    if (i == '.') {\n      beats.push(last_beat);\n      last_beat = 0;\n      continue;\n    }\n    if (i == '|') {\n      last_beat = last_beat + 1;\n      continue;\n    }\n    last_beat = last_beat + 4;\n  }\n  beats.push(last_beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmpyrzx4mv5.rs:14:10\n   |\n14 |   for (i in music) {\n   |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpyrzx4mv5.rs:14:7\n   |\n14 |   for (i in music) {\n   |       ^          ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n14 -   for (i in music) {\n14 +   for i in music {\n   | \n\nerror[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmpyrzx4mv5.rs:11:78\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                                              ^^^^^^^^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyrzx4mv5.rs:15:8\n   |\n15 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (i == 0) {\n15 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyrzx4mv5.rs:18:8\n   |\n18 |     if (i == '.') {\n   |        ^        ^\n   |\nhelp: remove these parentheses\n   |\n18 -     if (i == '.') {\n18 +     if i == '.' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyrzx4mv5.rs:23:8\n   |\n23 |     if (i == '|') {\n   |        ^        ^\n   |\nhelp: remove these parentheses\n   |\n23 -     if (i == '|') {\n23 +     if i == '|' {\n   | \n\nerror[E0599]: no method named `chomp` found for reference `&str` in the current scope\n  --> /tmp/tmpyrzx4mv5.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                     ^^^^^ method not found in `&str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmpyrzx4mv5.rs:11:70\n     |\n11   |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n     |    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == '|' {\n      current_beat += 1;\n      current_note += 2;\n      continue;\n    }\n    if i == 'o' {\n      current_beat += 4;\n      current_note += 1;\n      continue;\n    }\n    if i == 'o|' {\n      current_beat += 2;\n      current_note += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' | i == 'o|' {\n      current_beat += 4;\n      current_note += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' | i == 'o|' {\n      current_beat += 4;\n      current_note += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' | i == 'o|' {\n      current_beat += 4;\n      current_note += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' | i == 'o|' {\n      current_beat += 4;\n      current_note += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpjysafqjo.rs:34:16\n   |\n34 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  let mut current_note = 0;\n  let mut current_duration = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      current_note = 0;\n      current_duration = 0;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      current_note = 0;\n      current_duration += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      current_duration = 0;\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      current_duration += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      current_duration += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      current_duration += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      current_note += 1;\n      current_duration += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == ' ' {\n      current_note = 0;\n      current_duration = 0;\n      current_beat += 1;\n      continue;\n    }\n    result.push(current_beat);\n    current_beat = 0;\n    current_note = 0;\n    current_duration = 0;\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmp27ay3qee.rs:75:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat = 0;\n    } else if i == '|' {\n      current_beat += 1;\n    } else if i == 'o' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    }\n    if current_beat > 0 {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[2, 2, 2, 2]`,\n right: `[4, 4, 4, 4]`', /tmp/tmphw9d4tf1.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut last_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      note = 0;\n    } else if i == '|' {\n      note += 1;\n    } else if i == 'o' {\n      note += 2;\n    } else if i == 'o' {\n      note += 4;\n    } else {\n      panic!(\"Unknown note character: '{}'\", i);\n    }\n    if note > last_note {\n      beats.push_back(note - last_note);\n      last_note = note;\n    }\n  }\n  beats.push_back(note - last_note);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpkwp0m0dt.rs:27:13\n   |\n27 |       beats.push_back(note - last_note);\n   |             ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpkwp0m0dt.rs:31:9\n   |\n31 |   beats.push_back(note - last_note);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_note += 1;\n      if current_note == 4 {\n        current_note = 0;\n        current_beat += 1;\n      }\n    } else if i == 'o' {\n      current_note += 1;\n      if current_note == 4 {\n        current_note = 0;\n        current_beat += 1;\n      }\n    } else {\n      if current_note == 0 {\n        result.push(current_beat);\n      }\n      current_note = 0;\n      current_beat = 0;\n    }\n  }\n  if current_note != 0 {\n    result.push(current_beat);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpmkws78m_.rs:46:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      current_beat += 1;\n    } else if i == '.' {\n      current_beat += 2;\n    } else if i == '|' {\n      current_beat += 4;\n    } else if i == 'o' {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpx4dmkrdu.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note = 0;\n  let mut count = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      note += 1;\n      count += 1;\n    } else if i == '|' {\n      note += 1;\n      count += 2;\n    } else if i == 'o' {\n      note += 2;\n      count += 4;\n    } else {\n      note += 2;\n      count += 2;\n    }\n    if note == 4 {\n      result.push(count);\n      note = 0;\n      count = 0;\n    }\n  }\n  if note != 0 {\n    result.push(count);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[6, 6, 6, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpisxg5qcs.rs:43:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut count = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      count += 1;\n    } else if i == '|' {\n      count += 2;\n    } else if i == 'o' {\n      count += 4;\n    } else {\n      count += 1;\n    }\n    if count == 4 {\n      result.push(i32(count));\n      count = 0;\n    }\n  }\n  if count > 0 {\n    result.push(i32(count));\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0423]: expected function, found builtin type `i32`\n  --> /tmp/tmpdge_lspi.rs:24:19\n   |\n24 |       result.push(i32(count));\n   |                   ^^^ not a function\n\nerror[E0423]: expected function, found builtin type `i32`\n  --> /tmp/tmpdge_lspi.rs:29:17\n   |\n29 |     result.push(i32(count));\n   |                 ^^^ not a function\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      current_beat += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_note = 0;\n      current_beat = 0;\n    } else {\n      current_note += 1;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpfr_o2f_2.rs:38:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current += 1;\n      continue;\n    }\n    if i == '|' {\n      current += 2;\n      continue;\n    }\n    if i == 'o' {\n      current += 4;\n      continue;\n    }\n    if i == 'o' || i == '.' || i == '|' {\n      result.push(current);\n      current = 0;\n    }\n  }\n  result.push(current);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpd2uaydn_.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.parse_int()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut beat_count = 0;\n  let mut last_beat = 0;\n  for (i, note in music) {\n    if (note == 0) {\n      beats.push_back(beat_count);\n      beat_count = 0;\n      last_beat = 0;\n    } else if (note == 1) {\n      beat_count += 1;\n    } else if (note == 2) {\n      beat_count += 2;\n    } else if (note == 3) {\n      beat_count += 4;\n    } else if (note == 4) {\n      beat_count += 8;\n    } else if (note == 5) {\n      beat_count += 16;\n    } else if (note == 6) {\n      beat_count += 32;\n    } else if (note == 7) {\n      beat_count += 64;\n    } else if (note == 8) {\n      beat_count += 128;\n    } else if (note == 9) {\n      beat_count += 256;\n    } else if (note == 10) {\n      beat_count += 512;\n    } else if (note == 11) {\n      beat_count += 1024;\n    } else if (note == 12) {\n      beat_count += 2048;\n    } else if (note == 13) {\n      beat_count += 4096;\n    } else if (note == 14) {\n      beat_count += 8192;\n    } else if (note == 15) {\n      beat_count += 16384;\n    } else if (note == 16) {\n      beat_count += 32768;\n    } else if (note == 17) {\n      beat_count += 65536;\n    } else if (note == 18) {\n      beat_count += 131072;\n    } else if (note == 19) {\n      beat_count += 262144;\n    } else if (note == 20) {\n      beat_count += 524288;\n    } else if (note == 21)\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpkkr_zqto.rs:70:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n15 |   for (i, note in music) {\n   |                          - this delimiter might not be properly closed...\n...\n61 | }\n   | - ...as it matches this but it has different indentation\n...\n70 | }\n   |   ^\n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmpkkr_zqto.rs:15:16\n   |\n15 |   for (i, note in music) {\n   |                ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpkkr_zqto.rs:15:7\n   |\n15 |   for (i, note in music) {\n   |       ^                ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n15 -   for (i, note in music) {\n15 +   for i, note in music {\n   | \n\nerror: expected `{`, found `}`\n  --> /tmp/tmpkkr_zqto.rs:61:1\n   |\n60 |     } else if (note == 21)\n   |            -- this `if` expression has a condition, but no block\n61 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmpkkr_zqto.rs:11:74\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.parse_int()).collect(Collectors.to_vec());\n   |                                                                          ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `parse_int` found for reference `&str` in the current scope\n  --> /tmp/tmpkkr_zqto.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.parse_int()).collect(Collectors.to_vec());\n   |                                                     ^^^^^^^^^ help: there is an associated function with a similar name: `parse`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmpkkr_zqto.rs:11:66\n     |\n11   |   let mut music = music_string.split(\" \").map(|s| s.parse_int()).collect(Collectors.to_vec());\n     |                                                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut beat_count = 0;\n  let mut note_count = 0;\n  let mut note_count_in_beat = 0;\n  let mut note_count_in_beat_in_beat = 0;\n  let mut note_count_in_beat_in_beat_in_beat = 0;\n  let mut note_count_in_beat_in_beat_in_beat_in_beat = 0;\n  let mut note_count_in_beat_in_beat_in_beat_in_beat_in_beat = 0;\n  let mut note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat = 0;\n  let mut note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat = 0;\n  let mut note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat = 0;\n  let mut note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat = 0;\n  let mut note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat = 0;\n  let mut note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat = 0;\n  let mut note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat = 0;\n  let mut note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpj65y3h_f.rs:26:109\n   |\n26 |   let mut note_count_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat_in_beat\n   |                                                                                                             ^ help: add `;` here\n27 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj65y3h_f.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      beats.push(1);\n    } else if i == '|' {\n      beats.push(2);\n    } else if i == 'o' {\n      beats.push(4);\n    } else {\n      beats.push(0);\n    }\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpnlkoxwy0.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note = 0;\n  let mut count = 0;\n  for c in music_string.chars() {\n    if c == '.' {\n      note += 1;\n      count += 1;\n    } else if c == '|' {\n      note += 2;\n      count += 1;\n    } else if c == 'o' {\n      note += 4;\n      count += 1;\n    } else {\n      note += 0;\n      count += 1;\n    }\n    if note == 0 {\n      result.push(count);\n      note = 0;\n      count = 0;\n    }\n  }\n  result.push(count);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmphvtg9y4y.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    match i {\n      'o' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n        result.push(4);\n      },\n      'o|' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n      },\n      '.|' => {\n        result.push(4);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n      },\n      ' ' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmp7mellg6l.rs:26:10\n   |\n26 |       'o|' => {\n   |          ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut beat_count = 0;\n  let mut note_count = 0;\n  let mut note_index = 0;\n  let mut note_index_prev = 0;\n  let mut note_index_next = 0;\n  let mut note_index_next_prev = 0;\n  let mut note_index_next_next = 0;\n  let mut note_index_next_next_prev = 0;\n  let mut note_index_next_next_next = 0;\n  let mut note_index_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpghdm2fxa.rs:36:56\n   |\n36 |   let mut note_index_next_next_next_next_next_next_next\n   |                                                        ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghdm2fxa.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == '|' {\n      current_beat += 1;\n      current_note += 2;\n      continue;\n    }\n    if i == 'o' {\n      current_beat += 4;\n      current_note += 1;\n      continue;\n    }\n    if i == 'o|' {\n      current_beat += 2;\n      current_note += 1;\n      continue;\n    }\n    if i == '.'|'|' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == '.'|'.' {\n      current_beat += 1;\n      current_note += 2;\n      continue;\n    }\n    if i == '.'|'o' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == '.'|'o|' {\n      current_beat += 1;\n      current_note += 2;\n      continue;\n    }\n    if i == '.'|'.'|'|' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == '.'|'.'|'.' {\n      current_beat += 1;\n      current_note += 2;\n      continue;\n    }\n    if i == '.'|'o|'|'.' {\n      current_beat += 1;\n      current_note += 2;\n      continue;\n    }\n    if i == '.'|'o|'|'o' {\n      current_beat += 1;\n      current_note += 2;\n      continue;\n    }\n    if i == '.'|'o|'|'o|' {\n      current_beat += 1\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpvsno09_z.rs:34:16\n   |\n34 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      current_beat += 4;\n      continue;\n    }\n    if i == 'o|' {\n      current_note += 1;\n      current_beat += 2;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == 'o' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == 'o|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '.' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == 'o' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == 'o|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '.' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpnhgyz3it.rs:34:16\n   |\n34 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note = 0;\n    } else if i == '|' {\n      current_note += 1;\n    } else if i == 'o' {\n      current_note += 2;\n    } else {\n      current_note += 4;\n    }\n    if current_note == 4 {\n      result.push(i - '0');\n      current_note = 0;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmp4i5ymdrx.rs:24:21\n   |\n24 |       result.push(i - '0');\n   |                   - ^ --- char\n   |                   |\n   |                   char\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0369`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(1);\n    } else if i == '|' {\n      result.push(2);\n    } else if i == 'o' {\n      result.push(4);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpqk6m4g6u.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut i = 0;\n  while (i < music.len) {\n    let beat = music[i];\n    if (beat == 0) {\n      i += 1;\n      continue;\n    }\n    if (beat == '.') {\n      beats.push(0);\n      i += 1;\n      continue;\n    }\n    if (beat == '|') {\n      beats.push(1);\n      i += 1;\n      continue;\n    }\n    if (beat == 'o') {\n      beats.push(4);\n      i += 1;\n      continue;\n    }\n    if (beat == 'o|') {\n      beats.push(2);\n      i += 1;\n      continue;\n    }\n    if (beat == '.'|') {\n      beats.push(1);\n      i += 1;\n      continue;\n    }\n    if (beat == '.'|'.') {\n      beats.push(2);\n      i += 1;\n      continue;\n    }\n    if (beat == '.'|'.'|') {\n      beats.push(1);\n      i += 1;\n      continue;\n    }\n    if (beat == '.'|'.'|'.') {\n      beats.push(4);\n      i += 1;\n      continue;\n    }\n    if (beat == '.'|'.'|'.'|') {\n      beats.push(1);\n      i += 1;\n      continue;\n    }\n    if (beat == '.'|'.'|'.'|'.') {\n      beats.push(2);\n      i += 1;\n      continue;\n    }\n    if (beat == '.'|'.'|'.'|'.'|') {\n      beats.push(1);\n      i += 1;\n      continue;\n    }\n    if (beat == '.'|'.'|'.'|'.'|'.'\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpa8hlktj3.rs:35:20\n   |\n35 |     if (beat == 'o|') {\n   |                    ^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      beat += 1;\n    } else if i == '|' {\n      beat += 2;\n    } else if i == 'o' {\n      beat += 4;\n    } else {\n      result.push(beat);\n      beat = 0;\n    }\n  }\n  result.push(beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpymhv0jh0.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  let mut current_quarter = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_quarter += 1;\n      current_beat += 1;\n    } else if i == '|' {\n      current_quarter += 1;\n      current_beat += 1;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else if i == 'o|' {\n      current_beat += 2;\n    } else {\n      current_beat += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_note = 0;\n      current_beat = 0;\n      current_quarter = 0;\n    } else {\n      current_note += 1;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpq37gstt8.rs:24:23\n   |\n24 |     } else if i == 'o|' {\n   |                       ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o|' {\n      current_note += 1;\n      current_beat += 2;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 2;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 3;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 4;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 5;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 6;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 7;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 8;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 9;\n      continue;\n    }\n    \n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpvwjadk_0.rs:32:16\n   |\n32 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note_count = 0;\n  let mut beat_count = 0;\n  let mut note_index = 0;\n  let mut note_index_prev = 0;\n  let mut note_index_next = 0;\n  let mut note_index_next_prev = 0;\n  let mut note_index_next_next = 0;\n  let mut note_index_next_next_prev = 0;\n  let mut note_index_next_next_next = 0;\n  let mut note_index_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpqb2n66kg.rs:36:56\n   |\n36 |   let mut note_index_next_next_next_next_next_next_next\n   |                                                        ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqb2n66kg.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      beats.push(1);\n    } else if i == '|' {\n      beats.push(2);\n    } else if i == 'o' {\n      beats.push(4);\n    } else {\n      beats.push(0);\n    }\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpnlkoxwy0.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpeja0gc06.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note += 1;\n    } else if i == '|' {\n      current_note += 2;\n    } else if i == 'o' {\n      current_note += 4;\n    } else {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpn8125sem.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      beat += 1;\n    } else if i == '|' {\n      beat += 2;\n    } else if i == 'o' {\n      beat += 4;\n    } else {\n      beats.push(beat);\n      beat = 0;\n    }\n  }\n  beats.push(beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmp7o7si3cf.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut last_note = 0;\n  let mut last_beat = 0;\n  let mut last_last_beat = 0;\n  let mut last_last_last_beat = 0;\n  let mut last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_beat = 0\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmps2szgsn3.rs:31:109\n   |\n31 |   let mut last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_beat = 0\n   |                                                                                                             ^ help: add `;` here\n32 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps2szgsn3.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note += 1;\n      current_beat += 1;\n    } else if i == '|' {\n      current_note += 1;\n      current_beat += 2;\n    } else if i == 'o' {\n      current_note += 2;\n      current_beat += 4;\n    } else {\n      current_note += 1;\n      current_beat += 1;\n    }\n    if current_note == 4 {\n      result.push(current_beat);\n      current_note = 0;\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpdy0l35iu.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  let mut current_measure = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_measure += 1;\n      current_beat = 0;\n      current_note = 0;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      current_beat += 4;\n      continue;\n    }\n    if i == 'o|' {\n      current_note += 1;\n      current_beat += 2;\n      continue;\n    }\n    if i == '.'|'|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      current_beat += 4;\n      continue;\n    }\n    if i == 'o|' {\n      current_note += 1;\n      current_beat += 2;\n      continue;\n    }\n    if i == '.'|'|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      current_beat += 4;\n      continue;\n    }\n    if i == 'o|' {\n      current_note += 1;\n      current_beat += 2;\n      continue\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmphj06gou6.rs:32:16\n   |\n32 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note = 0;\n  let mut beats = 0;\n  let mut last_note = 0;\n  let mut last_beats = 0;\n  let mut last_beat = 0;\n  let mut last_last_beat = 0;\n  let mut last_last_last_beat = 0;\n  let mut last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      if note == 0 {\n        note = 1;\n        beats = 1;\n      } else if note == 1 {\n        note = 2;\n        beats = 1;\n      } else if note == 2 {\n        note = 4;\n        beats = 1;\n      } else if note == 3 {\n        note = 4;\n        beats = 2;\n      } else if note == 4 {\n        note = 2;\n        beats = 2;\n      } else if note == 5 {\n        note = 2;\n        beats = 1;\n      } else if note == 6 {\n        note = 1;\n        beats = 1;\n      } else if note == 7 {\n        note = 4;\n        beats = 1;\n      } else if note == 8 {\n        note = 4;\n        beats = 2;\n      } else if note == 9 {\n        note = 2;\n        beats = 2;\n      } else if note == 10 {\n        note = 2;\n        beats = 1;\n      } else if note == 11 {\n        note = 1;\n        beats = 1;\n      } else if note == 12 {\n        note = 4;\n        beats = 1;\n      } else if note == 13 {\n        note = 4;\n        beats = 2;\n      } else if note == 14 {\n        note = 2;\n        beats = 2;\n      } else if note == 15 {\n        note = 2;\n        beats = 1;\n      } else if\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpmaag2j9c.rs:82:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n22 |   for i in music_string.chars() {\n   |                                 - unclosed delimiter\n23 |     if i == '.' {\n   |                 - this delimiter might not be properly closed...\n...\n73 | }\n   | - ...as it matches this but it has different indentation\n...\n82 | }\n   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmpmaag2j9c.rs:73:1\n   |\n73 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmaag2j9c.rs:22:3\n   |\n10 |   fn parse_music(music_string: String) -> Vec<isize> {\n   |                                           ---------- expected `Vec<isize>` because of return type\n...\n22 | /   for i in music_string.chars() {\n23 | |     if i == '.' {\n24 | |       if note == 0 {\n25 | |         note = 1;\n...  |\n81 | |     assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n82 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      beats.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  beats.push(current_beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpzcmgy0fr.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      result.push(current_note);\n      current_note = 0;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 4;\n      continue;\n    }\n    if i == 'o|' {\n      current_note += 2;\n      continue;\n    }\n    panic!(\"Unknown note character: {}\", i);\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpumi03dux.rs:30:16\n   |\n30 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n      current_note = 0;\n    } else if i == '|' {\n      current_beat += 1;\n      current_note += 1;\n    } else if i == 'o' {\n      current_beat += 4;\n      current_note = 0;\n    } else {\n      current_note += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_beat = 0;\n      current_note = 0;\n    }\n  }\n  if current_beat > 0 {\n    result.push(current_note);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 0, 0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp1nx2usm9.rs:42:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(1);\n    } else if i == '|' {\n      result.push(2);\n    } else if i == 'o' {\n      result.push(4);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpy56x5xff.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  for i in music_string.chars() {\n    let beat = 0;\n    if (i == '.') {\n      beat = 1;\n    } else if (i == '|') {\n      beat = 2;\n    } else if (i == 'o') {\n      beat = 4;\n    }\n    beats.push_back(beat);\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpid_eydnb.rs:14:8\n   |\n14 |     if (i == '.') {\n   |        ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (i == '.') {\n14 +     if i == '.' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpid_eydnb.rs:16:15\n   |\n16 |     } else if (i == '|') {\n   |               ^        ^\n   |\nhelp: remove these parentheses\n   |\n16 -     } else if (i == '|') {\n16 +     } else if i == '|' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpid_eydnb.rs:18:15\n   |\n18 |     } else if (i == 'o') {\n   |               ^        ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == 'o') {\n18 +     } else if i == 'o' {\n   | \n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpid_eydnb.rs:21:11\n   |\n21 |     beats.push_back(beat);\n   |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note += 1;\n    } else if i == '|' {\n      current_note += 2;\n    } else if i == 'o' {\n      current_note += 4;\n    } else {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpn8125sem.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    match i {\n      'o' => {\n        result.push(4);\n      },\n      'o|' => {\n        result.push(2);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n        result.push(2);\n      },\n      'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o' | 'o'\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpl_ydekgd.rs:17:10\n   |\n17 |       'o|' => {\n   |          ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note = 0;\n    } else if i == '|' {\n      current_note += 1;\n    } else if i == 'o' {\n      current_note += 2;\n    } else if i == 'o' {\n      current_note += 4;\n    } else {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpbrhti0ws.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let note = music_string[i];\n    let count = 0;\n    if note == '.' {\n      count = 1;\n    } else if note == '|' {\n      count = 2;\n    } else if note == 'o' {\n      count = 4;\n    } else {\n      panic!(\"Unknown note: '{}'\", note);\n    }\n    beats.push_back(count);\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmph6tnog_1.rs:12:12\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmph6tnog_1.rs:12:18\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note_count = 0;\n  let mut beat_count = 0;\n  let mut note_count_prev = 0;\n  let mut beat_count_prev = 0;\n  let mut note_count_prev_prev = 0;\n  let mut beat_count_prev_prev = 0;\n  let mut note_count_prev_prev_prev = 0;\n  let mut beat_count_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev = 0;\n  let mut beat_count_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev = 0;\n  let mut beat_count_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev = 0;\n  let mut beat_count_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut beat_count_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut beat_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut note_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let mut beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp16s6hcof.rs:35:71\n   |\n35 |   let mut beat_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n   |                                                                       ^ help: add `;` here\n36 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp16s6hcof.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note += 1;\n    } else if i == '|' {\n      current_note += 2;\n    } else if i == 'o' {\n      current_note += 4;\n    } else {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpn8125sem.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).split(\"|\")).map(|s| s.chomp(1).split(\".\"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music = music.map(|s| s.chomp(1).split(\" \"));\n  music =\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpi1jlkuam.rs:34:1\n   |\n34 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `chomp` found for reference `&str` in the current scope\n  --> /tmp/tmpi1jlkuam.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).split(\"|\")).map(|s| s.chomp(1).split(\".\"));\n   |                                                     ^^^^^ method not found in `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi1jlkuam.rs:12:11\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).split(\"|\")).map(|s| s.chomp(1).split(\".\"));\n   |                   ------------------------------------------------------------------------------------- expected due to this value\n12 |   music = music.map(|s| s.chomp(1).split(\" \"));\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::str::Split`, found struct `Map`\n   |\n   = note: expected struct `Map<Map<std::str::Split<'_, _>, _>, _>`\n              found struct `Map<Map<Map<std::str::Split<'_, _>, _>, _>, _>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi1jlkuam.rs:13:11\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).split(\"|\")).map(|s| s.chomp(1).split(\".\"));\n   |                   ------------------------------------------------------------------------------------- expected due to this value\n12 |   music = music.map(|s| s.chomp(1).split(\" \"));\n13 |   music = music.map(|s| s.chomp(1).split(\" \"));\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::str::Split`, found struct `Map`\n   |\n   = note: expected struct `Map<Map<std::str::Split<'_, _>, _>, _>`\n              found struct `Map<Map<Map<std::str::Split<'_, _>, _>, _>, _>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi1jlkuam.rs:14:11\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).split(\"|\")).map(|s| s.chomp(1).split(\".\"));\n   |                   ------------------------------------------------------------------------------------- expected due to this value\n..",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut last_note = 0;\n  let mut last_beat = 0;\n  let mut beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      note = 0;\n      last_note = note;\n      last_beat = beat;\n    } else if i == '|' {\n      note += 1;\n      last_note = note;\n      last_beat = beat;\n    } else if i == 'o' {\n      note += 1;\n      last_note = note;\n      last_beat = beat;\n      beats.push(last_beat);\n    }\n    beat += 1;\n  }\n  beats.push(beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmp85j7q4bo.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' || i == '|' || i == '.' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if current_note == 0 {\n      result.push_back(current_beat);\n      current_beat = 0;\n      current_note = 1;\n      continue;\n    }\n    result.push_back(current_beat);\n    current_beat = 0;\n    current_note = 0;\n  }\n  result.push_back(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpxmdku0jv.rs:37:14\n   |\n37 |       result.push_back(current_beat);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpxmdku0jv.rs:42:12\n   |\n42 |     result.push_back(current_beat);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpxmdku0jv.rs:46:10\n   |\n46 |   result.push_back(current_beat);\n   |          ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note = 0;\n  let mut count = 0;\n  for c in music_string.chars() {\n    if c == '.' {\n      note = 0;\n      count = 0;\n    } else if c == '|' {\n      note += 1;\n      count = 0;\n    } else if c == 'o' {\n      note += 2;\n      count = 0;\n    } else {\n      count += 1;\n    }\n    if note == 4 {\n      result.push(count);\n      note = 0;\n      count = 0;\n    }\n  }\n  result.push(count);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmp0h4gmmd7.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut count = 0;\n  let mut note = 0;\n  let mut last_note = 0;\n  let mut last_count = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      note = 0;\n      last_note = note;\n      last_count = count;\n      count = 0;\n      continue;\n    }\n    if i == '|' {\n      note = 1;\n      last_note = note;\n      last_count = count;\n      count = 0;\n      continue;\n    }\n    if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_count = count;\n      count = 0;\n      continue;\n    }\n    if i == 'o' {\n      note = 3;\n      last_note = note;\n      last_count = count;\n      count = 0;\n      continue;\n    }\n    if i == 'o' {\n      note = 4;\n      last_note = note;\n      last_count = count;\n      count = 0;\n      continue;\n    }\n    count += 1;\n  }\n  result.push(last_count);\n  result.push(last_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 0]`,\n right: `[]`', /tmp/tmpcdjbzd32.rs:64:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let beat = 0;\n    let note = music_string[i];\n    if note == '.' {\n      beat = 1;\n    } else if note == '|' {\n      beat = 2;\n    } else if note == 'o' {\n      beat = 4;\n    }\n    beats.push_back(beat);\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmp67648bm4.rs:12:12\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmp67648bm4.rs:12:18\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpeja0gc06.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note_count = 0;\n  let mut beat_count = 0;\n  let mut last_note = false;\n  let mut last_beat = false;\n  let mut last_quarter = false;\n  let mut last_half = false;\n  let mut last_whole = false;\n  let mut last_quarter_half = false;\n  let mut last_whole_half = false;\n  let mut last_whole_quarter = false;\n  let mut last_whole_quarter_half = false;\n  let mut last_whole_quarter_quarter = false;\n  let mut last_whole_quarter_quarter_half = false;\n  let mut last_whole_quarter_quarter_quarter = false;\n  let mut last_whole_quarter_quarter_quarter_half = false;\n  let mut last_whole_quarter_quarter_quarter_quarter = false;\n  let mut last_whole_quarter_quarter_quarter_quarter_half = false;\n  let mut last_whole_quarter_quarter_quarter_quarter_quarter = false;\n  let mut last_whole_quarter_quarter_quarter_quarter_quarter_half = false;\n  let mut last_whole_quarter_quarter_quarter_quarter_quarter_quarter = false;\n  let mut last_whole_quarter_quarter_quarter_quarter_quarter_quarter_half = false;\n  let mut last_whole_quarter_quarter_quarter_quarter_quarter_quarter_quarter = false;\n  let mut last_whole_quarter_quarter_quarter_quarter_quarter_quarter_quarter_half = false;\n  let mut last_whole_quarter_quarter_quarter_quarter_quarter_quarter_quarter_quarter = false;\n  let mut last_whole_quarter_quarter_quarter_quarter_quarter_quarter_quarter_quarter_half = false;\n  let mut last_whole_quarter_quarter_quarter_quarter_quarter_quarter_quarter_quarter_quarter = false;\n  let mut last_whole_quarter_quarter_quarter_quarter_quarter_quarter_quarter_quarter_quarter_half = false;\n  let mut last_whole_quarter_\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp9ep7e276.rs:39:30\n   |\n39 |   let mut last_whole_quarter_\n   |                              ^ help: add `;` here\n40 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ep7e276.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut i = 0;\n  while (i < music.len) {\n    let beat = music[i];\n    if (beat == 0) {\n      beats.push(0);\n      i += 1;\n    } else if (beat == 1) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 2) {\n      beats.push(2);\n      i += 1;\n    } else if (beat == 3) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 4) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 5) {\n      beats.push(2);\n      i += 1;\n    } else if (beat == 6) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 7) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 8) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 9) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 10) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 11) {\n      beats.push(2);\n      i += 1;\n    } else if (beat == 12) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 13) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 14) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 15) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 16) {\n      beats.push(4);\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpdbpf5i4c.rs:76:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n14 |   while (i < music.len) {\n   |                         - unclosed delimiter\n...\n64 |     } else if (beat == 16) {\n   |                            - this delimiter might not be properly closed...\n...\n67 | }\n   | - ...as it matches this but it has different indentation\n...\n76 | }\n   |   ^\n\nerror[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmpdbpf5i4c.rs:11:78\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                                              ^^^^^^^^^^ not found in this scope\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpdbpf5i4c.rs:14:9\n   |\n14 |   while (i < music.len) {\n   |         ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -   while (i < music.len) {\n14 +   while i < music.len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdbpf5i4c.rs:16:8\n   |\n16 |     if (beat == 0) {\n   |        ^         ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (beat == 0) {\n16 +     if beat == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdbpf5i4c.rs:19:15\n   |\n19 |     } else if (beat == 1) {\n   |               ^         ^\n   |\nhelp: remove these parentheses\n   |\n19 -     } else if (beat == 1) {\n19 +     } else if beat == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdbpf5i4c.rs:22:15\n   |\n22 |     } else if (beat == 2) {\n   |               ^         ^\n   |\nhelp: remove these parentheses\n   |\n22 -     } else if (beat == 2) {\n22 +     } else if beat == 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdbpf5i4c.rs:25:15\n   |\n25 |     } else if (beat == 3) {\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut last_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      note = 0;\n    } else if i == '|' {\n      note += 1;\n    } else if i == 'o' {\n      note += 2;\n    } else if i == 'o' {\n      note += 4;\n    } else if i == 'o' {\n      note += 8;\n    } else if i == 'o' {\n      note += 16;\n    } else if i == 'o' {\n      note += 32;\n    } else if i == 'o' {\n      note += 64;\n    } else if i == 'o' {\n      note += 128;\n    } else if i == 'o' {\n      note += 256;\n    } else if i == 'o' {\n      note += 512;\n    } else if i == 'o' {\n      note += 1024;\n    } else if i == 'o' {\n      note += 2048;\n    } else if i == 'o' {\n      note += 4096;\n    } else if i == 'o' {\n      note += 8192;\n    } else if i == 'o' {\n      note += 16384;\n    } else if i == 'o' {\n      note += 32768;\n    } else if i == 'o' {\n      note += 65536;\n    } else if i == 'o' {\n      note += 131072;\n    } else if i == 'o' {\n      note += 262144;\n    } else if i == 'o' {\n      note += 524288;\n    } else if i == 'o' {\n      note += 1048576;\n    } else if i == 'o' {\n      note += 2097152;\n    } else if i == 'o' {\n      note += 4194304;\n    } else if i == 'o' {\n      note += 8388608;\n    } else if i == 'o' {\n      note += 16777216;\n    } else if i == 'o' {\n      \n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp0bi7kkia.rs:78:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n14 |   for i in music_string.chars() {\n   |                                 - unclosed delimiter\n...\n67 |     } else if i == 'o' {\n   |                        - this delimiter might not be properly closed...\n68 |       \n69 | }\n   | - ...as it matches this but it has different indentation\n...\n78 | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0bi7kkia.rs:14:3\n   |\n10 |   fn parse_music(music_string: String) -> Vec<isize> {\n   |                                           ---------- expected `Vec<isize>` because of return type\n...\n14 | /   for i in music_string.chars() {\n15 | |     if i == '.' {\n16 | |       note = 0;\n17 | |     } else if i == '|' {\n...  |\n77 | |     assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n78 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current = 0;\n  let mut last = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current += 1;\n      continue;\n    }\n    if i == '|' {\n      current += 2;\n      continue;\n    }\n    if i == 'o' {\n      current += 4;\n      continue;\n    }\n    if i == 'o' || i == '.' || i == '|' {\n      result.push_back(current - last);\n      last = current;\n      current = 0;\n    }\n  }\n  result.push_back(current - last);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp0ygmaac9.rs:31:14\n   |\n31 |       result.push_back(current - last);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp0ygmaac9.rs:36:10\n   |\n36 |   result.push_back(current - last);\n   |          ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  let mut last_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n      last_beat = current_beat;\n    } else if i == '|' {\n      current_beat += 1;\n      last_beat = current_beat;\n    } else if i == 'o' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == 'o' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == '|' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == 'o' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == 'o' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == '|' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == 'o' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == 'o' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == '|' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == 'o' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == 'o' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == '|' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == 'o' {\n      current_note += 1;\n      last_beat = current_beat;\n    } else if i == 'o' {\n      current_note += 1;\n      last_beat = current_beat\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp1v19ivfb.rs:73:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n15 |   for i in music_string.chars() {\n   |                                 - unclosed delimiter\n...\n61 |     } else if i == 'o' {\n   |                        - this delimiter might not be properly closed...\n...\n64 | }\n   | - ...as it matches this but it has different indentation\n...\n73 | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1v19ivfb.rs:15:3\n   |\n10 |   fn parse_music(music_string: String) -> Vec<isize> {\n   |                                           ---------- expected `Vec<isize>` because of return type\n...\n15 | /   for i in music_string.chars() {\n16 | |     if i == '.' {\n17 | |       current_beat += 1;\n18 | |       last_beat = current_beat;\n...  |\n72 | |     assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n73 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut beat_count = 0;\n  let mut note_count = 0;\n  let mut note_index = 0;\n  let mut note_index_prev = 0;\n  let mut note_index_next = 0;\n  let mut note_index_next_prev = 0;\n  let mut note_index_next_next = 0;\n  let mut note_index_next_next_prev = 0;\n  let mut note_index_next_next_next = 0;\n  let mut note_index_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next_next\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpdxjhhqq7.rs:36:56\n   |\n36 |   let mut note_index_next_next_next_next_next_next_next\n   |                                                        ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdxjhhqq7.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut last_note = 0;\n  let mut last_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      note = 0;\n      continue;\n    }\n    if i == '|' {\n      note += 1;\n      continue;\n    }\n    if note == 0 {\n      note = 1;\n      last_note = i;\n      last_beat = 0;\n      continue;\n    }\n    if note == 1 {\n      note = 2;\n      last_note = i;\n      last_beat = 0;\n      continue;\n    }\n    if note == 2 {\n      note = 3;\n      last_note = i;\n      last_beat = 0;\n      continue;\n    }\n    if note == 3 {\n      note = 4;\n      last_note = i;\n      last_beat = 0;\n      continue;\n    }\n    if note == 4 {\n      note = 5;\n      last_note = i;\n      last_beat = 0;\n      continue;\n    }\n    if note == 5 {\n      note = 6;\n      last_note = i;\n      last_beat = 0;\n      continue;\n    }\n    if note == 6 {\n      note = 7;\n      last_note = i;\n      last_beat = 0;\n      continue;\n    }\n    if note == 7 {\n      note = 8;\n      last_note = i;\n      last_beat = 0;\n      continue;\n    }\n    if note == 8 {\n      note = 9;\n      last_note = i;\n      last_beat = 0;\n      continue;\n    }\n    if note == 9 {\n      note = 10;\n      last_note = i;\n      last_beat = 0;\n      continue;\n    }\n    if note == 10 {\n      note = 11;\n      last_note = i;\n      last_beat = 0;\n      continue;\n    }\n    if note == 11 {\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjnkvs7c0.rs:104:3\n    |\n10  | fn parse_music(music_string: String) -> Vec<isize> {\n    |                                                    - unclosed delimiter\n...\n15  |   for i in music_string.chars() {\n    |                                 - unclosed delimiter\n...\n93  |     if note == 11 {\n    |                   - this delimiter might not be properly closed...\n94  | \n95  | }\n    | - ...as it matches this but it has different indentation\n...\n104 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjnkvs7c0.rs:29:19\n   |\n13 |   let mut last_note = 0;\n   |                       - expected due to this value\n...\n29 |       last_note = i;\n   |                   ^ expected integer, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjnkvs7c0.rs:35:19\n   |\n13 |   let mut last_note = 0;\n   |                       - expected due to this value\n...\n35 |       last_note = i;\n   |                   ^ expected integer, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjnkvs7c0.rs:41:19\n   |\n13 |   let mut last_note = 0;\n   |                       - expected due to this value\n...\n41 |       last_note = i;\n   |                   ^ expected integer, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjnkvs7c0.rs:47:19\n   |\n13 |   let mut last_note = 0;\n   |                       - expected due to this value\n...\n47 |       last_note = i;\n   |                   ^ expected integer, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjnkvs7c0.rs:53:19\n   |\n13 |   let mut last_note = 0;\n   |                       - expected due to this value\n...\n53 |       last_note = i;\n   |                   ^ expected integer, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjnkvs7c0.rs:59:19\n   |\n13 |   let mut last_note = 0;\n   |                       - expected due to this value\n...\n59 |       last_note = i;\n   |                   ^ expected integer, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjnkvs7c0.rs:65:19\n   |\n13 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n      current_note = 0;\n    } else if i == '|' {\n      current_beat += 1;\n      current_note += 1;\n    } else if i == 'o' {\n      current_beat += 4;\n      current_note = 0;\n    } else {\n      current_note += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_beat = 0;\n      current_note = 0;\n    }\n  }\n  if current_beat > 0 {\n    result.push(current_note);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 0, 0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp1nx2usm9.rs:42:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut last_beat = 0;\n  for (i in music) {\n    if (i == 0) {\n      continue;\n    }\n    if (i == '.') {\n      beats.push(last_beat);\n      last_beat = 0;\n      continue;\n    }\n    if (i == '|') {\n      last_beat = last_beat + 1;\n      continue;\n    }\n    if (i == 'o') {\n      last_beat = last_beat + 4;\n      continue;\n    }\n    last_beat = last_beat + 2;\n  }\n  beats.push(last_beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmp57fe9yff.rs:14:10\n   |\n14 |   for (i in music) {\n   |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp57fe9yff.rs:14:7\n   |\n14 |   for (i in music) {\n   |       ^          ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n14 -   for (i in music) {\n14 +   for i in music {\n   | \n\nerror[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmp57fe9yff.rs:11:78\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                                              ^^^^^^^^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp57fe9yff.rs:15:8\n   |\n15 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (i == 0) {\n15 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp57fe9yff.rs:18:8\n   |\n18 |     if (i == '.') {\n   |        ^        ^\n   |\nhelp: remove these parentheses\n   |\n18 -     if (i == '.') {\n18 +     if i == '.' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp57fe9yff.rs:23:8\n   |\n23 |     if (i == '|') {\n   |        ^        ^\n   |\nhelp: remove these parentheses\n   |\n23 -     if (i == '|') {\n23 +     if i == '|' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp57fe9yff.rs:27:8\n   |\n27 |     if (i == 'o') {\n   |        ^        ^\n   |\nhelp: remove these parentheses\n   |\n27 -     if (i == 'o') {\n27 +     if i == 'o' {\n   | \n\nerror[E0599]: no method named `chomp` found for reference `&str` in the current scope\n  --> /tmp/tmp57fe9yff.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                     ^^^^^ method not found in `&st",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      note = 0;\n      continue;\n    }\n    if i == '|' {\n      note += 1;\n      continue;\n    }\n    if note == 0 {\n      beats.push(1);\n      continue;\n    }\n    if note == 1 {\n      beats.push(2);\n      continue;\n    }\n    if note == 2 {\n      beats.push(4);\n      continue;\n    }\n    if note == 3 {\n      beats.push(1);\n      continue;\n    }\n    if note == 4 {\n      beats.push(4);\n      continue;\n    }\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 1, 1, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpu6p1344j.rs:52:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).split(\"|\")).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpeoxcocjt.rs:12:1\n   |\n12 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpeoxcocjt.rs:11:877\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - closing delimiter possibly meant for this\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).split(\"|\")).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(|s| s.chomp(1)).map(\n   |
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == '|' {\n      current_beat += 1;\n      current_note += 2;\n      continue;\n    }\n    if i == 'o' {\n      current_beat += 4;\n      current_note += 1;\n      continue;\n    }\n    if i == 'o|' {\n      current_beat += 2;\n      current_note += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' | i == 'o|' {\n      current_beat += 4;\n      current_note += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' | i == 'o|' {\n      current_beat += 4;\n      current_note += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' | i == 'o|' {\n      current_beat += 4;\n      current_note += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' | i == 'o|' {\n      current_beat += 4;\n      current_note += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpjysafqjo.rs:34:16\n   |\n34 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let beat = 0;\n    let note = music_string[i];\n    if note == '.' {\n      beat = 1;\n    } else if note == '|' {\n      beat = 2;\n    } else if note == 'o' {\n      beat = 4;\n    } else {\n      panic!(\"Unknown note:\", note);\n    }\n    beats.push_back(beat);\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmp3cj6_r77.rs:12:12\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmp3cj6_r77.rs:12:18\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.trim()).collect(Collectors.toList());\n  let mut beats = Vec::new();\n  let mut beat = 0;\n  for (let i = 0; i < music.length; i++) {\n    if (music[i] == \".\") {\n      beats.push(beat);\n      beat = 0;\n    } else if (music[i] == \"|\") {\n      beat += 1;\n    } else if (music[i] == \"o\") {\n      beat += 4;\n    } else if (music[i] == \"o|\") {\n      beat += 2;\n    }\n  }\n  beats.push(beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp3yy13beg.rs:14:8\n   |\n14 |   for (let i = 0; i < music.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp3yy13beg.rs:14:12\n   |\n14 |   for (let i = 0; i < music.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp3yy13beg.rs:14:14\n   |\n14 |   for (let i = 0; i < music.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp3yy13beg.rs:14:13\n   |\n14 |   for (let i = 0; i < music.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp3yy13beg.rs:14:14\n   |\n14 |   for (let i = 0; i < music.length; i++) {\n   |              ^ expected expression\n\nerror[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmp3yy13beg.rs:11:69\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.trim()).collect(Collectors.toList());\n   |                                                                     ^^^^^^^^^^ not found in this scope\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmp3yy13beg.rs:11:61\n     |\n11   |   let mut music = music_string.split(\" \").map(|s| s.trim()).collect(Collectors.toList());\n     |                                                             ^^^^^^^ ------------------- supplied 1 argument\n     |                                                             |\n     |                                                             expected 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let note = music_string[i];\n    let count = 0;\n    if note == '.' {\n      count = 1;\n    } else if note == '|' {\n      count = 2;\n    } else if note == 'o' {\n      count = 4;\n    } else {\n      panic!(\"Unknown note: '{}'\", note);\n    }\n    beats.push_back(count);\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmph6tnog_1.rs:12:12\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmph6tnog_1.rs:12:18\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(1);\n    } else if i == '|' {\n      if i == '|' {\n        result.push(2);\n      } else {\n        result.push(1);\n      }\n    } else if i == 'o' {\n      result.push(4);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpeepw_8xq.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpeja0gc06.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_duration = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_duration += 1;\n    } else if i == '|' {\n      current_duration += 2;\n    } else if i == 'o' {\n      current_duration += 4;\n    } else {\n      current_note += 1;\n      current_duration = 0;\n    }\n    if current_note == 4 {\n      result.push(current_duration);\n      current_note = 0;\n      current_duration = 0;\n    }\n  }\n  if current_note > 0 {\n    result.push(current_duration);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpdu2th2sv.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note_count = 0;\n  let mut note_duration = 0;\n  let mut note_beat = 0;\n  let mut note_beat_count = 0;\n  let mut note_beat_count_prev = 0;\n  let mut note_beat_count_next = 0;\n  let mut note_beat_count_next_prev = 0;\n  let mut note_beat_count_next_next = 0;\n  let mut note_beat_count_next_next_prev = 0;\n  let mut note_beat_count_next_next_next = 0;\n  let mut note_beat_count_next_next_next_prev = 0;\n  let mut note_beat_count_next_next_next_next = 0;\n  let mut note_beat_count_next_next_next_next_prev = 0;\n  let mut note_beat_count_next_next_next_next_next = 0;\n  let mut note_beat_count_next_next_next_next_next_prev = 0;\n  let mut note_beat_count_next_next_next_next_next_next = 0;\n  let mut note_beat_count_next_next_next_next_next_next_prev = 0;\n  let mut note_beat_count_next_next_next_next_next_next_next = 0;\n  let mut note_beat_count_next_next_next_next_next_next_next_prev = 0;\n  let mut note_beat_count_next_next_next_next_next_next_next_next = 0;\n  let mut note_beat_count_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_beat_count_next_next_next_next_next_next_next_next_next = 0;\n  let mut note_beat_count_next_next_next_next_next_next_next_next_next_prev = 0;\n  let mut note_beat_count_next_next_next_next_next_next_next_next_next_next = 0;\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp50dn3or2.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      current_beat += 1;\n    }\n    result.push_back(current_beat);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp4850vwq_.rs:23:12\n   |\n23 |     result.push_back(current_beat);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_note += 1;\n      continue;\n    }\n    if i == '|' {\n      current_note += 2;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 4;\n      continue;\n    }\n    if current_note > 0 {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  if current_note > 0 {\n    result.push(current_note);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[16]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpmvy_pnmx.rs:43:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    match i {\n      'o' => {\n        result.push(4);\n        result.push(2);\n      },\n      'o|' => {\n        result.push(2);\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n        result.push(2);\n      },\n      'o' => {\n        result.push(4);\n      },\n      '.' => {\n        result.push(1);\n      },\n      'o' => {\n        result.push(4);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '.'\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpfc5rs3xt.rs:18:10\n   |\n18 |       'o|' => {\n   |          ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(0);\n    } else if i == '|' {\n      result.push(1);\n    } else if i == 'o' {\n      result.push(4);\n    } else {\n      result.push(2);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 2, 4, 2, 4, 2, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp1_552cmc.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      current_note += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_note = 0;\n      current_beat = 0;\n    }\n  }\n  if current_beat != 0 {\n    result.push(current_note);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 1, 1, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmphpfraao2.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      current_note += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_note = 0;\n      current_beat = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmponucp2ww.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_note += 1;\n      continue;\n    }\n    if i == '|' {\n      current_note += 2;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 4;\n      continue;\n    }\n    if i == 'o' {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpfnw_8u99.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      beats.push(1);\n    } else if i == '|' {\n      beats.push(2);\n    } else if i == 'o' {\n      beats.push(4);\n    } else {\n      beats.push(0);\n    }\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpnlkoxwy0.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note = 0;\n  let mut count = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '|' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == 'o' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == 'o' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '|' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '.' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '|' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '.' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '|' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '.' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '|' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '.' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '|' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '.' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '|' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '.' {\n      note += 1;\n      count += 1;\n      continue;\n    }\n    if i == '|' {\n      note += 1;\n      count\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7ego37kq.rs:110:3\n    |\n10  | fn parse_music(music_string: String) -> Vec<isize> {\n    |                                                    - unclosed delimiter\n...\n14  |   for i in music_string.chars() {\n    |                                 - unclosed delimiter\n...\n98  |     if i == '|' {\n    |                 - this delimiter might not be properly closed...\n...\n101 | }\n    | - ...as it matches this but it has different indentation\n...\n110 | }\n    |   ^\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp7ego37kq.rs:100:7\n    |\n98  | /     if i == '|' {\n99  | |       note += 1;\n100 | |       count\n    | |       ^^^^^ expected `()`, found integer\n101 | | }\n    | |_- expected this to be `()`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp7ego37kq.rs:14:3\n    |\n10  |   fn parse_music(music_string: String) -> Vec<isize> {\n    |                                           ---------- expected `Vec<isize>` because of return type\n...\n14  | /   for i in music_string.chars() {\n15  | |     if i == ' ' {\n16  | |       continue;\n17  | |     }\n...   |\n109 | |     assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n110 | | }\n    | |__^ expected struct `Vec`, found `()`\n    |\n    = note: expected struct `Vec<isize>`\n            found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      current_beat += 1;\n    } else if i == '.' {\n      current_beat += 2;\n    } else if i == '|' {\n      current_beat += 4;\n    } else if i == 'o' {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpx4dmkrdu.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(current);\n      current = 0;\n    } else if i == '|' {\n      current += 1;\n    } else if i == 'o' {\n      current += 4;\n    }\n  }\n  result.push(current);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpwj6dopg3.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut beat = 0;\n  for (let i = 0; i < music.len(); i++) {\n    if (music[i] == 0) {\n      beats.push_back(beat);\n      beat = 0;\n    } else {\n      beat += 1;\n    }\n  }\n  beats.push_back(beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmppnpmrx5f.rs:14:8\n   |\n14 |   for (let i = 0; i < music.len(); i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmppnpmrx5f.rs:14:12\n   |\n14 |   for (let i = 0; i < music.len(); i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmppnpmrx5f.rs:14:14\n   |\n14 |   for (let i = 0; i < music.len(); i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmppnpmrx5f.rs:14:13\n   |\n14 |   for (let i = 0; i < music.len(); i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmppnpmrx5f.rs:14:14\n   |\n14 |   for (let i = 0; i < music.len(); i++) {\n   |              ^ expected expression\n\nerror[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmppnpmrx5f.rs:11:78\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                                              ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `chomp` found for reference `&str` in the current scope\n  --> /tmp/tmppnpmrx5f.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                     ^^^^^ method not found in `&str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmppnpmrx5f.rs:11:70\n     |\n11   |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n     |                                                                      ^^^^^^^ ------------------- supplied 1 argument\n     |                                                                      |\n     |                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat = 0;\n    } else if i == '|' {\n      beats.push(current_beat);\n      current_beat = 0;\n    } else {\n      current_beat += 1;\n    }\n  }\n  beats.push(current_beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpubgt13ku.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut note_count = 0;\n  let mut beat_count = 0;\n  let mut note_index = 0;\n  let mut beat_index = 0;\n  let mut note_index_prev = 0;\n  let mut beat_index_prev = 0;\n  let mut note_index_next = 0;\n  let mut beat_index_next = 0;\n  let mut note_index_next_prev = 0;\n  let mut beat_index_next_prev = 0;\n  let mut note_index_next_next = 0;\n  let mut beat_index_next_next = 0;\n  let mut note_index_next_next_prev = 0;\n  let mut beat_index_next_next_prev = 0;\n  let mut note_index_next_next_next = 0;\n  let mut beat_index_next_next_next = 0;\n  let mut note_index_next_next_next_prev = 0;\n  let mut beat_index_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next = 0;\n  let mut beat_index_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_prev = 0;\n  let mut beat_index_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next = 0;\n  let mut beat_index_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_prev = 0;\n  let mut beat_index_next_next_next_next_next_prev = 0;\n  let mut note_index_next_next_next_next_next_next = 0;\n  let mut beat_index_next_next_next_next_next_next = 0;\n  let mut note_index_next_next_next_next_next_next_prev = 0;\n  let mut beat_index_next_next_next_next_next_next_prev = 0;\n  let mut note_index\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpqrgmp61t.rs:42:21\n   |\n42 |   let mut note_index\n   |                     ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqrgmp61t.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note = 0;\n    } else if i == '|' {\n      current_note += 1;\n    } else if i == 'o' {\n      current_note += 2;\n    } else if i == 'o' {\n      current_note += 4;\n    } else {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpbrhti0ws.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpeja0gc06.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    match i {\n      'o' => {\n        result.push(4);\n      },\n      'o|' => {\n        result.push(2);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n      },\n      ' ' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      'o' => {\n        result.push(4);\n      },\n      'o|' => {\n        result.push(2);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n      },\n      ' ' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      'o' => {\n        result.push(4);\n      },\n      'o|' => {\n        result.push(2);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n      },\n      ' ' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      'o' => {\n        result.push(4);\n      },\n      'o|' => {\n        result.push(2);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n      },\n      ' ' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      'o' => {\n        result.push(4);\n      },\n      'o|' => {\n        result.push(2);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpbu0x1jcd.rs:17:10\n   |\n17 |       'o|' => {\n   |          ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(current);\n      current = 0;\n    } else if i == '|' {\n      current += 1;\n    } else if i == 'o' {\n      current += 2;\n    } else {\n      current += 4;\n    }\n  }\n  result.push(current);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpnsier8fj.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(1);\n    } else if i == '|' {\n      result.push(2);\n    } else if i == 'o' {\n      result.push(4);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpqk6m4g6u.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    match i {\n      'o' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n        result.push(4);\n      },\n      'o|' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n      },\n      '.' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      '|' => {\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      'o' | 'o|' | '.' | '|' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n      },\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmp_ll9jg4l.rs:26:10\n   |\n26 |       'o|' => {\n   |          ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == '|' {\n      current_beat += 1;\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_beat += 4;\n      continue;\n    }\n    if i == 'o|' {\n      current_beat += 2;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_beat += 1;\n      continue;\n    }\n    current_note += 1;\n    current_beat += 1;\n  }\n  result.push_back(current_beat);\n  result.push_back(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmp_p2952a9.rs:33:16\n   |\n33 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut last_note = 0;\n  let mut last_beat = 0;\n  let mut beat_count = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      note = 0;\n      last_note = note;\n      last_beat = beat_count;\n      beat_count = 0;\n    } else if i == '|' {\n      note = 1;\n      last_note = note;\n      last_beat = beat_count;\n      beat_count = 0;\n    } else if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = beat_count;\n      beat_count = 0;\n    } else if i == 'o' {\n      note = 3;\n      last_note = note;\n      last_beat = beat_count;\n      beat_count = 0;\n    } else if i == '|' {\n      note = 4;\n      last_note = note;\n      last_beat = beat_count;\n      beat_count = 0;\n    } else {\n      beat_count += 1;\n    }\n    if note != 0 {\n      beats.push(last_beat);\n      last_note = note;\n      last_beat = beat_count;\n      note = 0;\n    }\n  }\n  beats.push(last_beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmp5jk34wtr.rs:58:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut count = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      count += 1;\n    } else if i == '|' {\n      count += 2;\n    } else if i == 'o' {\n      count += 4;\n    } else {\n      count += 1;\n    }\n    if count == 4 {\n      result.push(count);\n      count = 0;\n    }\n  }\n  if count > 0 {\n    result.push(count);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 15]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp6rq9npax.rs:37:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_note = 0;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 4;\n      continue;\n    }\n    if i == 'o|' {\n      current_note += 2;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      continue;\n    }\n    if current_note == 0 {\n      result.push_back(0);\n      continue;\n    }\n    result.push_back(current_note);\n    current_note = 0;\n  }\n  result.push_back(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmp1mq7twr7.rs:29:16\n   |\n29 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let note = music_string[i];\n    if note == '.' {\n      result.push(0);\n    } else if note == '|' {\n      result.push(1);\n    } else if note == 'o' {\n      result.push(4);\n    } else {\n      result.push(2);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmp1sbih2qo.rs:12:12\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmp1sbih2qo.rs:12:18\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    if i == 'o' || i == 'o|' || i == '.' || i == '|' {\n      result.push(1);\n    } else if i == 'o|.' || i == 'o|o' || i == 'o|o|' {\n      result.push(2);\n    } else if i == 'o|o|.' || i == 'o|o|o' {\n      result.push(3);\n    } else if i == 'o|o|o|' {\n      result.push(4);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: character literal may only contain one codepoint\n  --> /tmp/tmpk9c456t_.rs:13:28\n   |\n13 |     if i == 'o' || i == 'o|' || i == '.' || i == '|' {\n   |                            ^^^^^^^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n13 |     if i == 'o' || i == 'o|\" || i == \".' || i == '|' {\n   |                            ~~~~~~~~~~~\n\nerror: character literal may only contain one codepoint\n  --> /tmp/tmpk9c456t_.rs:13:40\n   |\n13 |     if i == 'o' || i == 'o|' || i == '.' || i == '|' {\n   |                                        ^^^^^^^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n13 |     if i == 'o' || i == 'o|' || i == '.\" || i == \"|' {\n   |                                        ~~~~~~~~~~~\n\nerror[E0762]: unterminated character literal\n  --> /tmp/tmpk9c456t_.rs:13:52\n   |\n13 |     if i == 'o' || i == 'o|' || i == '.' || i == '|' {\n   |                                                    ^^^\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    match i {\n      'o' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n        result.push(4);\n      },\n      'o|' => {\n        result.push(4);\n        result.push(2);\n        result.push(1);\n        result.push(2);\n        result.push(2);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(4);\n      },\n      '.' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      ' ' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(1);\n        result.push(\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmp9g7kwy0a.rs:26:10\n   |\n26 |       'o|' => {\n   |          ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut last_beat = 0;\n  for i in music {\n    if i == 0 {\n      beats.push_back(last_beat);\n      last_beat = 0;\n    } else {\n      last_beat += i;\n    }\n  }\n  beats.push_back(last_beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmpvmwk7uu9.rs:11:78\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                                              ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `chomp` found for reference `&str` in the current scope\n  --> /tmp/tmpvmwk7uu9.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                     ^^^^^ method not found in `&str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmpvmwk7uu9.rs:11:70\n     |\n11   |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n     |                                                                      ^^^^^^^ ------------------- supplied 1 argument\n     |                                                                      |\n     |                                                                      expected 0 arguments\n     |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpvmwk7uu9.rs:16:13\n   |\n16 |       beats.push_back(last_beat);\n   |             ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpvmwk7uu9.rs:22:9\n   |\n22 |   beats.push_back(last_beat);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0425, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note += 1;\n    } else if i == '|' {\n      current_note += 2;\n    } else if i == 'o' {\n      current_note += 4;\n    } else {\n      current_note = 0;\n    }\n    if current_note > 0 {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp5_sccymo.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat = 0;\n    } else if i == '|' {\n      current_beat += 1;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      current_beat += 2;\n    }\n    result.push_back(current_beat);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpasnl0q9u.rs:23:12\n   |\n23 |     result.push_back(current_beat);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note += 1;\n      current_beat += 1;\n    } else if i == '|' {\n      current_note += 1;\n      current_beat += 2;\n    } else if i == 'o' {\n      current_note += 2;\n      current_beat += 4;\n    } else {\n      current_note += 4;\n      current_beat += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_note = 0;\n      current_beat = 0;\n    }\n  }\n  if current_beat != 0 {\n    result.push(current_note);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[2, 18]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp_yvubfuk.rs:43:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut count = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      count += 1;\n    } else if i == '|' {\n      count += 2;\n    } else if i == 'o' {\n      count += 4;\n    } else {\n      count += 1;\n    }\n    if count == 4 {\n      result.push(i - '0');\n      count = 0;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmptw3aduo0.rs:24:21\n   |\n24 |       result.push(i - '0');\n   |                   - ^ --- char\n   |                   |\n   |                   char\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0369`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut beat = 0;\n  for (i in music) {\n    if (i == 0) {\n      beats.push_back(beat);\n      beat = 0;\n    } else if (i == '.') {\n      beat += 1;\n    } else if (i == '|') {\n      beat += 2;\n    } else if (i == 'o') {\n      beat += 4;\n    } else {\n      beat += 8;\n    }\n  }\n  beats.push_back(beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmp5org0u85.rs:14:10\n   |\n14 |   for (i in music) {\n   |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp5org0u85.rs:14:7\n   |\n14 |   for (i in music) {\n   |       ^          ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n14 -   for (i in music) {\n14 +   for i in music {\n   | \n\nerror[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmp5org0u85.rs:11:78\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                                              ^^^^^^^^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5org0u85.rs:15:8\n   |\n15 |     if (i == 0) {\n   |        ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (i == 0) {\n15 +     if i == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5org0u85.rs:18:15\n   |\n18 |     } else if (i == '.') {\n   |               ^        ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (i == '.') {\n18 +     } else if i == '.' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5org0u85.rs:20:15\n   |\n20 |     } else if (i == '|') {\n   |               ^        ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (i == '|') {\n20 +     } else if i == '|' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5org0u85.rs:22:15\n   |\n22 |     } else if (i == 'o') {\n   |               ^        ^\n   |\nhelp: remove these parentheses\n   |\n22 -     } else if (i == 'o') {\n22 +     } else if i == 'o' {\n   | \n\nerror[E0599]: no method named `chomp` found for reference `&str` in the current scope\n  --> /tmp/tmp5org0u85.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push_back(current);\n      current = 0;\n    } else if i == '|' {\n      current += 1;\n    } else if i == 'o' {\n      current += 2;\n    } else {\n      current += 4;\n    }\n  }\n  result.push_back(current);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmprvpf7_63.rs:15:14\n   |\n15 |       result.push_back(current);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmprvpf7_63.rs:25:10\n   |\n25 |   result.push_back(current);\n   |          ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(1);\n    } else if i == '|' {\n      result.push(2);\n    } else if i == 'o' {\n      result.push(4);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpqk6m4g6u.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note = 0;\n    } else if i == '|' {\n      current_note += 1;\n    } else if i == 'o' {\n      current_note += 2;\n    } else if i == 'o' {\n      current_note += 4;\n    } else {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpbrhti0ws.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_duration = 0;\n  let mut current_beats = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note += 1;\n      current_duration = 0;\n      current_beats += 1;\n    } else if i == '|' {\n      current_note += 1;\n      current_duration += 1;\n      current_beats += 1;\n    } else if i == 'o' {\n      current_note += 1;\n      current_duration += 2;\n      current_beats += 1;\n    } else {\n      current_note += 1;\n      current_duration += 1;\n    }\n    result.push(current_beats);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 1, 2, 2, 3, 3, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp7tgcj1we.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_beat += 1;\n      continue;\n    }\n    if i == '|' {\n      current_beat += 2;\n      continue;\n    }\n    if i == 'o' {\n      current_beat += 4;\n      continue;\n    }\n    if i == 'o' || i == '.' || i == '|' {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpdn3hkxy5.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_note = 0;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 4;\n      continue;\n    }\n    if i == 'o|' {\n      current_note += 2;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      continue;\n    }\n    if current_note == 0 {\n      result.push(0);\n    } else {\n      result.push(current_note);\n    }\n    current_note = 0;\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpqgntth3d.rs:29:16\n   |\n29 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note += 1;\n    } else if i == '|' {\n      current_note += 2;\n    } else if i == 'o' {\n      current_note += 4;\n    } else {\n      current_note = 0;\n    }\n    if current_note > 0 {\n      result.push(current_note);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 3, 1, 3, 1, 3, 1, 3]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpb9wxxd7f.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_note += 1;\n      continue;\n    }\n    if i == '|' {\n      current_note += 2;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 4;\n      continue;\n    }\n    if i == 'o' {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpfnw_8u99.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut count = 0;\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let c = music_string[i];\n    if c == '.' {\n      count += 1;\n    } else if c == '|' {\n      count += 2;\n    } else if c == 'o' {\n      count += 4;\n    } else {\n      result.push(count);\n      count = 0;\n    }\n  }\n  result.push(count);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmpn8cvr07b.rs:13:12\n   |\n13 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmpn8cvr07b.rs:13:18\n   |\n13 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last_note = 0;\n  let mut last_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      last_beat += 1;\n    } else if i == '|' {\n      last_beat += 2;\n    } else if i == 'o' {\n      last_beat += 4;\n    } else if i == 'o' {\n      last_note += 1;\n    } else if i == '|' {\n      last_note += 2;\n    } else if i == '.' {\n      last_note += 4;\n    } else if i == 'o' {\n      last_note += 8;\n    } else if i == 'o' {\n      last_note += 16;\n    } else if i == '.' {\n      last_note += 32;\n    } else if i == 'o' {\n      last_note += 64;\n    } else if i == 'o' {\n      last_note += 128;\n    } else if i == '.' {\n      last_note += 256;\n    } else if i == 'o' {\n      last_note += 512;\n    } else if i == 'o' {\n      last_note += 1024;\n    } else if i == '.' {\n      last_note += 2048;\n    } else if i == 'o' {\n      last_note += 4096;\n    } else if i == 'o' {\n      last_note += 8192;\n    } else if i == '.' {\n      last_note += 16384;\n    } else if i == 'o' {\n      last_note += 32768;\n    } else if i == 'o' {\n      last_note += 65536;\n    } else if i == '.' {\n      last_note += 131072;\n    } else if i == 'o' {\n      last_note += 262144;\n    } else if i == 'o' {\n      last_note += 524288;\n    } else if i == '.' {\n      last_note += 1048576;\n    } else if i == 'o' {\n      \n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpcqof_hra.rs:74:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n14 |   for i in music_string.chars() {\n   |                                 - unclosed delimiter\n...\n63 |     } else if i == 'o' {\n   |                        - this delimiter might not be properly closed...\n64 |       \n65 | }\n   | - ...as it matches this but it has different indentation\n...\n74 | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcqof_hra.rs:14:3\n   |\n10 |   fn parse_music(music_string: String) -> Vec<isize> {\n   |                                           ---------- expected `Vec<isize>` because of return type\n...\n14 | /   for i in music_string.chars() {\n15 | |     if i == '.' {\n16 | |       last_beat += 1;\n17 | |     } else if i == '|' {\n...  |\n73 | |     assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n74 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut i = 0;\n  while (i < music.len) {\n    let beat = music[i];\n    if (beat == 0) {\n      beats.push(0);\n      i += 1;\n    } else if (beat == 1) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 2) {\n      beats.push(2);\n      i += 1;\n    } else if (beat == 3) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 4) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 5) {\n      beats.push(2);\n      i += 1;\n    } else if (beat == 6) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 7) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 8) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 9) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 10) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 11) {\n      beats.push(2);\n      i += 1;\n    } else if (beat == 12) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 13) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 14) {\n      beats.push(1);\n      i += 1;\n    } else if (beat == 15) {\n      beats.push(4);\n      i += 1;\n    } else if (beat == 16) {\n      beats.push(4);\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpdbpf5i4c.rs:76:3\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |                                                    - unclosed delimiter\n...\n14 |   while (i < music.len) {\n   |                         - unclosed delimiter\n...\n64 |     } else if (beat == 16) {\n   |                            - this delimiter might not be properly closed...\n...\n67 | }\n   | - ...as it matches this but it has different indentation\n...\n76 | }\n   |   ^\n\nerror[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmpdbpf5i4c.rs:11:78\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp(1).to_i()).collect(Collectors.to_vec());\n   |                                                                              ^^^^^^^^^^ not found in this scope\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpdbpf5i4c.rs:14:9\n   |\n14 |   while (i < music.len) {\n   |         ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -   while (i < music.len) {\n14 +   while i < music.len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdbpf5i4c.rs:16:8\n   |\n16 |     if (beat == 0) {\n   |        ^         ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (beat == 0) {\n16 +     if beat == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdbpf5i4c.rs:19:15\n   |\n19 |     } else if (beat == 1) {\n   |               ^         ^\n   |\nhelp: remove these parentheses\n   |\n19 -     } else if (beat == 1) {\n19 +     } else if beat == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdbpf5i4c.rs:22:15\n   |\n22 |     } else if (beat == 2) {\n   |               ^         ^\n   |\nhelp: remove these parentheses\n   |\n22 -     } else if (beat == 2) {\n22 +     } else if beat == 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdbpf5i4c.rs:25:15\n   |\n25 |     } else if (beat == 3) {\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n      current_note = 0;\n    } else if i == '|' {\n      current_beat += 1;\n      current_note += 1;\n    } else if i == 'o' {\n      current_beat += 4;\n      current_note = 0;\n    } else {\n      current_note += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_beat = 0;\n      current_note = 0;\n    }\n  }\n  if current_beat > 0 {\n    result.push(current_note);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 0, 0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp1nx2usm9.rs:42:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpeja0gc06.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let beat = 0;\n    let note = music_string[i];\n    if note == '.' {\n      beat = 1;\n    } else if note == '|' {\n      beat = 2;\n    } else if note == 'o' {\n      beat = 4;\n    } else {\n      panic!(\"Unknown note: '{}'\", note);\n    }\n    result.push_back(beat);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmpnk25s_6w.rs:12:12\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmpnk25s_6w.rs:12:18\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 1;\n      current_beat += 4;\n      continue;\n    }\n    if i == 'o|' {\n      current_note += 1;\n      current_beat += 2;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' | i == 'o|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' | i == 'o|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' | i == 'o|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == 'o' | i == 'o|' {\n      current_note += 1;\n      current_beat += 1;\n      continue;\n    }\n    if i == '.' | i == '|' {\n      current_note += 1;\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmptpohzgv0.rs:33:16\n   |\n33 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.chomp_all(\".\")).collect(Collectors.to_vec());\n  let mut beats = Vec::new();\n  let mut i = 0;\n  while i < music.len {\n    let beat = music[i];\n    if beat == \"o\" {\n      beats.push(4);\n    } else if beat == \"o|\" {\n      beats.push(2);\n    } else if beat == \".|\" {\n      beats.push(1);\n    } else {\n      beats.push(0);\n    }\n    i += 1;\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmpxcqkkb00.rs:11:77\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp_all(\".\")).collect(Collectors.to_vec());\n   |                                                                             ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `chomp_all` found for reference `&str` in the current scope\n  --> /tmp/tmpxcqkkb00.rs:11:53\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.chomp_all(\".\")).collect(Collectors.to_vec());\n   |                                                     ^^^^^^^^^ method not found in `&str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmpxcqkkb00.rs:11:69\n     |\n11   |   let mut music = music_string.split(\" \").map(|s| s.chomp_all(\".\")).collect(Collectors.to_vec());\n     |                                                                     ^^^^^^^ ------------------- supplied 1 argument\n     |                                                                     |\n     |                                                                     expected 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0425, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last_note = 0;\n  let mut last_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      last_beat += 1;\n      continue;\n    }\n    if i == '.' {\n      last_beat += 1;\n      last_note += 1;\n      continue;\n    }\n    if i == '|' {\n      last_beat += 1;\n      last_note += 2;\n      continue;\n    }\n    if i == 'o' {\n      last_beat += 4;\n      last_note += 1;\n      continue;\n    }\n    if i == 'o|' {\n      last_beat += 2;\n      last_note += 1;\n      continue;\n    }\n    if i == '.'|'|' {\n      last_beat += 1;\n      last_note += 1;\n      continue;\n    }\n    if i == '.'|'.' {\n      last_beat += 1;\n      last_note += 2;\n      continue;\n    }\n    if i == '.'|'o' {\n      last_beat += 1;\n      last_note += 3;\n      continue;\n    }\n    if i == '.'|'o|' {\n      last_beat += 1;\n      last_note += 4;\n      continue;\n    }\n    if i == '.'|'o|'|' {\n      last_beat += 1;\n      last_note += 5;\n      continue;\n    }\n    if i == '.'|'o|'|'|' {\n      last_beat += 1;\n      last_note += 6;\n      continue;\n    }\n    if i == '.'|'o|'|'|'|' {\n      last_beat += 1;\n      last_note += 7;\n      continue;\n    }\n    if i == '.'|'o|'|'|'|'|' {\n      last_beat += 1;\n      last_note += 8;\n      continue;\n    }\n    if i == '.'|'o|'|'|\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmprf6r7g63.rs:34:16\n   |\n34 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut last_note = 0;\n  let mut last_beat = 0;\n  let mut beat = 0;\n  let mut last_beat_note = 0;\n  let mut last_beat_note_beat = 0;\n  let mut last_beat_note_beat_note = 0;\n  let mut last_beat_note_beat_note_beat = 0;\n  let mut last_beat_note_beat_note_beat_note = 0;\n  let mut last_beat_note_beat_note_beat_note_beat = 0;\n  let mut last_beat_note_beat_note_beat_note_beat_note = 0;\n  let mut last_beat_note_beat_note_beat_note_beat_note_beat = 0;\n  let mut last_beat_note_beat_note_beat_note_beat_note_beat_note = 0;\n  let mut last_beat_note_beat_note_beat_note_beat_note_beat_note_beat = 0;\n  let mut last_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note = 0;\n  let mut last_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat = 0;\n  let mut last_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note = 0;\n  let mut last_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat = 0;\n  let mut last_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note = 0;\n  let mut last_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat = 0;\n  let mut last_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpeevrci1p.rs:32:90\n   |\n32 |   let mut last_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat\n   |                                                                                          ^ help: add `;` here\n33 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeevrci1p.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      beat += 1;\n    } else if i == '|' {\n      beat += 2;\n    } else if i == 'o' {\n      beat += 4;\n    } else {\n      beats.push(beat);\n      beat = 0;\n    }\n  }\n  beats.push(beat);\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmp7o7si3cf.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut last_note = 0;\n  let mut last_beat = 0;\n  let mut last_last_beat = 0;\n  let mut last_last_note = 0;\n  let mut last_last_last_beat = 0;\n  let mut last_last_last_note = 0;\n  let mut last_last_last_last_beat = 0;\n  let mut last_last_last_last_note = 0;\n  let mut last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_note = 0;\n  let mut last_last_last_last_last_last_last_last_last_last_last_last_beat = 0;\n  let mut last_last_last_last_last_last_last_last_last_last\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpduy8crl_.rs:36:60\n   |\n36 |   let mut last_last_last_last_last_last_last_last_last_last\n   |                                                            ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpduy8crl_.rs:10:41\n   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      current_note += 1;\n      continue;\n    }\n    if i == '|' {\n      current_note += 2;\n      continue;\n    }\n    if i == 'o' {\n      current_note += 4;\n      continue;\n    }\n    if i == 'o' {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpfnw_8u99.rs:40:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut curr_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(curr_note);\n      curr_note = 0;\n    } else if i == '|' {\n      curr_note += 1;\n    } else if i == 'o' {\n      curr_note += 4;\n    } else {\n      curr_note += 2;\n    }\n  }\n  result.push(curr_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpwfp3dbbv.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let beat = 0;\n    let note = music_string[i];\n    if note == '.' {\n      beat = 1;\n    } else if note == '|' {\n      beat = 2;\n    } else if note == 'o' {\n      beat = 4;\n    }\n    result.push_back(beat);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmps5m_ms64.rs:12:12\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmps5m_ms64.rs:12:18\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  let mut current_beat = 0;\n  let mut current_note_duration = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note_duration = 0;\n      current_note += 1;\n      current_beat += 1;\n    } else if i == '|' {\n      current_note_duration += 1;\n      current_beat += 1;\n    } else if i == 'o' {\n      current_note_duration += 4;\n      current_beat += 1;\n    } else {\n      current_note_duration += 2;\n      current_beat += 1;\n    }\n    if current_beat == 4 {\n      result.push(current_note);\n      current_note = 0;\n      current_beat = 0;\n      current_note_duration = 0;\n    }\n  }\n  if current_beat != 0 {\n    result.push(current_note);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp9zl01frh.rs:46:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpeja0gc06.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_beat = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_beat += 1;\n    } else if i == '|' {\n      current_beat += 2;\n    } else if i == 'o' {\n      current_beat += 4;\n    } else {\n      result.push(current_beat);\n      current_beat = 0;\n    }\n  }\n  result.push(current_beat);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpeja0gc06.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let note = music_string[i];\n    if note == '.' {\n      result.push(0);\n    } else if note == '|' {\n      result.push(1);\n    } else if note == 'o' {\n      result.push(2);\n    } else if note == 'o|' {\n      result.push(3);\n    } else {\n      result.push(4);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpoar50mdu.rs:20:26\n   |\n20 |     } else if note == 'o|' {\n   |                          ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    match i {\n      'o' => {\n        result.push(4);\n      },\n      'o|' => {\n        result.push(2);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n      },\n      ' ' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n      },\n      ' ' => {\n        result.push(1);\n      },\n      'o' => {\n        result.push(4);\n      },\n      'o|' => {\n        result.push(2);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n      },\n      ' ' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n      },\n      ' ' => {\n        result.push(1);\n      },\n      'o' => {\n        result.push(4);\n      },\n      'o|' => {\n        result.push(2);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n      },\n      ' ' => {\n        result.push(1);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n        result.push(1);\n      },\n      ' ' => {\n        result.push(1);\n      },\n      'o' => {\n        result.push(4);\n      },\n      'o|' => {\n        result.push(2);\n      },\n      '.' => {\n        result.push(1);\n      },\n      '|' => {\n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpbqn_pkzo.rs:17:10\n   |\n17 |       'o|' => {\n   |          ^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut count = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      count += 1;\n    } else if i == '|' {\n      count += 2;\n    } else if i == 'o' {\n      count += 4;\n    } else {\n      count += 1;\n    }\n    if count == 4 {\n      result.push(i32(count));\n      count = 0;\n    }\n  }\n  if count > 0 {\n    result.push(i32(count));\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "error[E0423]: expected function, found builtin type `i32`\n  --> /tmp/tmpdge_lspi.rs:24:19\n   |\n24 |       result.push(i32(count));\n   |                   ^^^ not a function\n\nerror[E0423]: expected function, found builtin type `i32`\n  --> /tmp/tmpdge_lspi.rs:29:17\n   |\n29 |     result.push(i32(count));\n   |                 ^^^ not a function\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut beats = Vec::new();\n  let mut note = 0;\n  let mut last_note = 0;\n  let mut last_beat = 0;\n  for i in music_string.chars() {\n    if i == ' ' {\n      continue;\n    }\n    if i == '.' {\n      note = 0;\n      last_note = note;\n      last_beat = beats.len();\n      continue;\n    }\n    if i == '|' {\n      note = 1;\n      last_note = note;\n      last_beat = beats.len();\n      continue;\n    }\n    if i == 'o' {\n      note = 2;\n      last_note = note;\n      last_beat = beats.len();\n      continue;\n    }\n    if i == 'o|' {\n      note = 3;\n      last_note = note;\n      last_beat = beats.len();\n      continue;\n    }\n    if i == '.' | i == '|' | i == 'o' | i == 'o|' {\n      note = 4;\n      last_note = note;\n      last_beat = beats.len();\n      continue;\n    }\n    if note == 0 {\n      continue;\n    }\n    if note == 1 {\n      beats.push(last_beat + 1);\n      note = 0;\n      last_note = note;\n      last_beat = beats.len();\n      continue;\n    }\n    if note == 2 {\n      beats.push(last_beat + 2);\n      note = 0;\n      last_note = note;\n      last_beat = beats.len();\n      continue;\n    }\n    if note == 3 {\n      beats.push(last_beat + 3);\n      note = 0;\n      last_note = note;\n      last_beat = beats.len();\n      continue;\n    }\n    if note == 4 {\n      beats.push(last_beat + 4);\n      note = 0;\n      last_note = note;\n      last_beat = beats.len();\n      continue;\n    }\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpob0bcn1m.rs:37:16\n   |\n37 |     if i == 'o|' {\n   |                ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut current_note = 0;\n  for i in music_string.chars() {\n    if i == '.' {\n      current_note += 1;\n    } else if i == '|' {\n      current_note += 2;\n    } else if i == 'o' {\n      current_note += 4;\n    } else {\n      result.push(current_note);\n      current_note = 0;\n    }\n  }\n  result.push(current_note);\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0]`,\n right: `[]`', /tmp/tmpn8125sem.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music_vector = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      music_vector.push(1);\n    } else if i == '|' {\n      music_vector.push(2);\n    } else if i == 'o' {\n      music_vector.push(4);\n    } else {\n      music_vector.push(0);\n    }\n  }\n  return music_vector;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp5k4kc8j4.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let note = music_string[i];\n    if note == '.' {\n      result.push(0);\n    } else if note == '|' {\n      result.push(1);\n    } else if note == 'o' {\n      result.push(2);\n    } else if note == 'o|' {\n      result.push(3);\n    } else {\n      result.push(4);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0762]: unterminated character literal\n  --> /tmp/tmpoar50mdu.rs:20:26\n   |\n20 |     } else if note == 'o|' {\n   |                          ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0762`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in music_string.chars() {\n    if i == '.' {\n      result.push(1);\n    } else if i == '|' {\n      result.push(2);\n    } else if i == 'o' {\n      result.push(4);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292729,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpy56x5xff.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut result = Vec::new();\n  for isize i = 0; i < music_string.len(); i += 1 {\n    let note = music_string[i];\n    let count = 1;\n    if (note == '.') {\n      count = 4;\n    } else if (note == '|') {\n      count = 2;\n    } else if (note == 'o') {\n      count = 1;\n    }\n    result.push_back(count);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmp0iwzawp7.rs:12:12\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmp0iwzawp7.rs:12:18\n   |\n12 |   for isize i = 0; i < music_string.len(); i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfn parse_music(music_string: String) -> Vec<isize> {\n  let mut music = music_string.split(\" \").map(|s| s.trim()).collect(Collectors.toList());\n  let mut beats = Vec::new();\n  let mut beat = 0;\n  let mut last_beat = 0;\n  for i in music {\n    if i == \".\" {\n      beat += 1;\n      last_beat = beat;\n    } else if i == \"|\" {\n      beat += 1;\n      last_beat = beat;\n    } else if i == \"o\" {\n      beat += 4;\n      last_beat = beat;\n    } else if i == \"o|\" {\n      beat += 2;\n      last_beat = beat;\n    }\n    beats.push_back(last_beat);\n  }\n  return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `Collectors` in this scope\n  --> /tmp/tmpom_e1ja4.rs:11:69\n   |\n11 |   let mut music = music_string.split(\" \").map(|s| s.trim()).collect(Collectors.toList());\n   |                                                                     ^^^^^^^^^^ not found in this scope\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmpom_e1ja4.rs:11:61\n     |\n11   |   let mut music = music_string.split(\" \").map(|s| s.trim()).collect(Collectors.toList());\n     |                                                             ^^^^^^^ ------------------- supplied 1 argument\n     |                                                             |\n     |                                                             expected 0 arguments\n     |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpom_e1ja4.rs:29:11\n   |\n29 |     beats.push_back(last_beat);\n   |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0425, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}