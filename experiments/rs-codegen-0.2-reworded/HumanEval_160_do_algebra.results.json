{
  "name": "HumanEval_160_do_algebra",
  "language": "rs",
  "prompt": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n",
  "tests": "}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result += num * result;\n    } else if op == \"/\" {\n      result += num / result;\n    } else if op == \"//\" {\n      result += num / result;\n    } else if op == \"**\" {\n      result += num ** result;\n    } else if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpwzldb4b3.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwzldb4b3.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpwzldb4b3.rs:31:22\n   |\n31 |       result += num ** result;\n   |                      ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for (let i = 0; i < operand.len; i++) {\n    let op = operator[i];\n    let operand_i = operand[i];\n    if (op == \"+\") {\n      result += operand_i;\n    } else if (op == \"-\") {\n      result -= operand_i;\n    } else if (op == \"*\") {\n      result *= operand_i;\n    } else if (op == \"//\") {\n      result /= operand_i;\n    } else if (op == \"**\") {\n      result = pow(result, operand_i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp89ew71ul.rs:21:8\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp89ew71ul.rs:21:12\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp89ew71ul.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp89ew71ul.rs:21:13\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp89ew71ul.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for (let i = 0; i < operand.len; i++) {\n    let op = operator[i];\n    let operand_i = operand[i];\n    if (op == \"+\") {\n      result += operand_i;\n    } else if (op == \"-\") {\n      result -= operand_i;\n    } else if (op == \"*\") {\n      result *= operand_i;\n    } else if (op == \"//\") {\n      result /= operand_i;\n    } else if (op == \"**\") {\n      result = pow(operand_i, result);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpyj490uwx.rs:21:8\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpyj490uwx.rs:21:12\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpyj490uwx.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyj490uwx.rs:21:13\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpyj490uwx.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpjcdns6pe.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpjcdns6pe.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for (let i = 0; i < operand.len; i++) {\n    let op = operator[i];\n    let operand_i = operand[i];\n    if (op == \"+\") {\n      result += operand_i;\n    } else if (op == \"-\") {\n      result -= operand_i;\n    } else if (op == \"*\") {\n      result *= operand_i;\n    } else if (op == \"//\") {\n      result /= operand_i;\n    } else if (op == \"**\") {\n      result = pow(operand_i, result);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpyj490uwx.rs:21:8\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpyj490uwx.rs:21:12\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpyj490uwx.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyj490uwx.rs:21:13\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpyj490uwx.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for (let i = 0; i < operand.len; i++) {\n    let op = operator[i];\n    let operand_i = operand[i];\n    if (op == \"+\") {\n      result += operand_i;\n    } else if (op == \"-\") {\n      result -= operand_i;\n    } else if (op == \"*\") {\n      result *= operand_i;\n    } else if (op == \"//\") {\n      result /= operand_i;\n    } else if (op == \"**\") {\n      result = pow(operand_i, result);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpyj490uwx.rs:21:8\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpyj490uwx.rs:21:12\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpyj490uwx.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyj490uwx.rs:21:13\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpyj490uwx.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for (let i = 0; i < operand.len; i++) {\n    let op = operator[i];\n    let operand_i = operand[i];\n    if (op == \"+\") {\n      result += operand_i;\n    } else if (op == \"-\") {\n      result -= operand_i;\n    } else if (op == \"*\") {\n      result *= operand_i;\n    } else if (op == \"//\") {\n      result /= operand_i;\n    } else if (op == \"**\") {\n      result = pow(operand_i, result);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpyj490uwx.rs:21:8\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpyj490uwx.rs:21:12\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpyj490uwx.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyj490uwx.rs:21:13\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpyj490uwx.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else if op == \"+\" {\n            result = result + num;\n        } else if op == \"-\" {\n            result = result - num;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp8n2w5bex.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8n2w5bex.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result += num * result;\n    } else if op == \"/\" {\n      result += num / result;\n    } else if op == \"//\" {\n      result += num // result;\n    } else if op == \"**\" {\n      result += num ** result;\n    } else if op == \"+\" {\n      result += num + result;\n    } else if op == \"-\" {\n      result += num - result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpa4smhn3d.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpa4smhn3d.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpa4smhn3d.rs:31:22\n   |\n31 |       result += num ** result;\n   |                      ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result **= num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpj_91vjsp.rs:33:15\n   |\n33 |       result **= num;\n   |               ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpj_91vjsp.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpj_91vjsp.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else {\n            result += num * result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpyjt_ck0y.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpyjt_ck0y.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpyjt_ck0y.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else {\n            result += num * result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpyjt_ck0y.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpyjt_ck0y.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpyjt_ck0y.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpgixd9lb7.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgixd9lb7.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpgixd9lb7.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmprg1fs4it.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprg1fs4it.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmprg1fs4it.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp9l8itrbp.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9l8itrbp.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpgixd9lb7.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgixd9lb7.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpgixd9lb7.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpldz28bj3.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpldz28bj3.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpldz28bj3.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result **= num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpeo9n61m0.rs:33:15\n   |\n33 |       result **= num;\n   |               ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpeo9n61m0.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    switch op {\n      case \"+\":\n        result += num;\n        break;\n      case \"-\":\n        result -= num;\n        break;\n      case \"*\":\n        result *= num;\n        break;\n      case \"//\":\n        result /= num;\n        break;\n      case \"**\":\n        result **= num;\n        break;\n      default:\n        break;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `op`\n  --> /tmp/tmpen7hpzq8.rs:24:12\n   |\n24 |     switch op {\n   |            ^^ expected one of 8 possible tokens\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpen7hpzq8.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpen7hpzq8.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpzunl57qn.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let operand_i = operand[i];\n    let operand_i_next = operand[i + 1];\n    if op == \"+\" {\n      result += operand_i + operand_i_next;\n    } else if op == \"-\" {\n      result -= operand_i + operand_i_next;\n    } else if op == \"*\" {\n      result *= operand_i + operand_i_next;\n    } else if op == \"//\" {\n      result /= operand_i + operand_i_next;\n    } else if op == \"**\" {\n      result **= operand_i + operand_i_next;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp7iud355m.rs:34:15\n   |\n34 |       result **= operand_i + operand_i_next;\n   |               ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7iud355m.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result += num * num;\n    } else if op == \"/\" {\n      result += num / num;\n    } else if op == \"//\" {\n      result += num / num;\n    } else if op == \"**\" {\n      result += num * num;\n    } else if op == \"+\" {\n      result += num + num;\n    } else if op == \"-\" {\n      result += num - num;\n    } else {\n      panic!(\"Unknown operator\");\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp8pooivoo.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8pooivoo.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let operand_i = operand[i];\n    let operand_i_next = operand[i + 1];\n    let result_i = 0;\n    if op == \"+\" {\n      result_i = result + operand_i;\n    } else if op == \"-\" {\n      result_i = result - operand_i;\n    } else if op == \"*\" {\n      result_i = result * operand_i;\n    } else if op == \"//\" {\n      result_i = result / operand_i;\n    } else if op == \"**\" {\n      result_i = result ** operand_i;\n    }\n    result = result_i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpv9n2g9tl.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpv9n2g9tl.rs:35:26\n   |\n35 |       result_i = result ** operand_i;\n   |                          ^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpgixd9lb7.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgixd9lb7.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpgixd9lb7.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpzunl57qn.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else {\n            result += num * result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpyjt_ck0y.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpyjt_ck0y.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpyjt_ck0y.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let value = operand[i];\n        if op == \"+\" {\n            result += value;\n        } else if op == \"-\" {\n            result -= value;\n        } else if op == \"*\" {\n            result *= value;\n        } else if op == \"//\" {\n            result /= value;\n        } else if op == \"**\" {\n            result **= value;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpf1oennqo.rs:33:21\n   |\n33 |             result **= value;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpf1oennqo.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpf1oennqo.rs:23:21\n   |\n23 |         let value = operand[i];\n   |                     ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for (let i = 0; i < operand.len; i++) {\n    let op = operator[i];\n    let operand_i = operand[i];\n    let next_result = 0;\n    if (op == \"+\") {\n      next_result = result + operand_i;\n    } else if (op == \"-\") {\n      next_result = result - operand_i;\n    } else if (op == \"*\") {\n      next_result = result * operand_i;\n    } else if (op == \"//\") {\n      next_result = result // operand_i;\n    } else if (op == \"**\") {\n      next_result = result ** operand_i;\n    }\n    result = next_result;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp1cz5jdrg.rs:21:8\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp1cz5jdrg.rs:21:12\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp1cz5jdrg.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp1cz5jdrg.rs:21:13\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp1cz5jdrg.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let operand_i = operand[i];\n    let operand_i_next = operand[i + 1];\n    if op == \"+\" {\n      result += operand_i + operand_i_next;\n    } else if op == \"-\" {\n      result -= operand_i + operand_i_next;\n    } else if op == \"*\" {\n      result *= operand_i + operand_i_next;\n    } else if op == \"//\" {\n      result /= operand_i + operand_i_next;\n    } else if op == \"**\" {\n      result **= operand_i + operand_i_next;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp7iud355m.rs:34:15\n   |\n34 |       result **= operand_i + operand_i_next;\n   |               ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7iud355m.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpb350n4hq.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpb350n4hq.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    let next_num = operand[i + 1];\n    if op == \"+\" {\n      result += num + next_num;\n    } else if op == \"-\" {\n      result -= num + next_num;\n    } else if op == \"*\" {\n      result *= num + next_num;\n    } else if op == \"//\" {\n      result /= num + next_num;\n    } else if op == \"**\" {\n      result = num + next_num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmy2mye2z.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let value = operand[i];\n    if op == \"*\" {\n      result = result * value;\n    } else if op == \"/\" {\n      result = result / value;\n    } else if op == \"**\" {\n      result = result ** value;\n    } else if op == \"+\" {\n      result = result + value;\n    } else if op == \"-\" {\n      result = result - value;\n    } else {\n      panic!(\"Invalid operator\");\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpkfgtl1h1.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkfgtl1h1.rs:23:17\n   |\n23 |     let value = operand[i];\n   |                 ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmprg1fs4it.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprg1fs4it.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmprg1fs4it.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let operand_i = operand[i];\n    let operand_i_next = operand[i + 1];\n    let result_i = result;\n    switch op {\n      case \"+\":\n        result = result + operand_i;\n        break;\n      case \"-\":\n        result = result - operand_i;\n        break;\n      case \"*\":\n        result = result * operand_i;\n        break;\n      case \"//\":\n        result = result // operand_i;\n        break;\n      case \"**\":\n        result = result ** operand_i;\n        break;\n      default:\n        panic!(\"Unknown operator\");\n    }\n    if result_i != result {\n      panic!(\"Operator result not match\");\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `op`\n  --> /tmp/tmp4ytpdckr.rs:26:12\n   |\n26 |     switch op {\n   |            ^^ expected one of 8 possible tokens\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp4ytpdckr.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let operand_i = operand[i];\n    let operand_i_next = operand[i + 1];\n    let result_i = result;\n    switch op {\n      case \"+\":\n        result = result + operand_i;\n        break;\n      case \"-\":\n        result = result - operand_i;\n        break;\n      case \"*\":\n        result = result * operand_i;\n        break;\n      case \"//\":\n        result = result // operand_i;\n        break;\n      case \"**\":\n        result = result ** operand_i;\n        break;\n      default:\n        panic!(\"Unknown operator: {}\", op);\n    }\n    if result_i != result {\n      panic!(\"Operator {} does not match operand {}\", op, operand_i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `op`\n  --> /tmp/tmpvki8fy1s.rs:26:12\n   |\n26 |     switch op {\n   |            ^^ expected one of 8 possible tokens\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpvki8fy1s.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let value = operand[i];\n        if op == \"*\" {\n            result += value * result;\n        } else if op == \"/\" {\n            result += value / result;\n        } else if op == \"//\" {\n            result += value // result;\n        } else if op == \"**\" {\n            result += value ** result;\n        } else if op == \"+\" {\n            result += value;\n        } else if op == \"-\" {\n            result -= value;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpu8rf01kd.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpu8rf01kd.rs:23:21\n   |\n23 |         let value = operand[i];\n   |                     ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpu8rf01kd.rs:31:30\n   |\n31 |             result += value ** result;\n   |                              ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        } else {\n            panic!(\"Invalid operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpauctlxx3.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpauctlxx3.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpauctlxx3.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpldz28bj3.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpldz28bj3.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpldz28bj3.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpzunl57qn.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result += num * result;\n    } else if op == \"/\" {\n      result += num / result;\n    } else if op == \"//\" {\n      result += num // result;\n    } else if op == \"**\" {\n      result += num ** result;\n    } else if op == \"+\" {\n      result += num + result;\n    } else if op == \"-\" {\n      result += num - result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpa4smhn3d.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpa4smhn3d.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpa4smhn3d.rs:31:22\n   |\n31 |       result += num ** result;\n   |                      ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        let next_op = operator[i + 1];\n        let next_num = operand[i + 1];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpgc83p0mv.rs:35:21\n   |\n35 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpgc83p0mv.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else if op == \"+\" {\n            result = result + num;\n        } else if op == \"-\" {\n            result = result - num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp1ezyx9vt.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1ezyx9vt.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp9l8itrbp.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9l8itrbp.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    let next_num = operand[i + 1];\n    if op == \"+\" {\n      result += num + next_num;\n    } else if op == \"-\" {\n      result -= num - next_num;\n    } else if op == \"*\" {\n      result *= num * next_num;\n    } else if op == \"//\" {\n      result /= num / next_num;\n    } else if op == \"**\" {\n      result = num ** next_num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpep7wp9ym.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpep7wp9ym.rs:34:21\n   |\n34 |       result = num ** next_num;\n   |                     ^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        let next_num = operand[i + 1];\n        let next_op = operator[i + 1];\n        if op == \"+\" {\n            result += num + next_num;\n        } else if op == \"-\" {\n            result += num - next_num;\n        } else if op == \"*\" {\n            result += num * next_num;\n        } else if op == \"//\" {\n            result += num / next_num;\n        } else if op == \"**\" {\n            result += num ** next_num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpb8mxrw2x.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpb8mxrw2x.rs:35:28\n   |\n35 |             result += num ** next_num;\n   |                            ^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpjcdns6pe.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpjcdns6pe.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpzunl57qn.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else {\n            result += num * result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpyjt_ck0y.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpyjt_ck0y.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpyjt_ck0y.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp9l8itrbp.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9l8itrbp.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for (let i = 0; i < operand.len; i++) {\n    let op = operator[i];\n    let num = operand[i];\n    if (op == \"+\") {\n      result += num;\n    } else if (op == \"-\") {\n      result -= num;\n    } else if (op == \"*\") {\n      result *= num;\n    } else if (op == \"//\") {\n      result /= num;\n    } else if (op == \"**\") {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpmx_gh59v.rs:21:8\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpmx_gh59v.rs:21:12\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpmx_gh59v.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpmx_gh59v.rs:21:13\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpmx_gh59v.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpjcdns6pe.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpjcdns6pe.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result += num;\n    } else if op == \"/\" {\n      result -= num;\n    } else if op == \"**\" {\n      result *= num;\n    } else if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else {\n      panic!(\"Unknown operator\");\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp9yp1ri5t.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp9yp1ri5t.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for (let i = 0; i < operand.len; i++) {\n    let op = operator[i];\n    let num = operand[i];\n    if (op == \"*\") {\n      result = result * num;\n    } else if (op == \"/\") {\n      result = result / num;\n    } else if (op == \"//\") {\n      result = result // num;\n    } else if (op == \"**\") {\n      result = result ** num;\n    } else if (op == \"+\") {\n      result = result + num;\n    } else if (op == \"-\") {\n      result = result - num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp38_z_viz.rs:21:8\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp38_z_viz.rs:21:12\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp38_z_viz.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp38_z_viz.rs:21:13\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp38_z_viz.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        let next_num = operand[i + 1];\n        if op == \"+\" {\n            result += num + next_num;\n        } else if op == \"-\" {\n            result -= num + next_num;\n        } else if op == \"*\" {\n            result *= num + next_num;\n        } else if op == \"//\" {\n            result /= num + next_num;\n        } else if op == \"**\" {\n            result **= num + next_num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpzxg5i0_h.rs:34:21\n   |\n34 |             result **= num + next_num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzxg5i0_h.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        let next_num = operand[i + 1];\n        if op == \"+\" {\n            result += num + next_num;\n        } else if op == \"-\" {\n            result -= num - next_num;\n        } else if op == \"*\" {\n            result *= num * next_num;\n        } else if op == \"//\" {\n            result /= num / next_num;\n        } else if op == \"**\" {\n            result = num ** next_num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp8hxc4fc4.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp8hxc4fc4.rs:34:27\n   |\n34 |             result = num ** next_num;\n   |                           ^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpldz28bj3.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpldz28bj3.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpldz28bj3.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp7imu5les.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp7imu5les.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7imu5les.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result += num * result;\n    } else if op == \"/\" {\n      result += num / result;\n    } else if op == \"//\" {\n      result += num / result;\n    } else if op == \"**\" {\n      result += num ** result;\n    } else if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else {\n      panic!(\"Unknown operator: {}\", op);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpo7baktrw.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpo7baktrw.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpo7baktrw.rs:31:22\n   |\n31 |       result += num ** result;\n   |                      ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        let next_num = operand[i + 1];\n        if op == \"+\" {\n            result += num + next_num;\n        } else if op == \"-\" {\n            result -= num + next_num;\n        } else if op == \"*\" {\n            result *= num + next_num;\n        } else if op == \"//\" {\n            result /= num + next_num;\n        } else if op == \"**\" {\n            result = num + next_num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3ue12nzg.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else if op == \"+\" {\n            result = result + num;\n        } else if op == \"-\" {\n            result = result - num;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp8n2w5bex.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8n2w5bex.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp9l8itrbp.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9l8itrbp.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else {\n            result += num * result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpyjt_ck0y.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpyjt_ck0y.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpyjt_ck0y.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for (let i = 0; i < operand.len; i++) {\n    let op = operator[i];\n    let operand_i = operand[i];\n    let operand_i_prev = operand[i - 1];\n    let operand_i_next = operand[i + 1];\n    if (op == \"+\") {\n      result += operand_i;\n    } else if (op == \"-\") {\n      result -= operand_i;\n    } else if (op == \"*\") {\n      result *= operand_i;\n    } else if (op == \"//\") {\n      result /= operand_i;\n    } else if (op == \"**\") {\n      result **= operand_i;\n    } else {\n      panic!(\"Unknown operator\");\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpcqs6pkrt.rs:21:8\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpcqs6pkrt.rs:21:12\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpcqs6pkrt.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpcqs6pkrt.rs:21:13\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpcqs6pkrt.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    switch op {\n      case \"+\":\n        result += num;\n        break;\n      case \"-\":\n        result -= num;\n        break;\n      case \"*\":\n        result *= num;\n        break;\n      case \"//\":\n        result /= num;\n        break;\n      case \"**\":\n        result **= num;\n        break;\n      default:\n        panic!(\"Unknown operator: {}\", op);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `op`\n  --> /tmp/tmp2uc2rrs2.rs:24:12\n   |\n24 |     switch op {\n   |            ^^ expected one of 8 possible tokens\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp2uc2rrs2.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2uc2rrs2.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else if op == \"+\" {\n            result = result + num;\n        } else if op == \"-\" {\n            result = result - num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp1ezyx9vt.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1ezyx9vt.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp7imu5les.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp7imu5les.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7imu5les.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpzunl57qn.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result **= num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpeo9n61m0.rs:33:15\n   |\n33 |       result **= num;\n   |               ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpeo9n61m0.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpzunl57qn.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpzunl57qn.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let value = operand[i];\n        if op == \"*\" {\n            result += value * result;\n        } else if op == \"/\" {\n            result = value * result;\n        } else if op == \"//\" {\n            result = value * result;\n        } else if op == \"**\" {\n            result = value * result;\n        } else if op == \"+\" {\n            result += value;\n        } else if op == \"-\" {\n            result -= value;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpixbdq1yo.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpixbdq1yo.rs:23:21\n   |\n23 |         let value = operand[i];\n   |                     ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result **= num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpeo9n61m0.rs:33:15\n   |\n33 |       result **= num;\n   |               ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpeo9n61m0.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num / result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpqhe8l8g0.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqhe8l8g0.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpqhe8l8g0.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp9l8itrbp.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9l8itrbp.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num / result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpm1v61vm9.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpm1v61vm9.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpm1v61vm9.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else if op == \"+\" {\n            result = result + num;\n        } else if op == \"-\" {\n            result = result - num;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp8n2w5bex.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8n2w5bex.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpzunl57qn.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        let next_num = operand[i + 1];\n        let next_op = operator[i + 1];\n        if op == \"+\" {\n            result += num + do_algebra(operator, operand);\n        } else if op == \"-\" {\n            result -= num + do_algebra(operator, operand);\n        } else if op == \"*\" {\n            result *= num + do_algebra(operator, operand);\n        } else if op == \"//\" {\n            result /= num + do_algebra(operator, operand);\n        } else if op == \"**\" {\n            result = num ** next_num + do_algebra(operator, operand);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp903oe8jt.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp903oe8jt.rs:35:27\n   |\n35 |             result = num ** next_num + do_algebra(operator, operand);\n   |                           ^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp9l8itrbp.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9l8itrbp.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp7imu5les.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp7imu5les.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7imu5les.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpb350n4hq.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpb350n4hq.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        let next_num = operand[i + 1];\n        if op == \"+\" {\n            result += num + next_num;\n        } else if op == \"-\" {\n            result -= num - next_num;\n        } else if op == \"*\" {\n            result *= num * next_num;\n        } else if op == \"//\" {\n            result /= num / next_num;\n        } else if op == \"**\" {\n            result = num ** next_num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp8hxc4fc4.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp8hxc4fc4.rs:34:27\n   |\n34 |             result = num ** next_num;\n   |                           ^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmprg1fs4it.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprg1fs4it.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmprg1fs4it.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    let next_num = operand[i + 1];\n    let next_op = operator[i + 1];\n    if op == \"+\" {\n      result += num + next_num;\n    } else if op == \"-\" {\n      result -= num + next_num;\n    } else if op == \"*\" {\n      result *= num * next_num;\n    } else if op == \"//\" {\n      result /= num / next_num;\n    } else if op == \"**\" {\n      result **= num ** next_num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmptv1ki7x8.rs:35:15\n   |\n35 |       result **= num ** next_num;\n   |               ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmptv1ki7x8.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else if op == \"+\" {\n            result = result + num;\n        } else if op == \"-\" {\n            result = result - num;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpe5oyu9eu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe5oyu9eu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp9l8itrbp.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9l8itrbp.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else if op == \"+\" {\n            result = result + num;\n        } else if op == \"-\" {\n            result = result - num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp1ezyx9vt.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1ezyx9vt.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result **= num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpeo9n61m0.rs:33:15\n   |\n33 |       result **= num;\n   |               ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpeo9n61m0.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        let next_num = operand[i + 1];\n        if op == \"+\" {\n            result += num + next_num;\n        } else if op == \"-\" {\n            result -= num - next_num;\n        } else if op == \"*\" {\n            result *= num * next_num;\n        } else if op == \"//\" {\n            result /= num / next_num;\n        } else if op == \"**\" {\n            result = num ** next_num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp8hxc4fc4.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp8hxc4fc4.rs:34:27\n   |\n34 |             result = num ** next_num;\n   |                           ^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num / result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpqhe8l8g0.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqhe8l8g0.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpqhe8l8g0.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp9l8itrbp.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9l8itrbp.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let value = operand[i];\n    if op == \"*\" {\n      result = result * value;\n    } else if op == \"/\" {\n      result = result / value;\n    } else if op == \"//\" {\n      result = result // value;\n    } else if op == \"**\" {\n      result = result ** value;\n    } else if op == \"+\" {\n      result = result + value;\n    } else if op == \"-\" {\n      result = result - value;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp4y9muu83.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4y9muu83.rs:23:17\n   |\n23 |     let value = operand[i];\n   |                 ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result += num * result;\n    } else if op == \"/\" {\n      result = num * result;\n    } else if op == \"//\" {\n      result = num * result;\n    } else if op == \"**\" {\n      result = num * result;\n    } else if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp1du266r6.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1du266r6.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpzunl57qn.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else {\n            result = result + num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzsb31qt0.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzsb31qt0.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num / result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpqhe8l8g0.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqhe8l8g0.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpqhe8l8g0.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result = result * num;\n    } else if op == \"/\" {\n      result = result / num;\n    } else if op == \"//\" {\n      result = result // num;\n    } else if op == \"**\" {\n      result = result ** num;\n    } else {\n      result = result + num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp7s22qce3.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7s22qce3.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for (let i = 0; i < operand.len; i++) {\n    let op = operator[i];\n    let operand_i = operand[i];\n    if (op == \"+\") {\n      result += operand_i;\n    } else if (op == \"-\") {\n      result -= operand_i;\n    } else if (op == \"*\") {\n      result *= operand_i;\n    } else if (op == \"//\") {\n      result /= operand_i;\n    } else if (op == \"**\") {\n      result = pow(result, operand_i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp89ew71ul.rs:21:8\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp89ew71ul.rs:21:12\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp89ew71ul.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp89ew71ul.rs:21:13\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp89ew71ul.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result = result * num;\n    } else if op == \"/\" {\n      result = result / num;\n    } else if op == \"//\" {\n      result = result // num;\n    } else if op == \"**\" {\n      result = result ** num;\n    } else if op == \"+\" {\n      result = result + num;\n    } else if op == \"-\" {\n      result = result - num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpkb8a00k4.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkb8a00k4.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp9l8itrbp.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9l8itrbp.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp77d_11td.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp77d_11td.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp77d_11td.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp9l8itrbp.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9l8itrbp.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for (let i = 0; i < operand.len; i++) {\n    let op = operator[i];\n    let num = operand[i];\n    switch (op) {\n      case \"+\":\n        result += num;\n        break;\n      case \"-\":\n        result -= num;\n        break;\n      case \"*\":\n        result *= num;\n        break;\n      case \"//\":\n        result /= num;\n        break;\n      case \"**\":\n        result = num ** result;\n        break;\n      default:\n        panic!(\"Unknown operator: {}\", op);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpmh9h5skm.rs:21:8\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpmh9h5skm.rs:21:12\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpmh9h5skm.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpmh9h5skm.rs:21:13\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpmh9h5skm.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let operand_i = operand[i];\n        let operand_i_1 = operand[i + 1];\n        if op == \"+\" {\n            result += operand_i + operand_i_1;\n        } else if op == \"-\" {\n            result -= operand_i - operand_i_1;\n        } else if op == \"*\" {\n            result *= operand_i * operand_i_1;\n        } else if op == \"//\" {\n            result /= operand_i / operand_i_1;\n        } else if op == \"**\" {\n            result = operand_i ** operand_i_1;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpe8fy_kuc.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpe8fy_kuc.rs:34:33\n   |\n34 |             result = operand_i ** operand_i_1;\n   |                                 ^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result += num * result;\n    } else if op == \"/\" {\n      result += num / result;\n    } else if op == \"//\" {\n      result += num / result;\n    } else if op == \"**\" {\n      result += num ** result;\n    } else if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpwzldb4b3.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwzldb4b3.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpwzldb4b3.rs:31:22\n   |\n31 |       result += num ** result;\n   |                      ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        let next_num = operand[i + 1];\n        if op == \"+\" {\n            result += num + next_num;\n        } else if op == \"-\" {\n            result -= num + next_num;\n        } else if op == \"*\" {\n            result *= num + next_num;\n        } else if op == \"//\" {\n            result /= num + next_num;\n        } else if op == \"**\" {\n            result **= num + next_num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpzxg5i0_h.rs:34:21\n   |\n34 |             result **= num + next_num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzxg5i0_h.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let value = operand[i];\n        if op == \"*\" {\n            result += value;\n        } else if op == \"/\" {\n            result -= value;\n        } else if op == \"//\" {\n            result = result / value;\n        } else if op == \"**\" {\n            result = result ** value;\n        } else {\n            result += value;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpws53cdcq.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpws53cdcq.rs:23:21\n   |\n23 |         let value = operand[i];\n   |                     ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmprg1fs4it.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprg1fs4it.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmprg1fs4it.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpjcdns6pe.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpjcdns6pe.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpzunl57qn.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpldz28bj3.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpldz28bj3.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpldz28bj3.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        } else {\n            panic!(\"Invalid operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpfckg0706.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpfckg0706.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else if op == \"+\" {\n            result = result + num;\n        } else if op == \"-\" {\n            result = result - num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp1ezyx9vt.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1ezyx9vt.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmprg1fs4it.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprg1fs4it.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmprg1fs4it.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let operand_i = operand[i];\n    let operand_i_next = operand[i + 1];\n    if op == \"+\" {\n      result += operand_i + operand_i_next;\n    } else if op == \"-\" {\n      result -= operand_i + operand_i_next;\n    } else if op == \"*\" {\n      result *= operand_i + operand_i_next;\n    } else if op == \"//\" {\n      result /= operand_i + operand_i_next;\n    } else if op == \"**\" {\n      result = operand_i ** operand_i_next;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpwfmpi8s5.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpwfmpi8s5.rs:34:27\n   |\n34 |       result = operand_i ** operand_i_next;\n   |                           ^^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let value = operand[i];\n        if op == \"+\" {\n            result += value;\n        } else if op == \"-\" {\n            result -= value;\n        } else if op == \"*\" {\n            result *= value;\n        } else if op == \"//\" {\n            result /= value;\n        } else if op == \"**\" {\n            result **= value;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp8rx8qv17.rs:33:21\n   |\n33 |             result **= value;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp8rx8qv17.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8rx8qv17.rs:23:21\n   |\n23 |         let value = operand[i];\n   |                     ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result += num * result;\n    } else if op == \"/\" {\n      result += num / result;\n    } else if op == \"//\" {\n      result += num // result;\n    } else if op == \"**\" {\n      result += num ** result;\n    } else {\n      result += num * result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpgly9m7yg.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgly9m7yg.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpgly9m7yg.rs:31:22\n   |\n31 |       result += num ** result;\n   |                      ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp9l8itrbp.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9l8itrbp.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let value = operand[i];\n        if op == \"*\" {\n            result = result * value;\n        } else if op == \"/\" {\n            result = result / value;\n        } else if op == \"//\" {\n            result = result // value;\n        } else if op == \"**\" {\n            result = result ** value;\n        } else if op == \"+\" {\n            result = result + value;\n        } else if op == \"-\" {\n            result = result - value;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpwk7scvou.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwk7scvou.rs:23:21\n   |\n23 |         let value = operand[i];\n   |                     ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmpcjnxijnu.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcjnxijnu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result **= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected expression, found `*=`\n  --> /tmp/tmp9l8itrbp.rs:33:21\n   |\n33 |             result **= num;\n   |                     ^^ expected expression\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9l8itrbp.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result = result * num;\n    } else if op == \"/\" {\n      result = result / num;\n    } else if op == \"//\" {\n      result = result // num;\n    } else if op == \"**\" {\n      result = result ** num;\n    } else if op == \"+\" {\n      result = result + num;\n    } else if op == \"-\" {\n      result = result - num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpkb8a00k4.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkb8a00k4.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result += num * result;\n    } else if op == \"/\" {\n      result += num / result;\n    } else if op == \"//\" {\n      result += num // result;\n    } else if op == \"**\" {\n      result += num ** result;\n    } else if op == \"+\" {\n      result += num + result;\n    } else if op == \"-\" {\n      result += num - result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpa4smhn3d.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpa4smhn3d.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpa4smhn3d.rs:31:22\n   |\n31 |       result += num ** result;\n   |                      ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num / result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpo6pfuf3z.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpo6pfuf3z.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpo6pfuf3z.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num / result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpo6pfuf3z.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpo6pfuf3z.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpo6pfuf3z.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else if op == \"+\" {\n            result = result + num;\n        } else if op == \"-\" {\n            result = result - num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmp1ezyx9vt.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1ezyx9vt.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num + result;\n        } else if op == \"-\" {\n            result += num - result;\n        } else {\n            panic!(\"Unknown operator: {}\", op);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmprg1fs4it.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprg1fs4it.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmprg1fs4it.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else if op == \"+\" {\n            result = result + num;\n        } else if op == \"-\" {\n            result = result - num;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpe5oyu9eu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe5oyu9eu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for (let i = 0; i < operand.len; i++) {\n    let op = operator[i];\n    let operand_i = operand[i];\n    if (op == \"+\") {\n      result += operand_i;\n    } else if (op == \"-\") {\n      result -= operand_i;\n    } else if (op == \"*\") {\n      result *= operand_i;\n    } else if (op == \"//\") {\n      result /= operand_i;\n    } else if (op == \"**\") {\n      result = pow(operand_i, result);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpyj490uwx.rs:21:8\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpyj490uwx.rs:21:12\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpyj490uwx.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyj490uwx.rs:21:13\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpyj490uwx.rs:21:14\n   |\n21 |   for (let i = 0; i < operand.len; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in operand {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"*\" {\n      result += num * result;\n    } else if op == \"/\" {\n      result += num / result;\n    } else if op == \"//\" {\n      result += num / result;\n    } else if op == \"**\" {\n      result += num ** result;\n    } else if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpwzldb4b3.rs:22:14\n   |\n22 |     let op = operator[i];\n   |              ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwzldb4b3.rs:23:15\n   |\n23 |     let num = operand[i];\n   |               ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpwzldb4b3.rs:31:22\n   |\n31 |       result += num ** result;\n   |                      ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else {\n            result = result + num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzsb31qt0.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzsb31qt0.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num // result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else {\n            result += num * result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpyjt_ck0y.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpyjt_ck0y.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpyjt_ck0y.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  let result = 0;\n  for i in 0..operand.len - 1 {\n    let op = operator[i];\n    let num = operand[i];\n    if op == \"+\" {\n      result += num;\n    } else if op == \"-\" {\n      result -= num;\n    } else if op == \"*\" {\n      result *= num;\n    } else if op == \"//\" {\n      result /= num;\n    } else if op == \"**\" {\n      result = num ** result;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmrmay5kq.rs:21:23\n   |\n21 |   for i in 0..operand.len - 1 {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   for i in 0..operand.len() - 1 {\n   |                          ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmrmay5kq.rs:33:21\n   |\n33 |       result = num ** result;\n   |                     ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result += num * result;\n        } else if op == \"/\" {\n            result += num / result;\n        } else if op == \"//\" {\n            result += num / result;\n        } else if op == \"**\" {\n            result += num ** result;\n        } else if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpqhe8l8g0.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqhe8l8g0.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpqhe8l8g0.rs:31:28\n   |\n31 |             result += num ** result;\n   |                            ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in 0..operand.len - 1 {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmexanao_.rs:21:25\n   |\n21 |     for i in 0..operand.len - 1 {\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |     for i in 0..operand.len() - 1 {\n   |                            ++\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpmexanao_.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0614, E0616.\nFor more information about an error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"+\" {\n            result += num;\n        } else if op == \"-\" {\n            result -= num;\n        } else if op == \"*\" {\n            result *= num;\n        } else if op == \"//\" {\n            result /= num;\n        } else if op == \"**\" {\n            result = num ** result;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzunl57qn.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpzunl57qn.rs:33:27\n   |\n33 |             result = num ** result;\n   |                           ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n/// the second vector is a vector of integers. Use the two given vectors to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator vector is equal to the length of operand vector minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator vector has at least one operator, and operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let result = 0;\n    for i in operand {\n        let op = operator[i];\n        let num = operand[i];\n        if op == \"*\" {\n            result = result * num;\n        } else if op == \"/\" {\n            result = result / num;\n        } else if op == \"//\" {\n            result = result // num;\n        } else if op == \"**\" {\n            result = result ** num;\n        } else if op == \"+\" {\n            result = result + num;\n        } else if op == \"-\" {\n            result = result - num;\n        } else {\n            panic!(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpe5oyu9eu.rs:22:18\n   |\n22 |         let op = operator[i];\n   |                  ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<String>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe5oyu9eu.rs:23:19\n   |\n23 |         let num = operand[i];\n   |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}