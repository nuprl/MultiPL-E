name: HumanEval_7_filter_by_substring
language: rs
prompt: "/// Filter an input vector of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n\
  /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"),\
  \ String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
  abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings:\
  \ Vec<String>, substring: String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
  xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
  )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
  ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")),\
  \ vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
completions: ["    let mut result = Vec::new();\n    for s in strings {\n        if\
    \ s.contains(substring) {\n            result.push(s);\n        }\n    }\n   \
    \ return result;", "  let mut result = Vec::new();\n  for s in strings {\n   \
    \ if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;",
  "  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for string in strings {\n    if\
    \ string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for string in strings {\n    if\
    \ string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut out =\
    \ Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n  \
    \          out.push(s);\n        }\n    }\n    return out;", "    let mut out\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            out.push(s);\n        }\n    }\n    return out;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for string in strings {\n    if\
    \ string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.contains(substring) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;",
  "  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "  let mut\
    \ result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for string in strings {\n    if\
    \ string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "  let mut\
    \ result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for string in strings {\n    if\
    \ string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for string in strings {\n    if\
    \ string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.contains(substring) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.contains(substring) {\n            result.push(s);\n       \
    \ }\n    }\n    return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.contains(substring) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ string in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.contains(substring) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.contains(substring) {\n            result.push(s);\n       \
    \ }\n    }\n    return result;", "    let mut out = Vec::new();\n    for s in\
    \ strings {\n        if s.contains(substring) {\n            out.push(s);\n  \
    \      }\n    }\n    return out;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for string in strings {\n    if\
    \ string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.contains(substring) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n\
    \      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut out\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            out.push(s);\n        }\n    }\n    return out;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "  let mut\
    \ result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "  let mut\
    \ result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.contains(substring) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;",
  "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n\
    \      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "  let mut\
    \ result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n\
    \      result.push(s);\n    }\n  }\n  return result;", "  let mut result = Vec::new();\n\
    \  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n\
    \      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for string in strings {\n    if\
    \ string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n\
    \      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.contains(substring) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "  let mut result = Vec::new();\n  for string in strings\
    \ {\n    if string.contains(substring) {\n      result.push(string);\n    }\n\
    \  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;",
  "  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.contains(substring) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ string in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for string in strings {\n    if\
    \ string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.contains(substring) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;",
  "  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.contains(substring) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n\
    \  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;",
  "  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.contains(substring) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n\
    \  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;",
  "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n\
    \      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for string in strings {\n    if\
    \ string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "  let mut\
    \ result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for string in strings {\n    if\
    \ string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for string in strings {\n    if\
    \ string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n\
    \      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "  let mut\
    \ result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "  let mut\
    \ result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.contains(substring) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.contains(substring) {\n            result.push(s);\n       \
    \ }\n    }\n    return result;", "    let mut result = Vec::new();\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            result.push(string);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ string in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.contains(substring) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.contains(substring) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut result = Vec::new();\n  \
    \  for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n\
    \  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.contains(substring) {\n      result.push(string);\n\
    \    }\n  }\n  return result;"]
stop_tokens:
- "\n}"
