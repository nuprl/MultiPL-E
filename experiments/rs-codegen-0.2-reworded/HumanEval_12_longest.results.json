{
  "name": "HumanEval_12_longest",
  "language": "rs",
  "prompt": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = String::from(\"\")\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpzufzlu3f.rs:13:29\n   |\n13 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n14 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings[1:] {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpeillh6n8.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings[1:] {\n   |   --- unexpected token\n\nerror: expected type, found `]`\n  --> /tmp/tmpeillh6n8.rs:14:22\n   |\n14 |   for s in strings[1:] {\n   |                     -^ expected type\n   |                     |\n   |                     help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpeillh6n8.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd93lhbbl.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpd93lhbbl.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpd93lhbbl.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd93lhbbl.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd93lhbbl.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd93lhbbl.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd93lhbbl.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings[1:] {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpeillh6n8.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings[1:] {\n   |   --- unexpected token\n\nerror: expected type, found `]`\n  --> /tmp/tmpeillh6n8.rs:14:22\n   |\n14 |   for s in strings[1:] {\n   |                     -^ expected type\n   |                     |\n   |                     help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpeillh6n8.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = String::from(\"\")\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpzufzlu3f.rs:13:29\n   |\n13 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n14 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings[1:] {\n    if s.len() > max.len() {\n      max = s\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwaz_chlg.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings[1:] {\n   |   --- unexpected token\n\nerror: expected type, found `]`\n  --> /tmp/tmpwaz_chlg.rs:14:22\n   |\n14 |   for s in strings[1:] {\n   |                     -^ expected type\n   |                     |\n   |                     help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwaz_chlg.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpj39iy0zi.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpj39iy0zi.rs:15:24\n   |\n15 |   let max_string = None\n   |                        ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpj39iy0zi.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj39iy0zi.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj39iy0zi.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj39iy0zi.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj39iy0zi.rs:19:20\n   |\n15 |   let max_string = None\n   |                    ---- expected due to this value\n...\n19 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  var max = strings[0]\n  for i in 1..len(strings) {\n    if strings[i].len > max.len {\n      max = strings[i]\n    }\n  }\n\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: invalid variable declaration\n  --> /tmp/tmp2d7ttaim.rs:14:3\n   |\n14 |   var max = strings[0]\n   |   ^^^\n   |\nhelp: write `let` instead of `var` to introduce a new variable\n   |\n14 |   let max = strings[0]\n   |   ~~~\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2d7ttaim.rs:14:23\n   |\n14 |   var max = strings[0]\n   |                       ^ help: add `;` here\n15 |   for i in 1..len(strings) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2d7ttaim.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2d7ttaim.rs:15:15\n   |\n15 |   for i in 1..len(strings) {\n   |               ^^^ not found in this scope\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmp2d7ttaim.rs:16:19\n   |\n16 |     if strings[i].len > max.len {\n   |                   ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n16 |     if strings[i].len() > max.len {\n   |                      ++\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmp2d7ttaim.rs:16:29\n   |\n16 |     if strings[i].len > max.len {\n   |                             ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n16 |     if strings[i].len > max.len() {\n   |                                ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2d7ttaim.rs:21:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n21 |   return max\n   |          ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n21 |   return Some(max)\n   |          +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0615.\nFor more information a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9_lsw4r7.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9_lsw4r7.rs:15:21\n   |\n15 |   let max_str = None\n   |                     ^ help: add `;` here\n16 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmp9_lsw4r7.rs:18:21\n   |\n18 |       max = len(str)\n   |                     ^ help: add `;` here\n19 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9_lsw4r7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9_lsw4r7.rs:17:8\n   |\n17 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9_lsw4r7.rs:18:13\n   |\n18 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9_lsw4r7.rs:19:17\n   |\n15 |   let max_str = None\n   |                 ---- expected due to this value\n...\n19 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  let max_len = 0\n  let max_str = None\n  for s in strings {\n    if s.len() > max_len {\n      max_len = s.len()\n      max_str = s\n    }\n  }\n  if max_str.is_none() {\n    return None\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7mffop0a.rs:10:18\n   |\n10 |   let max_len = 0\n   |                  ^ help: add `;` here\n11 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7mffop0a.rs:11:21\n   |\n11 |   let max_str = None\n   |                     ^ help: add `;` here\n12 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmp7mffop0a.rs:14:24\n   |\n14 |       max_len = s.len()\n   |                        ^ help: add `;` here\n15 |       max_str = s\n   |       ------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7mffop0a.rs:15:17\n   |\n11 |   let max_str = None\n   |                 ---- expected due to this value\n...\n15 |       max_str = s\n   |                 ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n15 |       max_str = Some(s)\n   |                 +++++ +\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = String::EMPTY\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpxti3dfbg.rs:14:26\n   |\n14 |   let max = String::EMPTY\n   |                          ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxti3dfbg.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxti3dfbg.rs:16:8\n   |\n16 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxti3dfbg.rs:16:17\n   |\n16 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no associated item named `EMPTY` found for struct `String` in the current scope\n  --> /tmp/tmpxti3dfbg.rs:14:21\n   |\n14 |   let max = String::EMPTY\n   |                     ^^^^^ associated item not found in `String`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = strings[0]\n  for s in strings[1:] {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp58u4l7s4.rs:14:23\n   |\n14 |   let max = strings[0]\n   |                       ^ help: add `;` here\n15 |   for s in strings[1:] {\n   |   --- unexpected token\n\nerror: expected type, found `]`\n  --> /tmp/tmp58u4l7s4.rs:15:22\n   |\n15 |   for s in strings[1:] {\n   |                     -^ expected type\n   |                     |\n   |                     help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp58u4l7s4.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdj6zxoaz.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdj6zxoaz.rs:15:24\n   |\n15 |   let max_string = None\n   |                        ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpdj6zxoaz.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdj6zxoaz.rs:19:20\n   |\n15 |   let max_string = None\n   |                    ---- expected due to this value\n...\n19 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings[1:] {\n    if s.len() > max.len() {\n      max = s\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwaz_chlg.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings[1:] {\n   |   --- unexpected token\n\nerror: expected type, found `]`\n  --> /tmp/tmpwaz_chlg.rs:14:22\n   |\n14 |   for s in strings[1:] {\n   |                     -^ expected type\n   |                     |\n   |                     help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwaz_chlg.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpb9909kx5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb9909kx5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb9909kx5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb9909kx5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_string = None\n\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpke799gz3.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpke799gz3.rs:15:24\n   |\n15 |   let max_string = None\n   |                        ^ help: add `;` here\n16 | \n17 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpke799gz3.rs:19:19\n   |\n19 |       max = len(s)\n   |                   ^ help: add `;` here\n20 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpke799gz3.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpke799gz3.rs:18:8\n   |\n18 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpke799gz3.rs:19:13\n   |\n19 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpke799gz3.rs:20:20\n   |\n15 |   let max_string = None\n   |                    ---- expected due to this value\n...\n20 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n20 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdj6zxoaz.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdj6zxoaz.rs:15:24\n   |\n15 |   let max_string = None\n   |                        ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpdj6zxoaz.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdj6zxoaz.rs:19:20\n   |\n15 |   let max_string = None\n   |                    ---- expected due to this value\n...\n19 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = String::from(\"\")\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpdy44bn_8.rs:14:29\n   |\n14 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdy44bn_8.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdy44bn_8.rs:16:8\n   |\n16 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdy44bn_8.rs:16:17\n   |\n16 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings[1:] {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpeillh6n8.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings[1:] {\n   |   --- unexpected token\n\nerror: expected type, found `]`\n  --> /tmp/tmpeillh6n8.rs:14:22\n   |\n14 |   for s in strings[1:] {\n   |                     -^ expected type\n   |                     |\n   |                     help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpeillh6n8.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  var max = strings[0]\n  for i in 1..len(strings) {\n    if strings[i].len > max.len {\n      max = strings[i]\n    }\n  }\n\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: invalid variable declaration\n  --> /tmp/tmp2d7ttaim.rs:14:3\n   |\n14 |   var max = strings[0]\n   |   ^^^\n   |\nhelp: write `let` instead of `var` to introduce a new variable\n   |\n14 |   let max = strings[0]\n   |   ~~~\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2d7ttaim.rs:14:23\n   |\n14 |   var max = strings[0]\n   |                       ^ help: add `;` here\n15 |   for i in 1..len(strings) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2d7ttaim.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2d7ttaim.rs:15:15\n   |\n15 |   for i in 1..len(strings) {\n   |               ^^^ not found in this scope\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmp2d7ttaim.rs:16:19\n   |\n16 |     if strings[i].len > max.len {\n   |                   ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n16 |     if strings[i].len() > max.len {\n   |                      ++\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmp2d7ttaim.rs:16:29\n   |\n16 |     if strings[i].len > max.len {\n   |                             ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n16 |     if strings[i].len > max.len() {\n   |                                ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2d7ttaim.rs:21:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n21 |   return max\n   |          ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n21 |   return Some(max)\n   |          +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0615.\nFor more information a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdj6zxoaz.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdj6zxoaz.rs:15:24\n   |\n15 |   let max_string = None\n   |                        ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpdj6zxoaz.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdj6zxoaz.rs:19:20\n   |\n15 |   let max_string = None\n   |                    ---- expected due to this value\n...\n19 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for i in 1..len(strings) {\n    if strings[i].len > max.len {\n      max = strings[i]\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpsawp_3u9.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for i in 1..len(strings) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsawp_3u9.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsawp_3u9.rs:14:15\n   |\n14 |   for i in 1..len(strings) {\n   |               ^^^ not found in this scope\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmpsawp_3u9.rs:15:19\n   |\n15 |     if strings[i].len > max.len {\n   |                   ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n15 |     if strings[i].len() > max.len {\n   |                      ++\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmpsawp_3u9.rs:15:29\n   |\n15 |     if strings[i].len > max.len {\n   |                             ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n15 |     if strings[i].len > max.len() {\n   |                                ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsawp_3u9.rs:19:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n19 |   return max\n   |          ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |   return Some(max)\n   |          +++++   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0615.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = String::from(\"\")\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpzufzlu3f.rs:13:29\n   |\n13 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n14 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = String::from(\"\")\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpzufzlu3f.rs:13:29\n   |\n13 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n14 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd93lhbbl.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpd93lhbbl.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpd93lhbbl.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd93lhbbl.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd93lhbbl.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd93lhbbl.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd93lhbbl.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = String::from(\"\")\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp97rzc8pe.rs:14:29\n   |\n14 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp97rzc8pe.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp97rzc8pe.rs:16:8\n   |\n16 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp97rzc8pe.rs:16:17\n   |\n16 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings[1..] {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpiyq5r997.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings[1..] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpiyq5r997.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpiyq5r997.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpiyq5r997.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0277]: the size for values of type `[String]` cannot be known at compilation time\n  --> /tmp/tmpiyq5r997.rs:14:12\n   |\n14 |   for s in strings[1..] {\n   |            ^^^^^^^^^^^^ expected an implementor of trait `IntoIterator`\n   |\n   = note: the trait bound `[String]: IntoIterator` is not satisfied\n   = note: required because of the requirements on the impl of `IntoIterator` for `[String]`\nhelp: consider borrowing here\n   |\n14 |   for s in &strings[1..] {\n   |            +\n14 |   for s in &mut strings[1..] {\n   |            ++++\n\nerror[E0277]: `[String]` is not an iterator\n  --> /tmp/tmpiyq5r997.rs:14:12\n   |\n14 |   for s in strings[1..] {\n   |            ^^^^^^^^^^^^ expected an implementor of trait `IntoIterator`\n   |\n   = note: the trait bound `[String]: IntoIterator` is not satisfied\n   = note: required because of the requirements on the impl of `IntoIterator` for `[String]`\nhelp: consider borrowing here\n   |\n14 |   for s in &strings[1..] {\n   |            +\n14 |   for s in &mut strings[1..] {\n   |            ++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_str = s\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw_l4xmyz.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw_l4xmyz.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpw_l4xmyz.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_str = s\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_l4xmyz.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = s\n   |                 ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(s)\n   |                 +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = String::from(\"\")\n  for s in strings {\n    if s.len() > max.len() {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpu5dqa0hi.rs:14:29\n   |\n14 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu5dqa0hi.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_str = s\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw_l4xmyz.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw_l4xmyz.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpw_l4xmyz.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_str = s\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_l4xmyz.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = s\n   |                 ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(s)\n   |                 +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpshlzw3fd.rs:14:23\n   |\n14 |   let max = strings[0]\n   |                       ^ help: add `;` here\n15 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpshlzw3fd.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpshlzw3fd.rs:16:8\n   |\n16 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpshlzw3fd.rs:16:17\n   |\n16 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpshlzw3fd.rs:15:20\n   |\n15 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n15 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdj6zxoaz.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdj6zxoaz.rs:15:24\n   |\n15 |   let max_string = None\n   |                        ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpdj6zxoaz.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdj6zxoaz.rs:19:20\n   |\n15 |   let max_string = None\n   |                    ---- expected due to this value\n...\n19 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9_lsw4r7.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9_lsw4r7.rs:15:21\n   |\n15 |   let max_str = None\n   |                     ^ help: add `;` here\n16 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmp9_lsw4r7.rs:18:21\n   |\n18 |       max = len(str)\n   |                     ^ help: add `;` here\n19 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9_lsw4r7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9_lsw4r7.rs:17:8\n   |\n17 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9_lsw4r7.rs:18:13\n   |\n18 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9_lsw4r7.rs:19:17\n   |\n15 |   let max_str = None\n   |                 ---- expected due to this value\n...\n19 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpshlzw3fd.rs:14:23\n   |\n14 |   let max = strings[0]\n   |                       ^ help: add `;` here\n15 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpshlzw3fd.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpshlzw3fd.rs:16:8\n   |\n16 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpshlzw3fd.rs:16:17\n   |\n16 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpshlzw3fd.rs:15:20\n   |\n15 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n15 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpj39iy0zi.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpj39iy0zi.rs:15:24\n   |\n15 |   let max_string = None\n   |                        ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpj39iy0zi.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj39iy0zi.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj39iy0zi.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj39iy0zi.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj39iy0zi.rs:19:20\n   |\n15 |   let max_string = None\n   |                    ---- expected due to this value\n...\n19 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyvzbdx3z.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyvzbdx3z.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 | \n17 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpyvzbdx3z.rs:19:19\n   |\n19 |       max = len(s)\n   |                   ^ help: add `;` here\n20 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpyvzbdx3z.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpyvzbdx3z.rs:18:8\n   |\n18 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpyvzbdx3z.rs:19:13\n   |\n19 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyvzbdx3z.rs:20:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n20 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n20 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = String::from(\"\")\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp97rzc8pe.rs:14:29\n   |\n14 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp97rzc8pe.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp97rzc8pe.rs:16:8\n   |\n16 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp97rzc8pe.rs:16:17\n   |\n16 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_str = s\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw_l4xmyz.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw_l4xmyz.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpw_l4xmyz.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_str = s\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_l4xmyz.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = s\n   |                 ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(s)\n   |                 +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_str = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_str = s\n    }\n  }\n\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgt58pewa.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgt58pewa.rs:15:21\n   |\n15 |   let max_str = None\n   |                     ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpgt58pewa.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       max_str = s\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgt58pewa.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgt58pewa.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgt58pewa.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgt58pewa.rs:19:17\n   |\n15 |   let max_str = None\n   |                 ---- expected due to this value\n...\n19 |       max_str = s\n   |                 ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_str = Some(s)\n   |                 +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = String::from(\"\")\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpzufzlu3f.rs:13:29\n   |\n13 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n14 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpzufzlu3f.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      maxStr = str\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd94seafq.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpd94seafq.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpd94seafq.rs:18:21\n   |\n18 |       max = len(str)\n   |                     ^ help: add `;` here\n19 |       maxStr = str\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd94seafq.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd94seafq.rs:17:8\n   |\n17 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd94seafq.rs:18:13\n   |\n18 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd94seafq.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = str\n   |                ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(str)\n   |                +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = strings[0]\n  for i in 1..len(strings) {\n    if strings[i].len() > max.len() {\n      max = strings[i]\n    }\n  }\n\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpxsh8bl6k.rs:14:23\n   |\n14 |   let max = strings[0]\n   |                       ^ help: add `;` here\n15 |   for i in 1..len(strings) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxsh8bl6k.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxsh8bl6k.rs:15:15\n   |\n15 |   for i in 1..len(strings) {\n   |               ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxsh8bl6k.rs:21:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n21 |   return max\n   |          ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n21 |   return Some(max)\n   |          +++++   +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdj6zxoaz.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdj6zxoaz.rs:15:24\n   |\n15 |   let max_string = None\n   |                        ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpdj6zxoaz.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdj6zxoaz.rs:19:20\n   |\n15 |   let max_string = None\n   |                    ---- expected due to this value\n...\n19 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      maxStr = str\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd94seafq.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpd94seafq.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpd94seafq.rs:18:21\n   |\n18 |       max = len(str)\n   |                     ^ help: add `;` here\n19 |       maxStr = str\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd94seafq.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd94seafq.rs:17:8\n   |\n17 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd94seafq.rs:18:13\n   |\n18 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd94seafq.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = str\n   |                ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(str)\n   |                +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for i in 1..len(strings) {\n    if strings[i].len() > max.len() {\n      max = strings[i]\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpgaadcdxp.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for i in 1..len(strings) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgaadcdxp.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgaadcdxp.rs:14:15\n   |\n14 |   for i in 1..len(strings) {\n   |               ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgaadcdxp.rs:19:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n19 |   return max\n   |          ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |   return Some(max)\n   |          +++++   +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for i in 1..len(strings) {\n    if strings[i].len > max.len {\n      max = strings[i]\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpsawp_3u9.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for i in 1..len(strings) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsawp_3u9.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsawp_3u9.rs:14:15\n   |\n14 |   for i in 1..len(strings) {\n   |               ^^^ not found in this scope\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmpsawp_3u9.rs:15:19\n   |\n15 |     if strings[i].len > max.len {\n   |                   ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n15 |     if strings[i].len() > max.len {\n   |                      ++\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmpsawp_3u9.rs:15:29\n   |\n15 |     if strings[i].len > max.len {\n   |                             ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n15 |     if strings[i].len > max.len() {\n   |                                ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsawp_3u9.rs:19:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n19 |   return max\n   |          ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |   return Some(max)\n   |          +++++   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0615.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgchzekoi.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgchzekoi.rs:15:21\n   |\n15 |   let max_str = None\n   |                     ^ help: add `;` here\n16 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpgchzekoi.rs:18:21\n   |\n18 |       max = len(str)\n   |                     ^ help: add `;` here\n19 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgchzekoi.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgchzekoi.rs:17:8\n   |\n17 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgchzekoi.rs:18:13\n   |\n18 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgchzekoi.rs:19:17\n   |\n15 |   let max_str = None\n   |                 ---- expected due to this value\n...\n19 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpb9909kx5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb9909kx5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb9909kx5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpb9909kx5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings {\n    if s.len() > max.len() {\n      max = s\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpqo8v1zrv.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqo8v1zrv.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqo8v1zrv.rs:19:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n19 |   return max\n   |          ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |   return Some(max)\n   |          +++++   +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = strings[0]\n  for s in strings {\n    if s.len() > max.len() {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpl1ua0gz9.rs:14:23\n   |\n14 |   let max = strings[0]\n   |                       ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpl1ua0gz9.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_string = None\n\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpke799gz3.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpke799gz3.rs:15:24\n   |\n15 |   let max_string = None\n   |                        ^ help: add `;` here\n16 | \n17 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpke799gz3.rs:19:19\n   |\n19 |       max = len(s)\n   |                   ^ help: add `;` here\n20 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpke799gz3.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpke799gz3.rs:18:8\n   |\n18 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpke799gz3.rs:19:13\n   |\n19 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpke799gz3.rs:20:20\n   |\n15 |   let max_string = None\n   |                    ---- expected due to this value\n...\n20 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n20 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      maxStr = str\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd94seafq.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpd94seafq.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpd94seafq.rs:18:21\n   |\n18 |       max = len(str)\n   |                     ^ help: add `;` here\n19 |       maxStr = str\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd94seafq.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd94seafq.rs:17:8\n   |\n17 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd94seafq.rs:18:13\n   |\n18 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd94seafq.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = str\n   |                ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(str)\n   |                +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  var longest = strings[0]\n  for i in 1..len(strings) {\n    if strings[i].length() > longest.length() {\n      longest = strings[i]\n    }\n  }\n\n  return longest\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: invalid variable declaration\n  --> /tmp/tmp4j64foko.rs:14:3\n   |\n14 |   var longest = strings[0]\n   |   ^^^\n   |\nhelp: write `let` instead of `var` to introduce a new variable\n   |\n14 |   let longest = strings[0]\n   |   ~~~\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp4j64foko.rs:14:27\n   |\n14 |   var longest = strings[0]\n   |                           ^ help: add `;` here\n15 |   for i in 1..len(strings) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp4j64foko.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp4j64foko.rs:15:15\n   |\n15 |   for i in 1..len(strings) {\n   |               ^^^ not found in this scope\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp4j64foko.rs:16:19\n   |\n16 |     if strings[i].length() > longest.length() {\n   |                   ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp4j64foko.rs:16:38\n   |\n16 |     if strings[i].length() > longest.length() {\n   |                                      ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4j64foko.rs:21:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n21 |   return longest\n   |          ^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n21 |   return Some(longest)\n   |          +++++       +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_str = s\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw_l4xmyz.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw_l4xmyz.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpw_l4xmyz.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_str = s\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_l4xmyz.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = s\n   |                 ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(s)\n   |                 +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings[1:] {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpeillh6n8.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings[1:] {\n   |   --- unexpected token\n\nerror: expected type, found `]`\n  --> /tmp/tmpeillh6n8.rs:14:22\n   |\n14 |   for s in strings[1:] {\n   |                     -^ expected type\n   |                     |\n   |                     help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpeillh6n8.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd93lhbbl.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpd93lhbbl.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpd93lhbbl.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd93lhbbl.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd93lhbbl.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd93lhbbl.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd93lhbbl.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      maxStr = str\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd94seafq.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpd94seafq.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpd94seafq.rs:18:21\n   |\n18 |       max = len(str)\n   |                     ^ help: add `;` here\n19 |       maxStr = str\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd94seafq.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd94seafq.rs:17:8\n   |\n17 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd94seafq.rs:18:13\n   |\n18 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd94seafq.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = str\n   |                ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(str)\n   |                +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpj39iy0zi.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpj39iy0zi.rs:15:24\n   |\n15 |   let max_string = None\n   |                        ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpj39iy0zi.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj39iy0zi.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj39iy0zi.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj39iy0zi.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj39iy0zi.rs:19:20\n   |\n15 |   let max_string = None\n   |                    ---- expected due to this value\n...\n19 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_str = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_str = s\n    }\n  }\n\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgt58pewa.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgt58pewa.rs:15:21\n   |\n15 |   let max_str = None\n   |                     ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpgt58pewa.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       max_str = s\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgt58pewa.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgt58pewa.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpgt58pewa.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgt58pewa.rs:19:17\n   |\n15 |   let max_str = None\n   |                 ---- expected due to this value\n...\n19 |       max_str = s\n   |                 ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_str = Some(s)\n   |                 +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = String::from(\"\")\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp97rzc8pe.rs:14:29\n   |\n14 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp97rzc8pe.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp97rzc8pe.rs:16:8\n   |\n16 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp97rzc8pe.rs:16:17\n   |\n16 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_str = s\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw_l4xmyz.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw_l4xmyz.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpw_l4xmyz.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_str = s\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_l4xmyz.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = s\n   |                 ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(s)\n   |                 +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = String::from(\"\")\n  for s in strings {\n    if s.len() > max.len() {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpu5dqa0hi.rs:14:29\n   |\n14 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu5dqa0hi.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings {\n    if s.len() > max.len() {\n      max = s\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpqo8v1zrv.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqo8v1zrv.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqo8v1zrv.rs:19:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n19 |   return max\n   |          ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |   return Some(max)\n   |          +++++   +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_str = s\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw_l4xmyz.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw_l4xmyz.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpw_l4xmyz.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_str = s\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_l4xmyz.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = s\n   |                 ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(s)\n   |                 +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyvzbdx3z.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyvzbdx3z.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 | \n17 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpyvzbdx3z.rs:19:19\n   |\n19 |       max = len(s)\n   |                   ^ help: add `;` here\n20 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpyvzbdx3z.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpyvzbdx3z.rs:18:8\n   |\n18 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpyvzbdx3z.rs:19:13\n   |\n19 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyvzbdx3z.rs:20:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n20 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n20 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      maxStr = str\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxyn3j1uh.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxyn3j1uh.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 | \n17 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpxyn3j1uh.rs:19:21\n   |\n19 |       max = len(str)\n   |                     ^ help: add `;` here\n20 |       maxStr = str\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxyn3j1uh.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxyn3j1uh.rs:18:8\n   |\n18 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpxyn3j1uh.rs:19:13\n   |\n19 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxyn3j1uh.rs:20:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n20 |       maxStr = str\n   |                ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n20 |       maxStr = Some(str)\n   |                +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for i in 1..len(strings) {\n    if strings[i].len > max.len {\n      max = strings[i]\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpsawp_3u9.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for i in 1..len(strings) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsawp_3u9.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsawp_3u9.rs:14:15\n   |\n14 |   for i in 1..len(strings) {\n   |               ^^^ not found in this scope\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmpsawp_3u9.rs:15:19\n   |\n15 |     if strings[i].len > max.len {\n   |                   ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n15 |     if strings[i].len() > max.len {\n   |                      ++\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmpsawp_3u9.rs:15:29\n   |\n15 |     if strings[i].len > max.len {\n   |                             ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n15 |     if strings[i].len > max.len() {\n   |                                ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsawp_3u9.rs:19:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n19 |   return max\n   |          ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |   return Some(max)\n   |          +++++   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0615.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_str = None\n\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_str = s\n    }\n  }\n\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqdvbzct_.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqdvbzct_.rs:15:21\n   |\n15 |   let max_str = None\n   |                     ^ help: add `;` here\n16 | \n17 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpqdvbzct_.rs:19:19\n   |\n19 |       max = len(s)\n   |                   ^ help: add `;` here\n20 |       max_str = s\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqdvbzct_.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqdvbzct_.rs:18:8\n   |\n18 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqdvbzct_.rs:19:13\n   |\n19 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqdvbzct_.rs:20:17\n   |\n15 |   let max_str = None\n   |                 ---- expected due to this value\n...\n20 |       max_str = s\n   |                 ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n20 |       max_str = Some(s)\n   |                 +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if s.len > max.len {\n      max = s\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp7tvbq5_b.rs:14:23\n   |\n14 |   let max = strings[0]\n   |                       ^ help: add `;` here\n15 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp7tvbq5_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmp7tvbq5_b.rs:15:20\n   |\n15 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n15 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmp7tvbq5_b.rs:16:20\n   |\n16 |     if s.len > max.len {\n   |                    ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n16 |     if s.len > max.len() {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7tvbq5_b.rs:20:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n20 |   return max\n   |          ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n20 |   return Some(max)\n   |          +++++   +\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599, E0615.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings[1:] {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpeillh6n8.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings[1:] {\n   |   --- unexpected token\n\nerror: expected type, found `]`\n  --> /tmp/tmpeillh6n8.rs:14:22\n   |\n14 |   for s in strings[1:] {\n   |                     -^ expected type\n   |                     |\n   |                     help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpeillh6n8.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for i in 1..len(strings) {\n    if strings[i].len > max.len {\n      max = strings[i]\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpsawp_3u9.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for i in 1..len(strings) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsawp_3u9.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpsawp_3u9.rs:14:15\n   |\n14 |   for i in 1..len(strings) {\n   |               ^^^ not found in this scope\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmpsawp_3u9.rs:15:19\n   |\n15 |     if strings[i].len > max.len {\n   |                   ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n15 |     if strings[i].len() > max.len {\n   |                      ++\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmpsawp_3u9.rs:15:29\n   |\n15 |     if strings[i].len > max.len {\n   |                             ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n15 |     if strings[i].len > max.len() {\n   |                                ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsawp_3u9.rs:19:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n19 |   return max\n   |          ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |   return Some(max)\n   |          +++++   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0615.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      maxStr = str\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd1jwof1v.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpd1jwof1v.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpd1jwof1v.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       maxStr = str\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd1jwof1v.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd1jwof1v.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpd1jwof1v.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd1jwof1v.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = str\n   |                ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(str)\n   |                +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = strings[0]\n  for i in 1..len(strings) {\n    if strings[i].len > max.len {\n      max = strings[i]\n    }\n  }\n  return max\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp51uoi_06.rs:14:23\n   |\n14 |   let max = strings[0]\n   |                       ^ help: add `;` here\n15 |   for i in 1..len(strings) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp51uoi_06.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp51uoi_06.rs:15:15\n   |\n15 |   for i in 1..len(strings) {\n   |               ^^^ not found in this scope\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmp51uoi_06.rs:16:19\n   |\n16 |     if strings[i].len > max.len {\n   |                   ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n16 |     if strings[i].len() > max.len {\n   |                      ++\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n  --> /tmp/tmp51uoi_06.rs:16:29\n   |\n16 |     if strings[i].len > max.len {\n   |                             ^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n16 |     if strings[i].len > max.len() {\n   |                                ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp51uoi_06.rs:20:10\n   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |                                     -------------- expected `Option<String>` because of return type\n...\n20 |   return max\n   |          ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n20 |   return Some(max)\n   |          +++++   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0615.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = String::from(\"\")\n  for s in strings {\n    if s.len() > max.len() {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp2gn2mqi4.rs:13:29\n   |\n13 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n14 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2gn2mqi4.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings[1:] {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpeillh6n8.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings[1:] {\n   |   --- unexpected token\n\nerror: expected type, found `]`\n  --> /tmp/tmpeillh6n8.rs:14:22\n   |\n14 |   for s in strings[1:] {\n   |                     -^ expected type\n   |                     |\n   |                     help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpeillh6n8.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings[1:] {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpeillh6n8.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings[1:] {\n   |   --- unexpected token\n\nerror: expected type, found `]`\n  --> /tmp/tmpeillh6n8.rs:14:22\n   |\n14 |   for s in strings[1:] {\n   |                     -^ expected type\n   |                     |\n   |                     help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpeillh6n8.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = String::from(\"\")\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp97rzc8pe.rs:14:29\n   |\n14 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp97rzc8pe.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp97rzc8pe.rs:16:8\n   |\n16 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp97rzc8pe.rs:16:17\n   |\n16 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = strings[0]\n  for s in strings[1..] {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_c2rrdhr.rs:14:23\n   |\n14 |   let max = strings[0]\n   |                       ^ help: add `;` here\n15 |   for s in strings[1..] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_c2rrdhr.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_c2rrdhr.rs:16:8\n   |\n16 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_c2rrdhr.rs:16:17\n   |\n16 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0277]: the size for values of type `[String]` cannot be known at compilation time\n  --> /tmp/tmp_c2rrdhr.rs:15:12\n   |\n15 |   for s in strings[1..] {\n   |            ^^^^^^^^^^^^ expected an implementor of trait `IntoIterator`\n   |\n   = note: the trait bound `[String]: IntoIterator` is not satisfied\n   = note: required because of the requirements on the impl of `IntoIterator` for `[String]`\nhelp: consider borrowing here\n   |\n15 |   for s in &strings[1..] {\n   |            +\n15 |   for s in &mut strings[1..] {\n   |            ++++\n\nerror[E0277]: `[String]` is not an iterator\n  --> /tmp/tmp_c2rrdhr.rs:15:12\n   |\n15 |   for s in strings[1..] {\n   |            ^^^^^^^^^^^^ expected an implementor of trait `IntoIterator`\n   |\n   = note: the trait bound `[String]: IntoIterator` is not satisfied\n   = note: required because of the requirements on the impl of `IntoIterator` for `[String]`\nhelp: consider borrowing here\n   |\n15 |   for s in &strings[1..] {\n   |            +\n15 |   for s in &mut strings[1..] {\n   |            ++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpilmg6u_b.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpilmg6u_b.rs:15:20\n   |\n15 |   let maxStr = None\n   |                    ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpilmg6u_b.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpilmg6u_b.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilmg6u_b.rs:19:16\n   |\n15 |   let maxStr = None\n   |                ---- expected due to this value\n...\n19 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = String::from(\"\")\n  for s in strings {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpdy44bn_8.rs:14:29\n   |\n14 |   let max = String::from(\"\")\n   |                             ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdy44bn_8.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdy44bn_8.rs:16:8\n   |\n16 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdy44bn_8.rs:16:17\n   |\n16 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings[1:] {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpeillh6n8.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings[1:] {\n   |   --- unexpected token\n\nerror: expected type, found `]`\n  --> /tmp/tmpeillh6n8.rs:14:22\n   |\n14 |   for s in strings[1:] {\n   |                     -^ expected type\n   |                     |\n   |                     help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpeillh6n8.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings.slice(1) {\n    if len(s) > len(max) {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy_nky0f5.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:8\n   |\n15 |     if len(s) > len(max) {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpy_nky0f5.rs:15:17\n   |\n15 |     if len(s) > len(max) {\n   |                 ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpy_nky0f5.rs:14:20\n   |\n14 |   for s in strings.slice(1) {\n   |                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n14 |   for s in strings.as_slice(1) {\n   |                    ~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_str = s\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw_l4xmyz.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw_l4xmyz.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpw_l4xmyz.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_str = s\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpw_l4xmyz.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_l4xmyz.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = s\n   |                 ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(s)\n   |                 +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = strings[0]\n  for s in strings {\n    if s.len() > max.len() {\n      max = s\n    }\n  }\n  return Some(max)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp07hoq0ah.rs:13:23\n   |\n13 |   let max = strings[0]\n   |                       ^ help: add `;` here\n14 |   for s in strings {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp07hoq0ah.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_str = None\n  for str in strings {\n    if len(str) > max {\n      max = len(str)\n      max_str = str\n    }\n  }\n  return max_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpip71ucr7.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_str = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpip71ucr7.rs:14:21\n   |\n14 |   let max_str = None\n   |                     ^ help: add `;` here\n15 |   for str in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_str`\n  --> /tmp/tmpip71ucr7.rs:17:21\n   |\n17 |       max = len(str)\n   |                     ^ help: add `;` here\n18 |       max_str = str\n   |       ------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:16:8\n   |\n16 |     if len(str) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpip71ucr7.rs:17:13\n   |\n17 |       max = len(str)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpip71ucr7.rs:18:17\n   |\n14 |   let max_str = None\n   |                 ---- expected due to this value\n...\n18 |       max_str = str\n   |                 ^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_str = Some(str)\n   |                 +++++   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu621k_52.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu621k_52.rs:14:24\n   |\n14 |   let max_string = None\n   |                        ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpu621k_52.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpu621k_52.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu621k_52.rs:18:20\n   |\n14 |   let max_string = None\n   |                    ---- expected due to this value\n...\n18 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n  let max = 0\n  let maxStr = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      maxStr = s\n    }\n  }\n  return maxStr\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpot25p6py.rs:13:14\n   |\n13 |   let max = 0\n   |              ^ help: add `;` here\n14 |   let maxStr = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpot25p6py.rs:14:20\n   |\n14 |   let maxStr = None\n   |                    ^ help: add `;` here\n15 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `maxStr`\n  --> /tmp/tmpot25p6py.rs:17:19\n   |\n17 |       max = len(s)\n   |                   ^ help: add `;` here\n18 |       maxStr = s\n   |       ------ unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:16:8\n   |\n16 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpot25p6py.rs:17:13\n   |\n17 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpot25p6py.rs:18:16\n   |\n14 |   let maxStr = None\n   |                ---- expected due to this value\n...\n18 |       maxStr = s\n   |                ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       maxStr = Some(s)\n   |                +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Out of vector of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return None in case the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")])\n/// Some(String::from(\"a\"))\n/// >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"ccc\")])\n/// Some(String::from(\"ccc\"))\nfn longest(strings: Vec<String>) -> Option<String> {\n  if len(strings) == 0 {\n    return None\n  }\n\n  let max = 0\n  let max_string = None\n  for s in strings {\n    if len(s) > max {\n      max = len(s)\n      max_string = s\n    }\n  }\n\n  return max_string\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdj6zxoaz.rs:14:14\n   |\n14 |   let max = 0\n   |              ^ help: add `;` here\n15 |   let max_string = None\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdj6zxoaz.rs:15:24\n   |\n15 |   let max_string = None\n   |                        ^ help: add `;` here\n16 |   for s in strings {\n   |   --- unexpected token\n\nerror: expected `;`, found `max_string`\n  --> /tmp/tmpdj6zxoaz.rs:18:19\n   |\n18 |       max = len(s)\n   |                   ^ help: add `;` here\n19 |       max_string = s\n   |       ---------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:10:6\n   |\n10 |   if len(strings) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:17:8\n   |\n17 |     if len(s) > max {\n   |        ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdj6zxoaz.rs:18:13\n   |\n18 |       max = len(s)\n   |             ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdj6zxoaz.rs:19:20\n   |\n15 |   let max_string = None\n   |                    ---- expected due to this value\n...\n19 |       max_string = s\n   |                    ^ expected enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       max_string = Some(s)\n   |                    +++++ +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}