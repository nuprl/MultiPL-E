{
  "name": "HumanEval_93_encode",
  "language": "rs",
  "prompt": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n",
  "tests": "}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result = \"\";\n    for (let i = 0; i < message.length(); i++) {\n        let c = message[i];\n        if (vowels.includes(c)) {\n            result += vowels2[vowels.indexOf(c) + 2];\n        } else {\n            result += c.toUpperCase();\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp_nohfv7b.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp_nohfv7b.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp_nohfv7b.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp_nohfv7b.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp_nohfv7b.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result = \"\";\n    for (let i = 0; i < message.length(); i++) {\n        let letter = message[i];\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n            result += vowels2[index];\n        } else {\n            result += letter.toUpperCase();\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpq1ktzm_2.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpq1ktzm_2.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpq1ktzm_2.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpq1ktzm_2.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpq1ktzm_2.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_index = vowels.indexOf(message[0])\n  let vowels_index_2 = vowels.indexOf(message[1])\n  let vowels_index_3 = vowels.indexOf(message[2])\n  let vowels_index_4 = vowels.indexOf(message[3])\n  let vowels_index_5 = vowels.indexOf(message[4])\n  let vowels_index_6 = vowels.indexOf(message[5])\n  let vowels_index_7 = vowels.indexOf(message[6])\n  let vowels_index_8 = vowels.indexOf(message[7])\n  let vowels_index_9 = vowels.indexOf(message[8])\n  let vowels_index_10 = vowels.indexOf(message[9])\n  let vowels_index_11 = vowels.indexOf(message[10])\n  let vowels_index_12 = vowels.indexOf(message[11])\n  let vowels_index_13 = vowels.indexOf(message[12])\n  let vowels_index_14 = vowels.indexOf(message[13])\n  let vowels_index_15 = vowels.indexOf(message[14])\n  let vowels_index_16 = vowels.indexOf(message[15])\n  let vowels_index_17 = vowels.indexOf(message[16])\n  let vowels_index_18 = vowels.indexOf(message[17])\n  let vowels_index_19 = vowels.indexOf(message[18])\n  let vowels_index_20 = vowels.indexOf(message[19])\n  let vowels_index_21 = vowels.indexOf(message[20])\n  let vowels_index_22 = vowels.indexOf(message[21])\n  let vowels_index_23 = vowels.indexOf(message[22])\n  let vowels_index_24 = vowels.indexOf(message[23])\n  let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:12:28\n   |\n12 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:13:48\n   |\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |                                                ^ help: add `;` here\n14 |   let vowels_index_2 = vowels.indexOf(message[1])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:14:50\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                  ^ help: add `;` here\n15 |   let vowels_index_3 = vowels.indexOf(message[2])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:15:50\n   |\n15 |   let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                  ^ help: add `;` here\n16 |   let vowels_index_4 = vowels.indexOf(message[3])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:16:50\n   |\n16 |   let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                  ^ help: add `;` here\n17 |   let vowels_index_5 = vowels.indexOf(message[4])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:17:50\n   |\n17 |   let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                  ^ help: add `;` here\n18 |   let vowels_index_6 = vowels.indexOf(message[5])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:18:50\n   |\n18 |   let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                  ^ help: add `;` here\n19 |   let vowels_index_7 = vowels.indexOf(message[6])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_2 = \"AEIOU\"\n    let vowels_3 = \"AEIOUAEIOU\"\n    let vowels_4 = \"AEIOUAEIOUAEIOU\"\n    let vowels_5 = \"AEIOUAEIOUAEIOUAEIOU\"\n    let vowels_6 = \"AEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_7 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_8 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_9 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_10 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_11 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_12 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_13 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_14 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_15 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_16 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEI\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjdp219cl.rs:36:109\n   |\n36 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n37 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_count = vowels.length\n    let vowels_index = 0\n    let message_length = message.length\n    let encoded_message = \"\"\n    for (let i = 0; i < message_length; i++) {\n        let current_letter = message[i]\n        let current_vowel = vowels[vowels_index]\n        let next_vowel = vowels[vowels_index + 1]\n        let encoded_letter = \"\"\n        if (current_letter === current_vowel) {\n            encoded_letter = next_vowel\n            vowels_index += 1\n        } else if (current_letter === next_vowel) {\n            encoded_letter = current_vowel\n            vowels_index -= 1\n        } else {\n            encoded_letter = current_letter\n        }\n        encoded_message += encoded_letter\n    }\n    return encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpalpjn0ke.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_count = vowels.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpalpjn0ke.rs:13:37\n   |\n13 |     let vowels_count = vowels.length\n   |                                     ^ help: add `;` here\n14 |     let vowels_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpalpjn0ke.rs:14:25\n   |\n14 |     let vowels_index = 0\n   |                         ^ help: add `;` here\n15 |     let message_length = message.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpalpjn0ke.rs:15:40\n   |\n15 |     let message_length = message.length\n   |                                        ^ help: add `;` here\n16 |     let encoded_message = \"\"\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpalpjn0ke.rs:16:29\n   |\n16 |     let encoded_message = \"\"\n   |                             ^ help: add `;` here\n17 |     for (let i = 0; i < message_length; i++) {\n   |     --- unexpected token\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpalpjn0ke.rs:17:10\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpalpjn0ke.rs:17:14\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpalpjn0ke.rs:17:16\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpalpjn0ke.rs:17:15\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |               ^ help: try adding `in` here\n\ne",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels_index = vowels.indexOf(message.charAt(0));\n  let vowels_index_2 = vowels.indexOf(message.charAt(1));\n  let vowels_index_3 = vowels.indexOf(message.charAt(2));\n  let vowels_index_4 = vowels.indexOf(message.charAt(3));\n  let vowels_index_5 = vowels.indexOf(message.charAt(4));\n  let vowels_index_6 = vowels.indexOf(message.charAt(5));\n  let vowels_index_7 = vowels.indexOf(message.charAt(6));\n  let vowels_index_8 = vowels.indexOf(message.charAt(7));\n  let vowels_index_9 = vowels.indexOf(message.charAt(8));\n  let vowels_index_10 = vowels.indexOf(message.charAt(9));\n  let vowels_index_11 = vowels.indexOf(message.charAt(10));\n  let vowels_index_12 = vowels.indexOf(message.charAt(11));\n  let vowels_index_13 = vowels.indexOf(message.charAt(12));\n  let vowels_index_14 = vowels.indexOf(message.charAt(13));\n  let vowels_index_15 = vowels.indexOf(message.charAt(14));\n  let vowels_index_16 = vowels.indexOf(message.charAt(15));\n  let vowels_index_17 = vowels.indexOf(message.charAt(16));\n  let vowels_index_18 = vowels.indexOf(message.charAt(17));\n  let vowels_index_19 = vowels.indexOf(message.charAt(18));\n  let vowels_index_20 = vowels.indexOf(message.charAt(19));\n  let vowels_index_21 = vowels.indexOf(message.charAt(20));\n  let vowels_index_22 =\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpboonc89p.rs:35:1\n   |\n35 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpboonc89p.rs:13:29\n   |\n13 |   let vowels_index = vowels.indexOf(message.charAt(0));\n   |                             ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpboonc89p.rs:13:45\n   |\n13 |   let vowels_index = vowels.indexOf(message.charAt(0));\n   |                                             ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpboonc89p.rs:14:31\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpboonc89p.rs:14:47\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpboonc89p.rs:15:31\n   |\n15 |   let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpboonc89p.rs:15:47\n   |\n15 |   let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpboonc89p.rs:16:31\n   |\n16 |   let vowels_index_4 = vowels.indexOf(message.charAt(3));\n   |                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_count = vowels.length\n    let vowels_index = 0\n    let message_length = message.length\n    let encoded_message = \"\"\n    for i in 0..message_length {\n        let letter = message[i]\n        let index = vowels.indexOf(letter)\n        if index != -1 {\n            let next_vowel = vowels[vowels_index + 2]\n            let encoded_letter = next_vowel if index == vowels_count - 1 else vowels[index + 1]\n            encoded_message += encoded_letter\n            vowels_index += 1\n        } else {\n            encoded_message += letter\n        }\n    }\n    return encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu2pnz4z0.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_count = vowels.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu2pnz4z0.rs:13:37\n   |\n13 |     let vowels_count = vowels.length\n   |                                     ^ help: add `;` here\n14 |     let vowels_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu2pnz4z0.rs:14:25\n   |\n14 |     let vowels_index = 0\n   |                         ^ help: add `;` here\n15 |     let message_length = message.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu2pnz4z0.rs:15:40\n   |\n15 |     let message_length = message.length\n   |                                        ^ help: add `;` here\n16 |     let encoded_message = \"\"\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu2pnz4z0.rs:16:29\n   |\n16 |     let encoded_message = \"\"\n   |                             ^ help: add `;` here\n17 |     for i in 0..message_length {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu2pnz4z0.rs:18:32\n   |\n18 |         let letter = message[i]\n   |                                ^ help: add `;` here\n19 |         let index = vowels.indexOf(letter)\n   |         --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpu2pnz4z0.rs:19:43\n   |\n19 |         let index = vowels.indexOf(letter)\n   |                                           ^ help: add `;` here\n20 |         if index != -1 {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu2pnz4z0.rs:21:54\n   |\n21 |             let next_vowel = vowels[vowels_index + 2]\n   |                                                      ^ help: add `;` here\n22 |             let encoded_letter = next_vowel if index == vowels_count - 1 else vowels[index + 1]\n   |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[1]);\n    let vowels_index_3 = vowels.indexOf(message[2]);\n    let vowels_index_4 = vowels.indexOf(message[3]);\n    let vowels_index_5 = vowels.indexOf(message[4]);\n    let vowels_index_6 = vowels.indexOf(message[5]);\n    let vowels_index_7 = vowels.indexOf(message[6]);\n    let vowels_index_8 = vowels.indexOf(message[7]);\n    let vowels_index_9 = vowels.indexOf(message[8]);\n    let vowels_index_10 = vowels.indexOf(message[9]);\n    let vowels_index_11 = vowels.indexOf(message[10]);\n    let vowels_index_12 = vowels.indexOf(message[11]);\n    let vowels_index_13 = vowels.indexOf(message[12]);\n    let vowels_index_14 = vowels.indexOf(message[13]);\n    let vowels_index_15 = vowels.indexOf(message[14]);\n    let vowels_index_16 = vowels.indexOf(message[15]);\n    let vowels_index_17 = vowels.indexOf(message[16]);\n    let vowels_index_18 = vowels.indexOf(message[17]);\n    let vowels_index_19 = vowels.indexOf(message[18]);\n    let vowels_index_20 = vowels.indexOf(message[19]);\n    let vowels_index_21 = vowels.indexOf(message[20]);\n    let vowels_index_22 = vowels.indexOf(message[21]);\n    let vowels_index_23 = vowels.indexOf(message[22]);\n    let vowels_index_24 = vowels.indexOf(message[23]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmp5tm2k_ju.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp5tm2k_ju.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let new_message = message.split(\"\").map(c => {\n        if (c === message[0]) {\n            return vowels[vowels_index + 2];\n        } else {\n            return c.toLowerCase();\n        }\n    }).join(\"\");\n    return new_message;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpsjiyqizc.rs:14:47\n   |\n14 |     let new_message = message.split(\"\").map(c => {\n   |                                               ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[1]);\n    let vowels_index_3 = vowels.indexOf(message[2]);\n    let vowels_index_4 = vowels.indexOf(message[3]);\n    let vowels_index_5 = vowels.indexOf(message[4]);\n    let vowels_index_6 = vowels.indexOf(message[5]);\n    let vowels_index_7 = vowels.indexOf(message[6]);\n    let vowels_index_8 = vowels.indexOf(message[7]);\n    let vowels_index_9 = vowels.indexOf(message[8]);\n    let vowels_index_10 = vowels.indexOf(message[9]);\n    let vowels_index_11 = vowels.indexOf(message[10]);\n    let vowels_index_12 = vowels.indexOf(message[11]);\n    let vowels_index_13 = vowels.indexOf(message[12]);\n    let vowels_index_14 = vowels.indexOf(message[13]);\n    let vowels_index_15 = vowels.indexOf(message[14]);\n    let vowels_index_16 = vowels.indexOf(message[15]);\n    let vowels_index_17 = vowels.indexOf(message[16]);\n    let vowels_index_18 = vowels.indexOf(message[17]);\n    let vowels_index_19 = vowels.indexOf(message[18]);\n    let vowels_index_20 = vowels.indexOf(message[19]);\n    let vowels_index_21 = vowels.indexOf(message[20]);\n    let vowels_index_22 = vowels.indexOf(message[21]);\n    let vowels_index_23 = vowels.indexOf(message[22]);\n    let vowels_index_24 = vowels.indexOf(message[23]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmp5tm2k_ju.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp5tm2k_ju.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message.charAt(0));\n    let vowels_index_2 = vowels.indexOf(message.charAt(1));\n    let vowels_index_3 = vowels.indexOf(message.charAt(2));\n    let vowels_index_4 = vowels.indexOf(message.charAt(3));\n    let vowels_index_5 = vowels.indexOf(message.charAt(4));\n    let vowels_index_6 = vowels.indexOf(message.charAt(5));\n    let vowels_index_7 = vowels.indexOf(message.charAt(6));\n    let vowels_index_8 = vowels.indexOf(message.charAt(7));\n    let vowels_index_9 = vowels.indexOf(message.charAt(8));\n    let vowels_index_10 = vowels.indexOf(message.charAt(9));\n    let vowels_index_11 = vowels.indexOf(message.charAt(10));\n    let vowels_index_12 = vowels.indexOf(message.charAt(11));\n    let vowels_index_13 = vowels.indexOf(message.charAt(12));\n    let vowels_index_14 = vowels.indexOf(message.charAt(13));\n    let vowels_index_15 = vowels.indexOf(message.charAt(14));\n    let vowels_index_16 = vowels.indexOf(message.charAt(15));\n    let vowels_index_17 = vowels.indexOf(message.charAt(16));\n    let vowels_index_18 = vowels.indexOf(message.charAt(17));\n    let vowels_index_19 = vowels.indexOf(message.charAt(18));\n    let vowels_index_20 = vowels.indexOf(message.charAt(19));\n    let vowels_index_21 = vowels.indexOf(message.charAt(20));\n    let vowels_index_22 =\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpkjmbeha2.rs:35:1\n   |\n35 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:47\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:49\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:33\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:49\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:16:33\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message.charAt(3));\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[1]);\n    let vowels_index_3 = vowels.indexOf(message[2]);\n    let vowels_index_4 = vowels.indexOf(message[3]);\n    let vowels_index_5 = vowels.indexOf(message[4]);\n    let vowels_index_6 = vowels.indexOf(message[5]);\n    let vowels_index_7 = vowels.indexOf(message[6]);\n    let vowels_index_8 = vowels.indexOf(message[7]);\n    let vowels_index_9 = vowels.indexOf(message[8]);\n    let vowels_index_10 = vowels.indexOf(message[9]);\n    let vowels_index_11 = vowels.indexOf(message[10]);\n    let vowels_index_12 = vowels.indexOf(message[11]);\n    let vowels_index_13 = vowels.indexOf(message[12]);\n    let vowels_index_14 = vowels.indexOf(message[13]);\n    let vowels_index_15 = vowels.indexOf(message[14]);\n    let vowels_index_16 = vowels.indexOf(message[15]);\n    let vowels_index_17 = vowels.indexOf(message[16]);\n    let vowels_index_18 = vowels.indexOf(message[17]);\n    let vowels_index_19 = vowels.indexOf(message[18]);\n    let vowels_index_20 = vowels.indexOf(message[19]);\n    let vowels_index_21 = vowels.indexOf(message[20]);\n    let vowels_index_22 = vowels.indexOf(message[21]);\n    let vowels_index_23 = vowels.indexOf(message[22]);\n    let vowels_index_24 = vowels.indexOf(message[23]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmp5tm2k_ju.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp5tm2k_ju.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_index = vowels.indexOf(message[0])\n  let vowels_index_2 = vowels.indexOf(message[2])\n  let vowels_index_3 = vowels.indexOf(message[3])\n  let vowels_index_4 = vowels.indexOf(message[4])\n  let vowels_index_5 = vowels.indexOf(message[5])\n  let vowels_index_6 = vowels.indexOf(message[6])\n  let vowels_index_7 = vowels.indexOf(message[7])\n  let vowels_index_8 = vowels.indexOf(message[8])\n  let vowels_index_9 = vowels.indexOf(message[9])\n  let vowels_index_10 = vowels.indexOf(message[10])\n  let vowels_index_11 = vowels.indexOf(message[11])\n  let vowels_index_12 = vowels.indexOf(message[12])\n  let vowels_index_13 = vowels.indexOf(message[13])\n  let vowels_index_14 = vowels.indexOf(message[14])\n  let vowels_index_15 = vowels.indexOf(message[15])\n  let vowels_index_16 = vowels.indexOf(message[16])\n  let vowels_index_17 = vowels.indexOf(message[17])\n  let vowels_index_18 = vowels.indexOf(message[18])\n  let vowels_index_19 = vowels.indexOf(message[19])\n  let vowels_index_20 = vowels.indexOf(message[20])\n  let vowels_index_21 = vowels.indexOf(message[21])\n  let vowels_index_22 = vowels.indexOf(message[22])\n  let vowels_index_23 = vowels.indexOf(message[23])\n  let vowels_index_24 = vowels.indexOf(message[24])\n  let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:12:28\n   |\n12 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:13:48\n   |\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |                                                ^ help: add `;` here\n14 |   let vowels_index_2 = vowels.indexOf(message[2])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:14:50\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                  ^ help: add `;` here\n15 |   let vowels_index_3 = vowels.indexOf(message[3])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:15:50\n   |\n15 |   let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                  ^ help: add `;` here\n16 |   let vowels_index_4 = vowels.indexOf(message[4])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:16:50\n   |\n16 |   let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                  ^ help: add `;` here\n17 |   let vowels_index_5 = vowels.indexOf(message[5])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:17:50\n   |\n17 |   let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                  ^ help: add `;` here\n18 |   let vowels_index_6 = vowels.indexOf(message[6])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:18:50\n   |\n18 |   let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                  ^ help: add `;` here\n19 |   let vowels_index_7 = vowels.indexOf(message[7])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels_index = vowels.indexOf(message[0]);\n  let vowels_index_2 = vowels.indexOf(message[2]);\n  let vowels_index_3 = vowels.indexOf(message[3]);\n  let vowels_index_4 = vowels.indexOf(message[4]);\n  let vowels_index_5 = vowels.indexOf(message[5]);\n  let vowels_index_6 = vowels.indexOf(message[6]);\n  let vowels_index_7 = vowels.indexOf(message[7]);\n  let vowels_index_8 = vowels.indexOf(message[8]);\n  let vowels_index_9 = vowels.indexOf(message[9]);\n  let vowels_index_10 = vowels.indexOf(message[10]);\n  let vowels_index_11 = vowels.indexOf(message[11]);\n  let vowels_index_12 = vowels.indexOf(message[12]);\n  let vowels_index_13 = vowels.indexOf(message[13]);\n  let vowels_index_14 = vowels.indexOf(message[14]);\n  let vowels_index_15 = vowels.indexOf(message[15]);\n  let vowels_index_16 = vowels.indexOf(message[16]);\n  let vowels_index_17 = vowels.indexOf(message[17]);\n  let vowels_index_18 = vowels.indexOf(message[18]);\n  let vowels_index_19 = vowels.indexOf(message[19]);\n  let vowels_index_20 = vowels.indexOf(message[20]);\n  let vowels_index_21 = vowels.indexOf(message[21]);\n  let vowels_index_22 = vowels.indexOf(message[22]);\n  let vowels_index_23 = vowels.indexOf(message[23]);\n  let vowels_index_24 = vowels.indexOf(message[24]);\n  let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmye1u5s_.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmye1u5s_.rs:37:32\n   |\n37 |   let vowels_index_25 = vowels.\n   |                                ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmye1u5s_.rs:13:29\n   |\n13 |   let vowels_index = vowels.indexOf(message[0]);\n   |                             ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmye1u5s_.rs:13:37\n   |\n13 |   let vowels_index = vowels.indexOf(message[0]);\n   |                                     ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmye1u5s_.rs:14:31\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message[2]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmye1u5s_.rs:14:39\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result = \"\";\n    for (let i = 0; i < message.length(); i++) {\n        let letter = message[i];\n        if (vowels.includes(letter)) {\n            let index = vowels2.indexOf(letter);\n            result += message[index + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpgtxwpf_j.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpgtxwpf_j.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpgtxwpf_j.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpgtxwpf_j.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpgtxwpf_j.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message.charAt(0));\n    let vowels_index_2 = vowels.indexOf(message.charAt(1));\n    let vowels_index_3 = vowels.indexOf(message.charAt(2));\n    let vowels_index_4 = vowels.indexOf(message.charAt(3));\n    let vowels_index_5 = vowels.indexOf(message.charAt(4));\n    let vowels_index_6 = vowels.indexOf(message.charAt(5));\n    let vowels_index_7 = vowels.indexOf(message.charAt(6));\n    let vowels_index_8 = vowels.indexOf(message.charAt(7));\n    let vowels_index_9 = vowels.indexOf(message.charAt(8));\n    let vowels_index_10 = vowels.indexOf(message.charAt(9));\n    let vowels_index_11 = vowels.indexOf(message.charAt(10));\n    let vowels_index_12 = vowels.indexOf(message.charAt(11));\n    let vowels_index_13 = vowels.indexOf(message.charAt(12));\n    let vowels_index_14 = vowels.indexOf(message.charAt(13));\n    let vowels_index_15 = vowels.indexOf(message.charAt(14));\n    let vowels_index_16 = vowels.indexOf(message.charAt(15));\n    let vowels_index_17 = vowels.indexOf(message.charAt(16));\n    let vowels_index_18 = vowels.indexOf(message.charAt(17));\n    let vowels_index_19 = vowels.indexOf(message.charAt(18));\n    let vowels_index_20 = vowels.indexOf(message.charAt(19));\n    let vowels_index_21 = vowels.indexOf(message.charAt(20));\n    let vowels_index_22 =\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpkjmbeha2.rs:35:1\n   |\n35 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:47\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:49\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:33\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:49\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:16:33\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message.charAt(3));\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[1])\n    let vowels_index3 = vowels.indexOf(message[2])\n    let vowels_index4 = vowels.indexOf(message[3])\n    let vowels_index5 = vowels.indexOf(message[4])\n    let vowels_index6 = vowels.indexOf(message[5])\n    let vowels_index7 = vowels.indexOf(message[6])\n    let vowels_index8 = vowels.indexOf(message[7])\n    let vowels_index9 = vowels.indexOf(message[8])\n    let vowels_index10 = vowels.indexOf(message[9])\n    let vowels_index11 = vowels.indexOf(message[10])\n    let vowels_index12 = vowels.indexOf(message[11])\n    let vowels_index13 = vowels.indexOf(message[12])\n    let vowels_index14 = vowels.indexOf(message[13])\n    let vowels_index15 = vowels.indexOf(message[14])\n    let vowels_index16 = vowels.indexOf(message[15])\n    let vowels_index17 = vowels.indexOf(message[16])\n    let vowels_index18 = vowels.indexOf(message[17])\n    let vowels_index19 = vowels.indexOf(message[18])\n    let vowels_index20 = vowels.indexOf(message[19])\n    let vowels_index21 = vowels.indexOf(message[20])\n    let vowels_index22 = vowels.indexOf(message[21])\n    let vowels_index23 = vowels.indexOf(message[22])\n    let vowels_index24 = vowels.indexOf(message[23])\n    let vowels_index25 = vowels.indexOf(message[24])\n    let vowels_index26 = vowels.indexOf(message[25])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:18:51\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |                                                   ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expecte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[1])\n    let vowels_index3 = vowels.indexOf(message[2])\n    let vowels_index4 = vowels.indexOf(message[3])\n    let vowels_index5 = vowels.indexOf(message[4])\n    let vowels_index6 = vowels.indexOf(message[5])\n    let vowels_index7 = vowels.indexOf(message[6])\n    let vowels_index8 = vowels.indexOf(message[7])\n    let vowels_index9 = vowels.indexOf(message[8])\n    let vowels_index10 = vowels.indexOf(message[9])\n    let vowels_index11 = vowels.indexOf(message[10])\n    let vowels_index12 = vowels.indexOf(message[11])\n    let vowels_index13 = vowels.indexOf(message[12])\n    let vowels_index14 = vowels.indexOf(message[13])\n    let vowels_index15 = vowels.indexOf(message[14])\n    let vowels_index16 = vowels.indexOf(message[15])\n    let vowels_index17 = vowels.indexOf(message[16])\n    let vowels_index18 = vowels.indexOf(message[17])\n    let vowels_index19 = vowels.indexOf(message[18])\n    let vowels_index20 = vowels.indexOf(message[19])\n    let vowels_index21 = vowels.indexOf(message[20])\n    let vowels_index22 = vowels.indexOf(message[21])\n    let vowels_index23 = vowels.indexOf(message[22])\n    let vowels_index24 = vowels.indexOf(message[23])\n    let vowels_index25 = vowels.indexOf(message[24])\n    let vowels_index26 = vowels.indexOf(message[25])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:18:51\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |                                                   ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expecte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count = vowels.length;\n    let vowels_index = 0;\n    let message_length = message.length;\n    let encoded_message = \"\";\n    for (let i = 0; i < message_length; i++) {\n        let current_letter = message[i];\n        let current_vowel = vowels[vowels_index];\n        let next_vowel = vowels[vowels_index + 1];\n        let encoded_letter = current_letter.toUpperCase();\n        if (current_letter === current_vowel) {\n            encoded_letter = next_vowel;\n            vowels_index += 1;\n        }\n        encoded_message += encoded_letter;\n    }\n    return encoded_message;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp2ot2niv2.rs:17:10\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp2ot2niv2.rs:17:14\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp2ot2niv2.rs:17:16\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp2ot2niv2.rs:17:15\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp2ot2niv2.rs:17:16\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |                ^ expected expression\n\nerror[E0609]: no field `length` on type `[&str; 5]`\n  --> /tmp/tmp2ot2niv2.rs:13:31\n   |\n13 |     let vowels_count = vowels.length;\n   |                               ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp2ot2niv2.rs:15:34\n   |\n15 |     let message_length = message.length;\n   |                                  ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_index = vowels.indexOf(message[0])\n  let vowels_index_2 = vowels.indexOf(message[2])\n  let vowels_index_3 = vowels.indexOf(message[3])\n  let vowels_index_4 = vowels.indexOf(message[4])\n  let vowels_index_5 = vowels.indexOf(message[5])\n  let vowels_index_6 = vowels.indexOf(message[6])\n  let vowels_index_7 = vowels.indexOf(message[7])\n  let vowels_index_8 = vowels.indexOf(message[8])\n  let vowels_index_9 = vowels.indexOf(message[9])\n  let vowels_index_10 = vowels.indexOf(message[10])\n  let vowels_index_11 = vowels.indexOf(message[11])\n  let vowels_index_12 = vowels.indexOf(message[12])\n  let vowels_index_13 = vowels.indexOf(message[13])\n  let vowels_index_14 = vowels.indexOf(message[14])\n  let vowels_index_15 = vowels.indexOf(message[15])\n  let vowels_index_16 = vowels.indexOf(message[16])\n  let vowels_index_17 = vowels.indexOf(message[17])\n  let vowels_index_18 = vowels.indexOf(message[18])\n  let vowels_index_19 = vowels.indexOf(message[19])\n  let vowels_index_20 = vowels.indexOf(message[20])\n  let vowels_index_21 = vowels.indexOf(message[21])\n  let vowels_index_22 = vowels.indexOf(message[22])\n  let vowels_index_23 = vowels.indexOf(message[23])\n  let vowels_index_24 = vowels.indexOf(message[24])\n  let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:12:28\n   |\n12 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:13:48\n   |\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |                                                ^ help: add `;` here\n14 |   let vowels_index_2 = vowels.indexOf(message[2])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:14:50\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                  ^ help: add `;` here\n15 |   let vowels_index_3 = vowels.indexOf(message[3])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:15:50\n   |\n15 |   let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                  ^ help: add `;` here\n16 |   let vowels_index_4 = vowels.indexOf(message[4])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:16:50\n   |\n16 |   let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                  ^ help: add `;` here\n17 |   let vowels_index_5 = vowels.indexOf(message[5])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:17:50\n   |\n17 |   let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                  ^ help: add `;` here\n18 |   let vowels_index_6 = vowels.indexOf(message[6])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:18:50\n   |\n18 |   let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                  ^ help: add `;` here\n19 |   let vowels_index_7 = vowels.indexOf(message[7])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result = \"\";\n    for (let i = 0; i < message.length(); i++) {\n        let letter = message[i];\n        if (vowels.includes(letter)) {\n            let index = vowels2.indexOf(letter);\n            result += vowels2[index + 2];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpic3y293v.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpic3y293v.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpic3y293v.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpic3y293v.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpic3y293v.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\"];\n    let vowels5 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\"];\n    let vowels7 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"S\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"S\", \"X\"];\n    let vowels9 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"S\", \"X\", \"Z\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"S\", \"X\", \"Z\", \"B\"];\n    let vowels11 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"S\", \"X\", \"Z\", \"B\", \"M\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"S\", \"X\", \"Z\", \"B\", \"M\", \"N\"];\n    let vowels13 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"S\", \"X\", \"Z\", \"B\", \"M\", \"N\", \"R\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpva6aleep.rs:34:109\n   |\n34 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n35 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let new_message = \"\";\n    for (let i = 0; i < message.length(); i++) {\n        let c = message[i];\n        if (vowels.includes(c)) {\n            let index = vowels2.indexOf(c);\n            let new_c = vowels2[index + 2];\n            new_message += new_c;\n        } else {\n            new_message += c;\n        }\n    }\n    return new_message;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp39ilgdd7.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp39ilgdd7.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp39ilgdd7.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp39ilgdd7.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp39ilgdd7.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[1]);\n    let vowels_index_3 = vowels.indexOf(message[2]);\n    let vowels_index_4 = vowels.indexOf(message[3]);\n    let vowels_index_5 = vowels.indexOf(message[4]);\n    let vowels_index_6 = vowels.indexOf(message[5]);\n    let vowels_index_7 = vowels.indexOf(message[6]);\n    let vowels_index_8 = vowels.indexOf(message[7]);\n    let vowels_index_9 = vowels.indexOf(message[8]);\n    let vowels_index_10 = vowels.indexOf(message[9]);\n    let vowels_index_11 = vowels.indexOf(message[10]);\n    let vowels_index_12 = vowels.indexOf(message[11]);\n    let vowels_index_13 = vowels.indexOf(message[12]);\n    let vowels_index_14 = vowels.indexOf(message[13]);\n    let vowels_index_15 = vowels.indexOf(message[14]);\n    let vowels_index_16 = vowels.indexOf(message[15]);\n    let vowels_index_17 = vowels.indexOf(message[16]);\n    let vowels_index_18 = vowels.indexOf(message[17]);\n    let vowels_index_19 = vowels.indexOf(message[18]);\n    let vowels_index_20 = vowels.indexOf(message[19]);\n    let vowels_index_21 = vowels.indexOf(message[20]);\n    let vowels_index_22 = vowels.indexOf(message[21]);\n    let vowels_index_23 = vowels.indexOf(message[22]);\n    let vowels_index_24 = vowels.indexOf(message[23]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmp5tm2k_ju.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp5tm2k_ju.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_count = vowels.length\n    let vowels_index = 0\n    let message_length = message.length\n    let encoded_message = \"\"\n    for i in range(0, message_length) {\n        let current_letter = message[i]\n        let current_vowel = vowels[vowels_index]\n        let next_vowel = vowels[vowels_index + 2]\n        let encoded_letter = \"\"\n        if current_letter == current_vowel:\n            encoded_letter = next_vowel\n        else:\n            encoded_letter = current_letter\n        encoded_message += encoded_letter\n        vowels_index += 1\n        if vowels_index == vowels_count:\n            vowels_index = 0\n    }\n    return encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpe2dcst43.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_count = vowels.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpe2dcst43.rs:13:37\n   |\n13 |     let vowels_count = vowels.length\n   |                                     ^ help: add `;` here\n14 |     let vowels_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpe2dcst43.rs:14:25\n   |\n14 |     let vowels_index = 0\n   |                         ^ help: add `;` here\n15 |     let message_length = message.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpe2dcst43.rs:15:40\n   |\n15 |     let message_length = message.length\n   |                                        ^ help: add `;` here\n16 |     let encoded_message = \"\"\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpe2dcst43.rs:16:29\n   |\n16 |     let encoded_message = \"\"\n   |                             ^ help: add `;` here\n17 |     for i in range(0, message_length) {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpe2dcst43.rs:18:40\n   |\n18 |         let current_letter = message[i]\n   |                                        ^ help: add `;` here\n19 |         let current_vowel = vowels[vowels_index]\n   |         --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpe2dcst43.rs:19:49\n   |\n19 |         let current_vowel = vowels[vowels_index]\n   |                                                 ^ help: add `;` here\n20 |         let next_vowel = vowels[vowels_index + 2]\n   |         --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpe2dcst43.rs:20:50\n   |\n20 |         let next_vowel = vowels[vowels_index + 2]\n   |                                                  ^ help: add `;` here\n21 |         let encoded_letter = \"\"\n   |         --- ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[1])\n    let vowels_index3 = vowels.indexOf(message[2])\n    let vowels_index4 = vowels.indexOf(message[3])\n    let vowels_index5 = vowels.indexOf(message[4])\n    let vowels_index6 = vowels.indexOf(message[5])\n    let vowels_index7 = vowels.indexOf(message[6])\n    let vowels_index8 = vowels.indexOf(message[7])\n    let vowels_index9 = vowels.indexOf(message[8])\n    let vowels_index10 = vowels.indexOf(message[9])\n    let vowels_index11 = vowels.indexOf(message[10])\n    let vowels_index12 = vowels.indexOf(message[11])\n    let vowels_index13 = vowels.indexOf(message[12])\n    let vowels_index14 = vowels.indexOf(message[13])\n    let vowels_index15 = vowels.indexOf(message[14])\n    let vowels_index16 = vowels.indexOf(message[15])\n    let vowels_index17 = vowels.indexOf(message[16])\n    let vowels_index18 = vowels.indexOf(message[17])\n    let vowels_index19 = vowels.indexOf(message[18])\n    let vowels_index20 = vowels.indexOf(message[19])\n    let vowels_index21 = vowels.indexOf(message[20])\n    let vowels_index22 = vowels.indexOf(message[21])\n    let vowels_index23 = vowels.indexOf(message[22])\n    let vowels_index24 = vowels.indexOf(message[23])\n    let vowels_index25 = vowels.indexOf(message[24])\n    let vowels_index26 = vowels.indexOf(message[25])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:18:51\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |                                                   ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expecte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result = \"\";\n    for (let i = 0; i < message.length(); i++) {\n        let letter = message[i];\n        if (vowels.includes(letter)) {\n            let index = vowels2.indexOf(letter);\n            let index2 = index + 2;\n            if (index2 < vowels2.length) {\n                result += vowels2[index2];\n            } else {\n                result += vowels2[index];\n            }\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmphxre0hmw.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmphxre0hmw.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmphxre0hmw.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmphxre0hmw.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmphxre0hmw.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result = \"\";\n    for (let i = 0; i < message.length(); i++) {\n        let letter = message[i];\n        let index = vowels.indexOf(letter);\n        if (index != -1) {\n            result += vowels2[index];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmphhow9vdn.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmphhow9vdn.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmphhow9vdn.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmphhow9vdn.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmphhow9vdn.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_index = vowels.indexOf(message[0])\n  let vowels_index_2 = vowels.indexOf(message[2])\n  let vowels_index_3 = vowels.indexOf(message[3])\n  let vowels_index_4 = vowels.indexOf(message[4])\n  let vowels_index_5 = vowels.indexOf(message[5])\n  let vowels_index_6 = vowels.indexOf(message[6])\n  let vowels_index_7 = vowels.indexOf(message[7])\n  let vowels_index_8 = vowels.indexOf(message[8])\n  let vowels_index_9 = vowels.indexOf(message[9])\n  let vowels_index_10 = vowels.indexOf(message[10])\n  let vowels_index_11 = vowels.indexOf(message[11])\n  let vowels_index_12 = vowels.indexOf(message[12])\n  let vowels_index_13 = vowels.indexOf(message[13])\n  let vowels_index_14 = vowels.indexOf(message[14])\n  let vowels_index_15 = vowels.indexOf(message[15])\n  let vowels_index_16 = vowels.indexOf(message[16])\n  let vowels_index_17 = vowels.indexOf(message[17])\n  let vowels_index_18 = vowels.indexOf(message[18])\n  let vowels_index_19 = vowels.indexOf(message[19])\n  let vowels_index_20 = vowels.indexOf(message[20])\n  let vowels_index_21 = vowels.indexOf(message[21])\n  let vowels_index_22 = vowels.indexOf(message[22])\n  let vowels_index_23 = vowels.indexOf(message[23])\n  let vowels_index_24 = vowels.indexOf(message[24])\n  let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:12:28\n   |\n12 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:13:48\n   |\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |                                                ^ help: add `;` here\n14 |   let vowels_index_2 = vowels.indexOf(message[2])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:14:50\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                  ^ help: add `;` here\n15 |   let vowels_index_3 = vowels.indexOf(message[3])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:15:50\n   |\n15 |   let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                  ^ help: add `;` here\n16 |   let vowels_index_4 = vowels.indexOf(message[4])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:16:50\n   |\n16 |   let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                  ^ help: add `;` here\n17 |   let vowels_index_5 = vowels.indexOf(message[5])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:17:50\n   |\n17 |   let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                  ^ help: add `;` here\n18 |   let vowels_index_6 = vowels.indexOf(message[6])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:18:50\n   |\n18 |   let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                  ^ help: add `;` here\n19 |   let vowels_index_7 = vowels.indexOf(message[7])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[1])\n    let vowels_index3 = vowels.indexOf(message[2])\n    let vowels_index4 = vowels.indexOf(message[3])\n    let vowels_index5 = vowels.indexOf(message[4])\n    let vowels_index6 = vowels.indexOf(message[5])\n    let vowels_index7 = vowels.indexOf(message[6])\n    let vowels_index8 = vowels.indexOf(message[7])\n    let vowels_index9 = vowels.indexOf(message[8])\n    let vowels_index10 = vowels.indexOf(message[9])\n    let vowels_index11 = vowels.indexOf(message[10])\n    let vowels_index12 = vowels.indexOf(message[11])\n    let vowels_index13 = vowels.indexOf(message[12])\n    let vowels_index14 = vowels.indexOf(message[13])\n    let vowels_index15 = vowels.indexOf(message[14])\n    let vowels_index16 = vowels.indexOf(message[15])\n    let vowels_index17 = vowels.indexOf(message[16])\n    let vowels_index18 = vowels.indexOf(message[17])\n    let vowels_index19 = vowels.indexOf(message[18])\n    let vowels_index20 = vowels.indexOf(message[19])\n    let vowels_index21 = vowels.indexOf(message[20])\n    let vowels_index22 = vowels.indexOf(message[21])\n    let vowels_index23 = vowels.indexOf(message[22])\n    let vowels_index24 = vowels.indexOf(message[23])\n    let vowels_index25 = vowels.indexOf(message[24])\n    let vowels_index26 = vowels.indexOf(message[25])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:18:51\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |                                                   ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expecte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_count = vowels.length\n    let vowels_index_2 = vowels_index + 2\n    let vowels_count_2 = vowels_count + 2\n    let vowels_index_3 = vowels_index + 3\n    let vowels_count_3 = vowels_count + 3\n    let vowels_index_4 = vowels_index + 4\n    let vowels_count_4 = vowels_count + 4\n    let vowels_index_5 = vowels_index + 5\n    let vowels_count_5 = vowels_count + 5\n    let vowels_index_6 = vowels_index + 6\n    let vowels_count_6 = vowels_count + 6\n    let vowels_index_7 = vowels_index + 7\n    let vowels_count_7 = vowels_count + 7\n    let vowels_index_8 = vowels_index + 8\n    let vowels_count_8 = vowels_count + 8\n    let vowels_index_9 = vowels_index + 9\n    let vowels_count_9 = vowels_count + 9\n    let vowels_index_10 = vowels_index + 10\n    let vowels_count_10 = vowels_count + 10\n    let vowels_index_11 = vowels_index + 11\n    let vowels_count_11 = vowels_count + 11\n    let vowels_index_12 = vowels_index + 12\n    let vowels_count_12 = vowels_count + 12\n    let vowels_index_13 = vowels_index + 13\n    let vowels_count_13 = vowels_count + 13\n    let vowels_index_14 = vowels_index + 14\n    let vowels_count_14 = vowels_count + 14\n    let vowels_index_15 = vowels_index + 15\n    let vowels_count_15 = vowels_count + 15\n    let vowels_index_16 = vowels_index + 16\n    let vowels\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_2w89xtw.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_2w89xtw.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_count = vowels.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_2w89xtw.rs:14:37\n   |\n14 |     let vowels_count = vowels.length\n   |                                     ^ help: add `;` here\n15 |     let vowels_index_2 = vowels_index + 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_2w89xtw.rs:15:42\n   |\n15 |     let vowels_index_2 = vowels_index + 2\n   |                                          ^ help: add `;` here\n16 |     let vowels_count_2 = vowels_count + 2\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_2w89xtw.rs:16:42\n   |\n16 |     let vowels_count_2 = vowels_count + 2\n   |                                          ^ help: add `;` here\n17 |     let vowels_index_3 = vowels_index + 3\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_2w89xtw.rs:17:42\n   |\n17 |     let vowels_index_3 = vowels_index + 3\n   |                                          ^ help: add `;` here\n18 |     let vowels_count_3 = vowels_count + 3\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_2w89xtw.rs:18:42\n   |\n18 |     let vowels_count_3 = vowels_count + 3\n   |                                          ^ help: add `;` here\n19 |     let vowels_index_4 = vowels_index + 4\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_2w89xtw.rs:19:42\n   |\n19 |     let vowels_index_4 = vowels_index + 4\n   |                                          ^ ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[1])\n    let vowels_index3 = vowels.indexOf(message[2])\n    let vowels_index4 = vowels.indexOf(message[3])\n    let vowels_index5 = vowels.indexOf(message[4])\n    let vowels_index6 = vowels.indexOf(message[5])\n    let vowels_index7 = vowels.indexOf(message[6])\n    let vowels_index8 = vowels.indexOf(message[7])\n    let vowels_index9 = vowels.indexOf(message[8])\n    let vowels_index10 = vowels.indexOf(message[9])\n    let vowels_index11 = vowels.indexOf(message[10])\n    let vowels_index12 = vowels.indexOf(message[11])\n    let vowels_index13 = vowels.indexOf(message[12])\n    let vowels_index14 = vowels.indexOf(message[13])\n    let vowels_index15 = vowels.indexOf(message[14])\n    let vowels_index16 = vowels.indexOf(message[15])\n    let vowels_index17 = vowels.indexOf(message[16])\n    let vowels_index18 = vowels.indexOf(message[17])\n    let vowels_index19 = vowels.indexOf(message[18])\n    let vowels_index20 = vowels.indexOf(message[19])\n    let vowels_index21 = vowels.indexOf(message[20])\n    let vowels_index22 = vowels.indexOf(message[21])\n    let vowels_index23 = vowels.indexOf(message[22])\n    let vowels_index24 = vowels.indexOf(message[23])\n    let vowels_index25 = vowels.indexOf(message[24])\n    let vowels_index26 = vowels.indexOf(message[25])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:18:51\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |                                                   ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expecte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[1]);\n    let vowels_index_3 = vowels.indexOf(message[2]);\n    let vowels_index_4 = vowels.indexOf(message[3]);\n    let vowels_index_5 = vowels.indexOf(message[4]);\n    let vowels_index_6 = vowels.indexOf(message[5]);\n    let vowels_index_7 = vowels.indexOf(message[6]);\n    let vowels_index_8 = vowels.indexOf(message[7]);\n    let vowels_index_9 = vowels.indexOf(message[8]);\n    let vowels_index_10 = vowels.indexOf(message[9]);\n    let vowels_index_11 = vowels.indexOf(message[10]);\n    let vowels_index_12 = vowels.indexOf(message[11]);\n    let vowels_index_13 = vowels.indexOf(message[12]);\n    let vowels_index_14 = vowels.indexOf(message[13]);\n    let vowels_index_15 = vowels.indexOf(message[14]);\n    let vowels_index_16 = vowels.indexOf(message[15]);\n    let vowels_index_17 = vowels.indexOf(message[16]);\n    let vowels_index_18 = vowels.indexOf(message[17]);\n    let vowels_index_19 = vowels.indexOf(message[18]);\n    let vowels_index_20 = vowels.indexOf(message[19]);\n    let vowels_index_21 = vowels.indexOf(message[20]);\n    let vowels_index_22 = vowels.indexOf(message[21]);\n    let vowels_index_23 = vowels.indexOf(message[22]);\n    let vowels_index_24 = vowels.indexOf(message[23]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmp5tm2k_ju.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp5tm2k_ju.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_count = 0\n    let vowels_index = 0\n    let vowels_index2 = 0\n    let message_copy = message\n    let encoded_message = \"\"\n    for i in range(0, len(message_copy)) {\n        if message_copy[i] in vowels {\n            vowels_count += 1\n            vowels_index = i\n            vowels_index2 = i + 2\n            if vowels_index2 > len(message_copy) {\n                vowels_index2 = 0\n            }\n        }\n        encoded_message += message_copy[i].toUpper()\n    }\n    return encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpoe4yuh4v.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_count = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoe4yuh4v.rs:13:25\n   |\n13 |     let vowels_count = 0\n   |                         ^ help: add `;` here\n14 |     let vowels_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoe4yuh4v.rs:14:25\n   |\n14 |     let vowels_index = 0\n   |                         ^ help: add `;` here\n15 |     let vowels_index2 = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoe4yuh4v.rs:15:26\n   |\n15 |     let vowels_index2 = 0\n   |                          ^ help: add `;` here\n16 |     let message_copy = message\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoe4yuh4v.rs:16:31\n   |\n16 |     let message_copy = message\n   |                               ^ help: add `;` here\n17 |     let encoded_message = \"\"\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpoe4yuh4v.rs:17:29\n   |\n17 |     let encoded_message = \"\"\n   |                             ^ help: add `;` here\n18 |     for i in range(0, len(message_copy)) {\n   |     --- unexpected token\n\nerror: expected `{`, found keyword `in`\n  --> /tmp/tmpoe4yuh4v.rs:19:28\n   |\n19 |         if message_copy[i] in vowels {\n   |         --                 ^^ expected `{`\n   |         |\n   |         this `if` expression has a condition, but no block\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpoe4yuh4v.rs:18:14\n   |\n18 |     for i in range(0, len(message_copy)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpoe4yuh4v.rs:18:23\n   |\n18 |     for i in range(0, len(message_copy)) {\n   |       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[1]);\n    let vowels_index_3 = vowels.indexOf(message[2]);\n    let vowels_index_4 = vowels.indexOf(message[3]);\n    let vowels_index_5 = vowels.indexOf(message[4]);\n    let vowels_index_6 = vowels.indexOf(message[5]);\n    let vowels_index_7 = vowels.indexOf(message[6]);\n    let vowels_index_8 = vowels.indexOf(message[7]);\n    let vowels_index_9 = vowels.indexOf(message[8]);\n    let vowels_index_10 = vowels.indexOf(message[9]);\n    let vowels_index_11 = vowels.indexOf(message[10]);\n    let vowels_index_12 = vowels.indexOf(message[11]);\n    let vowels_index_13 = vowels.indexOf(message[12]);\n    let vowels_index_14 = vowels.indexOf(message[13]);\n    let vowels_index_15 = vowels.indexOf(message[14]);\n    let vowels_index_16 = vowels.indexOf(message[15]);\n    let vowels_index_17 = vowels.indexOf(message[16]);\n    let vowels_index_18 = vowels.indexOf(message[17]);\n    let vowels_index_19 = vowels.indexOf(message[18]);\n    let vowels_index_20 = vowels.indexOf(message[19]);\n    let vowels_index_21 = vowels.indexOf(message[20]);\n    let vowels_index_22 = vowels.indexOf(message[21]);\n    let vowels_index_23 = vowels.indexOf(message[22]);\n    let vowels_index_24 = vowels.indexOf(message[23]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmp5tm2k_ju.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp5tm2k_ju.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result = \"\";\n    for (let i = 0; i < message.length(); i++) {\n        let letter = message[i];\n        let index = vowels.indexOf(letter);\n        if (index > -1) {\n            result += vowels2[index];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpc65t1zwr.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpc65t1zwr.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpc65t1zwr.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpc65t1zwr.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpc65t1zwr.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count = vowels.length;\n    let vowels_index = 0;\n    let vowels_letter = vowels[vowels_index];\n    let vowels_letter_count = vowels_letter.length;\n    let vowels_letter_index = 0;\n    let vowels_letter_letter = vowels_letter[vowels_letter_index];\n    let vowels_letter_letter_count = vowels_letter_letter.length;\n    let vowels_letter_letter_index = 0;\n    let vowels_letter_letter_letter = vowels_letter_letter[vowels_letter_letter_index];\n    let vowels_letter_letter_letter_count = vowels_letter_letter_letter.length;\n    let vowels_letter_letter_letter_index = 0;\n    let vowels_letter_letter_letter_letter = vowels_letter_letter_letter[vowels_letter_letter_letter_index];\n    let vowels_letter_letter_letter_letter_count = vowels_letter_letter_letter_letter.length;\n    let vowels_letter_letter_letter_letter_index = 0;\n    let vowels_letter_letter_letter_letter_letter = vowels_letter_letter_letter_letter[vowels_letter_letter_letter_letter_index];\n    let vowels_letter_letter_letter_letter_letter_count = vowels_letter_letter_letter_letter_letter.length;\n    let vowels_letter_letter_letter_letter_letter_index = 0;\n    let vowels_letter_letter_letter_letter_letter_letter = vowels_letter_letter_letter_letter_letter[vowels_letter_letter_letter_letter_letter_index];\n    let vowels_letter_letter_letter_letter_letter_letter_count = vowels_letter_letter_letter_letter_letter_letter.length;\n    let vowels_letter_letter_letter_letter_letter_letter_index = 0;\n    let vowels_letter_letter_letter_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpvusaisel.rs:33:37\n   |\n33 |     let vowels_letter_letter_letter_\n   |                                     ^ help: add `;` here\n34 | }\n   | - unexpected token\n\nerror[E0609]: no field `length` on type `[&str; 5]`\n  --> /tmp/tmpvusaisel.rs:13:31\n   |\n13 |     let vowels_count = vowels.length;\n   |                               ^^^^^^\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpvusaisel.rs:16:45\n   |\n16 |     let vowels_letter_count = vowels_letter.length;\n   |                                             ^^^^^^\n\nerror[E0277]: the type `str` cannot be indexed by `{integer}`\n  --> /tmp/tmpvusaisel.rs:18:32\n   |\n18 |     let vowels_letter_letter = vowels_letter[vowels_letter_index];\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string indices are ranges of `usize`\n   |\n   = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n   = note: you can use `.chars().nth()` or `.bytes().nth()`\n           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<{integer}>` for `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvusaisel.rs:11:31\n   |\n11 | fn encode(message: String) -> String {\n   |    ------                     ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0609.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\"];\n    let vowels5 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"R\"];\n    let vowels7 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"R\", \"T\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"R\", \"T\", \"D\"];\n    let vowels9 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"R\", \"T\", \"D\", \"G\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"R\", \"T\", \"D\", \"G\", \"K\"];\n    let vowels11 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"R\", \"T\", \"D\", \"G\", \"K\", \"S\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"R\", \"T\", \"D\", \"G\", \"K\", \"S\", \"C\"];\n    let vowels13 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"R\", \"T\", \"D\", \"G\", \"K\", \"S\", \"C\", \"M\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmp5ngn6fby.rs:34:109\n   |\n34 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n35 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[1]);\n    let vowels_index_3 = vowels.indexOf(message[2]);\n    let vowels_index_4 = vowels.indexOf(message[3]);\n    let vowels_index_5 = vowels.indexOf(message[4]);\n    let vowels_index_6 = vowels.indexOf(message[5]);\n    let vowels_index_7 = vowels.indexOf(message[6]);\n    let vowels_index_8 = vowels.indexOf(message[7]);\n    let vowels_index_9 = vowels.indexOf(message[8]);\n    let vowels_index_10 = vowels.indexOf(message[9]);\n    let vowels_index_11 = vowels.indexOf(message[10]);\n    let vowels_index_12 = vowels.indexOf(message[11]);\n    let vowels_index_13 = vowels.indexOf(message[12]);\n    let vowels_index_14 = vowels.indexOf(message[13]);\n    let vowels_index_15 = vowels.indexOf(message[14]);\n    let vowels_index_16 = vowels.indexOf(message[15]);\n    let vowels_index_17 = vowels.indexOf(message[16]);\n    let vowels_index_18 = vowels.indexOf(message[17]);\n    let vowels_index_19 = vowels.indexOf(message[18]);\n    let vowels_index_20 = vowels.indexOf(message[19]);\n    let vowels_index_21 = vowels.indexOf(message[20]);\n    let vowels_index_22 = vowels.indexOf(message[21]);\n    let vowels_index_23 = vowels.indexOf(message[22]);\n    let vowels_index_24 = vowels.indexOf(message[23]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmp5tm2k_ju.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp5tm2k_ju.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message.charAt(0));\n    let vowels_index_2 = vowels.indexOf(message.charAt(1));\n    let vowels_index_3 = vowels.indexOf(message.charAt(2));\n    let vowels_index_4 = vowels.indexOf(message.charAt(3));\n    let vowels_index_5 = vowels.indexOf(message.charAt(4));\n    let vowels_index_6 = vowels.indexOf(message.charAt(5));\n    let vowels_index_7 = vowels.indexOf(message.charAt(6));\n    let vowels_index_8 = vowels.indexOf(message.charAt(7));\n    let vowels_index_9 = vowels.indexOf(message.charAt(8));\n    let vowels_index_10 = vowels.indexOf(message.charAt(9));\n    let vowels_index_11 = vowels.indexOf(message.charAt(10));\n    let vowels_index_12 = vowels.indexOf(message.charAt(11));\n    let vowels_index_13 = vowels.indexOf(message.charAt(12));\n    let vowels_index_14 = vowels.indexOf(message.charAt(13));\n    let vowels_index_15 = vowels.indexOf(message.charAt(14));\n    let vowels_index_16 = vowels.indexOf(message.charAt(15));\n    let vowels_index_17 = vowels.indexOf(message.charAt(16));\n    let vowels_index_18 = vowels.indexOf(message.charAt(17));\n    let vowels_index_19 = vowels.indexOf(message.charAt(18));\n    let vowels_index_20 = vowels.indexOf(message.charAt(19));\n    let vowels_index_21 = vowels.indexOf(message.charAt(20));\n    let vowels_index_22 =\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpkjmbeha2.rs:35:1\n   |\n35 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:47\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:49\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:33\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:49\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:16:33\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message.charAt(3));\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let encoded = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = vowels.indexOf(letter);\n    if (index != -1) {\n      encoded += vowels2[index];\n    } else {\n      encoded += letter;\n    }\n  }\n  return encoded;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp8s4vr_uj.rs:15:8\n   |\n15 |   for (let i = 0; i < message.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp8s4vr_uj.rs:15:12\n   |\n15 |   for (let i = 0; i < message.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp8s4vr_uj.rs:15:14\n   |\n15 |   for (let i = 0; i < message.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp8s4vr_uj.rs:15:13\n   |\n15 |   for (let i = 0; i < message.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp8s4vr_uj.rs:15:14\n   |\n15 |   for (let i = 0; i < message.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[2])\n    let vowels_index3 = vowels.indexOf(message[4])\n    let vowels_index4 = vowels.indexOf(message[6])\n    let vowels_index5 = vowels.indexOf(message[8])\n    let vowels_index6 = vowels.indexOf(message[10])\n    let vowels_index7 = vowels.indexOf(message[12])\n    let vowels_index8 = vowels.indexOf(message[14])\n    let vowels_index9 = vowels.indexOf(message[16])\n    let vowels_index10 = vowels.indexOf(message[18])\n    let vowels_index11 = vowels.indexOf(message[20])\n    let vowels_index12 = vowels.indexOf(message[22])\n    let vowels_index13 = vowels.indexOf(message[24])\n    let vowels_index14 = vowels.indexOf(message[26])\n    let vowels_index15 = vowels.indexOf(message[28])\n    let vowels_index16 = vowels.indexOf(message[30])\n    let vowels_index17 = vowels.indexOf(message[32])\n    let vowels_index18 = vowels.indexOf(message[34])\n    let vowels_index19 = vowels.indexOf(message[36])\n    let vowels_index20 = vowels.indexOf(message[38])\n    let vowels_index21 = vowels.indexOf(message[40])\n    let vowels_index22 = vowels.indexOf(message[42])\n    let vowels_index23 = vowels.indexOf(message[44])\n    let vowels_index24 = vowels.indexOf(message[46])\n    let vowels_index25 = vowels.indexOf(message[48])\n    let vowels_index26 = vowels.indexOf(message[50])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[6])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[8])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[8])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[10])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:18:52\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[10])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[12])\n   |     --- unexpected token\n\nerror: exp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels_3 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"];\n    let vowels_4 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"X\"];\n    let vowels_5 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"X\", \"Z\"];\n    let vowels_6 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"X\", \"Z\", \"B\"];\n    let vowels_7 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"X\", \"Z\", \"B\", \"M\"];\n    let vowels_8 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"X\", \"Z\", \"B\", \"M\", \"N\"];\n    let vowels_9 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"X\", \"Z\", \"B\", \"M\", \"N\", \"R\"];\n    let vowels_10 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"X\", \"Z\", \"B\", \"M\", \"N\", \"R\", \"S\"];\n    let vowels_11 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"X\", \"Z\", \"B\", \"M\", \"N\", \"R\", \"S\", \"T\"];\n    let vowels_12 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"X\", \"Z\", \"B\", \"M\", \"N\", \"R\", \"S\", \"T\", \"W\"];\n    let vowels_13 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"X\", \"Z\", \"B\", \"M\", \"N\", \"R\", \"S\", \"T\", \"W\", \"X\"];\n    let vowels\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp79y93mev.rs:25:15\n   |\n25 |     let vowels\n   |               ^ help: add `;` here\n26 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp79y93mev.rs:11:31\n   |\n11 | fn encode(message: String) -> String {\n   |    ------                     ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\"];\n    let vowels5 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\"];\n    let vowels7 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"X\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"X\", \"Z\"];\n    let vowels9 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"X\", \"Z\", \"B\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"X\", \"Z\", \"B\", \"M\"];\n    let vowels11 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"X\", \"Z\", \"B\", \"M\", \"N\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"X\", \"Z\", \"B\", \"M\", \"N\", \"R\"];\n    let vowels13 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\", \"Q\", \"X\", \"Z\", \"B\", \"M\", \"N\", \"R\", \"S\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpilof6cpe.rs:34:109\n   |\n34 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n35 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[1])\n    let vowels_index3 = vowels.indexOf(message[2])\n    let vowels_index4 = vowels.indexOf(message[3])\n    let vowels_index5 = vowels.indexOf(message[4])\n    let vowels_index6 = vowels.indexOf(message[5])\n    let vowels_index7 = vowels.indexOf(message[6])\n    let vowels_index8 = vowels.indexOf(message[7])\n    let vowels_index9 = vowels.indexOf(message[8])\n    let vowels_index10 = vowels.indexOf(message[9])\n    let vowels_index11 = vowels.indexOf(message[10])\n    let vowels_index12 = vowels.indexOf(message[11])\n    let vowels_index13 = vowels.indexOf(message[12])\n    let vowels_index14 = vowels.indexOf(message[13])\n    let vowels_index15 = vowels.indexOf(message[14])\n    let vowels_index16 = vowels.indexOf(message[15])\n    let vowels_index17 = vowels.indexOf(message[16])\n    let vowels_index18 = vowels.indexOf(message[17])\n    let vowels_index19 = vowels.indexOf(message[18])\n    let vowels_index20 = vowels.indexOf(message[19])\n    let vowels_index21 = vowels.indexOf(message[20])\n    let vowels_index22 = vowels.indexOf(message[21])\n    let vowels_index23 = vowels.indexOf(message[22])\n    let vowels_index24 = vowels.indexOf(message[23])\n    let vowels_index25 = vowels.indexOf(message[24])\n    let vowels_index26 = vowels.indexOf(message[25])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:18:51\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |                                                   ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expecte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[1]);\n    let vowels_index_3 = vowels.indexOf(message[2]);\n    let vowels_index_4 = vowels.indexOf(message[3]);\n    let vowels_index_5 = vowels.indexOf(message[4]);\n    let vowels_index_6 = vowels.indexOf(message[5]);\n    let vowels_index_7 = vowels.indexOf(message[6]);\n    let vowels_index_8 = vowels.indexOf(message[7]);\n    let vowels_index_9 = vowels.indexOf(message[8]);\n    let vowels_index_10 = vowels.indexOf(message[9]);\n    let vowels_index_11 = vowels.indexOf(message[10]);\n    let vowels_index_12 = vowels.indexOf(message[11]);\n    let vowels_index_13 = vowels.indexOf(message[12]);\n    let vowels_index_14 = vowels.indexOf(message[13]);\n    let vowels_index_15 = vowels.indexOf(message[14]);\n    let vowels_index_16 = vowels.indexOf(message[15]);\n    let vowels_index_17 = vowels.indexOf(message[16]);\n    let vowels_index_18 = vowels.indexOf(message[17]);\n    let vowels_index_19 = vowels.indexOf(message[18]);\n    let vowels_index_20 = vowels.indexOf(message[19]);\n    let vowels_index_21 = vowels.indexOf(message[20]);\n    let vowels_index_22 = vowels.indexOf(message[21]);\n    let vowels_index_23 = vowels.indexOf(message[22]);\n    let vowels_index_24 = vowels.indexOf(message[23]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmp5tm2k_ju.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp5tm2k_ju.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message.charAt(0));\n    let vowels_index_2 = vowels.indexOf(message.charAt(1));\n    let vowels_index_3 = vowels.indexOf(message.charAt(2));\n    let vowels_index_4 = vowels.indexOf(message.charAt(3));\n    let vowels_index_5 = vowels.indexOf(message.charAt(4));\n    let vowels_index_6 = vowels.indexOf(message.charAt(5));\n    let vowels_index_7 = vowels.indexOf(message.charAt(6));\n    let vowels_index_8 = vowels.indexOf(message.charAt(7));\n    let vowels_index_9 = vowels.indexOf(message.charAt(8));\n    let vowels_index_10 = vowels.indexOf(message.charAt(9));\n    let vowels_index_11 = vowels.indexOf(message.charAt(10));\n    let vowels_index_12 = vowels.indexOf(message.charAt(11));\n    let vowels_index_13 = vowels.indexOf(message.charAt(12));\n    let vowels_index_14 = vowels.indexOf(message.charAt(13));\n    let vowels_index_15 = vowels.indexOf(message.charAt(14));\n    let vowels_index_16 = vowels.indexOf(message.charAt(15));\n    let vowels_index_17 = vowels.indexOf(message.charAt(16));\n    let vowels_index_18 = vowels.indexOf(message.charAt(17));\n    let vowels_index_19 = vowels.indexOf(message.charAt(18));\n    let vowels_index_20 = vowels.indexOf(message.charAt(19));\n    let vowels_index_21 = vowels.indexOf(message.charAt(20));\n    let vowels_index_22 =\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpkjmbeha2.rs:35:1\n   |\n35 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:47\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:49\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:33\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:49\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:16:33\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message.charAt(3));\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message.charAt(0));\n    let vowels_index_2 = vowels.indexOf(message.charAt(1));\n    let vowels_index_3 = vowels.indexOf(message.charAt(2));\n    let vowels_index_4 = vowels.indexOf(message.charAt(3));\n    let vowels_index_5 = vowels.indexOf(message.charAt(4));\n    let vowels_index_6 = vowels.indexOf(message.charAt(5));\n    let vowels_index_7 = vowels.indexOf(message.charAt(6));\n    let vowels_index_8 = vowels.indexOf(message.charAt(7));\n    let vowels_index_9 = vowels.indexOf(message.charAt(8));\n    let vowels_index_10 = vowels.indexOf(message.charAt(9));\n    let vowels_index_11 = vowels.indexOf(message.charAt(10));\n    let vowels_index_12 = vowels.indexOf(message.charAt(11));\n    let vowels_index_13 = vowels.indexOf(message.charAt(12));\n    let vowels_index_14 = vowels.indexOf(message.charAt(13));\n    let vowels_index_15 = vowels.indexOf(message.charAt(14));\n    let vowels_index_16 = vowels.indexOf(message.charAt(15));\n    let vowels_index_17 = vowels.indexOf(message.charAt(16));\n    let vowels_index_18 = vowels.indexOf(message.charAt(17));\n    let vowels_index_19 = vowels.indexOf(message.charAt(18));\n    let vowels_index_20 = vowels.indexOf(message.charAt(19));\n    let vowels_index_21 = vowels.indexOf(message.charAt(20));\n    let vowels_index_22 =\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpkjmbeha2.rs:35:1\n   |\n35 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:47\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:49\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:33\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:49\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:16:33\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message.charAt(3));\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[1])\n    let vowels_index3 = vowels.indexOf(message[2])\n    let vowels_index4 = vowels.indexOf(message[3])\n    let vowels_index5 = vowels.indexOf(message[4])\n    let vowels_index6 = vowels.indexOf(message[5])\n    let vowels_index7 = vowels.indexOf(message[6])\n    let vowels_index8 = vowels.indexOf(message[7])\n    let vowels_index9 = vowels.indexOf(message[8])\n    let vowels_index10 = vowels.indexOf(message[9])\n    let vowels_index11 = vowels.indexOf(message[10])\n    let vowels_index12 = vowels.indexOf(message[11])\n    let vowels_index13 = vowels.indexOf(message[12])\n    let vowels_index14 = vowels.indexOf(message[13])\n    let vowels_index15 = vowels.indexOf(message[14])\n    let vowels_index16 = vowels.indexOf(message[15])\n    let vowels_index17 = vowels.indexOf(message[16])\n    let vowels_index18 = vowels.indexOf(message[17])\n    let vowels_index19 = vowels.indexOf(message[18])\n    let vowels_index20 = vowels.indexOf(message[19])\n    let vowels_index21 = vowels.indexOf(message[20])\n    let vowels_index22 = vowels.indexOf(message[21])\n    let vowels_index23 = vowels.indexOf(message[22])\n    let vowels_index24 = vowels.indexOf(message[23])\n    let vowels_index25 = vowels.indexOf(message[24])\n    let vowels_index26 = vowels.indexOf(message[25])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:18:51\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |                                                   ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expecte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels_index = vowels.indexOf(message.charAt(0));\n  let vowels_index_2 = vowels.indexOf(message.charAt(2));\n  let vowels_index_3 = vowels.indexOf(message.charAt(3));\n  let vowels_index_4 = vowels.indexOf(message.charAt(4));\n  let vowels_index_5 = vowels.indexOf(message.charAt(5));\n  let vowels_index_6 = vowels.indexOf(message.charAt(6));\n  let vowels_index_7 = vowels.indexOf(message.charAt(7));\n  let vowels_index_8 = vowels.indexOf(message.charAt(8));\n  let vowels_index_9 = vowels.indexOf(message.charAt(9));\n  let vowels_index_10 = vowels.indexOf(message.charAt(10));\n  let vowels_index_11 = vowels.indexOf(message.charAt(11));\n  let vowels_index_12 = vowels.indexOf(message.charAt(12));\n  let vowels_index_13 = vowels.indexOf(message.charAt(13));\n  let vowels_index_14 = vowels.indexOf(message.charAt(14));\n  let vowels_index_15 = vowels.indexOf(message.charAt(15));\n  let vowels_index_16 = vowels.indexOf(message.charAt(16));\n  let vowels_index_17 = vowels.indexOf(message.charAt(17));\n  let vowels_index_18 = vowels.indexOf(message.charAt(18));\n  let vowels_index_19 = vowels.indexOf(message.charAt(19));\n  let vowels_index_20 = vowels.indexOf(message.charAt(20));\n  let vowels_index_21 = vowels.indexOf(message.charAt(21));\n  let vowels_index_22 =\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmppnf_d30k.rs:35:1\n   |\n35 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmppnf_d30k.rs:13:29\n   |\n13 |   let vowels_index = vowels.indexOf(message.charAt(0));\n   |                             ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmppnf_d30k.rs:13:45\n   |\n13 |   let vowels_index = vowels.indexOf(message.charAt(0));\n   |                                             ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmppnf_d30k.rs:14:31\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message.charAt(2));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmppnf_d30k.rs:14:47\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message.charAt(2));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmppnf_d30k.rs:15:31\n   |\n15 |   let vowels_index_3 = vowels.indexOf(message.charAt(3));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmppnf_d30k.rs:15:47\n   |\n15 |   let vowels_index_3 = vowels.indexOf(message.charAt(3));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmppnf_d30k.rs:16:31\n   |\n16 |   let vowels_index_4 = vowels.indexOf(message.charAt(4));\n   |                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_2 = \"AEIOU\"\n    let vowels_3 = \"AEIOUAEIOU\"\n    let vowels_4 = \"AEIOUAEIOUAEIOU\"\n    let vowels_5 = \"AEIOUAEIOUAEIOUAEIOU\"\n    let vowels_6 = \"AEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_7 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_8 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_9 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_10 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_11 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_12 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_13 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_14 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_15 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_16 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEI\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjdp219cl.rs:36:109\n   |\n36 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n37 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count = vowels.length;\n    let vowels_index = 0;\n    let message_length = message.length;\n    let encoded_message = \"\";\n    for (let i = 0; i < message_length; i++) {\n        let letter = message[i];\n        if (vowels_count > 0) {\n            let next_vowel = vowels[vowels_index];\n            let next_vowel_index = vowels.indexOf(next_vowel);\n            if (next_vowel_index > 0) {\n                vowels_index = next_vowel_index;\n            } else {\n                vowels_index = 0;\n            }\n            encoded_message += vowels[vowels_index];\n        } else {\n            encoded_message += letter.toUpperCase();\n        }\n    }\n    return encoded_message;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpf0o07v8o.rs:17:10\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpf0o07v8o.rs:17:14\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpf0o07v8o.rs:17:16\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpf0o07v8o.rs:17:15\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpf0o07v8o.rs:17:16\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |                ^ expected expression\n\nerror[E0609]: no field `length` on type `[&str; 5]`\n  --> /tmp/tmpf0o07v8o.rs:13:31\n   |\n13 |     let vowels_count = vowels.length;\n   |                               ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpf0o07v8o.rs:15:34\n   |\n15 |     let message_length = message.length;\n   |                                  ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[1])\n    let vowels_index3 = vowels.indexOf(message[2])\n    let vowels_index4 = vowels.indexOf(message[3])\n    let vowels_index5 = vowels.indexOf(message[4])\n    let vowels_index6 = vowels.indexOf(message[5])\n    let vowels_index7 = vowels.indexOf(message[6])\n    let vowels_index8 = vowels.indexOf(message[7])\n    let vowels_index9 = vowels.indexOf(message[8])\n    let vowels_index10 = vowels.indexOf(message[9])\n    let vowels_index11 = vowels.indexOf(message[10])\n    let vowels_index12 = vowels.indexOf(message[11])\n    let vowels_index13 = vowels.indexOf(message[12])\n    let vowels_index14 = vowels.indexOf(message[13])\n    let vowels_index15 = vowels.indexOf(message[14])\n    let vowels_index16 = vowels.indexOf(message[15])\n    let vowels_index17 = vowels.indexOf(message[16])\n    let vowels_index18 = vowels.indexOf(message[17])\n    let vowels_index19 = vowels.indexOf(message[18])\n    let vowels_index20 = vowels.indexOf(message[19])\n    let vowels_index21 = vowels.indexOf(message[20])\n    let vowels_index22 = vowels.indexOf(message[21])\n    let vowels_index23 = vowels.indexOf(message[22])\n    let vowels_index24 = vowels.indexOf(message[23])\n    let vowels_index25 = vowels.indexOf(message[24])\n    let vowels_index26 = vowels.indexOf(message[25])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:18:51\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |                                                   ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expecte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_count = vowels.length\n    let vowels_index = 0\n    let message_length = message.length\n    let encoded_message = \"\"\n    for (let i = 0; i < message_length; i++) {\n        let current_letter = message[i]\n        let current_vowel_index = vowels.indexOf(current_letter)\n        if (current_vowel_index > -1) {\n            let next_vowel_index = (current_vowel_index + 2) % vowels_count\n            let next_vowel = vowels[next_vowel_index]\n            encoded_message += next_vowel\n        } else {\n            encoded_message += current_letter\n        }\n    }\n    return encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp98xh7xdt.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_count = vowels.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp98xh7xdt.rs:13:37\n   |\n13 |     let vowels_count = vowels.length\n   |                                     ^ help: add `;` here\n14 |     let vowels_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp98xh7xdt.rs:14:25\n   |\n14 |     let vowels_index = 0\n   |                         ^ help: add `;` here\n15 |     let message_length = message.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp98xh7xdt.rs:15:40\n   |\n15 |     let message_length = message.length\n   |                                        ^ help: add `;` here\n16 |     let encoded_message = \"\"\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp98xh7xdt.rs:16:29\n   |\n16 |     let encoded_message = \"\"\n   |                             ^ help: add `;` here\n17 |     for (let i = 0; i < message_length; i++) {\n   |     --- unexpected token\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp98xh7xdt.rs:17:10\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp98xh7xdt.rs:17:14\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp98xh7xdt.rs:17:16\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp98xh7xdt.rs:17:15\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |               ^ help: try adding `in` here\n\ne",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_count = vowels.length\n    let vowels_index = 0\n    let vowels_index_2 = 0\n    let message_length = message.length\n    let encoded_message = \"\"\n    for i in 0..message_length {\n        let letter = message[i]\n        let index = vowels.indexOf(letter)\n        if index > -1 {\n            let index_2 = index + vowels_count\n            let encoded_letter = vowels[index_2]\n            encoded_message += encoded_letter\n        } else {\n            let encoded_letter = letter\n            encoded_message += encoded_letter\n        }\n    }\n    return encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpv_5gs8a2.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_count = vowels.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv_5gs8a2.rs:13:37\n   |\n13 |     let vowels_count = vowels.length\n   |                                     ^ help: add `;` here\n14 |     let vowels_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv_5gs8a2.rs:14:25\n   |\n14 |     let vowels_index = 0\n   |                         ^ help: add `;` here\n15 |     let vowels_index_2 = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv_5gs8a2.rs:15:27\n   |\n15 |     let vowels_index_2 = 0\n   |                           ^ help: add `;` here\n16 |     let message_length = message.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv_5gs8a2.rs:16:40\n   |\n16 |     let message_length = message.length\n   |                                        ^ help: add `;` here\n17 |     let encoded_message = \"\"\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpv_5gs8a2.rs:17:29\n   |\n17 |     let encoded_message = \"\"\n   |                             ^ help: add `;` here\n18 |     for i in 0..message_length {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv_5gs8a2.rs:19:32\n   |\n19 |         let letter = message[i]\n   |                                ^ help: add `;` here\n20 |         let index = vowels.indexOf(letter)\n   |         --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpv_5gs8a2.rs:20:43\n   |\n20 |         let index = vowels.indexOf(letter)\n   |                                           ^ help: add `;` here\n21 |         if index > -1 {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv_5gs8a2.rs:22:47\n   |\n22 |             let index_2",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_2 = \"AEIOU\"\n    let vowels_3 = \"AEIOUAEIOU\"\n    let vowels_4 = \"AEIOUAEIOUAEIOU\"\n    let vowels_5 = \"AEIOUAEIOUAEIOUAEIOU\"\n    let vowels_6 = \"AEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_7 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_8 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_9 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_10 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_11 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_12 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_13 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_14 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_15 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_16 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEI\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjdp219cl.rs:36:109\n   |\n36 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n37 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_2 = \"AEIOU\"\n    let vowels_3 = \"AEIOUAEIOU\"\n    let vowels_4 = \"AEIOUAEIOUAEIOU\"\n    let vowels_5 = \"AEIOUAEIOUAEIOUAEIOU\"\n    let vowels_6 = \"AEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_7 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_8 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_9 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_10 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_11 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_12 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_13 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_14 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_15 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_16 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEI\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjdp219cl.rs:36:109\n   |\n36 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n37 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count = 0;\n    let result = \"\";\n    for (let c of message) {\n        if (vowels.includes(c)) {\n            vowels_count += 1;\n            result += c;\n            if (vowels_count > 2) {\n                result += c.toUpperCase();\n            }\n        } else {\n            result += c.toUpperCase();\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp41ld_vdp.rs:15:10\n   |\n15 |     for (let c of message) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmp41ld_vdp.rs:15:14\n   |\n15 |     for (let c of message) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp41ld_vdp.rs:15:16\n   |\n15 |     for (let c of message) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `message`\n  --> /tmp/tmp41ld_vdp.rs:15:19\n   |\n15 |     for (let c of message) {\n   |                  -^^^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp41ld_vdp.rs:15:27\n   |\n15 |     for (let c of message) {\n   |                           ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp41ld_vdp.rs:26:5\n   |\n26 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n26 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[1])\n    let vowels_index3 = vowels.indexOf(message[2])\n    let vowels_index4 = vowels.indexOf(message[3])\n    let vowels_index5 = vowels.indexOf(message[4])\n    let vowels_index6 = vowels.indexOf(message[5])\n    let vowels_index7 = vowels.indexOf(message[6])\n    let vowels_index8 = vowels.indexOf(message[7])\n    let vowels_index9 = vowels.indexOf(message[8])\n    let vowels_index10 = vowels.indexOf(message[9])\n    let vowels_index11 = vowels.indexOf(message[10])\n    let vowels_index12 = vowels.indexOf(message[11])\n    let vowels_index13 = vowels.indexOf(message[12])\n    let vowels_index14 = vowels.indexOf(message[13])\n    let vowels_index15 = vowels.indexOf(message[14])\n    let vowels_index16 = vowels.indexOf(message[15])\n    let vowels_index17 = vowels.indexOf(message[16])\n    let vowels_index18 = vowels.indexOf(message[17])\n    let vowels_index19 = vowels.indexOf(message[18])\n    let vowels_index20 = vowels.indexOf(message[19])\n    let vowels_index21 = vowels.indexOf(message[20])\n    let vowels_index22 = vowels.indexOf(message[21])\n    let vowels_index23 = vowels.indexOf(message[22])\n    let vowels_index24 = vowels.indexOf(message[23])\n    let vowels_index25 = vowels.indexOf(message[24])\n    let vowels_index26 = vowels.indexOf(message[25])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:18:51\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |                                                   ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expecte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result = \"\";\n    for (let i = 0; i < message.length(); i++) {\n        let letter = message[i];\n        if (vowels.includes(letter)) {\n            let index = vowels2.indexOf(letter);\n            let index2 = index + 2;\n            if (index2 >= vowels2.length) {\n                index2 = 0;\n            }\n            result += vowels2[index2];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpc26v5p_3.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpc26v5p_3.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpc26v5p_3.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpc26v5p_3.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpc26v5p_3.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[1]);\n    let vowels_index_3 = vowels.indexOf(message[2]);\n    let vowels_index_4 = vowels.indexOf(message[3]);\n    let vowels_index_5 = vowels.indexOf(message[4]);\n    let vowels_index_6 = vowels.indexOf(message[5]);\n    let vowels_index_7 = vowels.indexOf(message[6]);\n    let vowels_index_8 = vowels.indexOf(message[7]);\n    let vowels_index_9 = vowels.indexOf(message[8]);\n    let vowels_index_10 = vowels.indexOf(message[9]);\n    let vowels_index_11 = vowels.indexOf(message[10]);\n    let vowels_index_12 = vowels.indexOf(message[11]);\n    let vowels_index_13 = vowels.indexOf(message[12]);\n    let vowels_index_14 = vowels.indexOf(message[13]);\n    let vowels_index_15 = vowels.indexOf(message[14]);\n    let vowels_index_16 = vowels.indexOf(message[15]);\n    let vowels_index_17 = vowels.indexOf(message[16]);\n    let vowels_index_18 = vowels.indexOf(message[17]);\n    let vowels_index_19 = vowels.indexOf(message[18]);\n    let vowels_index_20 = vowels.indexOf(message[19]);\n    let vowels_index_21 = vowels.indexOf(message[20]);\n    let vowels_index_22 = vowels.indexOf(message[21]);\n    let vowels_index_23 = vowels.indexOf(message[22]);\n    let vowels_index_24 = vowels.indexOf(message[23]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmp5tm2k_ju.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp5tm2k_ju.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[1])\n    let vowels_index3 = vowels.indexOf(message[2])\n    let vowels_index4 = vowels.indexOf(message[3])\n    let vowels_index5 = vowels.indexOf(message[4])\n    let vowels_index6 = vowels.indexOf(message[5])\n    let vowels_index7 = vowels.indexOf(message[6])\n    let vowels_index8 = vowels.indexOf(message[7])\n    let vowels_index9 = vowels.indexOf(message[8])\n    let vowels_index10 = vowels.indexOf(message[9])\n    let vowels_index11 = vowels.indexOf(message[10])\n    let vowels_index12 = vowels.indexOf(message[11])\n    let vowels_index13 = vowels.indexOf(message[12])\n    let vowels_index14 = vowels.indexOf(message[13])\n    let vowels_index15 = vowels.indexOf(message[14])\n    let vowels_index16 = vowels.indexOf(message[15])\n    let vowels_index17 = vowels.indexOf(message[16])\n    let vowels_index18 = vowels.indexOf(message[17])\n    let vowels_index19 = vowels.indexOf(message[18])\n    let vowels_index20 = vowels.indexOf(message[19])\n    let vowels_index21 = vowels.indexOf(message[20])\n    let vowels_index22 = vowels.indexOf(message[21])\n    let vowels_index23 = vowels.indexOf(message[22])\n    let vowels_index24 = vowels.indexOf(message[23])\n    let vowels_index25 = vowels.indexOf(message[24])\n    let vowels_index26 = vowels.indexOf(message[25])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:18:51\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |                                                   ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expecte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels_index = vowels.indexOf(message[0]);\n  let encoded_message = message.map(letter => {\n    if (vowels.indexOf(letter) === vowels_index) {\n      return vowels[vowels_index + 2] + vowels[vowels_index + 1];\n    } else {\n      return letter;\n    }\n  });\n  return String::from(encoded_message);\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpmwxt3ik3.rs:14:44\n   |\n14 |   let encoded_message = message.map(letter => {\n   |                                            ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_count = vowels.length\n    let vowels_index = 0\n    let message_length = message.length\n    let encoded_message = \"\"\n    for i in 0..message_length {\n        let letter = message[i]\n        let index = vowels.indexOf(letter)\n        if index == -1 {\n            encoded_message += letter\n        } else {\n            let next_vowel = vowels[vowels_index + 2]\n            let encoded_letter = message[i + 2]\n            encoded_message += next_vowel + encoded_letter\n            vowels_index += 1\n        }\n    }\n    return encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkse17oko.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_count = vowels.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkse17oko.rs:13:37\n   |\n13 |     let vowels_count = vowels.length\n   |                                     ^ help: add `;` here\n14 |     let vowels_index = 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkse17oko.rs:14:25\n   |\n14 |     let vowels_index = 0\n   |                         ^ help: add `;` here\n15 |     let message_length = message.length\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkse17oko.rs:15:40\n   |\n15 |     let message_length = message.length\n   |                                        ^ help: add `;` here\n16 |     let encoded_message = \"\"\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkse17oko.rs:16:29\n   |\n16 |     let encoded_message = \"\"\n   |                             ^ help: add `;` here\n17 |     for i in 0..message_length {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkse17oko.rs:18:32\n   |\n18 |         let letter = message[i]\n   |                                ^ help: add `;` here\n19 |         let index = vowels.indexOf(letter)\n   |         --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpkse17oko.rs:19:43\n   |\n19 |         let index = vowels.indexOf(letter)\n   |                                           ^ help: add `;` here\n20 |         if index == -1 {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkse17oko.rs:23:54\n   |\n23 |             let next_vowel = vowels[vowels_index + 2]\n   |                                                      ^ help: add `;` here\n24 |             let encoded_letter = message[i + 2]\n   |             --- unexpected token\n\nerror: expected `;`, f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_2 = \"AEIOU\"\n    let vowels_3 = \"AEIOUAEIOU\"\n    let vowels_4 = \"AEIOUAEIOUAEIOU\"\n    let vowels_5 = \"AEIOUAEIOUAEIOUAEIOU\"\n    let vowels_6 = \"AEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_7 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_8 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_9 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_10 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_11 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_12 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_13 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_14 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_15 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    let vowels_16 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEI\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjdp219cl.rs:36:109\n   |\n36 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n37 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let new_message = \"\"\n    for i in range(0, message.length) {\n        let char = message[i]\n        if char.isUpper() {\n            let new_char = char.toLower()\n            new_message += new_char\n        } else if char.isLower() {\n            let new_char = char.toUpper()\n            new_message += new_char\n        } else if char.isLetter() {\n            let new_char = vowels[vowels_index + 2]\n            new_message += new_char\n            vowels_index += 1\n            if vowels_index >= vowels.length {\n                vowels_index = 0\n            }\n        } else {\n            new_message += char\n        }\n    }\n    return new_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0qxmu10g.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp0qxmu10g.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let new_message = \"\"\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp0qxmu10g.rs:14:25\n   |\n14 |     let new_message = \"\"\n   |                         ^ help: add `;` here\n15 |     for i in range(0, message.length) {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp0qxmu10g.rs:16:30\n   |\n16 |         let char = message[i]\n   |                              ^ help: add `;` here\n17 |         if char.isUpper() {\n   |         -- unexpected token\n\nerror: expected `;`, found `new_message`\n  --> /tmp/tmp0qxmu10g.rs:18:42\n   |\n18 |             let new_char = char.toLower()\n   |                                          ^ help: add `;` here\n19 |             new_message += new_char\n   |             ----------- unexpected token\n\nerror: expected `;`, found `new_message`\n  --> /tmp/tmp0qxmu10g.rs:21:42\n   |\n21 |             let new_char = char.toUpper()\n   |                                          ^ help: add `;` here\n22 |             new_message += new_char\n   |             ----------- unexpected token\n\nerror: expected `;`, found `new_message`\n  --> /tmp/tmp0qxmu10g.rs:24:52\n   |\n24 |             let new_char = vowels[vowels_index + 2]\n   |                                                    ^ help: add `;` here\n25 |             new_message += new_char\n   |             ----------- unexpected token\n\nerror: expected `;`, found `vowels_index`\n  --> /tmp/tmp0qxmu10g.rs:25:36\n   |\n25 |             new_message += new_char\n   |                                    ^ help: add `;` here\n26 |            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[2])\n    let vowels_index3 = vowels.indexOf(message[4])\n    let vowels_index4 = vowels.indexOf(message[6])\n    let vowels_index5 = vowels.indexOf(message[8])\n    let vowels_index6 = vowels.indexOf(message[10])\n    let vowels_index7 = vowels.indexOf(message[12])\n    let vowels_index8 = vowels.indexOf(message[14])\n    let vowels_index9 = vowels.indexOf(message[16])\n    let vowels_index10 = vowels.indexOf(message[18])\n    let vowels_index11 = vowels.indexOf(message[20])\n    let vowels_index12 = vowels.indexOf(message[22])\n    let vowels_index13 = vowels.indexOf(message[24])\n    let vowels_index14 = vowels.indexOf(message[26])\n    let vowels_index15 = vowels.indexOf(message[28])\n    let vowels_index16 = vowels.indexOf(message[30])\n    let vowels_index17 = vowels.indexOf(message[32])\n    let vowels_index18 = vowels.indexOf(message[34])\n    let vowels_index19 = vowels.indexOf(message[36])\n    let vowels_index20 = vowels.indexOf(message[38])\n    let vowels_index21 = vowels.indexOf(message[40])\n    let vowels_index22 = vowels.indexOf(message[42])\n    let vowels_index23 = vowels.indexOf(message[44])\n    let vowels_index24 = vowels.indexOf(message[46])\n    let vowels_index25 = vowels.indexOf(message[48])\n    let vowels_index26 = vowels.indexOf(message[50])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[6])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[8])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[8])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[10])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmzin4ie2.rs:18:52\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[10])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[12])\n   |     --- unexpected token\n\nerror: exp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = vowels.indexOf(letter);\n        if (index != -1) {\n            result += vowels2[index];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpoce4peev.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpoce4peev.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpoce4peev.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpoce4peev.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpoce4peev.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[1])\n    let vowels_index3 = vowels.indexOf(message[2])\n    let vowels_index4 = vowels.indexOf(message[3])\n    let vowels_index5 = vowels.indexOf(message[4])\n    let vowels_index6 = vowels.indexOf(message[5])\n    let vowels_index7 = vowels.indexOf(message[6])\n    let vowels_index8 = vowels.indexOf(message[7])\n    let vowels_index9 = vowels.indexOf(message[8])\n    let vowels_index10 = vowels.indexOf(message[9])\n    let vowels_index11 = vowels.indexOf(message[10])\n    let vowels_index12 = vowels.indexOf(message[11])\n    let vowels_index13 = vowels.indexOf(message[12])\n    let vowels_index14 = vowels.indexOf(message[13])\n    let vowels_index15 = vowels.indexOf(message[14])\n    let vowels_index16 = vowels.indexOf(message[15])\n    let vowels_index17 = vowels.indexOf(message[16])\n    let vowels_index18 = vowels.indexOf(message[17])\n    let vowels_index19 = vowels.indexOf(message[18])\n    let vowels_index20 = vowels.indexOf(message[19])\n    let vowels_index21 = vowels.indexOf(message[20])\n    let vowels_index22 = vowels.indexOf(message[21])\n    let vowels_index23 = vowels.indexOf(message[22])\n    let vowels_index24 = vowels.indexOf(message[23])\n    let vowels_index25 = vowels.indexOf(message[24])\n    let vowels_index26 = vowels.indexOf(message[25])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:18:51\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |                                                   ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expecte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count = vowels.length;\n    let message_length = message.length;\n    let encoded_message = \"\";\n    for (let i = 0; i < message_length; i++) {\n        let current_letter = message[i];\n        let current_vowel_index = vowels.indexOf(current_letter);\n        let next_vowel_index = (current_vowel_index + 1) % vowels_count;\n        let next_vowel = vowels[next_vowel_index];\n        let encoded_letter = next_vowel + next_vowel.toUpperCase();\n        encoded_message += encoded_letter;\n    }\n    return encoded_message;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpsscshqac.rs:16:10\n   |\n16 |     for (let i = 0; i < message_length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpsscshqac.rs:16:14\n   |\n16 |     for (let i = 0; i < message_length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpsscshqac.rs:16:16\n   |\n16 |     for (let i = 0; i < message_length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpsscshqac.rs:16:15\n   |\n16 |     for (let i = 0; i < message_length; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpsscshqac.rs:16:16\n   |\n16 |     for (let i = 0; i < message_length; i++) {\n   |                ^ expected expression\n\nerror[E0609]: no field `length` on type `[&str; 5]`\n  --> /tmp/tmpsscshqac.rs:13:31\n   |\n13 |     let vowels_count = vowels.length;\n   |                               ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpsscshqac.rs:14:34\n   |\n14 |     let message_length = message.length;\n   |                                  ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message.charAt(0));\n    let vowels_index_2 = vowels.indexOf(message.charAt(1));\n    let vowels_index_3 = vowels.indexOf(message.charAt(2));\n    let vowels_index_4 = vowels.indexOf(message.charAt(3));\n    let vowels_index_5 = vowels.indexOf(message.charAt(4));\n    let vowels_index_6 = vowels.indexOf(message.charAt(5));\n    let vowels_index_7 = vowels.indexOf(message.charAt(6));\n    let vowels_index_8 = vowels.indexOf(message.charAt(7));\n    let vowels_index_9 = vowels.indexOf(message.charAt(8));\n    let vowels_index_10 = vowels.indexOf(message.charAt(9));\n    let vowels_index_11 = vowels.indexOf(message.charAt(10));\n    let vowels_index_12 = vowels.indexOf(message.charAt(11));\n    let vowels_index_13 = vowels.indexOf(message.charAt(12));\n    let vowels_index_14 = vowels.indexOf(message.charAt(13));\n    let vowels_index_15 = vowels.indexOf(message.charAt(14));\n    let vowels_index_16 = vowels.indexOf(message.charAt(15));\n    let vowels_index_17 = vowels.indexOf(message.charAt(16));\n    let vowels_index_18 = vowels.indexOf(message.charAt(17));\n    let vowels_index_19 = vowels.indexOf(message.charAt(18));\n    let vowels_index_20 = vowels.indexOf(message.charAt(19));\n    let vowels_index_21 = vowels.indexOf(message.charAt(20));\n    let vowels_index_22 =\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpkjmbeha2.rs:35:1\n   |\n35 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:47\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:49\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:33\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:49\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:16:33\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message.charAt(3));\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_count = vowels.length\n  let vowels_index = 0\n  let vowels_index_2 = 0\n  let message_length = message.length\n  let encoded_message = \"\"\n  for i in 0..message_length {\n    let letter = message[i]\n    if (vowels.indexOf(letter) >= 0) {\n      let vowel_index = vowels.indexOf(letter)\n      let vowel_index_2 = vowels.indexOf(message[i + 2])\n      let encoded_letter = vowels[vowel_index_2 + vowel_index]\n      encoded_message += encoded_letter\n    } else {\n      let encoded_letter = letter.toUpperCase()\n      encoded_message += encoded_letter\n    }\n  }\n  return encoded_message\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprqx8_0ff.rs:12:28\n   |\n12 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n13 |   let vowels_count = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprqx8_0ff.rs:13:35\n   |\n13 |   let vowels_count = vowels.length\n   |                                   ^ help: add `;` here\n14 |   let vowels_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprqx8_0ff.rs:14:23\n   |\n14 |   let vowels_index = 0\n   |                       ^ help: add `;` here\n15 |   let vowels_index_2 = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprqx8_0ff.rs:15:25\n   |\n15 |   let vowels_index_2 = 0\n   |                         ^ help: add `;` here\n16 |   let message_length = message.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprqx8_0ff.rs:16:38\n   |\n16 |   let message_length = message.length\n   |                                      ^ help: add `;` here\n17 |   let encoded_message = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprqx8_0ff.rs:17:27\n   |\n17 |   let encoded_message = \"\"\n   |                           ^ help: add `;` here\n18 |   for i in 0..message_length {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmprqx8_0ff.rs:19:28\n   |\n19 |     let letter = message[i]\n   |                            ^ help: add `;` here\n20 |     if (vowels.indexOf(letter) >= 0) {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprqx8_0ff.rs:21:47\n   |\n21 |       let vowel_index = vowels.indexOf(letter)\n   |                                               ^ help: add `;` here\n22 |       let vowel_index_2 = vowels.indexOf(message[i + 2])\n   |       --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprqx8_0ff.rs:22:57\n   |\n22 |       let vowel_index_2 = vowels.indexOf(message",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count = 0;\n    let message_length = message.length;\n    let encoded_message = \"\";\n    for (let i = 0; i < message_length; i++) {\n        let current_letter = message[i];\n        if (vowels.includes(current_letter)) {\n            vowels_count += 1;\n            if (vowels_count == 2) {\n                encoded_message += message[i + 1];\n                vowels_count = 0;\n            } else {\n                encoded_message += message[i];\n            }\n        } else {\n            encoded_message += message[i].toUpperCase();\n        }\n    }\n    return encoded_message;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpgvcoifuw.rs:16:10\n   |\n16 |     for (let i = 0; i < message_length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpgvcoifuw.rs:16:14\n   |\n16 |     for (let i = 0; i < message_length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpgvcoifuw.rs:16:16\n   |\n16 |     for (let i = 0; i < message_length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpgvcoifuw.rs:16:15\n   |\n16 |     for (let i = 0; i < message_length; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpgvcoifuw.rs:16:16\n   |\n16 |     for (let i = 0; i < message_length; i++) {\n   |                ^ expected expression\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpgvcoifuw.rs:14:34\n   |\n14 |     let message_length = message.length;\n   |                                  ^^^^^^ unknown field\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[1]);\n    let vowels_index_3 = vowels.indexOf(message[2]);\n    let vowels_index_4 = vowels.indexOf(message[3]);\n    let vowels_index_5 = vowels.indexOf(message[4]);\n    let vowels_index_6 = vowels.indexOf(message[5]);\n    let vowels_index_7 = vowels.indexOf(message[6]);\n    let vowels_index_8 = vowels.indexOf(message[7]);\n    let vowels_index_9 = vowels.indexOf(message[8]);\n    let vowels_index_10 = vowels.indexOf(message[9]);\n    let vowels_index_11 = vowels.indexOf(message[10]);\n    let vowels_index_12 = vowels.indexOf(message[11]);\n    let vowels_index_13 = vowels.indexOf(message[12]);\n    let vowels_index_14 = vowels.indexOf(message[13]);\n    let vowels_index_15 = vowels.indexOf(message[14]);\n    let vowels_index_16 = vowels.indexOf(message[15]);\n    let vowels_index_17 = vowels.indexOf(message[16]);\n    let vowels_index_18 = vowels.indexOf(message[17]);\n    let vowels_index_19 = vowels.indexOf(message[18]);\n    let vowels_index_20 = vowels.indexOf(message[19]);\n    let vowels_index_21 = vowels.indexOf(message[20]);\n    let vowels_index_22 = vowels.indexOf(message[21]);\n    let vowels_index_23 = vowels.indexOf(message[22]);\n    let vowels_index_24 = vowels.indexOf(message[23]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmp5tm2k_ju.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp5tm2k_ju.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message.charAt(0));\n    let vowels_index_2 = vowels.indexOf(message.charAt(1));\n    let vowels_index_3 = vowels.indexOf(message.charAt(2));\n    let vowels_index_4 = vowels.indexOf(message.charAt(3));\n    let vowels_index_5 = vowels.indexOf(message.charAt(4));\n    let vowels_index_6 = vowels.indexOf(message.charAt(5));\n    let vowels_index_7 = vowels.indexOf(message.charAt(6));\n    let vowels_index_8 = vowels.indexOf(message.charAt(7));\n    let vowels_index_9 = vowels.indexOf(message.charAt(8));\n    let vowels_index_10 = vowels.indexOf(message.charAt(9));\n    let vowels_index_11 = vowels.indexOf(message.charAt(10));\n    let vowels_index_12 = vowels.indexOf(message.charAt(11));\n    let vowels_index_13 = vowels.indexOf(message.charAt(12));\n    let vowels_index_14 = vowels.indexOf(message.charAt(13));\n    let vowels_index_15 = vowels.indexOf(message.charAt(14));\n    let vowels_index_16 = vowels.indexOf(message.charAt(15));\n    let vowels_index_17 = vowels.indexOf(message.charAt(16));\n    let vowels_index_18 = vowels.indexOf(message.charAt(17));\n    let vowels_index_19 = vowels.indexOf(message.charAt(18));\n    let vowels_index_20 = vowels.indexOf(message.charAt(19));\n    let vowels_index_21 = vowels.indexOf(message.charAt(20));\n    let vowels_index_22 =\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpkjmbeha2.rs:35:1\n   |\n35 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:47\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:49\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:33\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:49\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:16:33\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message.charAt(3));\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[1]);\n    let vowels_index_3 = vowels.indexOf(message[2]);\n    let vowels_index_4 = vowels.indexOf(message[3]);\n    let vowels_index_5 = vowels.indexOf(message[4]);\n    let vowels_index_6 = vowels.indexOf(message[5]);\n    let vowels_index_7 = vowels.indexOf(message[6]);\n    let vowels_index_8 = vowels.indexOf(message[7]);\n    let vowels_index_9 = vowels.indexOf(message[8]);\n    let vowels_index_10 = vowels.indexOf(message[9]);\n    let vowels_index_11 = vowels.indexOf(message[10]);\n    let vowels_index_12 = vowels.indexOf(message[11]);\n    let vowels_index_13 = vowels.indexOf(message[12]);\n    let vowels_index_14 = vowels.indexOf(message[13]);\n    let vowels_index_15 = vowels.indexOf(message[14]);\n    let vowels_index_16 = vowels.indexOf(message[15]);\n    let vowels_index_17 = vowels.indexOf(message[16]);\n    let vowels_index_18 = vowels.indexOf(message[17]);\n    let vowels_index_19 = vowels.indexOf(message[18]);\n    let vowels_index_20 = vowels.indexOf(message[19]);\n    let vowels_index_21 = vowels.indexOf(message[20]);\n    let vowels_index_22 = vowels.indexOf(message[21]);\n    let vowels_index_23 = vowels.indexOf(message[22]);\n    let vowels_index_24 = vowels.indexOf(message[23]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmp5tm2k_ju.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp5tm2k_ju.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[2])\n    let vowels_index_3 = vowels.indexOf(message[3])\n    let vowels_index_4 = vowels.indexOf(message[4])\n    let vowels_index_5 = vowels.indexOf(message[5])\n    let vowels_index_6 = vowels.indexOf(message[6])\n    let vowels_index_7 = vowels.indexOf(message[7])\n    let vowels_index_8 = vowels.indexOf(message[8])\n    let vowels_index_9 = vowels.indexOf(message[9])\n    let vowels_index_10 = vowels.indexOf(message[10])\n    let vowels_index_11 = vowels.indexOf(message[11])\n    let vowels_index_12 = vowels.indexOf(message[12])\n    let vowels_index_13 = vowels.indexOf(message[13])\n    let vowels_index_14 = vowels.indexOf(message[14])\n    let vowels_index_15 = vowels.indexOf(message[15])\n    let vowels_index_16 = vowels.indexOf(message[16])\n    let vowels_index_17 = vowels.indexOf(message[17])\n    let vowels_index_18 = vowels.indexOf(message[18])\n    let vowels_index_19 = vowels.indexOf(message[19])\n    let vowels_index_20 = vowels.indexOf(message[20])\n    let vowels_index_21 = vowels.indexOf(message[21])\n    let vowels_index_22 = vowels.indexOf(message[22])\n    let vowels_index_23 = vowels.indexOf(message[23])\n    let vowels_index_24 = vowels.indexOf(message[24])\n    let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw008vlsb.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[7])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count = vowels.length;\n    let vowels_index = 0;\n    let message_length = message.length;\n    let encoded_message = \"\";\n    for (let i = 0; i < message_length; i++) {\n        let current_letter = message[i];\n        let current_vowel = vowels[vowels_index];\n        let next_vowel = vowels[vowels_index + 1];\n        let encoded_letter = current_letter.toUpperCase();\n        if (current_letter === current_vowel) {\n            encoded_letter = next_vowel;\n        } else if (current_letter === next_vowel) {\n            encoded_letter = current_vowel;\n        }\n        encoded_message += encoded_letter;\n        vowels_index += 1;\n        if (vowels_index === vowels_count) {\n            vowels_index = 0;\n        }\n    }\n    return encoded_message;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpjck27h4i.rs:17:10\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpjck27h4i.rs:17:14\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpjck27h4i.rs:17:16\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpjck27h4i.rs:17:15\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpjck27h4i.rs:17:16\n   |\n17 |     for (let i = 0; i < message_length; i++) {\n   |                ^ expected expression\n\nerror[E0609]: no field `length` on type `[&str; 5]`\n  --> /tmp/tmpjck27h4i.rs:13:31\n   |\n13 |     let vowels_count = vowels.length;\n   |                               ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpjck27h4i.rs:15:34\n   |\n15 |     let message_length = message.length;\n   |                                  ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmp_wvv45gy.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = vowels.indexOf(letter);\n        if (index != -1) {\n            result += vowels2[index];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpoce4peev.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpoce4peev.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpoce4peev.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpoce4peev.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpoce4peev.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let index = vowels.indexOf(letter);\n        if (index != -1) {\n            result += vowels2[index];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpoce4peev.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpoce4peev.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpoce4peev.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpoce4peev.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpoce4peev.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length; i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message.charAt(0));\n    let vowels_index_2 = vowels.indexOf(message.charAt(1));\n    let vowels_index_3 = vowels.indexOf(message.charAt(2));\n    let vowels_index_4 = vowels.indexOf(message.charAt(3));\n    let vowels_index_5 = vowels.indexOf(message.charAt(4));\n    let vowels_index_6 = vowels.indexOf(message.charAt(5));\n    let vowels_index_7 = vowels.indexOf(message.charAt(6));\n    let vowels_index_8 = vowels.indexOf(message.charAt(7));\n    let vowels_index_9 = vowels.indexOf(message.charAt(8));\n    let vowels_index_10 = vowels.indexOf(message.charAt(9));\n    let vowels_index_11 = vowels.indexOf(message.charAt(10));\n    let vowels_index_12 = vowels.indexOf(message.charAt(11));\n    let vowels_index_13 = vowels.indexOf(message.charAt(12));\n    let vowels_index_14 = vowels.indexOf(message.charAt(13));\n    let vowels_index_15 = vowels.indexOf(message.charAt(14));\n    let vowels_index_16 = vowels.indexOf(message.charAt(15));\n    let vowels_index_17 = vowels.indexOf(message.charAt(16));\n    let vowels_index_18 = vowels.indexOf(message.charAt(17));\n    let vowels_index_19 = vowels.indexOf(message.charAt(18));\n    let vowels_index_20 = vowels.indexOf(message.charAt(19));\n    let vowels_index_21 = vowels.indexOf(message.charAt(20));\n    let vowels_index_22 =\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpkjmbeha2.rs:35:1\n   |\n35 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:47\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:49\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:33\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:49\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:16:33\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message.charAt(3));\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result = \"\";\n    for (let i = 0; i < message.length(); i++) {\n        let letter = message[i];\n        let index = vowels.indexOf(letter);\n        if (index != -1) {\n            result += vowels2[index];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmphhow9vdn.rs:15:10\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmphhow9vdn.rs:15:14\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmphhow9vdn.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmphhow9vdn.rs:15:15\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmphhow9vdn.rs:15:16\n   |\n15 |     for (let i = 0; i < message.length(); i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[1]);\n    let vowels_index_3 = vowels.indexOf(message[2]);\n    let vowels_index_4 = vowels.indexOf(message[3]);\n    let vowels_index_5 = vowels.indexOf(message[4]);\n    let vowels_index_6 = vowels.indexOf(message[5]);\n    let vowels_index_7 = vowels.indexOf(message[6]);\n    let vowels_index_8 = vowels.indexOf(message[7]);\n    let vowels_index_9 = vowels.indexOf(message[8]);\n    let vowels_index_10 = vowels.indexOf(message[9]);\n    let vowels_index_11 = vowels.indexOf(message[10]);\n    let vowels_index_12 = vowels.indexOf(message[11]);\n    let vowels_index_13 = vowels.indexOf(message[12]);\n    let vowels_index_14 = vowels.indexOf(message[13]);\n    let vowels_index_15 = vowels.indexOf(message[14]);\n    let vowels_index_16 = vowels.indexOf(message[15]);\n    let vowels_index_17 = vowels.indexOf(message[16]);\n    let vowels_index_18 = vowels.indexOf(message[17]);\n    let vowels_index_19 = vowels.indexOf(message[18]);\n    let vowels_index_20 = vowels.indexOf(message[19]);\n    let vowels_index_21 = vowels.indexOf(message[20]);\n    let vowels_index_22 = vowels.indexOf(message[21]);\n    let vowels_index_23 = vowels.indexOf(message[22]);\n    let vowels_index_24 = vowels.indexOf(message[23]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmp5tm2k_ju.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp5tm2k_ju.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmp5tm2k_ju.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp5tm2k_ju.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_index = vowels.indexOf(message[0])\n  let vowels_index_2 = vowels.indexOf(message[1])\n  let vowels_index_3 = vowels.indexOf(message[2])\n  let vowels_index_4 = vowels.indexOf(message[3])\n  let vowels_index_5 = vowels.indexOf(message[4])\n  let vowels_index_6 = vowels.indexOf(message[5])\n  let vowels_index_7 = vowels.indexOf(message[6])\n  let vowels_index_8 = vowels.indexOf(message[7])\n  let vowels_index_9 = vowels.indexOf(message[8])\n  let vowels_index_10 = vowels.indexOf(message[9])\n  let vowels_index_11 = vowels.indexOf(message[10])\n  let vowels_index_12 = vowels.indexOf(message[11])\n  let vowels_index_13 = vowels.indexOf(message[12])\n  let vowels_index_14 = vowels.indexOf(message[13])\n  let vowels_index_15 = vowels.indexOf(message[14])\n  let vowels_index_16 = vowels.indexOf(message[15])\n  let vowels_index_17 = vowels.indexOf(message[16])\n  let vowels_index_18 = vowels.indexOf(message[17])\n  let vowels_index_19 = vowels.indexOf(message[18])\n  let vowels_index_20 = vowels.indexOf(message[19])\n  let vowels_index_21 = vowels.indexOf(message[20])\n  let vowels_index_22 = vowels.indexOf(message[21])\n  let vowels_index_23 = vowels.indexOf(message[22])\n  let vowels_index_24 = vowels.indexOf(message[23])\n  let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:12:28\n   |\n12 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:13:48\n   |\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |                                                ^ help: add `;` here\n14 |   let vowels_index_2 = vowels.indexOf(message[1])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:14:50\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                  ^ help: add `;` here\n15 |   let vowels_index_3 = vowels.indexOf(message[2])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:15:50\n   |\n15 |   let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                  ^ help: add `;` here\n16 |   let vowels_index_4 = vowels.indexOf(message[3])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:16:50\n   |\n16 |   let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                  ^ help: add `;` here\n17 |   let vowels_index_5 = vowels.indexOf(message[4])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:17:50\n   |\n17 |   let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                  ^ help: add `;` here\n18 |   let vowels_index_6 = vowels.indexOf(message[5])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq1_p6qw7.rs:18:50\n   |\n18 |   let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                  ^ help: add `;` here\n19 |   let vowels_index_7 = vowels.indexOf(message[6])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index2 = vowels.indexOf(message[1]);\n    let vowels_index3 = vowels.indexOf(message[2]);\n    let vowels_index4 = vowels.indexOf(message[3]);\n    let vowels_index5 = vowels.indexOf(message[4]);\n    let vowels_index6 = vowels.indexOf(message[5]);\n    let vowels_index7 = vowels.indexOf(message[6]);\n    let vowels_index8 = vowels.indexOf(message[7]);\n    let vowels_index9 = vowels.indexOf(message[8]);\n    let vowels_index10 = vowels.indexOf(message[9]);\n    let vowels_index11 = vowels.indexOf(message[10]);\n    let vowels_index12 = vowels.indexOf(message[11]);\n    let vowels_index13 = vowels.indexOf(message[12]);\n    let vowels_index14 = vowels.indexOf(message[13]);\n    let vowels_index15 = vowels.indexOf(message[14]);\n    let vowels_index16 = vowels.indexOf(message[15]);\n    let vowels_index17 = vowels.indexOf(message[16]);\n    let vowels_index18 = vowels.indexOf(message[17]);\n    let vowels_index19 = vowels.indexOf(message[18]);\n    let vowels_index20 = vowels.indexOf(message[19]);\n    let vowels_index21 = vowels.indexOf(message[20]);\n    let vowels_index22 = vowels.indexOf(message[21]);\n    let vowels_index23 = vowels.indexOf(message[22]);\n    let vowels_index24 = vowels.indexOf(message[23]);\n    let vowels_index25 = vowels.indexOf(message[24]);\n    let vowels_index26 = vowels.indexOf(message[\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `]`\n  --> /tmp/tmpntntdbxi.rs:39:1\n   |\n39 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpntntdbxi.rs:38:48\n   |\n11 | fn encode(message: String) -> String {\n   |                                      - closing delimiter possibly meant for this\n...\n38 |     let vowels_index26 = vowels.indexOf(message[\n   |                                                ^ unclosed delimiter\n39 | }\n   | ^ mismatched closing delimiter\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpntntdbxi.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpntntdbxi.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpntntdbxi.rs:14:32\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1]);\n   |                                ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpntntdbxi.rs:14:40\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1]);\n   |                                        ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_index = vowels.indexOf(message[0])\n  let vowels_index_2 = vowels.indexOf(message[2])\n  let vowels_index_3 = vowels.indexOf(message[3])\n  let vowels_index_4 = vowels.indexOf(message[4])\n  let vowels_index_5 = vowels.indexOf(message[5])\n  let vowels_index_6 = vowels.indexOf(message[6])\n  let vowels_index_7 = vowels.indexOf(message[7])\n  let vowels_index_8 = vowels.indexOf(message[8])\n  let vowels_index_9 = vowels.indexOf(message[9])\n  let vowels_index_10 = vowels.indexOf(message[10])\n  let vowels_index_11 = vowels.indexOf(message[11])\n  let vowels_index_12 = vowels.indexOf(message[12])\n  let vowels_index_13 = vowels.indexOf(message[13])\n  let vowels_index_14 = vowels.indexOf(message[14])\n  let vowels_index_15 = vowels.indexOf(message[15])\n  let vowels_index_16 = vowels.indexOf(message[16])\n  let vowels_index_17 = vowels.indexOf(message[17])\n  let vowels_index_18 = vowels.indexOf(message[18])\n  let vowels_index_19 = vowels.indexOf(message[19])\n  let vowels_index_20 = vowels.indexOf(message[20])\n  let vowels_index_21 = vowels.indexOf(message[21])\n  let vowels_index_22 = vowels.indexOf(message[22])\n  let vowels_index_23 = vowels.indexOf(message[23])\n  let vowels_index_24 = vowels.indexOf(message[24])\n  let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:12:28\n   |\n12 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:13:48\n   |\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |                                                ^ help: add `;` here\n14 |   let vowels_index_2 = vowels.indexOf(message[2])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:14:50\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                  ^ help: add `;` here\n15 |   let vowels_index_3 = vowels.indexOf(message[3])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:15:50\n   |\n15 |   let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                  ^ help: add `;` here\n16 |   let vowels_index_4 = vowels.indexOf(message[4])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:16:50\n   |\n16 |   let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                  ^ help: add `;` here\n17 |   let vowels_index_5 = vowels.indexOf(message[5])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:17:50\n   |\n17 |   let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                  ^ help: add `;` here\n18 |   let vowels_index_6 = vowels.indexOf(message[6])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:18:50\n   |\n18 |   let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                  ^ help: add `;` here\n19 |   let vowels_index_7 = vowels.indexOf(message[7])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index2 = vowels.indexOf(message[1])\n    let vowels_index3 = vowels.indexOf(message[2])\n    let vowels_index4 = vowels.indexOf(message[3])\n    let vowels_index5 = vowels.indexOf(message[4])\n    let vowels_index6 = vowels.indexOf(message[5])\n    let vowels_index7 = vowels.indexOf(message[6])\n    let vowels_index8 = vowels.indexOf(message[7])\n    let vowels_index9 = vowels.indexOf(message[8])\n    let vowels_index10 = vowels.indexOf(message[9])\n    let vowels_index11 = vowels.indexOf(message[10])\n    let vowels_index12 = vowels.indexOf(message[11])\n    let vowels_index13 = vowels.indexOf(message[12])\n    let vowels_index14 = vowels.indexOf(message[13])\n    let vowels_index15 = vowels.indexOf(message[14])\n    let vowels_index16 = vowels.indexOf(message[15])\n    let vowels_index17 = vowels.indexOf(message[16])\n    let vowels_index18 = vowels.indexOf(message[17])\n    let vowels_index19 = vowels.indexOf(message[18])\n    let vowels_index20 = vowels.indexOf(message[19])\n    let vowels_index21 = vowels.indexOf(message[20])\n    let vowels_index22 = vowels.indexOf(message[21])\n    let vowels_index23 = vowels.indexOf(message[22])\n    let vowels_index24 = vowels.indexOf(message[23])\n    let vowels_index25 = vowels.indexOf(message[24])\n    let vowels_index26 = vowels.indexOf(message[25])\n    let vowels_\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:14:51\n   |\n14 |     let vowels_index2 = vowels.indexOf(message[1])\n   |                                                   ^ help: add `;` here\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:15:51\n   |\n15 |     let vowels_index3 = vowels.indexOf(message[2])\n   |                                                   ^ help: add `;` here\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:16:51\n   |\n16 |     let vowels_index4 = vowels.indexOf(message[3])\n   |                                                   ^ help: add `;` here\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:17:51\n   |\n17 |     let vowels_index5 = vowels.indexOf(message[4])\n   |                                                   ^ help: add `;` here\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps4i1bbo9.rs:18:51\n   |\n18 |     let vowels_index6 = vowels.indexOf(message[5])\n   |                                                   ^ help: add `;` here\n19 |     let vowels_index7 = vowels.indexOf(message[6])\n   |     --- unexpected token\n\nerror: expecte",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message.charAt(0));\n    let vowels_index_2 = vowels.indexOf(message.charAt(1));\n    let vowels_index_3 = vowels.indexOf(message.charAt(2));\n    let vowels_index_4 = vowels.indexOf(message.charAt(3));\n    let vowels_index_5 = vowels.indexOf(message.charAt(4));\n    let vowels_index_6 = vowels.indexOf(message.charAt(5));\n    let vowels_index_7 = vowels.indexOf(message.charAt(6));\n    let vowels_index_8 = vowels.indexOf(message.charAt(7));\n    let vowels_index_9 = vowels.indexOf(message.charAt(8));\n    let vowels_index_10 = vowels.indexOf(message.charAt(9));\n    let vowels_index_11 = vowels.indexOf(message.charAt(10));\n    let vowels_index_12 = vowels.indexOf(message.charAt(11));\n    let vowels_index_13 = vowels.indexOf(message.charAt(12));\n    let vowels_index_14 = vowels.indexOf(message.charAt(13));\n    let vowels_index_15 = vowels.indexOf(message.charAt(14));\n    let vowels_index_16 = vowels.indexOf(message.charAt(15));\n    let vowels_index_17 = vowels.indexOf(message.charAt(16));\n    let vowels_index_18 = vowels.indexOf(message.charAt(17));\n    let vowels_index_19 = vowels.indexOf(message.charAt(18));\n    let vowels_index_20 = vowels.indexOf(message.charAt(19));\n    let vowels_index_21 = vowels.indexOf(message.charAt(20));\n    let vowels_index_22 =\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpkjmbeha2.rs:35:1\n   |\n35 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:47\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:49\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:33\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:49\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:16:33\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message.charAt(3));\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message[0]);\n    let vowels_index_2 = vowels.indexOf(message[2]);\n    let vowels_index_3 = vowels.indexOf(message[3]);\n    let vowels_index_4 = vowels.indexOf(message[4]);\n    let vowels_index_5 = vowels.indexOf(message[5]);\n    let vowels_index_6 = vowels.indexOf(message[6]);\n    let vowels_index_7 = vowels.indexOf(message[7]);\n    let vowels_index_8 = vowels.indexOf(message[8]);\n    let vowels_index_9 = vowels.indexOf(message[9]);\n    let vowels_index_10 = vowels.indexOf(message[10]);\n    let vowels_index_11 = vowels.indexOf(message[11]);\n    let vowels_index_12 = vowels.indexOf(message[12]);\n    let vowels_index_13 = vowels.indexOf(message[13]);\n    let vowels_index_14 = vowels.indexOf(message[14]);\n    let vowels_index_15 = vowels.indexOf(message[15]);\n    let vowels_index_16 = vowels.indexOf(message[16]);\n    let vowels_index_17 = vowels.indexOf(message[17]);\n    let vowels_index_18 = vowels.indexOf(message[18]);\n    let vowels_index_19 = vowels.indexOf(message[19]);\n    let vowels_index_20 = vowels.indexOf(message[20]);\n    let vowels_index_21 = vowels.indexOf(message[21]);\n    let vowels_index_22 = vowels.indexOf(message[22]);\n    let vowels_index_23 = vowels.indexOf(message[23]);\n    let vowels_index_24 = vowels.indexOf(message[24]);\n    let vowels_index_25 = vowels.\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: unexpected token: `}`\n  --> /tmp/tmpmbdjy1am.rs:38:1\n   |\n38 | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpmbdjy1am.rs:37:34\n   |\n37 |     let vowels_index_25 = vowels.\n   |                                  ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:13:39\n   |\n13 |     let vowels_index = vowels.indexOf(message[0]);\n   |                                       ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpmbdjy1am.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmbdjy1am.rs:14:41\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[2]);\n   |                                         ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_index = vowels.indexOf(message[0])\n  let vowels_index_2 = vowels.indexOf(message[2])\n  let vowels_index_3 = vowels.indexOf(message[3])\n  let vowels_index_4 = vowels.indexOf(message[4])\n  let vowels_index_5 = vowels.indexOf(message[5])\n  let vowels_index_6 = vowels.indexOf(message[6])\n  let vowels_index_7 = vowels.indexOf(message[7])\n  let vowels_index_8 = vowels.indexOf(message[8])\n  let vowels_index_9 = vowels.indexOf(message[9])\n  let vowels_index_10 = vowels.indexOf(message[10])\n  let vowels_index_11 = vowels.indexOf(message[11])\n  let vowels_index_12 = vowels.indexOf(message[12])\n  let vowels_index_13 = vowels.indexOf(message[13])\n  let vowels_index_14 = vowels.indexOf(message[14])\n  let vowels_index_15 = vowels.indexOf(message[15])\n  let vowels_index_16 = vowels.indexOf(message[16])\n  let vowels_index_17 = vowels.indexOf(message[17])\n  let vowels_index_18 = vowels.indexOf(message[18])\n  let vowels_index_19 = vowels.indexOf(message[19])\n  let vowels_index_20 = vowels.indexOf(message[20])\n  let vowels_index_21 = vowels.indexOf(message[21])\n  let vowels_index_22 = vowels.indexOf(message[22])\n  let vowels_index_23 = vowels.indexOf(message[23])\n  let vowels_index_24 = vowels.indexOf(message[24])\n  let vowels_index_25 = vowels.indexOf(message[25])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:12:28\n   |\n12 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:13:48\n   |\n13 |   let vowels_index = vowels.indexOf(message[0])\n   |                                                ^ help: add `;` here\n14 |   let vowels_index_2 = vowels.indexOf(message[2])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:14:50\n   |\n14 |   let vowels_index_2 = vowels.indexOf(message[2])\n   |                                                  ^ help: add `;` here\n15 |   let vowels_index_3 = vowels.indexOf(message[3])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:15:50\n   |\n15 |   let vowels_index_3 = vowels.indexOf(message[3])\n   |                                                  ^ help: add `;` here\n16 |   let vowels_index_4 = vowels.indexOf(message[4])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:16:50\n   |\n16 |   let vowels_index_4 = vowels.indexOf(message[4])\n   |                                                  ^ help: add `;` here\n17 |   let vowels_index_5 = vowels.indexOf(message[5])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:17:50\n   |\n17 |   let vowels_index_5 = vowels.indexOf(message[5])\n   |                                                  ^ help: add `;` here\n18 |   let vowels_index_6 = vowels.indexOf(message[6])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmov7nu8e.rs:18:50\n   |\n18 |   let vowels_index_6 = vowels.indexOf(message[6])\n   |                                                  ^ help: add `;` here\n19 |   let vowels_index_7 = vowels.indexOf(message[7])\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_index = vowels.indexOf(message.charAt(0));\n    let vowels_index_2 = vowels.indexOf(message.charAt(1));\n    let vowels_index_3 = vowels.indexOf(message.charAt(2));\n    let vowels_index_4 = vowels.indexOf(message.charAt(3));\n    let vowels_index_5 = vowels.indexOf(message.charAt(4));\n    let vowels_index_6 = vowels.indexOf(message.charAt(5));\n    let vowels_index_7 = vowels.indexOf(message.charAt(6));\n    let vowels_index_8 = vowels.indexOf(message.charAt(7));\n    let vowels_index_9 = vowels.indexOf(message.charAt(8));\n    let vowels_index_10 = vowels.indexOf(message.charAt(9));\n    let vowels_index_11 = vowels.indexOf(message.charAt(10));\n    let vowels_index_12 = vowels.indexOf(message.charAt(11));\n    let vowels_index_13 = vowels.indexOf(message.charAt(12));\n    let vowels_index_14 = vowels.indexOf(message.charAt(13));\n    let vowels_index_15 = vowels.indexOf(message.charAt(14));\n    let vowels_index_16 = vowels.indexOf(message.charAt(15));\n    let vowels_index_17 = vowels.indexOf(message.charAt(16));\n    let vowels_index_18 = vowels.indexOf(message.charAt(17));\n    let vowels_index_19 = vowels.indexOf(message.charAt(18));\n    let vowels_index_20 = vowels.indexOf(message.charAt(19));\n    let vowels_index_21 = vowels.indexOf(message.charAt(20));\n    let vowels_index_22 =\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpkjmbeha2.rs:35:1\n   |\n35 | }\n   | ^ expected expression\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:31\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                               ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:13:47\n   |\n13 |     let vowels_index = vowels.indexOf(message.charAt(0));\n   |                                               ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:33\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:14:49\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message.charAt(1));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:33\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                 ^^^^^^^ method not found in `[&str; 5]`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:15:49\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message.charAt(2));\n   |                                                 ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `indexOf` found for array `[&str; 5]` in the current scope\n  --> /tmp/tmpkjmbeha2.rs:16:33\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message.charAt(3));\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels3 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels4 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels5 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels6 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels7 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels8 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels9 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels10 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels11 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels12 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels13 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels14 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels15 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels16 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels17 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels18 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels19 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels20 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels21 = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels22 = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let vowels23 = [\"\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjwes5dw1.rs:43:109\n   |\n43 |       assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n   |  _____________________________________________________________________________________________________________^\n44 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(String::from(\"test\"))\n/// String::from(\"TGST\")\n/// >>> encode(String::from(\"This is a message\"))\n/// String::from(\"tHKS KS C MGSSCGG\")\nfn encode(message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowels_index = vowels.indexOf(message[0])\n    let vowels_index_2 = vowels.indexOf(message[1])\n    let vowels_index_3 = vowels.indexOf(message[2])\n    let vowels_index_4 = vowels.indexOf(message[3])\n    let vowels_index_5 = vowels.indexOf(message[4])\n    let vowels_index_6 = vowels.indexOf(message[5])\n    let vowels_index_7 = vowels.indexOf(message[6])\n    let vowels_index_8 = vowels.indexOf(message[7])\n    let vowels_index_9 = vowels.indexOf(message[8])\n    let vowels_index_10 = vowels.indexOf(message[9])\n    let vowels_index_11 = vowels.indexOf(message[10])\n    let vowels_index_12 = vowels.indexOf(message[11])\n    let vowels_index_13 = vowels.indexOf(message[12])\n    let vowels_index_14 = vowels.indexOf(message[13])\n    let vowels_index_15 = vowels.indexOf(message[14])\n    let vowels_index_16 = vowels.indexOf(message[15])\n    let vowels_index_17 = vowels.indexOf(message[16])\n    let vowels_index_18 = vowels.indexOf(message[17])\n    let vowels_index_19 = vowels.indexOf(message[18])\n    let vowels_index_20 = vowels.indexOf(message[19])\n    let vowels_index_21 = vowels.indexOf(message[20])\n    let vowels_index_22 = vowels.indexOf(message[21])\n    let vowels_index_23 = vowels.indexOf(message[22])\n    let vowels_index_24 = vowels.indexOf(message[23])\n    let vowels_index_25 = vowels.indexOf(message[24])\n\n}\n\nfn main() {\n    let candidate = encode;\n    assert_eq!(candidate(String::from(\"TEST\")), String::from(\"tgst\"));\n    assert_eq!(candidate(String::from(\"Mudasir\")), String::from(\"mWDCSKR\"));\n    assert_eq!(candidate(String::from(\"YES\")), String::from(\"ygs\"));\n    assert_eq!(candidate(String::from(\"This is a message\")), String::from(\"tHKS KS C MGSSCGG\"));\n    assert_eq!(candidate(String::from(\"I DoNt KnOw WhAt tO WrItE\")), String::from(\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:12:30\n   |\n12 |     let vowels = \"aeiouAEIOU\"\n   |                              ^ help: add `;` here\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:13:50\n   |\n13 |     let vowels_index = vowels.indexOf(message[0])\n   |                                                  ^ help: add `;` here\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:14:52\n   |\n14 |     let vowels_index_2 = vowels.indexOf(message[1])\n   |                                                    ^ help: add `;` here\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:15:52\n   |\n15 |     let vowels_index_3 = vowels.indexOf(message[2])\n   |                                                    ^ help: add `;` here\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:16:52\n   |\n16 |     let vowels_index_4 = vowels.indexOf(message[3])\n   |                                                    ^ help: add `;` here\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:17:52\n   |\n17 |     let vowels_index_5 = vowels.indexOf(message[4])\n   |                                                    ^ help: add `;` here\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx0ox4wev.rs:18:52\n   |\n18 |     let vowels_index_6 = vowels.indexOf(message[5])\n   |                                                    ^ help: add `;` here\n19 |     let vowels_index_7 = vowels.indexOf(message[6])\n   |     --- unexpected token",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}