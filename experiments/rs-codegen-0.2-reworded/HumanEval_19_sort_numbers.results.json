{
  "name": "HumanEval_19_sort_numbers",
  "language": "rs",
  "prompt": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n",
  "tests": "}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  let numbers_sorted_str = \"\"\n  for number in numbers_split {\n    if number == \"zero\" {\n      numbers_sorted.push(0)\n    } else if number == \"one\" {\n      numbers_sorted.push(1)\n    } else if number == \"two\" {\n      numbers_sorted.push(2)\n    } else if number == \"three\" {\n      numbers_sorted.push(3)\n    } else if number == \"four\" {\n      numbers_sorted.push(4)\n    } else if number == \"five\" {\n      numbers_sorted.push(5)\n    } else if number == \"six\" {\n      numbers_sorted.push(6)\n    } else if number == \"seven\" {\n      numbers_sorted.push(7)\n    } else if number == \"eight\" {\n      numbers_sorted.push(8)\n    } else if number == \"nine\" {\n      numbers_sorted.push(9)\n    }\n  }\n  for number in numbers_sorted {\n    numbers_sorted_str += number\n  }\n  return numbers_sorted_str\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpb0ldg5ny.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpb0ldg5ny.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   let numbers_sorted_str = \"\"\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpb0ldg5ny.rs:9:30\n   |\n9  |   let numbers_sorted_str = \"\"\n   |                              ^ help: add `;` here\n10 |   for number in numbers_split {\n   |   --- unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpb0ldg5ny.rs:12:22\n   |\n12 |       numbers_sorted.push(0)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpb0ldg5ny.rs:14:22\n   |\n14 |       numbers_sorted.push(1)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpb0ldg5ny.rs:16:22\n   |\n16 |       numbers_sorted.push(2)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpb0ldg5ny.rs:18:22\n   |\n18 |       numbers_sorted.push(3)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpb0ldg5ny.rs:20:22\n   |\n20 |       numbers_sorted.push(4)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpb0ldg5ny.rs:22:22\n   |\n22 |       numbers_sorted.push(5)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \");\n  let numbers_sorted = numbers_split.sort();\n  let numbers_joined = numbers_sorted.join(\" \");\n  return numbers_joined;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmp_0lw3rre.rs:8:38\n  |\n8 |   let numbers_sorted = numbers_split.sort();\n  |                                      ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    let number = parseInt(number)\n    if number > 0 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  let sorted_string = \"\"\n  for number in sorted_numbers {\n    sorted_string += number + \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpwignq_sn.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpwignq_sn.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpwignq_sn.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwignq_sn.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwignq_sn.rs:16:25\n   |\n16 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n17 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpwignq_sn.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpwignq_sn.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwignq_sn.rs:18:5\n   |\n18 |     sorted_string += number + \" \"\n   |     -------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwignq_sn.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n20 |   return sorted_string\n   |          ^^^^^^^^^^^^^- help: tr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for i in numbers {\n    let number = parseInt(i)\n    if number > 0 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpzkwa5c6l.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpzkwa5c6l.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for i in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpzkwa5c6l.rs:10:29\n   |\n10 |     let number = parseInt(i)\n   |                             ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpzkwa5c6l.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpzkwa5c6l.rs:10:18\n   |\n10 |     let number = parseInt(i)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpzkwa5c6l.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b).join(\" \");\n  return numbers;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpwj_z8030.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b).join(\" \");\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    let number = number.to_i()\n    if number >= 0 && number <= 9 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  let sorted_numbers_string = \"\"\n  for number in sorted_numbers {\n    sorted_numbers_string += number + \" \"\n  }\n  return sorted_numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpr1wztv30.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpr1wztv30.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpr1wztv30.rs:10:31\n   |\n10 |     let number = number.to_i()\n   |                               ^ help: add `;` here\n11 |     if number >= 0 && number <= 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpr1wztv30.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   let sorted_numbers_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpr1wztv30.rs:16:33\n   |\n16 |   let sorted_numbers_string = \"\"\n   |                                 ^ help: add `;` here\n17 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmpr1wztv30.rs:10:25\n   |\n10 |     let number = number.to_i()\n   |                         ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpr1wztv30.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpr1wztv30.rs:18:5\n   |\n18 |     sorted_numbers_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1wztv30.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `Stri",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpaycn80vd.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp82wq93km.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for number in numbers_split {\n    let number = parseInt(number)\n    if number > 0 {\n      numbers_sorted.push(number)\n    }\n  }\n  numbers_sorted.sort()\n  let numbers_sorted_string = \"\"\n  for number in numbers_sorted {\n    numbers_sorted_string += number + \" \"\n  }\n  return numbers_sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpthv9g2yg.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpthv9g2yg.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpthv9g2yg.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpthv9g2yg.rs:15:24\n   |\n15 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n16 |   let numbers_sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpthv9g2yg.rs:16:33\n   |\n16 |   let numbers_sorted_string = \"\"\n   |                                 ^ help: add `;` here\n17 |   for number in numbers_sorted {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpthv9g2yg.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpthv9g2yg.rs:12:22\n   |\n12 |       numbers_sorted.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpthv9g2yg.rs:18:5\n   |\n18 |     numbers_sorted_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpthv9g2yg.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n20 |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpbbqd3rpp.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpbbqd3rpp.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpbbqd3rpp.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpbbqd3rpp.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpbbqd3rpp.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpbbqd3rpp.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_list = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_list {\n    let number = parseInt(number)\n    if number > 0 && number < 10 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp_4danb2v.rs:7:40\n  |\n7 |   let numbers_list = numbers.split(\" \")\n  |                                        ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp_4danb2v.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_list {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp_4danb2v.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number > 0 && number < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp_4danb2v.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp_4danb2v.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp_4danb2v.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number !== \"\" {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String::join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp_su374r9.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp_su374r9.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: invalid comparison operator `!==`\n  --> /tmp/tmp_su374r9.rs:10:15\n   |\n10 |     if number !== \"\" {\n   |               ^^^ help: `!==` is not a valid comparison operator, use `!=`\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp_su374r9.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String::join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp_su374r9.rs:11:22\n   |\n11 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmp_su374r9.rs:15:18\n   |\n15 |   return String::join(\" \", sorted_numbers)\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort()\n  let numbers_string = numbers_array.join(\" \")\n  return numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpc1kc2u72.rs:7:60\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                                            ^ help: add `;` here\n8 |   let numbers_string = numbers_array.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmpc1kc2u72.rs:8:47\n  |\n8 |   let numbers_string = numbers_array.join(\" \")\n  |                                               ^ help: add `;` here\n9 |   return numbers_string\n  |   ------ unexpected token\n\nerror[E0425]: cannot find value `Number` in this scope\n --> /tmp/tmpc1kc2u72.rs:7:46\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                              ^^^^^^ help: a local variable with a similar name exists: `numbers`\n\nerror[E0599]: no method named `sort` found for struct `Map` in the current scope\n --> /tmp/tmpc1kc2u72.rs:7:54\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                                      ^^^^ method not found in `Map<std::str::Split<'_, &str>, _>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp8hd0xhop.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp8hd0xhop.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp8hd0xhop.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp8hd0xhop.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp8hd0xhop.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp8hd0xhop.rs:14:30\n   |\n14 |   sorted_numbers.sort((a, b) => a - b)\n   |                              ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted = numbers.sort((a, b) => a - b)\n  return sorted.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpwo28knb6.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted = numbers.sort((a, b) => a - b)\n  |   --- unexpected token\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpwo28knb6.rs:8:36\n  |\n8 |   let sorted = numbers.sort((a, b) => a - b)\n  |                                    ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpbbqd3rpp.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpbbqd3rpp.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpbbqd3rpp.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpbbqd3rpp.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpbbqd3rpp.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpbbqd3rpp.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \");\n  let sorted = numbers.sort((a, b) => a - b);\n  return sorted.join(\" \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp22elhwpp.rs:8:36\n  |\n8 |   let sorted = numbers.sort((a, b) => a - b);\n  |                                    ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    if number.match(/^\\d+$/).is_ok() {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.reverse()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpsrfu28e8.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/).is_ok() {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpsrfu28e8.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpsrfu28e8.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpsrfu28e8.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/).is_ok() {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/).is_ok() {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpsrfu28e8.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/).is_ok() {\n   |                     ^ expected expression\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmpsrfu28e8.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   sorted_numbers.reverse()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpsrfu28e8.rs:15:27\n   |\n15 |   sorted_numbers.reverse()\n   |                           ^ help: add `;` here\n16 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpsrfu28e8.rs:16:10\n   |\n16 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror: aborting due to 8 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted = numbers.sort((a, b) => a - b)\n  return String::from(sorted.join(\" \"))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp50fan_3d.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted = numbers.sort((a, b) => a - b)\n  |   --- unexpected token\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp50fan_3d.rs:8:36\n  |\n8 |   let sorted = numbers.sort((a, b) => a - b)\n  |                                    ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort()\n  let numbers = numbers.join(\" \")\n  return numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpejarx017.rs:7:42\n  |\n7 |   let numbers = numbers.split(\" \").sort()\n  |                                          ^ help: add `;` here\n8 |   let numbers = numbers.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmpejarx017.rs:8:34\n  |\n8 |   let numbers = numbers.join(\" \")\n  |                                  ^ help: add `;` here\n9 |   return numbers\n  |   ------ unexpected token\n\nerror[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmpejarx017.rs:7:36\n  |\n7 |   let numbers = numbers.split(\" \").sort()\n  |                                    ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  let result = \"\";\n  for (let number of numbers) {\n    result += number + \" \";\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp__y22ijy.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  let numbers_sorted_append = (number) => {\n    let number_split = number.split(\" \")\n    let number_sorted = []\n    let number_sorted_append = (number) => {\n      let number_split = number.split(\" \")\n      let number_sorted = []\n      let number_sorted_append = (number) => {\n        let number_split = number.split(\" \")\n        let number_sorted = []\n        let number_sorted_append = (number) => {\n          let number_split = number.split(\" \")\n          let number_sorted = []\n          let number_sorted_append = (number) => {\n            let number_split = number.split(\" \")\n            let number_sorted = []\n            let number_sorted_append = (number) => {\n              let number_split = number.split(\" \")\n              let number_sorted = []\n              let number_sorted_append = (number) => {\n                let number_split = number.split(\" \")\n                let number_sorted = []\n                let number_sorted_append = (number) => {\n                  let number_split = number.split(\" \")\n                  let number_sorted = []\n                  let number_sorted_append = (number) => {\n                    let number_split = number.split(\" \")\n                    let number_sorted = []\n                    let number_sorted_append = (number) => {\n                      let number_split = number.split(\" \")\n                      let number_sorted = []\n                      let number_sorted_append = (number) => {\n                        let number_split = number.split(\" \")\n                        let number_sorted = []\n                        let number_sorted_append = (number) => {\n                          let number_split = number.split(\" \")\n                          let number_sorted = []\n                          let number_sorted_append = (number) => {\n                            let number_split = number.split(\" \")\n                            let number_sorted = []\n                            let number_sorted_append =\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmphrb_ahr9.rs:58:3\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                            - unclosed delimiter\n...\n9  |   let numbers_sorted_append = (number) => {\n   |                                           - unclosed delimiter\n...\n12 |     let number_sorted_append = (number) => {\n   |                                            - unclosed delimiter\n...\n15 |       let number_sorted_append = (number) => {\n   |                                              - unclosed delimiter\n...\n18 |         let number_sorted_append = (number) => {\n   |                                                - unclosed delimiter\n...\n21 |           let number_sorted_append = (number) => {\n   |                                                  - unclosed delimiter\n...\n24 |             let number_sorted_append = (number) => {\n   |                                                    - unclosed delimiter\n...\n27 |               let number_sorted_append = (number) => {\n   |                                                      - unclosed delimiter\n...\n30 |                 let number_sorted_append = (number) => {\n   |                                                        - unclosed delimiter\n...\n33 |                   let number_sorted_append = (number) => {\n   |                                                          - unclosed delimiter\n...\n36 |                     let number_sorted_append = (number) => {\n   |                                                            - unclosed delimiter\n...\n39 |                       let number_sorted_append = (number) => {\n   |                                                              - unclosed delimiter\n...\n42 |                         let number_sorted_append = (number) => {\n   |                                                                - unclosed delimiter\n...\n45 |                           let number_sorted_append = (number) => {\n   |                                                                  - thi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = sort_numbers_helper(numbers_array)\n  return String::from(sorted_numbers.join(\" \"))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpdbcxqcv5.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = sort_numbers_helper(numbers_array)\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmpdbcxqcv5.rs:8:58\n  |\n8 |   let sorted_numbers = sort_numbers_helper(numbers_array)\n  |                                                          ^ help: add `;` here\n9 |   return String::from(sorted_numbers.join(\" \"))\n  |   ------ unexpected token\n\nerror[E0425]: cannot find function `sort_numbers_helper` in this scope\n --> /tmp/tmpdbcxqcv5.rs:8:24\n  |\n8 |   let sorted_numbers = sort_numbers_helper(numbers_array)\n  |                        ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers {\n    let number = num.to_i\n    if number >= 0 && number <= 9 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.reverse()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpefe4gvbi.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpefe4gvbi.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpefe4gvbi.rs:10:26\n   |\n10 |     let number = num.to_i\n   |                          ^ help: add `;` here\n11 |     if number >= 0 && number <= 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmpefe4gvbi.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   sorted_numbers.reverse()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpefe4gvbi.rs:16:27\n   |\n16 |   sorted_numbers.reverse()\n   |                           ^ help: add `;` here\n17 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror[E0609]: no field `to_i` on type `&str`\n  --> /tmp/tmpefe4gvbi.rs:10:22\n   |\n10 |     let number = num.to_i\n   |                      ^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpefe4gvbi.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  let sorted_numbers_array = []\n  for num in numbers_array {\n    if num.match(/^\\d+$/) {\n      sorted_numbers.push(num)\n    }\n  }\n  sorted_numbers.sort()\n  for num in sorted_numbers {\n    sorted_numbers_array.push(num)\n  }\n  return String::from(\" \".join(sorted_numbers_array))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpfppvawry.rs:11:20\n   |\n11 |     if num.match(/^\\d+$/) {\n   |                    ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpfppvawry.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpfppvawry.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   let sorted_numbers_array = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfppvawry.rs:9:32\n   |\n9  |   let sorted_numbers_array = []\n   |                                ^ help: add `;` here\n10 |   for num in numbers_array {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpfppvawry.rs:11:12\n   |\n11 |     if num.match(/^\\d+$/) {\n   |            ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n11 |     if num.r#match(/^\\d+$/) {\n   |            ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpfppvawry.rs:11:18\n   |\n11 |     if num.match(/^\\d+$/) {\n   |                  ^ expected expression\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfppvawry.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   for num in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpfppvawry.rs:17:26\n   |\n17 |     sorted_numbers_array.push(num)\n   |                          ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `join` found for reference `&'static str` in the current scope\n  --> /tmp/tmpfppvawry.rs:19:27\n   |\n19 |   return String::from(\" \".join(sorted_numbers_array))\n   |                           ^^^^ method not found in `&'static str`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    let number = parseInt(number)\n    if number > 0 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.reverse()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp0zinanv6.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp0zinanv6.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp0zinanv6.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmp0zinanv6.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   sorted_numbers.reverse()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp0zinanv6.rs:16:27\n   |\n16 |   sorted_numbers.reverse()\n   |                           ^ help: add `;` here\n17 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp0zinanv6.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp0zinanv6.rs:17:10\n   |\n17 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp0zinanv6.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    let number_int = parseInt(number)\n    if number_int > 0 {\n      sorted_numbers.push(number_int)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.reverse()\n  let sorted_string = \"\"\n  for number in sorted_numbers {\n    sorted_string += number + \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpkojpm4xd.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpkojpm4xd.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpkojpm4xd.rs:10:38\n   |\n10 |     let number_int = parseInt(number)\n   |                                      ^ help: add `;` here\n11 |     if number_int > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmpkojpm4xd.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   sorted_numbers.reverse()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkojpm4xd.rs:16:27\n   |\n16 |   sorted_numbers.reverse()\n   |                           ^ help: add `;` here\n17 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkojpm4xd.rs:17:25\n   |\n17 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n18 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpkojpm4xd.rs:10:22\n   |\n10 |     let number_int = parseInt(number)\n   |                      ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpkojpm4xd.rs:12:22\n   |\n12 |       sorted_numbers.push(number_int)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpkojpm4xd.rs:19:5\n   |\n19 |     sorted_string += number + \" \"\n   |     -------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  let result = numbers_array.join(\" \")\n  return result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpgsxag03m.rs:7:72\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  |                                                                        ^ help: add `;` here\n8 |   let result = numbers_array.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmpgsxag03m.rs:8:39\n  |\n8 |   let result = numbers_array.join(\" \")\n  |                                       ^ help: add `;` here\n9 |   return result\n  |   ------ unexpected token\n\nerror[E0609]: no field `to_i` on type `&str`\n --> /tmp/tmpgsxag03m.rs:7:52\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  |                                                    ^^^^\n\nerror[E0599]: no method named `sort_by` found for struct `Map` in the current scope\n --> /tmp/tmpgsxag03m.rs:7:58\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  |                                                          ^^^^^^^ method not found in `Map<std::str::Split<'_, &str>, _>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = numbers_split.sort()\n  let numbers_joined = numbers_sorted.join(\" \")\n  return numbers_joined\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmphb57q_ti.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = numbers_split.sort()\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmphb57q_ti.rs:8:44\n  |\n8 |   let numbers_sorted = numbers_split.sort()\n  |                                            ^ help: add `;` here\n9 |   let numbers_joined = numbers_sorted.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmphb57q_ti.rs:9:48\n   |\n9  |   let numbers_joined = numbers_sorted.join(\" \")\n   |                                                ^ help: add `;` here\n10 |   return numbers_joined\n   |   ------ unexpected token\n\nerror[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmphb57q_ti.rs:8:38\n  |\n8 |   let numbers_sorted = numbers_split.sort()\n  |                                      ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    let number = parseInt(number)\n    sorted_numbers.push(number)\n  }\n  sorted_numbers.sort()\n  let sorted_numbers_string = \"\"\n  for number in sorted_numbers {\n    sorted_numbers_string += number + \" \"\n  }\n  return sorted_numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpz7qwyxgf.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpz7qwyxgf.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmpz7qwyxgf.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     sorted_numbers.push(number)\n   |     -------------- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpz7qwyxgf.rs:13:24\n   |\n13 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n14 |   let sorted_numbers_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpz7qwyxgf.rs:14:33\n   |\n14 |   let sorted_numbers_string = \"\"\n   |                                 ^ help: add `;` here\n15 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpz7qwyxgf.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpz7qwyxgf.rs:11:20\n   |\n11 |     sorted_numbers.push(number)\n   |                    ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpz7qwyxgf.rs:16:5\n   |\n16 |     sorted_numbers_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz7qwyxgf.rs:18:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").sort();\n  let numbers_string = numbers_array.join(\" \");\n  return numbers_string;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmp1i46d1mw.rs:7:42\n  |\n7 |   let numbers_array = numbers.split(\" \").sort();\n  |                                          ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp89bx4wwx.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp89bx4wwx.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp89bx4wwx.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp89bx4wwx.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp89bx4wwx.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmp89bx4wwx.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   sorted_numbers.join(\" \")\n   |   -------------- unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpaycn80vd.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers {\n    let number = num.to_i()\n    if number < 10 {\n      sorted_numbers.push(number.to_s())\n    }\n  }\n  sorted_numbers.sort()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp0o5msfvn.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp0o5msfvn.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp0o5msfvn.rs:10:28\n   |\n10 |     let number = num.to_i()\n   |                            ^ help: add `;` here\n11 |     if number < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp0o5msfvn.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp0o5msfvn.rs:16:10\n   |\n16 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmp0o5msfvn.rs:10:22\n   |\n10 |     let number = num.to_i()\n   |                      ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp0o5msfvn.rs:12:22\n   |\n12 |       sorted_numbers.push(number.to_s())\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    let number = parseInt(number)\n    if number > 0 && number <= 9 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  let sorted_string = \"\"\n  for number in sorted_numbers {\n    sorted_string += number + \" \"\n  }\n  return sorted_string.trim()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpkaud3kkf.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpkaud3kkf.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpkaud3kkf.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number > 0 && number <= 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkaud3kkf.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkaud3kkf.rs:16:25\n   |\n16 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n17 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpkaud3kkf.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpkaud3kkf.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpkaud3kkf.rs:18:5\n   |\n18 |     sorted_string += number + \" \"\n   |     -------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkaud3kkf.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n20 |   return sorted_string.trim()\n   |          ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_list = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers_list {\n    if num.match(/^\\d+$/) {\n      sorted_numbers.push(num)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpl03vmg3v.rs:10:20\n   |\n10 |     if num.match(/^\\d+$/) {\n   |                    ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpl03vmg3v.rs:7:40\n  |\n7 |   let numbers_list = numbers.split(\" \")\n  |                                        ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpl03vmg3v.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers_list {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpl03vmg3v.rs:10:12\n   |\n10 |     if num.match(/^\\d+$/) {\n   |            ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if num.r#match(/^\\d+$/) {\n   |            ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpl03vmg3v.rs:10:18\n   |\n10 |     if num.match(/^\\d+$/) {\n   |                  ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpl03vmg3v.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b).to_a\n  let result = \"\"\n  for i in numbers_array {\n    result += i + \" \"\n  }\n  return result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpf_qoo5ke.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b).to_a\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    if number.to_i() < 10 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp1lll0ex6.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp1lll0ex6.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp1lll0ex6.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmp1lll0ex6.rs:10:15\n   |\n10 |     if number.to_i() < 10 {\n   |               ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1lll0ex6.rs:11:22\n   |\n11 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort()\n  let numbers_string = numbers_array.join(\" \")\n  return numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpc1kc2u72.rs:7:60\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                                            ^ help: add `;` here\n8 |   let numbers_string = numbers_array.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmpc1kc2u72.rs:8:47\n  |\n8 |   let numbers_string = numbers_array.join(\" \")\n  |                                               ^ help: add `;` here\n9 |   return numbers_string\n  |   ------ unexpected token\n\nerror[E0425]: cannot find value `Number` in this scope\n --> /tmp/tmpc1kc2u72.rs:7:46\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                              ^^^^^^ help: a local variable with a similar name exists: `numbers`\n\nerror[E0599]: no method named `sort` found for struct `Map` in the current scope\n --> /tmp/tmpc1kc2u72.rs:7:54\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                                      ^^^^ method not found in `Map<std::str::Split<'_, &str>, _>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for i in numbers {\n    let number = parseInt(i)\n    if number >= 0 && number <= 9 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  let sorted_string = \"\"\n  for i in sorted_numbers {\n    sorted_string += i\n    if i < 10 {\n      sorted_string += \" \"\n    }\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp5ifnp0nw.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp5ifnp0nw.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for i in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5ifnp0nw.rs:10:29\n   |\n10 |     let number = parseInt(i)\n   |                             ^ help: add `;` here\n11 |     if number >= 0 && number <= 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5ifnp0nw.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5ifnp0nw.rs:16:25\n   |\n16 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n17 |   for i in sorted_numbers {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5ifnp0nw.rs:18:23\n   |\n18 |     sorted_string += i\n   |                       ^ help: add `;` here\n19 |     if i < 10 {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5ifnp0nw.rs:10:18\n   |\n10 |     let number = parseInt(i)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5ifnp0nw.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp5ifnp0nw.rs:18:5\n   |\n18 |     sorted_string += i\n   |     -------------^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp5ifnp0nw.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  let result = \"\";\n  for (let number of numbers) {\n    result += number + \" \";\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp__y22ijy.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  let sorted_numbers = numbers_array.join(\" \")\n  return sorted_numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmplo36e2w8.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_list = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_list {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmphm2uj22h.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmphm2uj22h.rs:7:40\n  |\n7 |   let numbers_list = numbers.split(\" \")\n  |                                        ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmphm2uj22h.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_list {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmphm2uj22h.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmphm2uj22h.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmphm2uj22h.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for number in numbers_split {\n    if number.match(/^\\d+$/) {\n      numbers_sorted.push(number)\n    }\n  }\n  numbers_sorted.sort()\n  return numbers_sorted.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpauthqauh.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpauthqauh.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpauthqauh.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpauthqauh.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpauthqauh.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpauthqauh.rs:14:24\n   |\n14 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n15 |   return numbers_sorted.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted = numbers.sort((a, b) => a - b)\n  return sorted.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpwo28knb6.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted = numbers.sort((a, b) => a - b)\n  |   --- unexpected token\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpwo28knb6.rs:8:36\n  |\n8 |   let sorted = numbers.sort((a, b) => a - b)\n  |                                    ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  let sorted_numbers_array = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      let num = parseInt(number)\n      sorted_numbers.push(num)\n    }\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  for num in sorted_numbers {\n    sorted_numbers_array.push(num)\n  }\n  return String::from(\" \".join(sorted_numbers_array))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp9t971zkr.rs:11:23\n   |\n11 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp9t971zkr.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp9t971zkr.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   let sorted_numbers_array = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9t971zkr.rs:9:32\n   |\n9  |   let sorted_numbers_array = []\n   |                                ^ help: add `;` here\n10 |   for number in numbers_array {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp9t971zkr.rs:11:15\n   |\n11 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n11 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp9t971zkr.rs:11:21\n   |\n11 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp9t971zkr.rs:16:30\n   |\n16 |   sorted_numbers.sort((a, b) => a - b)\n   |                              ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \");\n  let numbers_sorted = sort_numbers_helper(numbers_split);\n  let numbers_joined = numbers_sorted.join(\" \");\n  return numbers_joined;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `sort_numbers_helper` in this scope\n --> /tmp/tmpn15vcoh2.rs:8:24\n  |\n8 |   let numbers_sorted = sort_numbers_helper(numbers_split);\n  |                        ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(&|a| a)\n  let numbers_string = numbers_array.join(\" \")\n  return String::from(numbers_string)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp1yu_dudk.rs:7:73\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(&|a| a)\n  |                                                                         ^ help: add `;` here\n8 |   let numbers_string = numbers_array.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmp1yu_dudk.rs:8:47\n  |\n8 |   let numbers_string = numbers_array.join(\" \")\n  |                                               ^ help: add `;` here\n9 |   return String::from(numbers_string)\n  |   ------ unexpected token\n\nerror[E0609]: no field `to_i` on type `&str`\n --> /tmp/tmp1yu_dudk.rs:7:52\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(&|a| a)\n  |                                                    ^^^^\n\nerror[E0599]: no method named `sort_by` found for struct `Map` in the current scope\n --> /tmp/tmp1yu_dudk.rs:7:58\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(&|a| a)\n  |                                                          ^^^^^^^ method not found in `Map<std::str::Split<'_, &str>, _>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \");\n  let numbers_sorted = numbers_split.sort();\n  let numbers_joined = numbers_sorted.join(\" \");\n  return numbers_joined;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmp_0lw3rre.rs:8:38\n  |\n8 |   let numbers_sorted = numbers_split.sort();\n  |                                      ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpxzse3y1d.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpxzse3y1d.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpxzse3y1d.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpxzse3y1d.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpxzse3y1d.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpxzse3y1d.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpz9mjwo2v.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpz9mjwo2v.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpz9mjwo2v.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpz9mjwo2v.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpz9mjwo2v.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpz9mjwo2v.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_list = numbers.split(\" \")\n  let sorted_numbers = []\n  let sorted_numbers_list = []\n  for number in numbers_list {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  for number in sorted_numbers {\n    sorted_numbers_list.push(number)\n  }\n  return String::from(\" \".join(sorted_numbers_list))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpdbau1iec.rs:11:23\n   |\n11 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpdbau1iec.rs:7:40\n  |\n7 |   let numbers_list = numbers.split(\" \")\n  |                                        ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpdbau1iec.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   let sorted_numbers_list = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdbau1iec.rs:9:31\n   |\n9  |   let sorted_numbers_list = []\n   |                               ^ help: add `;` here\n10 |   for number in numbers_list {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpdbau1iec.rs:11:15\n   |\n11 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n11 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpdbau1iec.rs:11:21\n   |\n11 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdbau1iec.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpdbau1iec.rs:17:25\n   |\n17 |     sorted_numbers_list.push(number)\n   |                         ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `join` found for reference `&'static str` in the current scope\n  --> /tmp/tmpdbau1iec.rs:19:27\n   |\n19 |   return String::from(\" \".join(sorted_numbers_list))\n   |                           ^^^^ method not found in `&'static str`\n\nerror: aborting due to 9 previous errors\n\nFor mor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found `numbers_array`\n --> /tmp/tmp2akp77ok.rs:7:72\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  |                                                                        ^ help: add `;` here\n8 |   numbers_array.join(\" \")\n  |   ------------- unexpected token\n\nerror[E0609]: no field `to_i` on type `&str`\n --> /tmp/tmp2akp77ok.rs:7:52\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  |                                                    ^^^^\n\nerror[E0599]: no method named `sort_by` found for struct `Map` in the current scope\n --> /tmp/tmp2akp77ok.rs:7:58\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  |                                                          ^^^^^^^ method not found in `Map<std::str::Split<'_, &str>, _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    let num = parseInt(number)\n    if num > 0 && num < 10 {\n      sorted_numbers.push(num)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.reverse()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp_mbf1uj2.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp_mbf1uj2.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp_mbf1uj2.rs:10:31\n   |\n10 |     let num = parseInt(number)\n   |                               ^ help: add `;` here\n11 |     if num > 0 && num < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmp_mbf1uj2.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   sorted_numbers.reverse()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp_mbf1uj2.rs:16:27\n   |\n16 |   sorted_numbers.reverse()\n   |                           ^ help: add `;` here\n17 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp_mbf1uj2.rs:10:15\n   |\n10 |     let num = parseInt(number)\n   |               ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp_mbf1uj2.rs:12:22\n   |\n12 |       sorted_numbers.push(num)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b);\n  let sorted_numbers = numbers_array.join(\" \");\n  return sorted_numbers;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpd4rytxu0.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b);\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String::join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpt_29gl0w.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpt_29gl0w.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpt_29gl0w.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpt_29gl0w.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpt_29gl0w.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpt_29gl0w.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String::join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpt_29gl0w.rs:15:18\n   |\n15 |   return String::join(\" \", sorted_numbers)\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for number in numbers_split {\n    let number_int = parseInt(number)\n    if number_int > 0 {\n      numbers_sorted.push(number_int)\n    }\n  }\n  numbers_sorted.sort()\n  let numbers_sorted_str = \"\"\n  for number in numbers_sorted {\n    numbers_sorted_str += number + \" \"\n  }\n  return numbers_sorted_str\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmprcrve78v.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmprcrve78v.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmprcrve78v.rs:10:38\n   |\n10 |     let number_int = parseInt(number)\n   |                                      ^ help: add `;` here\n11 |     if number_int > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprcrve78v.rs:15:24\n   |\n15 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n16 |   let numbers_sorted_str = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprcrve78v.rs:16:30\n   |\n16 |   let numbers_sorted_str = \"\"\n   |                              ^ help: add `;` here\n17 |   for number in numbers_sorted {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmprcrve78v.rs:10:22\n   |\n10 |     let number_int = parseInt(number)\n   |                      ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmprcrve78v.rs:12:22\n   |\n12 |       numbers_sorted.push(number_int)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmprcrve78v.rs:18:5\n   |\n18 |     numbers_sorted_str += number + \" \"\n   |     ------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprcrve78v.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n..",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  let result = \"\"\n  for i in numbers_array {\n    result += i + \" \"\n  }\n  return result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpdyz3mcgq.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").sort()\n  let numbers_string = numbers_array.join(\" \")\n  return numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpyv9str3o.rs:7:48\n  |\n7 |   let numbers_array = numbers.split(\" \").sort()\n  |                                                ^ help: add `;` here\n8 |   let numbers_string = numbers_array.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmpyv9str3o.rs:8:47\n  |\n8 |   let numbers_string = numbers_array.join(\" \")\n  |                                               ^ help: add `;` here\n9 |   return numbers_string\n  |   ------ unexpected token\n\nerror[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmpyv9str3o.rs:7:42\n  |\n7 |   let numbers_array = numbers.split(\" \").sort()\n  |                                          ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b).join(\" \")\n  return numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmps2m6tva8.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b).join(\" \")\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for number in numbers_split {\n    let number = parseInt(number)\n    if number > 9 {\n      number = 9\n    }\n    if number < 0 {\n      number = 0\n    }\n    numbers_sorted.push(number)\n  }\n  numbers_sorted.sort()\n  let numbers_sorted_string = \"\"\n  for number in numbers_sorted {\n    numbers_sorted_string += number + \" \"\n  }\n  numbers_sorted_string = numbers_sorted_string.trim()\n  return String::from(numbers_sorted_string)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpqycw44og.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpqycw44og.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpqycw44og.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number > 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqycw44og.rs:19:24\n   |\n19 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n20 |   let numbers_sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqycw44og.rs:20:33\n   |\n20 |   let numbers_sorted_string = \"\"\n   |                                 ^ help: add `;` here\n21 |   for number in numbers_sorted {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpqycw44og.rs:24:55\n   |\n24 |   numbers_sorted_string = numbers_sorted_string.trim()\n   |                                                       ^ help: add `;` here\n25 |   return String::from(numbers_sorted_string)\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpqycw44og.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpqycw44og.rs:17:20\n   |\n17 |     numbers_sorted.push(number)\n   |                    ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpqycw44og.rs:22:5\n   |\n22 |     numbers_sorted_string += number + \" \"\n   |     ---------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    if number.match(/^\\d+$/).ok {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp86owzchq.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/).ok {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp86owzchq.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp86owzchq.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp86owzchq.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/).ok {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/).ok {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp86owzchq.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/).ok {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp86owzchq.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers {\n    let number = num.to_i()\n    if number < 10 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.reverse()\n  let sorted_string = \"\"\n  for num in sorted_numbers {\n    sorted_string += String::from(num) + \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp8goftson.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp8goftson.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp8goftson.rs:10:28\n   |\n10 |     let number = num.to_i()\n   |                            ^ help: add `;` here\n11 |     if number < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmp8goftson.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   sorted_numbers.reverse()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8goftson.rs:16:27\n   |\n16 |   sorted_numbers.reverse()\n   |                           ^ help: add `;` here\n17 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8goftson.rs:17:25\n   |\n17 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n18 |   for num in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmp8goftson.rs:10:22\n   |\n10 |     let number = num.to_i()\n   |                      ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8goftson.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp8goftson.rs:19:5\n   |\n19 |     sorted_string += String::from(num) + \" \"\n   |     -------------^--^^^^^^^^^^^^^^^^^^^^^^^^\n   |     |             |\n   |     |             `+` cannot be us",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted = []\n  for num in numbers {\n    if num.match(/^\\d+$/) {\n      sorted.push(num)\n    }\n  }\n  sorted.sort((a, b) => a - b)\n  return sorted.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpttf497ja.rs:10:20\n   |\n10 |     if num.match(/^\\d+$/) {\n   |                    ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpttf497ja.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpttf497ja.rs:8:18\n  |\n8 |   let sorted = []\n  |                  ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpttf497ja.rs:10:12\n   |\n10 |     if num.match(/^\\d+$/) {\n   |            ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if num.r#match(/^\\d+$/) {\n   |            ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpttf497ja.rs:10:18\n   |\n10 |     if num.match(/^\\d+$/) {\n   |                  ^ expected expression\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpttf497ja.rs:14:22\n   |\n14 |   sorted.sort((a, b) => a - b)\n   |                      ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \");\n  let sorted_numbers = numbers_split.sort();\n  let sorted_numbers_joined = sorted_numbers.join(\" \");\n  return sorted_numbers_joined;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmpp244eado.rs:8:38\n  |\n8 |   let sorted_numbers = numbers_split.sort();\n  |                                      ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpn5fdrbdl.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpn5fdrbdl.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpn5fdrbdl.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpn5fdrbdl.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpn5fdrbdl.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpn5fdrbdl.rs:14:30\n   |\n14 |   sorted_numbers.sort((a, b) => a - b)\n   |                              ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b).to_a\n  let result = \"\"\n  for i in numbers_array {\n    result += i + \" \"\n  }\n  return result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpf_qoo5ke.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b).to_a\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    if number.match(/^\\d+$/).is_ok() {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmplm678m47.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/).is_ok() {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmplm678m47.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmplm678m47.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmplm678m47.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/).is_ok() {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/).is_ok() {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmplm678m47.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/).is_ok() {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmplm678m47.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmplm678m47.rs:15:10\n   |\n15 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpaycn80vd.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").sort_by(|x| x.to_i).map(|x| x.to_s).to_a\n  numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found `numbers_array`\n --> /tmp/tmpf77013_b.rs:7:82\n  |\n7 |   let numbers_array = numbers.split(\" \").sort_by(|x| x.to_i).map(|x| x.to_s).to_a\n  |                                                                                  ^ help: add `;` here\n8 |   numbers_array.join(\" \")\n  |   ------------- unexpected token\n\nerror[E0599]: no method named `sort_by` found for struct `std::str::Split` in the current scope\n --> /tmp/tmpf77013_b.rs:7:42\n  |\n7 |   let numbers_array = numbers.split(\" \").sort_by(|x| x.to_i).map(|x| x.to_s).to_a\n  |                                          ^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers_split {\n    let num_int = num.to_int()\n    if num_int > 0 && num_int < 10 {\n      sorted_numbers.push(num)\n    }\n  }\n  sorted_numbers.sort()\n  let sorted_string = \"\"\n  for num in sorted_numbers {\n    sorted_string += num + \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp7075lcl5.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp7075lcl5.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp7075lcl5.rs:10:31\n   |\n10 |     let num_int = num.to_int()\n   |                               ^ help: add `;` here\n11 |     if num_int > 0 && num_int < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7075lcl5.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7075lcl5.rs:16:25\n   |\n16 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n17 |   for num in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_int` found for reference `&str` in the current scope\n  --> /tmp/tmp7075lcl5.rs:10:23\n   |\n10 |     let num_int = num.to_int()\n   |                       ^^^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp7075lcl5.rs:12:22\n   |\n12 |       sorted_numbers.push(num)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp7075lcl5.rs:18:5\n   |\n18 |     sorted_string += num + \" \"\n   |     -------------^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7075lcl5.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n20 |   return sorted_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpxivwtc0k.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpxivwtc0k.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpxivwtc0k.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpxivwtc0k.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpxivwtc0k.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpxivwtc0k.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpxivwtc0k.rs:15:10\n   |\n15 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpuedwblxl.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpuedwblxl.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpuedwblxl.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpuedwblxl.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpuedwblxl.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmpuedwblxl.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   sorted_numbers.join(\" \")\n   |   -------------- unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for number in numbers_split {\n    let number = number.to_i()\n    if number > 9 {\n      number = number % 10\n    }\n    numbers_sorted.push(number)\n  }\n  numbers_sorted.sort()\n  let numbers_sorted_str = \"\"\n  for number in numbers_sorted {\n    numbers_sorted_str += number.to_s() + \" \"\n  }\n  numbers_sorted_str = numbers_sorted_str.trim()\n  return String::from(numbers_sorted_str)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpxl9s1xrt.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpxl9s1xrt.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpxl9s1xrt.rs:10:31\n   |\n10 |     let number = number.to_i()\n   |                               ^ help: add `;` here\n11 |     if number > 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpxl9s1xrt.rs:16:24\n   |\n16 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n17 |   let numbers_sorted_str = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxl9s1xrt.rs:17:30\n   |\n17 |   let numbers_sorted_str = \"\"\n   |                              ^ help: add `;` here\n18 |   for number in numbers_sorted {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpxl9s1xrt.rs:21:49\n   |\n21 |   numbers_sorted_str = numbers_sorted_str.trim()\n   |                                                 ^ help: add `;` here\n22 |   return String::from(numbers_sorted_str)\n   |   ------ unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmpxl9s1xrt.rs:10:25\n   |\n10 |     let number = number.to_i()\n   |                         ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpxl9s1xrt.rs:14:20\n   |\n14 |     numbers_sorted.push(number)\n   |                    ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").sort_by(|x| x.to_i).map(|x| x.to_s)\n  numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found `numbers_array`\n --> /tmp/tmpzl82upnc.rs:7:77\n  |\n7 |   let numbers_array = numbers.split(\" \").sort_by(|x| x.to_i).map(|x| x.to_s)\n  |                                                                             ^ help: add `;` here\n8 |   numbers_array.join(\" \")\n  |   ------------- unexpected token\n\nerror[E0599]: no method named `sort_by` found for struct `std::str::Split` in the current scope\n --> /tmp/tmpzl82upnc.rs:7:42\n  |\n7 |   let numbers_array = numbers.split(\" \").sort_by(|x| x.to_i).map(|x| x.to_s)\n  |                                          ^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \");\n  let numbers_sorted = sort_numbers_helper(numbers_split);\n  return String::join(\" \", numbers_sorted);\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `sort_numbers_helper` in this scope\n --> /tmp/tmpy5bmjbr8.rs:8:24\n  |\n8 |   let numbers_sorted = sort_numbers_helper(numbers_split);\n  |                        ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n --> /tmp/tmpy5bmjbr8.rs:9:18\n  |\n9 |   return String::join(\" \", numbers_sorted);\n  |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for number in numbers_split {\n    let number_int = parseInt(number)\n    if number_int > 0 {\n      numbers_sorted.push(number_int)\n    }\n  }\n  numbers_sorted.sort()\n  let numbers_sorted_string = \"\"\n  for number in numbers_sorted {\n    numbers_sorted_string += number + \" \"\n  }\n  return numbers_sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp33522hi9.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp33522hi9.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp33522hi9.rs:10:38\n   |\n10 |     let number_int = parseInt(number)\n   |                                      ^ help: add `;` here\n11 |     if number_int > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp33522hi9.rs:15:24\n   |\n15 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n16 |   let numbers_sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp33522hi9.rs:16:33\n   |\n16 |   let numbers_sorted_string = \"\"\n   |                                 ^ help: add `;` here\n17 |   for number in numbers_sorted {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp33522hi9.rs:10:22\n   |\n10 |     let number_int = parseInt(number)\n   |                      ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp33522hi9.rs:12:22\n   |\n12 |       numbers_sorted.push(number_int)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp33522hi9.rs:18:5\n   |\n18 |     numbers_sorted_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp33522hi9.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b);\n  return numbers_array.join(\" \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpn7ax0err.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b);\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers {\n    if num.match(/^\\d+$/) {\n      sorted_numbers.push(num)\n    }\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp_v6f1564.rs:10:20\n   |\n10 |     if num.match(/^\\d+$/) {\n   |                    ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp_v6f1564.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp_v6f1564.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp_v6f1564.rs:10:12\n   |\n10 |     if num.match(/^\\d+$/) {\n   |            ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if num.r#match(/^\\d+$/) {\n   |            ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp_v6f1564.rs:10:18\n   |\n10 |     if num.match(/^\\d+$/) {\n   |                  ^ expected expression\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp_v6f1564.rs:14:30\n   |\n14 |   sorted_numbers.sort((a, b) => a - b)\n   |                              ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b).to_a\n  let result = \"\"\n  for num in numbers_array {\n    result += num + \" \"\n  }\n  return result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp61niealx.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b).to_a\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpxzse3y1d.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpxzse3y1d.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpxzse3y1d.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpxzse3y1d.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpxzse3y1d.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpxzse3y1d.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found `numbers_array`\n --> /tmp/tmp2akp77ok.rs:7:72\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  |                                                                        ^ help: add `;` here\n8 |   numbers_array.join(\" \")\n  |   ------------- unexpected token\n\nerror[E0609]: no field `to_i` on type `&str`\n --> /tmp/tmp2akp77ok.rs:7:52\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  |                                                    ^^^^\n\nerror[E0599]: no method named `sort_by` found for struct `Map` in the current scope\n --> /tmp/tmp2akp77ok.rs:7:58\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  |                                                          ^^^^^^^ method not found in `Map<std::str::Split<'_, &str>, _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for num in numbers_split {\n    let num_int = num.to_int()\n    if num_int != 0 {\n      numbers_sorted.push(num_int)\n    }\n  }\n  numbers_sorted.sort()\n  let numbers_sorted_str = []\n  for num in numbers_sorted {\n    numbers_sorted_str.push(String::from(num))\n  }\n  return String::join(\" \", numbers_sorted_str)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmptsgrchs9.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmptsgrchs9.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmptsgrchs9.rs:10:31\n   |\n10 |     let num_int = num.to_int()\n   |                               ^ help: add `;` here\n11 |     if num_int != 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmptsgrchs9.rs:15:24\n   |\n15 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n16 |   let numbers_sorted_str = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptsgrchs9.rs:16:30\n   |\n16 |   let numbers_sorted_str = []\n   |                              ^ help: add `;` here\n17 |   for num in numbers_sorted {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_int` found for reference `&str` in the current scope\n  --> /tmp/tmptsgrchs9.rs:10:23\n   |\n10 |     let num_int = num.to_int()\n   |                       ^^^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmptsgrchs9.rs:12:22\n   |\n12 |       numbers_sorted.push(num_int)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmptsgrchs9.rs:18:24\n   |\n18 |     numbers_sorted_str.push(String::from(num))\n   |                        ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmptsgrchs9.rs:20:18\n   |\n20 |   return String::join(\" \", numbers_sorted_str)\n   |                  ^^^^ function or ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for number in numbers_split {\n    if number.match(/^\\d+$/) {\n      numbers_sorted.push(number)\n    }\n  }\n  numbers_sorted.sort()\n  return numbers_sorted.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpauthqauh.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpauthqauh.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpauthqauh.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpauthqauh.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpauthqauh.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpauthqauh.rs:14:24\n   |\n14 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n15 |   return numbers_sorted.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \");\n  let numbers_sorted = numbers_split.sort();\n  let numbers_joined = numbers_sorted.join(\" \");\n  return numbers_joined;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmp_0lw3rre.rs:8:38\n  |\n8 |   let numbers_sorted = numbers_split.sort();\n  |                                      ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpqyq7w1dw.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpqyq7w1dw.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpqyq7w1dw.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpqyq7w1dw.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpqyq7w1dw.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpqyq7w1dw.rs:14:30\n   |\n14 |   sorted_numbers.sort((a, b) => a - b)\n   |                              ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpuedwblxl.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpuedwblxl.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpuedwblxl.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpuedwblxl.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpuedwblxl.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmpuedwblxl.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   sorted_numbers.join(\" \")\n   |   -------------- unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for number in numbers_split {\n    let number = number.to_i()\n    if number > 9 {\n      number = number % 10\n    }\n    numbers_sorted.push(number)\n  }\n  numbers_sorted.sort()\n  let numbers_sorted_string = \"\"\n  for number in numbers_sorted {\n    numbers_sorted_string += number\n  }\n  return numbers_sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpc9l5egqf.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpc9l5egqf.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpc9l5egqf.rs:10:31\n   |\n10 |     let number = number.to_i()\n   |                               ^ help: add `;` here\n11 |     if number > 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpc9l5egqf.rs:16:24\n   |\n16 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n17 |   let numbers_sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc9l5egqf.rs:17:33\n   |\n17 |   let numbers_sorted_string = \"\"\n   |                                 ^ help: add `;` here\n18 |   for number in numbers_sorted {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmpc9l5egqf.rs:10:25\n   |\n10 |     let number = number.to_i()\n   |                         ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpc9l5egqf.rs:14:20\n   |\n14 |     numbers_sorted.push(number)\n   |                    ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpc9l5egqf.rs:19:5\n   |\n19 |     numbers_sorted_string += number\n   |     ---------------------^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc9l5egqf.rs:21:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n2",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").sort();\n  numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmpquv9dasz.rs:7:42\n  |\n7 |   let numbers_array = numbers.split(\" \").sort();\n  |                                          ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_list = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_list {\n    if number != \"\" {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String::join(sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpoj84o6lz.rs:7:40\n  |\n7 |   let numbers_list = numbers.split(\" \")\n  |                                        ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpoj84o6lz.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_list {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpoj84o6lz.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String::join(sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpoj84o6lz.rs:11:22\n   |\n11 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpoj84o6lz.rs:15:18\n   |\n15 |   return String::join(sorted_numbers)\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(|s| s.to_i()).sort_by(&|a| a.to_i())\n  numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found `numbers_array`\n --> /tmp/tmp0ij6hopk.rs:7:82\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i()).sort_by(&|a| a.to_i())\n  |                                                                                  ^ help: add `;` here\n8 |   numbers_array.join(\" \")\n  |   ------------- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n --> /tmp/tmp0ij6hopk.rs:7:52\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i()).sort_by(&|a| a.to_i())\n  |                                                    ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `sort_by` found for struct `Map` in the current scope\n --> /tmp/tmp0ij6hopk.rs:7:60\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i()).sort_by(&|a| a.to_i())\n  |                                                            ^^^^^^^ method not found in `Map<std::str::Split<'_, &str>, _>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for i in numbers {\n    let number = parseInt(i)\n    if number > 0 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpzkwa5c6l.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpzkwa5c6l.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for i in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpzkwa5c6l.rs:10:29\n   |\n10 |     let number = parseInt(i)\n   |                             ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpzkwa5c6l.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpzkwa5c6l.rs:10:18\n   |\n10 |     let number = parseInt(i)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpzkwa5c6l.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_list = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_list {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmphm2uj22h.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmphm2uj22h.rs:7:40\n  |\n7 |   let numbers_list = numbers.split(\" \")\n  |                                        ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmphm2uj22h.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_list {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmphm2uj22h.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmphm2uj22h.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmphm2uj22h.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpaycn80vd.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  let sorted_numbers_array = []\n\n  for number in numbers_array {\n    if number.to_i() > 9 {\n      sorted_numbers.push(number)\n    } else {\n      sorted_numbers_array.push(number)\n    }\n  }\n\n  sorted_numbers_array.sort()\n  sorted_numbers.sort()\n\n  return String.join(\" \", sorted_numbers_array) + \" \" + String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpiujj_yrs.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpiujj_yrs.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   let sorted_numbers_array = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpiujj_yrs.rs:9:32\n   |\n9  |   let sorted_numbers_array = []\n   |                                ^ help: add `;` here\n10 | \n11 |   for number in numbers_array {\n   |   --- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmpiujj_yrs.rs:19:30\n   |\n19 |   sorted_numbers_array.sort()\n   |                              ^ help: add `;` here\n20 |   sorted_numbers.sort()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpiujj_yrs.rs:20:24\n   |\n20 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n21 | \n22 |   return String.join(\" \", sorted_numbers_array) + \" \" + String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpiujj_yrs.rs:22:10\n   |\n22 |   return String.join(\" \", sorted_numbers_array) + \" \" + String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpiujj_yrs.rs:22:57\n   |\n22 |   return String.join(\" \", sorted_numbers_array) + \" \" + String.join(\" \", sorted_numbers)\n   |                                                         ^^^^^^-----\n   |                                                         |\n   |                                                         help: use the path separator to refer to an item: `String::join`\n\nerror[E0599]: no method named `to_i` found for reference `&st",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort()\n  let numbers_string = numbers_array.join(\" \")\n  return numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpc1kc2u72.rs:7:60\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                                            ^ help: add `;` here\n8 |   let numbers_string = numbers_array.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmpc1kc2u72.rs:8:47\n  |\n8 |   let numbers_string = numbers_array.join(\" \")\n  |                                               ^ help: add `;` here\n9 |   return numbers_string\n  |   ------ unexpected token\n\nerror[E0425]: cannot find value `Number` in this scope\n --> /tmp/tmpc1kc2u72.rs:7:46\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                              ^^^^^^ help: a local variable with a similar name exists: `numbers`\n\nerror[E0599]: no method named `sort` found for struct `Map` in the current scope\n --> /tmp/tmpc1kc2u72.rs:7:54\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                                      ^^^^ method not found in `Map<std::str::Split<'_, &str>, _>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    if number != \"\" {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String::join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp8aa2am2r.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp8aa2am2r.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp8aa2am2r.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String::join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp8aa2am2r.rs:11:22\n   |\n11 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmp8aa2am2r.rs:15:18\n   |\n15 |   return String::join(\" \", sorted_numbers)\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  let result = \"\"\n  for i in numbers_array {\n    result += i + \" \"\n  }\n  return result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpdyz3mcgq.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted = []\n  for num in numbers {\n    let num = num.to_i()\n    if num > 0 && num < 10 {\n      sorted.push(num)\n    }\n  }\n  sorted.sort()\n  sorted.reverse()\n  return String.join(\" \", sorted)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpudy63da8.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpudy63da8.rs:8:18\n  |\n8 |   let sorted = []\n  |                  ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpudy63da8.rs:10:25\n   |\n10 |     let num = num.to_i()\n   |                         ^ help: add `;` here\n11 |     if num > 0 && num < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found `sorted`\n  --> /tmp/tmpudy63da8.rs:15:16\n   |\n15 |   sorted.sort()\n   |                ^ help: add `;` here\n16 |   sorted.reverse()\n   |   ------ unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpudy63da8.rs:16:19\n   |\n16 |   sorted.reverse()\n   |                   ^ help: add `;` here\n17 |   return String.join(\" \", sorted)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpudy63da8.rs:17:10\n   |\n17 |   return String.join(\" \", sorted)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmpudy63da8.rs:10:19\n   |\n10 |     let num = num.to_i()\n   |                   ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpudy63da8.rs:12:14\n   |\n12 |       sorted.push(num)\n   |              ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  let numbers = numbers.join(\" \");\n  return numbers;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpsyl78am_.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").sort()\n  let numbers_string = numbers_array.join(\" \")\n  return numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpyv9str3o.rs:7:48\n  |\n7 |   let numbers_array = numbers.split(\" \").sort()\n  |                                                ^ help: add `;` here\n8 |   let numbers_string = numbers_array.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmpyv9str3o.rs:8:47\n  |\n8 |   let numbers_string = numbers_array.join(\" \")\n  |                                               ^ help: add `;` here\n9 |   return numbers_string\n  |   ------ unexpected token\n\nerror[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmpyv9str3o.rs:7:42\n  |\n7 |   let numbers_array = numbers.split(\" \").sort()\n  |                                          ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  let numbers_sorted_append = (numbers_sorted, number) => {\n    if number < numbers_sorted[0] {\n      numbers_sorted.unshift(number)\n    } else if number > numbers_sorted[numbers_sorted.length - 1] {\n      numbers_sorted.push(number)\n    }\n  }\n\n  for number in numbers_split {\n    numbers_sorted_append(numbers_sorted, number)\n  }\n\n  let numbers_sorted_string = \"\"\n  for number in numbers_sorted {\n    numbers_sorted_string += number + \" \"\n  }\n  numbers_sorted_string = numbers_sorted_string.trim()\n  return String::from(numbers_sorted_string)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpng8ounes.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpng8ounes.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   let numbers_sorted_append = (numbers_sorted, number) => {\n  |   --- unexpected token\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator, found `=>`\n --> /tmp/tmpng8ounes.rs:9:56\n  |\n9 |   let numbers_sorted_append = (numbers_sorted, number) => {\n  |                                                        ^^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpxivwtc0k.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpxivwtc0k.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpxivwtc0k.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpxivwtc0k.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpxivwtc0k.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpxivwtc0k.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpxivwtc0k.rs:15:10\n   |\n15 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpaycn80vd.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp82wq93km.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    let number = parseInt(number)\n    if number >= 0 && number <= 9 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpyyhezzhj.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpyyhezzhj.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyyhezzhj.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number >= 0 && number <= 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpyyhezzhj.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpyyhezzhj.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyyhezzhj.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  let numbers = numbers.join(\" \");\n  return numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp2l1_c33i.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  let numbers_sorted_append = (numbers_sorted, number) => {\n    if number > numbers_sorted[numbers_sorted.length - 1] {\n      numbers_sorted.push(number)\n    }\n  }\n  numbers_sorted.sort((a, b) => a - b)\n  numbers_sorted.forEach(numbers_sorted_append)\n  return numbers_sorted.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpgpgfmmib.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpgpgfmmib.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   let numbers_sorted_append = (numbers_sorted, number) => {\n  |   --- unexpected token\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator, found `=>`\n --> /tmp/tmpgpgfmmib.rs:9:56\n  |\n9 |   let numbers_sorted_append = (numbers_sorted, number) => {\n  |                                                        ^^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    let num = parseInt(number)\n    sorted_numbers.push(num)\n  }\n  sorted_numbers.sort()\n  let sorted_string = \"\"\n  for num in sorted_numbers {\n    sorted_string += num + \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp6tlcisus.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp6tlcisus.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmp6tlcisus.rs:10:31\n   |\n10 |     let num = parseInt(number)\n   |                               ^ help: add `;` here\n11 |     sorted_numbers.push(num)\n   |     -------------- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6tlcisus.rs:13:24\n   |\n13 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n14 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp6tlcisus.rs:14:25\n   |\n14 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n15 |   for num in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp6tlcisus.rs:10:15\n   |\n10 |     let num = parseInt(number)\n   |               ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6tlcisus.rs:11:20\n   |\n11 |     sorted_numbers.push(num)\n   |                    ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp6tlcisus.rs:16:5\n   |\n16 |     sorted_string += num + \" \"\n   |     -------------^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6tlcisus.rs:18:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n18 |   return sorted_string\n   |          ^^^^^^^^^^^^^- help: try u",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \");\n  let numbers_sorted = numbers_split.sort();\n  let numbers_joined = numbers_sorted.join(\" \");\n  return numbers_joined;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmp_0lw3rre.rs:8:38\n  |\n8 |   let numbers_sorted = numbers_split.sort();\n  |                                      ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \");\n  let sorted = numbers.sort((a, b) => a - b);\n  return sorted.join(\" \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp22elhwpp.rs:8:36\n  |\n8 |   let sorted = numbers.sort((a, b) => a - b);\n  |                                    ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    let number = parseInt(number)\n    if number >= 0 && number <= 9 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  let sorted_numbers_string = \"\"\n  for number in sorted_numbers {\n    sorted_numbers_string += number + \" \"\n  }\n  return sorted_numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp191b9xa6.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp191b9xa6.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp191b9xa6.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number >= 0 && number <= 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp191b9xa6.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   let sorted_numbers_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp191b9xa6.rs:16:33\n   |\n16 |   let sorted_numbers_string = \"\"\n   |                                 ^ help: add `;` here\n17 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp191b9xa6.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp191b9xa6.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp191b9xa6.rs:18:5\n   |\n18 |     sorted_numbers_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp191b9xa6.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers {\n    let number = num.to_i()\n    if number > 0 && number < 10 {\n      sorted_numbers.push(num)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpyfumbe2m.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpyfumbe2m.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyfumbe2m.rs:10:28\n   |\n10 |     let number = num.to_i()\n   |                            ^ help: add `;` here\n11 |     if number > 0 && number < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpyfumbe2m.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmpyfumbe2m.rs:10:22\n   |\n10 |     let number = num.to_i()\n   |                      ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyfumbe2m.rs:12:22\n   |\n12 |       sorted_numbers.push(num)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpaycn80vd.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    let number = parseInt(number)\n    if number >= 0 && number <= 9 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  let sorted_string = \"\"\n  for number in sorted_numbers {\n    sorted_string += number + \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp2wt8dw6v.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp2wt8dw6v.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp2wt8dw6v.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number >= 0 && number <= 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2wt8dw6v.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2wt8dw6v.rs:16:25\n   |\n16 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n17 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp2wt8dw6v.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp2wt8dw6v.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp2wt8dw6v.rs:18:5\n   |\n18 |     sorted_string += number + \" \"\n   |     -------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2wt8dw6v.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n20 |   return sorted_string\n   |          ^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  let sorted_numbers_string = \"\"\n\n  for number in numbers_split {\n    if number !== \"\" {\n      sorted_numbers.push(number)\n    }\n  }\n\n  sorted_numbers.sort()\n\n  for number in sorted_numbers {\n    sorted_numbers_string += number + \" \"\n  }\n\n  return sorted_numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp6e6rsbaq.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp6e6rsbaq.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   let sorted_numbers_string = \"\"\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp6e6rsbaq.rs:9:33\n   |\n9  |   let sorted_numbers_string = \"\"\n   |                                 ^ help: add `;` here\n10 | \n11 |   for number in numbers_split {\n   |   --- unexpected token\n\nerror: invalid comparison operator `!==`\n  --> /tmp/tmp6e6rsbaq.rs:12:15\n   |\n12 |     if number !== \"\" {\n   |               ^^^ help: `!==` is not a valid comparison operator, use `!=`\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp6e6rsbaq.rs:17:24\n   |\n17 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n18 | \n19 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6e6rsbaq.rs:13:22\n   |\n13 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp6e6rsbaq.rs:20:5\n   |\n20 |     sorted_numbers_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6e6rsbaq.rs:23:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n23 |   return sorted_numbers_string\n   |          ^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 8 previous er",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  let sorted_numbers_string = \"\"\n  for number in numbers {\n    if number.match(/^\\d+$/) {\n      let number_int = parseInt(number)\n      sorted_numbers.push(number_int)\n    }\n  }\n  sorted_numbers.sort()\n  for number in sorted_numbers {\n    sorted_numbers_string += number + \" \"\n  }\n  return sorted_numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp5ltw3hle.rs:11:23\n   |\n11 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp5ltw3hle.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp5ltw3hle.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   let sorted_numbers_string = \"\"\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5ltw3hle.rs:9:33\n   |\n9  |   let sorted_numbers_string = \"\"\n   |                                 ^ help: add `;` here\n10 |   for number in numbers {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp5ltw3hle.rs:11:15\n   |\n11 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n11 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp5ltw3hle.rs:11:21\n   |\n11 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5ltw3hle.rs:16:24\n   |\n16 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n17 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp5ltw3hle.rs:18:5\n   |\n18 |     sorted_numbers_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5ltw3hle.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n20 |   return sorted_numbers_string\n   |          ^^^^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted = []\n  for num in numbers {\n    let number = num.to_i()\n    if number > 0 {\n      sorted.push(number)\n    }\n  }\n  sorted.sort()\n  return String.join(\" \", sorted)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp78k28t3c.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp78k28t3c.rs:8:18\n  |\n8 |   let sorted = []\n  |                  ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp78k28t3c.rs:10:28\n   |\n10 |     let number = num.to_i()\n   |                            ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp78k28t3c.rs:15:16\n   |\n15 |   sorted.sort()\n   |                ^ help: add `;` here\n16 |   return String.join(\" \", sorted)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp78k28t3c.rs:16:10\n   |\n16 |   return String.join(\" \", sorted)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmp78k28t3c.rs:10:22\n   |\n10 |     let number = num.to_i()\n   |                      ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp78k28t3c.rs:12:14\n   |\n12 |       sorted.push(number)\n   |              ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpbbqd3rpp.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpbbqd3rpp.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpbbqd3rpp.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpbbqd3rpp.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpbbqd3rpp.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpbbqd3rpp.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpaycn80vd.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for number in numbers_split {\n    let number = number.to_i()\n    if number > 0 {\n      numbers_sorted.push(number)\n    }\n  }\n  numbers_sorted.sort()\n  let numbers_sorted_string = \"\"\n  for number in numbers_sorted {\n    numbers_sorted_string += number + \" \"\n  }\n  return numbers_sorted_string.trim()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp74nxdwf5.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp74nxdwf5.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp74nxdwf5.rs:10:31\n   |\n10 |     let number = number.to_i()\n   |                               ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp74nxdwf5.rs:15:24\n   |\n15 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n16 |   let numbers_sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp74nxdwf5.rs:16:33\n   |\n16 |   let numbers_sorted_string = \"\"\n   |                                 ^ help: add `;` here\n17 |   for number in numbers_sorted {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmp74nxdwf5.rs:10:25\n   |\n10 |     let number = number.to_i()\n   |                         ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp74nxdwf5.rs:12:22\n   |\n12 |       numbers_sorted.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp74nxdwf5.rs:18:5\n   |\n18 |     numbers_sorted_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp74nxdwf5.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number !== \"\" {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String::join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp_su374r9.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp_su374r9.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: invalid comparison operator `!==`\n  --> /tmp/tmp_su374r9.rs:10:15\n   |\n10 |     if number !== \"\" {\n   |               ^^^ help: `!==` is not a valid comparison operator, use `!=`\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp_su374r9.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String::join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp_su374r9.rs:11:22\n   |\n11 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmp_su374r9.rs:15:18\n   |\n15 |   return String::join(\" \", sorted_numbers)\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.to_i() < 10 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp43vqfmon.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp43vqfmon.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp43vqfmon.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp43vqfmon.rs:15:10\n   |\n15 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmp43vqfmon.rs:10:15\n   |\n10 |     if number.to_i() < 10 {\n   |               ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp43vqfmon.rs:11:22\n   |\n11 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for number in numbers_split {\n    let number = parseInt(number)\n    if number > 0 {\n      numbers_sorted.push(number)\n    }\n  }\n  numbers_sorted.sort()\n  let numbers_sorted_string = \"\"\n  for number in numbers_sorted {\n    numbers_sorted_string += number + \" \"\n  }\n  return numbers_sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpthv9g2yg.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpthv9g2yg.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpthv9g2yg.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpthv9g2yg.rs:15:24\n   |\n15 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n16 |   let numbers_sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpthv9g2yg.rs:16:33\n   |\n16 |   let numbers_sorted_string = \"\"\n   |                                 ^ help: add `;` here\n17 |   for number in numbers_sorted {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpthv9g2yg.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpthv9g2yg.rs:12:22\n   |\n12 |       numbers_sorted.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpthv9g2yg.rs:18:5\n   |\n18 |     numbers_sorted_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpthv9g2yg.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n20 |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort()\n  let sorted_numbers = numbers_array.join(\" \")\n  return sorted_numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp2bka8o48.rs:7:60\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                                            ^ help: add `;` here\n8 |   let sorted_numbers = numbers_array.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmp2bka8o48.rs:8:47\n  |\n8 |   let sorted_numbers = numbers_array.join(\" \")\n  |                                               ^ help: add `;` here\n9 |   return sorted_numbers\n  |   ------ unexpected token\n\nerror[E0425]: cannot find value `Number` in this scope\n --> /tmp/tmp2bka8o48.rs:7:46\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                              ^^^^^^ help: a local variable with a similar name exists: `numbers`\n\nerror[E0599]: no method named `sort` found for struct `Map` in the current scope\n --> /tmp/tmp2bka8o48.rs:7:54\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                                      ^^^^ method not found in `Map<std::str::Split<'_, &str>, _>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpbbqd3rpp.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpbbqd3rpp.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpbbqd3rpp.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpbbqd3rpp.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpbbqd3rpp.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpbbqd3rpp.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  let numbers_sorted_str = \"\"\n  for number in numbers_split {\n    if number.match(/^\\d+$/) {\n      numbers_sorted.push(number)\n    }\n  }\n  numbers_sorted.sort()\n  for number in numbers_sorted {\n    numbers_sorted_str += number + \" \"\n  }\n  return numbers_sorted_str\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpzy0d3cvk.rs:11:23\n   |\n11 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpzy0d3cvk.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpzy0d3cvk.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   let numbers_sorted_str = \"\"\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzy0d3cvk.rs:9:30\n   |\n9  |   let numbers_sorted_str = \"\"\n   |                              ^ help: add `;` here\n10 |   for number in numbers_split {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpzy0d3cvk.rs:11:15\n   |\n11 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n11 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpzy0d3cvk.rs:11:21\n   |\n11 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzy0d3cvk.rs:15:24\n   |\n15 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n16 |   for number in numbers_sorted {\n   |   --- unexpected token\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpzy0d3cvk.rs:17:5\n   |\n17 |     numbers_sorted_str += number + \" \"\n   |     ------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzy0d3cvk.rs:19:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n19 |   return numbers_sorted_str\n   |          ^^^^^^^^^^^^^^^^^^- h",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpaycn80vd.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp82wq93km.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    if number != \"\" {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpyt_r2r4s.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpyt_r2r4s.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpyt_r2r4s.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpyt_r2r4s.rs:15:10\n   |\n15 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpyt_r2r4s.rs:11:22\n   |\n11 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpxivwtc0k.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpxivwtc0k.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpxivwtc0k.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpxivwtc0k.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpxivwtc0k.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpxivwtc0k.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpxivwtc0k.rs:15:10\n   |\n15 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers_array {\n    let number = num.to_i\n    if number > 9 {\n      number = number % 10\n    }\n    sorted_numbers.push(number)\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp7meuq0si.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp7meuq0si.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers_array {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp7meuq0si.rs:10:26\n   |\n10 |     let number = num.to_i\n   |                          ^ help: add `;` here\n11 |     if number > 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp7meuq0si.rs:16:24\n   |\n16 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n17 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror[E0609]: no field `to_i` on type `&str`\n  --> /tmp/tmp7meuq0si.rs:10:22\n   |\n10 |     let number = num.to_i\n   |                      ^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp7meuq0si.rs:14:20\n   |\n14 |     sorted_numbers.push(number)\n   |                    ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpbbqd3rpp.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpbbqd3rpp.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpbbqd3rpp.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpbbqd3rpp.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpbbqd3rpp.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpbbqd3rpp.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b).to_a\n  let result = \"\"\n  for i in numbers_array {\n    result += i + \" \"\n  }\n  return result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpf_qoo5ke.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b).to_a\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  let result = \"\"\n  for num in numbers_array {\n    result += num + \" \"\n  }\n  return result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpwodh3o7_.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \");\n  let sorted_numbers = numbers_split.sort();\n  let sorted_numbers_joined = sorted_numbers.join(\" \");\n  return sorted_numbers_joined;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmpp244eado.rs:8:38\n  |\n8 |   let sorted_numbers = numbers_split.sort();\n  |                                      ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted = numbers.sort((a, b) => a - b)\n  return sorted.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpwo28knb6.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted = numbers.sort((a, b) => a - b)\n  |   --- unexpected token\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpwo28knb6.rs:8:36\n  |\n8 |   let sorted = numbers.sort((a, b) => a - b)\n  |                                    ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  let numbers_string = numbers_array.join(\" \")\n  return numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp401y55lp.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  let result = \"\";\n  for (let number of numbers) {\n    result += number + \" \";\n  }\n  return result.trim();\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp1lnbrw5_.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b).to_a\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpztu18uqf.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b).to_a\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b).join(\" \")\n  return numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmps2m6tva8.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b).join(\" \")\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp82wq93km.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted = numbers.sort((a, b) => a - b)\n  return String::from(sorted.join(\" \"))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp50fan_3d.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted = numbers.sort((a, b) => a - b)\n  |   --- unexpected token\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp50fan_3d.rs:8:36\n  |\n8 |   let sorted = numbers.sort((a, b) => a - b)\n  |                                    ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found `numbers_array`\n --> /tmp/tmp2akp77ok.rs:7:72\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  |                                                                        ^ help: add `;` here\n8 |   numbers_array.join(\" \")\n  |   ------------- unexpected token\n\nerror[E0609]: no field `to_i` on type `&str`\n --> /tmp/tmp2akp77ok.rs:7:52\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  |                                                    ^^^^\n\nerror[E0599]: no method named `sort_by` found for struct `Map` in the current scope\n --> /tmp/tmp2akp77ok.rs:7:58\n  |\n7 |   let numbers_array = numbers.split(\" \").map(|s| s.to_i).sort_by(|s| s)\n  |                                                          ^^^^^^^ method not found in `Map<std::str::Split<'_, &str>, _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    let number_int = parseInt(number)\n    if number_int > 0 {\n      sorted_numbers.push(number_int)\n    }\n  }\n  sorted_numbers.sort()\n  let sorted_numbers_string = \"\"\n  for number in sorted_numbers {\n    sorted_numbers_string += number + \" \"\n  }\n  return sorted_numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp1jdv19vd.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp1jdv19vd.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp1jdv19vd.rs:10:38\n   |\n10 |     let number_int = parseInt(number)\n   |                                      ^ help: add `;` here\n11 |     if number_int > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp1jdv19vd.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   let sorted_numbers_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp1jdv19vd.rs:16:33\n   |\n16 |   let sorted_numbers_string = \"\"\n   |                                 ^ help: add `;` here\n17 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp1jdv19vd.rs:10:22\n   |\n10 |     let number_int = parseInt(number)\n   |                      ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1jdv19vd.rs:12:22\n   |\n12 |       sorted_numbers.push(number_int)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp1jdv19vd.rs:18:5\n   |\n18 |     sorted_numbers_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1jdv19vd.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    let number = number.to_i()\n    if number < 10 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  let sorted_string = \"\"\n  for number in sorted_numbers {\n    sorted_string += number + \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpnoh5vat7.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpnoh5vat7.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpnoh5vat7.rs:10:31\n   |\n10 |     let number = number.to_i()\n   |                               ^ help: add `;` here\n11 |     if number < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnoh5vat7.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnoh5vat7.rs:16:25\n   |\n16 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n17 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmpnoh5vat7.rs:10:25\n   |\n10 |     let number = number.to_i()\n   |                         ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpnoh5vat7.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpnoh5vat7.rs:18:5\n   |\n18 |     sorted_string += number + \" \"\n   |     -------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnoh5vat7.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n20 |   return sorted_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    let number = parseInt(number)\n    if number > 0 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  let sorted_numbers_string = \"\"\n  for number in sorted_numbers {\n    sorted_numbers_string += number + \" \"\n  }\n  return sorted_numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp68ax_ab_.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp68ax_ab_.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp68ax_ab_.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp68ax_ab_.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   let sorted_numbers_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp68ax_ab_.rs:16:33\n   |\n16 |   let sorted_numbers_string = \"\"\n   |                                 ^ help: add `;` here\n17 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp68ax_ab_.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp68ax_ab_.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp68ax_ab_.rs:18:5\n   |\n18 |     sorted_numbers_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp68ax_ab_.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n20 |   return sorted_numb",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String::join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpt_29gl0w.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpt_29gl0w.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpt_29gl0w.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpt_29gl0w.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpt_29gl0w.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpt_29gl0w.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String::join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpt_29gl0w.rs:15:18\n   |\n15 |   return String::join(\" \", sorted_numbers)\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = numbers_split.sort()\n  let numbers_joined = numbers_sorted.join(\" \")\n  return numbers_joined\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmphb57q_ti.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = numbers_split.sort()\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmphb57q_ti.rs:8:44\n  |\n8 |   let numbers_sorted = numbers_split.sort()\n  |                                            ^ help: add `;` here\n9 |   let numbers_joined = numbers_sorted.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmphb57q_ti.rs:9:48\n   |\n9  |   let numbers_joined = numbers_sorted.join(\" \")\n   |                                                ^ help: add `;` here\n10 |   return numbers_joined\n   |   ------ unexpected token\n\nerror[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmphb57q_ti.rs:8:38\n  |\n8 |   let numbers_sorted = numbers_split.sort()\n  |                                      ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  let sorted_numbers = numbers_array.join(\" \")\n  return sorted_numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmplo36e2w8.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \");\n  let numbers_sorted = sort_numbers_helper(numbers_split);\n  let numbers_joined = numbers_sorted.join(\" \");\n  return numbers_joined;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `sort_numbers_helper` in this scope\n --> /tmp/tmpn15vcoh2.rs:8:24\n  |\n8 |   let numbers_sorted = sort_numbers_helper(numbers_split);\n  |                        ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpz9mjwo2v.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpz9mjwo2v.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpz9mjwo2v.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpz9mjwo2v.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpz9mjwo2v.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpz9mjwo2v.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted = []\n  for num in numbers {\n    let num = num.to_i()\n    sorted.push(num)\n  }\n  sorted.sort()\n  return String.join(\" \", sorted)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp_5w6fp75.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp_5w6fp75.rs:8:18\n  |\n8 |   let sorted = []\n  |                  ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found `sorted`\n  --> /tmp/tmp_5w6fp75.rs:10:25\n   |\n10 |     let num = num.to_i()\n   |                         ^ help: add `;` here\n11 |     sorted.push(num)\n   |     ------ unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp_5w6fp75.rs:13:16\n   |\n13 |   sorted.sort()\n   |                ^ help: add `;` here\n14 |   return String.join(\" \", sorted)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp_5w6fp75.rs:14:10\n   |\n14 |   return String.join(\" \", sorted)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmp_5w6fp75.rs:10:19\n   |\n10 |     let num = num.to_i()\n   |                   ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp_5w6fp75.rs:11:12\n   |\n11 |     sorted.push(num)\n   |            ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpxivwtc0k.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpxivwtc0k.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpxivwtc0k.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpxivwtc0k.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpxivwtc0k.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpxivwtc0k.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpxivwtc0k.rs:15:10\n   |\n15 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort()\n  let numbers = numbers.join(\" \")\n  return numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpejarx017.rs:7:42\n  |\n7 |   let numbers = numbers.split(\" \").sort()\n  |                                          ^ help: add `;` here\n8 |   let numbers = numbers.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmpejarx017.rs:8:34\n  |\n8 |   let numbers = numbers.join(\" \")\n  |                                  ^ help: add `;` here\n9 |   return numbers\n  |   ------ unexpected token\n\nerror[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmpejarx017.rs:7:36\n  |\n7 |   let numbers = numbers.split(\" \").sort()\n  |                                    ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    let number = parseInt(number)\n    if number >= 0 && number <= 9 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  let sorted_string = \"\"\n  for number in sorted_numbers {\n    sorted_string += number + \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp2wt8dw6v.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp2wt8dw6v.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp2wt8dw6v.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number >= 0 && number <= 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2wt8dw6v.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2wt8dw6v.rs:16:25\n   |\n16 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n17 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp2wt8dw6v.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp2wt8dw6v.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp2wt8dw6v.rs:18:5\n   |\n18 |     sorted_string += number + \" \"\n   |     -------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2wt8dw6v.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n20 |   return sorted_string\n   |          ^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers_array {\n    let number = num.to_i()\n    if number > 0 && number < 10 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.reverse()\n  let sorted_string = \"\"\n  for num in sorted_numbers {\n    sorted_string += String::from(num) + \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp6o1_1jxj.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp6o1_1jxj.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers_array {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp6o1_1jxj.rs:10:28\n   |\n10 |     let number = num.to_i()\n   |                            ^ help: add `;` here\n11 |     if number > 0 && number < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmp6o1_1jxj.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   sorted_numbers.reverse()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6o1_1jxj.rs:16:27\n   |\n16 |   sorted_numbers.reverse()\n   |                           ^ help: add `;` here\n17 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp6o1_1jxj.rs:17:25\n   |\n17 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n18 |   for num in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmp6o1_1jxj.rs:10:22\n   |\n10 |     let number = num.to_i()\n   |                      ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp6o1_1jxj.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp6o1_1jxj.rs:19:5\n   |\n19 |     sorted_string += String::from(num) + \" \"\n   |     -------------^--^^^^^^^^^^^^^^^^^^^^^^^^\n   |     |             |\n   |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b).to_a\n  let result = \"\"\n  for i in numbers_array {\n    result += i + \" \"\n  }\n  return result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpf_qoo5ke.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b).to_a\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort()\n  let numbers_string = numbers_array.join(\" \")\n  return numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpc1kc2u72.rs:7:60\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                                            ^ help: add `;` here\n8 |   let numbers_string = numbers_array.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmpc1kc2u72.rs:8:47\n  |\n8 |   let numbers_string = numbers_array.join(\" \")\n  |                                               ^ help: add `;` here\n9 |   return numbers_string\n  |   ------ unexpected token\n\nerror[E0425]: cannot find value `Number` in this scope\n --> /tmp/tmpc1kc2u72.rs:7:46\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                              ^^^^^^ help: a local variable with a similar name exists: `numbers`\n\nerror[E0599]: no method named `sort` found for struct `Map` in the current scope\n --> /tmp/tmpc1kc2u72.rs:7:54\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort()\n  |                                                      ^^^^ method not found in `Map<std::str::Split<'_, &str>, _>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers {\n    let number = num.to_i()\n    if number > 0 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp2svdfpwk.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp2svdfpwk.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp2svdfpwk.rs:10:28\n   |\n10 |     let number = num.to_i()\n   |                            ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp2svdfpwk.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmp2svdfpwk.rs:10:22\n   |\n10 |     let number = num.to_i()\n   |                      ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp2svdfpwk.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  let sorted_numbers_string = \"\"\n  for number in numbers {\n    let number = number.to_i()\n    if number > 0 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  for number in sorted_numbers {\n    sorted_numbers_string += number + \" \"\n  }\n  return sorted_numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp69czz97m.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp69czz97m.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   let sorted_numbers_string = \"\"\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp69czz97m.rs:9:33\n   |\n9  |   let sorted_numbers_string = \"\"\n   |                                 ^ help: add `;` here\n10 |   for number in numbers {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp69czz97m.rs:11:31\n   |\n11 |     let number = number.to_i()\n   |                               ^ help: add `;` here\n12 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp69czz97m.rs:16:24\n   |\n16 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n17 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmp69czz97m.rs:11:25\n   |\n11 |     let number = number.to_i()\n   |                         ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp69czz97m.rs:13:22\n   |\n13 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp69czz97m.rs:18:5\n   |\n18 |     sorted_numbers_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp69czz97m.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n20 |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  let sorted_numbers_array = []\n\n  for i in numbers_array {\n    let number = parseInt(i)\n    if (number > 0 && number < 10) {\n      sorted_numbers.push(number)\n    }\n  }\n\n  sorted_numbers.sort((a, b) => a - b)\n\n  for i in sorted_numbers {\n    sorted_numbers_array.push(i)\n  }\n\n  return String::from(sorted_numbers_array.join(\" \"))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpivpeei6v.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpivpeei6v.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   let sorted_numbers_array = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpivpeei6v.rs:9:32\n   |\n9  |   let sorted_numbers_array = []\n   |                                ^ help: add `;` here\n10 | \n11 |   for i in numbers_array {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpivpeei6v.rs:12:29\n   |\n12 |     let number = parseInt(i)\n   |                             ^ help: add `;` here\n13 |     if (number > 0 && number < 10) {\n   |     -- unexpected token\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpivpeei6v.rs:18:30\n   |\n18 |   sorted_numbers.sort((a, b) => a - b)\n   |                              ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b).join(\" \");\n  return numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpplcefmb1.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b).join(\" \");\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpbbqd3rpp.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpbbqd3rpp.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpbbqd3rpp.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpbbqd3rpp.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpbbqd3rpp.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpbbqd3rpp.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpaycn80vd.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted = []\n  for num in numbers {\n    let num = num.to_i\n    if num < 10 {\n      sorted.push(num)\n    }\n  }\n  sorted.sort()\n  return String.join(\" \", sorted)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmprnh1gpq6.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmprnh1gpq6.rs:8:18\n  |\n8 |   let sorted = []\n  |                  ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmprnh1gpq6.rs:10:23\n   |\n10 |     let num = num.to_i\n   |                       ^ help: add `;` here\n11 |     if num < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmprnh1gpq6.rs:15:16\n   |\n15 |   sorted.sort()\n   |                ^ help: add `;` here\n16 |   return String.join(\" \", sorted)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmprnh1gpq6.rs:16:10\n   |\n16 |   return String.join(\" \", sorted)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror[E0609]: no field `to_i` on type `&str`\n  --> /tmp/tmprnh1gpq6.rs:10:19\n   |\n10 |     let num = num.to_i\n   |                   ^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmprnh1gpq6.rs:12:14\n   |\n12 |       sorted.push(num)\n   |              ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0599, E0609.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  let numbers_string = numbers_array.join(\" \")\n  return numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp401y55lp.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for number in numbers_split {\n    let number_int = parseInt(number)\n    if number_int > 0 && number_int < 10 {\n      numbers_sorted.push(number)\n    }\n  }\n  numbers_sorted.sort()\n  return String::join(\" \", numbers_sorted)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmprpxisoid.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmprpxisoid.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmprpxisoid.rs:10:38\n   |\n10 |     let number_int = parseInt(number)\n   |                                      ^ help: add `;` here\n11 |     if number_int > 0 && number_int < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmprpxisoid.rs:15:24\n   |\n15 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n16 |   return String::join(\" \", numbers_sorted)\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmprpxisoid.rs:10:22\n   |\n10 |     let number_int = parseInt(number)\n   |                      ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmprpxisoid.rs:12:22\n   |\n12 |       numbers_sorted.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmprpxisoid.rs:16:18\n   |\n16 |   return String::join(\" \", numbers_sorted)\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \");\n  let numbers_sorted = numbers_split.sort();\n  let numbers_joined = numbers_sorted.join(\" \");\n  return numbers_joined;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmp_0lw3rre.rs:8:38\n  |\n8 |   let numbers_sorted = numbers_split.sort();\n  |                                      ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  let result = \"\"\n  for num in numbers_array {\n    result += num + \" \"\n  }\n  return result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpwodh3o7_.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers {\n    let number = num.to_i()\n    sorted_numbers.push(number)\n  }\n  sorted_numbers.sort()\n  sorted_numbers.reverse()\n  let sorted_string = \"\"\n  for num in sorted_numbers {\n    sorted_string += String::from(num) + \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpzys9nwua.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpzys9nwua.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmpzys9nwua.rs:10:28\n   |\n10 |     let number = num.to_i()\n   |                            ^ help: add `;` here\n11 |     sorted_numbers.push(number)\n   |     -------------- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmpzys9nwua.rs:13:24\n   |\n13 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n14 |   sorted_numbers.reverse()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzys9nwua.rs:14:27\n   |\n14 |   sorted_numbers.reverse()\n   |                           ^ help: add `;` here\n15 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzys9nwua.rs:15:25\n   |\n15 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n16 |   for num in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmpzys9nwua.rs:10:22\n   |\n10 |     let number = num.to_i()\n   |                      ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpzys9nwua.rs:11:20\n   |\n11 |     sorted_numbers.push(number)\n   |                    ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpzys9nwua.rs:17:5\n   |\n17 |     sorted_string += String::from(num) + \" \"\n   |     -------------^--^^^^^^^^^^^^^^^^^^^^^^^^\n   |     |             |\n   |     |      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpxzse3y1d.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpxzse3y1d.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpxzse3y1d.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpxzse3y1d.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpxzse3y1d.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpxzse3y1d.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  let numbers_string = numbers_array.join(\" \")\n  return numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp401y55lp.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers_array {\n    let number = num.to_i()\n    if number > 0 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.reverse()\n  return String.from(sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp76ip1ehm.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp76ip1ehm.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers_array {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp76ip1ehm.rs:10:28\n   |\n10 |     let number = num.to_i()\n   |                            ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmp76ip1ehm.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   sorted_numbers.reverse()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp76ip1ehm.rs:16:27\n   |\n16 |   sorted_numbers.reverse()\n   |                           ^ help: add `;` here\n17 |   return String.from(sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp76ip1ehm.rs:17:10\n   |\n17 |   return String.from(sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmp76ip1ehm.rs:10:22\n   |\n10 |     let number = num.to_i()\n   |                      ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp76ip1ehm.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.to_i() >= 0 && number.to_i() <= 9 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return sorted_numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmplsfrz063.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmplsfrz063.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmplsfrz063.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return sorted_numbers.join(\" \")\n   |   ------ unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmplsfrz063.rs:10:15\n   |\n10 |     if number.to_i() >= 0 && number.to_i() <= 9 {\n   |               ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmplsfrz063.rs:10:37\n   |\n10 |     if number.to_i() >= 0 && number.to_i() <= 9 {\n   |                                     ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmplsfrz063.rs:11:22\n   |\n11 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers {\n    let number = num.to_i()\n    if number > 0 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.reverse()\n  let sorted_string = \"\"\n  for num in sorted_numbers {\n    sorted_string += num + \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp2j8dzsyk.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp2j8dzsyk.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp2j8dzsyk.rs:10:28\n   |\n10 |     let number = num.to_i()\n   |                            ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmp2j8dzsyk.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   sorted_numbers.reverse()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2j8dzsyk.rs:16:27\n   |\n16 |   sorted_numbers.reverse()\n   |                           ^ help: add `;` here\n17 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2j8dzsyk.rs:17:25\n   |\n17 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n18 |   for num in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmp2j8dzsyk.rs:10:22\n   |\n10 |     let number = num.to_i()\n   |                      ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp2j8dzsyk.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp2j8dzsyk.rs:19:5\n   |\n19 |     sorted_string += num + \" \"\n   |     -------------^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers {\n    let number = parseInt(number)\n    if number > 0 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.reverse()\n  let sorted_string = \"\"\n  for number in sorted_numbers {\n    sorted_string += number + \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpgnf8a0vb.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpgnf8a0vb.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpgnf8a0vb.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmpgnf8a0vb.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   sorted_numbers.reverse()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgnf8a0vb.rs:16:27\n   |\n16 |   sorted_numbers.reverse()\n   |                           ^ help: add `;` here\n17 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgnf8a0vb.rs:17:25\n   |\n17 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n18 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpgnf8a0vb.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpgnf8a0vb.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpgnf8a0vb.rs:19:5\n   |\n19 |     sorted_string += number + \" \"\n   |     -------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpaycn80vd.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  let sorted_numbers_string = \"\"\n  for number in numbers {\n    if number.to_i() < 10 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  for number in sorted_numbers {\n    sorted_numbers_string += number + \" \"\n  }\n  return sorted_numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpqafufo2u.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpqafufo2u.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   let sorted_numbers_string = \"\"\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqafufo2u.rs:9:33\n   |\n9  |   let sorted_numbers_string = \"\"\n   |                                 ^ help: add `;` here\n10 |   for number in numbers {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqafufo2u.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmpqafufo2u.rs:11:15\n   |\n11 |     if number.to_i() < 10 {\n   |               ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpqafufo2u.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpqafufo2u.rs:17:5\n   |\n17 |     sorted_numbers_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqafufo2u.rs:19:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n19 |   return sorted_numbers_string\n   |          ^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 8 previous errors\n\nSome",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpaycn80vd.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \");\n  let sorted_numbers = numbers_split.sort();\n  return String::from(sorted_numbers.join(\" \"));\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmpy4wsuwhy.rs:8:38\n  |\n8 |   let sorted_numbers = numbers_split.sort();\n  |                                      ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpxivwtc0k.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpxivwtc0k.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpxivwtc0k.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpxivwtc0k.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpxivwtc0k.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpxivwtc0k.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpxivwtc0k.rs:15:10\n   |\n15 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  let numbers_sorted_temp = []\n  for number in numbers_split {\n    if number !== \"\" {\n      numbers_sorted_temp.push(number)\n    }\n  }\n  numbers_sorted = numbers_sorted_temp.sort()\n  return String::join(\" \", numbers_sorted)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpajy1tpl3.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpajy1tpl3.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   let numbers_sorted_temp = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpajy1tpl3.rs:9:31\n   |\n9  |   let numbers_sorted_temp = []\n   |                               ^ help: add `;` here\n10 |   for number in numbers_split {\n   |   --- unexpected token\n\nerror: invalid comparison operator `!==`\n  --> /tmp/tmpajy1tpl3.rs:11:15\n   |\n11 |     if number !== \"\" {\n   |               ^^^ help: `!==` is not a valid comparison operator, use `!=`\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpajy1tpl3.rs:15:46\n   |\n15 |   numbers_sorted = numbers_sorted_temp.sort()\n   |                                              ^ help: add `;` here\n16 |   return String::join(\" \", numbers_sorted)\n   |   ------ unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpajy1tpl3.rs:12:27\n   |\n12 |       numbers_sorted_temp.push(number)\n   |                           ^^^^ method not found in `[_; 0]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpajy1tpl3.rs:15:20\n   |\n8  |   let numbers_sorted = []\n   |                        -- expected due to this value\n...\n15 |   numbers_sorted = numbers_sorted_temp.sort()\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected array of 0 elements, found `()`\n   |\n   = note:  expected array `[_; 0]`\n           found unit type `()`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpajy1tpl3.rs:16:18\n   |\n16 |   return String::join(\" \", numbers_sorted)\n   |                  ^^^^ function or associated item not found in `String`\n\nerror:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted = numbers.sort((a, b) => a - b)\n  return String::from(sorted.join(\" \"))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp50fan_3d.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted = numbers.sort((a, b) => a - b)\n  |   --- unexpected token\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp50fan_3d.rs:8:36\n  |\n8 |   let sorted = numbers.sort((a, b) => a - b)\n  |                                    ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers_array {\n    let number = num.to_i()\n    if number > 9 {\n      number = number % 10\n    }\n    sorted_numbers.push(number)\n  }\n  sorted_numbers.sort()\n  return String.from(sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpti6gwf0g.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpti6gwf0g.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers_array {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpti6gwf0g.rs:10:28\n   |\n10 |     let number = num.to_i()\n   |                            ^ help: add `;` here\n11 |     if number > 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpti6gwf0g.rs:16:24\n   |\n16 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n17 |   return String.from(sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpti6gwf0g.rs:17:10\n   |\n17 |   return String.from(sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmpti6gwf0g.rs:10:22\n   |\n10 |     let number = num.to_i()\n   |                      ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpti6gwf0g.rs:14:20\n   |\n14 |     sorted_numbers.push(number)\n   |                    ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  let sorted_numbers_string = \"\"\n  for number in numbers {\n    if number.to_i() < 9 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  for number in sorted_numbers {\n    sorted_numbers_string += number + \" \"\n  }\n  return sorted_numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpfkui6xnf.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpfkui6xnf.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   let sorted_numbers_string = \"\"\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkui6xnf.rs:9:33\n   |\n9  |   let sorted_numbers_string = \"\"\n   |                                 ^ help: add `;` here\n10 |   for number in numbers {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpfkui6xnf.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmpfkui6xnf.rs:11:15\n   |\n11 |     if number.to_i() < 9 {\n   |               ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpfkui6xnf.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpfkui6xnf.rs:17:5\n   |\n17 |     sorted_numbers_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfkui6xnf.rs:19:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n19 |   return sorted_numbers_string\n   |          ^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 8 previous errors\n\nSome ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_split {\n    let number_int = parseInt(number)\n    if number_int > 0 && number_int < 10 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp895ocdp9.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp895ocdp9.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp895ocdp9.rs:10:38\n   |\n10 |     let number_int = parseInt(number)\n   |                                      ^ help: add `;` here\n11 |     if number_int > 0 && number_int < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp895ocdp9.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp895ocdp9.rs:10:22\n   |\n10 |     let number_int = parseInt(number)\n   |                      ^^^^^^^^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp895ocdp9.rs:16:10\n   |\n16 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp895ocdp9.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0425, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String.join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpxivwtc0k.rs:10:23\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpxivwtc0k.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpxivwtc0k.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpxivwtc0k.rs:10:15\n   |\n10 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n10 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpxivwtc0k.rs:10:21\n   |\n10 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpxivwtc0k.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String.join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpxivwtc0k.rs:15:10\n   |\n15 |   return String.join(\" \", sorted_numbers)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_split = numbers.split(\" \")\n  let numbers_sorted = []\n  for number in numbers_split {\n    let number = parseInt(number)\n    if number >= 0 && number <= 9 {\n      numbers_sorted.push(number)\n    }\n  }\n  numbers_sorted.sort()\n  let numbers_sorted_string = \"\"\n  for number in numbers_sorted {\n    numbers_sorted_string += number + \" \"\n  }\n  return numbers_sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpgfnfxo5d.rs:7:41\n  |\n7 |   let numbers_split = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let numbers_sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpgfnfxo5d.rs:8:26\n  |\n8 |   let numbers_sorted = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_split {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpgfnfxo5d.rs:10:34\n   |\n10 |     let number = parseInt(number)\n   |                                  ^ help: add `;` here\n11 |     if number >= 0 && number <= 9 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpgfnfxo5d.rs:15:24\n   |\n15 |   numbers_sorted.sort()\n   |                        ^ help: add `;` here\n16 |   let numbers_sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgfnfxo5d.rs:16:33\n   |\n16 |   let numbers_sorted_string = \"\"\n   |                                 ^ help: add `;` here\n17 |   for number in numbers_sorted {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpgfnfxo5d.rs:10:18\n   |\n10 |     let number = parseInt(number)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpgfnfxo5d.rs:12:22\n   |\n12 |       numbers_sorted.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpgfnfxo5d.rs:18:5\n   |\n18 |     numbers_sorted_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgfnfxo5d.rs:20:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  let result = \"\"\n  for number in numbers_array {\n    result += number + \" \"\n  }\n  return result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp_vapwsf6.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for num in numbers_array {\n    let num_int = num.to_int()\n    if num_int > 0 && num_int < 10 {\n      sorted_numbers.push(num_int)\n    }\n  }\n  sorted_numbers.sort()\n  let sorted_string = \"\"\n  for num in sorted_numbers {\n    sorted_string += num\n    sorted_string += \" \"\n  }\n  return sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp29uwwk18.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp29uwwk18.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for num in numbers_array {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp29uwwk18.rs:10:31\n   |\n10 |     let num_int = num.to_int()\n   |                               ^ help: add `;` here\n11 |     if num_int > 0 && num_int < 10 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp29uwwk18.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   let sorted_string = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp29uwwk18.rs:16:25\n   |\n16 |   let sorted_string = \"\"\n   |                         ^ help: add `;` here\n17 |   for num in sorted_numbers {\n   |   --- unexpected token\n\nerror: expected `;`, found `sorted_string`\n  --> /tmp/tmp29uwwk18.rs:18:25\n   |\n18 |     sorted_string += num\n   |                         ^ help: add `;` here\n19 |     sorted_string += \" \"\n   |     ------------- unexpected token\n\nerror[E0599]: no method named `to_int` found for reference `&str` in the current scope\n  --> /tmp/tmp29uwwk18.rs:10:23\n   |\n10 |     let num_int = num.to_int()\n   |                       ^^^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp29uwwk18.rs:12:22\n   |\n12 |       sorted_numbers.push(num_int)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp29uwwk18.rs:18:5\n   |\n18 |     sorted_string += num\n   |     -------------^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E03",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort()\n  let numbers = numbers.join(\" \")\n  return numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpejarx017.rs:7:42\n  |\n7 |   let numbers = numbers.split(\" \").sort()\n  |                                          ^ help: add `;` here\n8 |   let numbers = numbers.join(\" \")\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `return`\n --> /tmp/tmpejarx017.rs:8:34\n  |\n8 |   let numbers = numbers.join(\" \")\n  |                                  ^ help: add `;` here\n9 |   return numbers\n  |   ------ unexpected token\n\nerror[E0599]: no method named `sort` found for struct `std::str::Split` in the current scope\n --> /tmp/tmpejarx017.rs:7:36\n  |\n7 |   let numbers = numbers.split(\" \").sort()\n  |                                    ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number != \"\" {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  sorted_numbers.reverse()\n  return String::join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpystnzqqa.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpystnzqqa.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: expected `;`, found `sorted_numbers`\n  --> /tmp/tmpystnzqqa.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   sorted_numbers.reverse()\n   |   -------------- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpystnzqqa.rs:15:27\n   |\n15 |   sorted_numbers.reverse()\n   |                           ^ help: add `;` here\n16 |   return String::join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpystnzqqa.rs:11:22\n   |\n11 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmpystnzqqa.rs:16:18\n   |\n16 |   return String::join(\" \", sorted_numbers)\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted = []\n  for i in numbers {\n    let num = parseInt(i)\n    if num > 0 {\n      sorted.push(num)\n    }\n  }\n  sorted.sort()\n  return sorted.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpt43yg02k.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmpt43yg02k.rs:8:18\n  |\n8 |   let sorted = []\n  |                  ^ help: add `;` here\n9 |   for i in numbers {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpt43yg02k.rs:10:26\n   |\n10 |     let num = parseInt(i)\n   |                          ^ help: add `;` here\n11 |     if num > 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpt43yg02k.rs:15:16\n   |\n15 |   sorted.sort()\n   |                ^ help: add `;` here\n16 |   return sorted.join(\" \")\n   |   ------ unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpt43yg02k.rs:10:15\n   |\n10 |     let num = parseInt(i)\n   |               ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpt43yg02k.rs:12:14\n   |\n12 |       sorted.push(num)\n   |              ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp82wq93km.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmp82wq93km.rs:7:48\n  |\n7 |   let numbers = numbers.split(\" \").sort((a, b) => a - b);\n  |                                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  return numbers_array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n --> /tmp/tmpaycn80vd.rs:7:66\n  |\n7 |   let numbers_array = numbers.split(\" \").map(Number).sort((a, b) => a - b)\n  |                                                                  ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers = numbers.split(\" \")\n  let sorted_numbers = []\n  let sorted_numbers_string = \"\"\n  for number in numbers {\n    if number.to_i() < 10 {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  for number in sorted_numbers {\n    sorted_numbers_string += number + \" \"\n  }\n  return sorted_numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpqafufo2u.rs:7:35\n  |\n7 |   let numbers = numbers.split(\" \")\n  |                                   ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpqafufo2u.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   let sorted_numbers_string = \"\"\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqafufo2u.rs:9:33\n   |\n9  |   let sorted_numbers_string = \"\"\n   |                                 ^ help: add `;` here\n10 |   for number in numbers {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqafufo2u.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `to_i` found for reference `&str` in the current scope\n  --> /tmp/tmpqafufo2u.rs:11:15\n   |\n11 |     if number.to_i() < 10 {\n   |               ^^^^ method not found in `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpqafufo2u.rs:12:22\n   |\n12 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpqafufo2u.rs:17:5\n   |\n17 |     sorted_numbers_string += number + \" \"\n   |     ---------------------^^^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqafufo2u.rs:19:10\n   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |                                     ------ expected `String` because of return type\n...\n19 |   return sorted_numbers_string\n   |          ^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 8 previous errors\n\nSome",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  for number in numbers_array {\n    if number !== \"\" {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  return String::join(\" \", sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp_su374r9.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp_su374r9.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   for number in numbers_array {\n  |   --- unexpected token\n\nerror: invalid comparison operator `!==`\n  --> /tmp/tmp_su374r9.rs:10:15\n   |\n10 |     if number !== \"\" {\n   |               ^^^ help: `!==` is not a valid comparison operator, use `!=`\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp_su374r9.rs:14:24\n   |\n14 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n15 |   return String::join(\" \", sorted_numbers)\n   |   ------ unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp_su374r9.rs:11:22\n   |\n11 |       sorted_numbers.push(number)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no function or associated item named `join` found for struct `String` in the current scope\n  --> /tmp/tmp_su374r9.rs:15:18\n   |\n15 |   return String::join(\" \", sorted_numbers)\n   |                  ^^^^ function or associated item not found in `String`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"one three five\")\nfn sort_numbers(numbers: String) -> String {\n  let numbers_array = numbers.split(\" \")\n  let sorted_numbers = []\n  let sorted_numbers_array = []\n  for number in numbers_array {\n    if number.match(/^\\d+$/) {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort()\n  for number in sorted_numbers {\n    sorted_numbers_array.push(number)\n  }\n  return String::from(\" \".join(sorted_numbers_array))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one zero\")), String::from(\"zero one two three four five six\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmppn6cexb7.rs:11:23\n   |\n11 |     if number.match(/^\\d+$/) {\n   |                       ^\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmppn6cexb7.rs:7:41\n  |\n7 |   let numbers_array = numbers.split(\" \")\n  |                                         ^ help: add `;` here\n8 |   let sorted_numbers = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmppn6cexb7.rs:8:26\n  |\n8 |   let sorted_numbers = []\n  |                          ^ help: add `;` here\n9 |   let sorted_numbers_array = []\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn6cexb7.rs:9:32\n   |\n9  |   let sorted_numbers_array = []\n   |                                ^ help: add `;` here\n10 |   for number in numbers_array {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmppn6cexb7.rs:11:15\n   |\n11 |     if number.match(/^\\d+$/) {\n   |               ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n11 |     if number.r#match(/^\\d+$/) {\n   |               ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmppn6cexb7.rs:11:21\n   |\n11 |     if number.match(/^\\d+$/) {\n   |                     ^ expected expression\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn6cexb7.rs:15:24\n   |\n15 |   sorted_numbers.sort()\n   |                        ^ help: add `;` here\n16 |   for number in sorted_numbers {\n   |   --- unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmppn6cexb7.rs:17:26\n   |\n17 |     sorted_numbers_array.push(number)\n   |                          ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `join` found for reference `&'static str` in the current scope\n  --> /tmp/tmppn6cexb7.rs:19:27\n   |\n19 |   return String::from(\" \".join(sorted_numbers_array))\n   |                           ^^^^ method not found in `&'static str`\n\nerror: aborting due to 9 previous errors",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}