{
  "name": "HumanEval_14_all_prefixes",
  "language": "rs",
  "prompt": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpqtkjq0md.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpqtkjq0md.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpqtkjq0md.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(c);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp59f20g3i.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp59f20g3i.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp59f20g3i.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp59f20g3i.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp59f20g3i.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpxbyzkdy1.rs:6:10\n  |\n6 |   for (i in 0..string.length()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpxbyzkdy1.rs:6:7\n  |\n6 |   for (i in 0..string.length()) {\n  |       ^                       ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.length()) {\n6 +   for i in 0..string.length() {\n  | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpxbyzkdy1.rs:6:23\n  |\n6 |   for (i in 0..string.length()) {\n  |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpxbyzkdy1.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr += ch;\n    } else {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpkh9y6h2l.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpkh9y6h2l.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpkh9y6h2l.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpkh9y6h2l.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpkh9y6h2l.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpjyz3rysj.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpjyz3rysj.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpjyz3rysj.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpjyz3rysj.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpjyz3rysj.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpjyz3rysj.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = string;\n  while (cur.len > 0) {\n    prefixes.push(cur);\n    cur = cur.sub(0, cur.len - 1);\n  }\n  prefixes.push(String::from(\"\"));\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n --> /tmp/tmpezl43ttv.rs:7:9\n  |\n7 |   while (cur.len > 0) {\n  |         ^           ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n  |\n7 -   while (cur.len > 0) {\n7 +   while cur.len > 0 {\n  | \n\nerror[E0615]: attempted to take value of method `len` on type `String`\n --> /tmp/tmpezl43ttv.rs:7:14\n  |\n7 |   while (cur.len > 0) {\n  |              ^^^ method, not a field\n  |\nhelp: use parentheses to call the method\n  |\n7 |   while (cur.len() > 0) {\n  |                 ++\n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpezl43ttv.rs:9:15\n  |\n9 |     cur = cur.sub(0, cur.len - 1);\n  |               ^^^ method not found in `String`\n\nerror[E0615]: attempted to take value of method `len` on type `String`\n --> /tmp/tmpezl43ttv.rs:9:26\n  |\n9 |     cur = cur.sub(0, cur.len - 1);\n  |                          ^^^ method, not a field\n  |\nhelp: use parentheses to call the method\n  |\n9 |     cur = cur.sub(0, cur.len() - 1);\n  |                             ++\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0599, E0615.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let current_char = string.get(i);\n    if (current_char.is_upper()) {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += current_char;\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpaq0qn9aw.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpaq0qn9aw.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpaq0qn9aw.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpaq0qn9aw.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpaq0qn9aw.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpcuf3qq0j.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpcuf3qq0j.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpcuf3qq0j.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpcuf3qq0j.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpcuf3qq0j.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpjyz3rysj.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpjyz3rysj.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpjyz3rysj.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp41gn0ifi.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp41gn0ifi.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp41gn0ifi.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp41gn0ifi.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp41gn0ifi.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(0, i + 1);\n    prefixes.push(prefix);\n  }\n  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmp5uvirg7m.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmp5uvirg7m.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmp5uvirg7m.rs:7:25\n  |\n7 |     let prefix = string.sub(0, i + 1);\n  |                         ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpcuf3qq0j.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpcuf3qq0j.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpcuf3qq0j.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpcuf3qq0j.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpcuf3qq0j.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i, string.len());\n    prefixes.push(prefix);\n  }\n  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpswvj8erl.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpswvj8erl.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpswvj8erl.rs:7:25\n  |\n7 |     let prefix = string.sub(i, string.len());\n  |                         ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpqtkjq0md.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpqtkjq0md.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpqtkjq0md.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i + 1));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpv8pmffah.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpv8pmffah.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpv8pmffah.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i + 1));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    prefixes.push(prefix);\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpmrp70gda.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpmrp70gda.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpmrp70gda.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpmrp70gda.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpmrp70gda.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpqtkjq0md.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpqtkjq0md.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpqtkjq0md.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp41gn0ifi.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp41gn0ifi.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp41gn0ifi.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp41gn0ifi.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp41gn0ifi.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (i in string) {\n    if (current.len() == 0) {\n      current += i;\n    } else {\n      current += i;\n      prefixes.push(current);\n      current = String::from(\"\");\n    }\n  }\n  if (current.len() > 0) {\n    prefixes.push(current);\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmp1m75f9un.rs:7:10\n  |\n7 |   for (i in string) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmp1m75f9un.rs:7:7\n  |\n7 |   for (i in string) {\n  |       ^           ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n7 -   for (i in string) {\n7 +   for i in string {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n --> /tmp/tmp1m75f9un.rs:8:8\n  |\n8 |     if (current.len() == 0) {\n  |        ^                  ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n  |\n8 -     if (current.len() == 0) {\n8 +     if current.len() == 0 {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp1m75f9un.rs:16:6\n   |\n16 |   if (current.len() > 0) {\n   |      ^                 ^\n   |\nhelp: remove these parentheses\n   |\n16 -   if (current.len() > 0) {\n16 +   if current.len() > 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n --> /tmp/tmp1m75f9un.rs:7:13\n  |\n7 |   for (i in string) {\n  |             ^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n  |\n  = help: the trait `Iterator` is not implemented for `String`\n  = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\")\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp4tsvopse.rs:48:3\n   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                                                - unclosed delimiter\n...\n7  |   for (let i = 0; i < string.len(); i++) {\n   |                                          - unclosed delimiter\n...\n11 |     } else {\n   |            - this delimiter might not be properly closed...\n...\n41 | }\n   | - ...as it matches this but it has different indentation\n...\n48 | }\n   |   ^\n\nerror: expected identifier, found keyword `let`\n --> /tmp/tmp4tsvopse.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4tsvopse.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4tsvopse.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4tsvopse.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4tsvopse.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp4tsvopse.rs:40:23\n   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                                                - closing delimiter possibly meant for this\n...\n40 |       cur = cur.concat(String::from(\"\")\n   |                       ^ unclosed delimiter\n41 | }\n   | ^ mismatched closing delimiter\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current_prefix);\n      current_prefix = String::from(\"\");\n    } else {\n      current_prefix += string.get(i);\n    }\n  }\n  prefixes.push(current_prefix);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpldwh1nuo.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpldwh1nuo.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpldwh1nuo.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpldwh1nuo.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpldwh1nuo.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == ' ') {\n      if (current_prefix.len() > 0) {\n        prefixes.push(current_prefix);\n        current_prefix = String::from(\"\");\n      }\n    } else {\n      current_prefix += string.get(i);\n    }\n  }\n  if (current_prefix.len() > 0) {\n    prefixes.push(current_prefix);\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpdzkg_bpz.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpdzkg_bpz.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpdzkg_bpz.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpdzkg_bpz.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpdzkg_bpz.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpqtkjq0md.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpqtkjq0md.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpqtkjq0md.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr_prefix = curr_prefix.concat(ch);\n      prefixes.push(curr_prefix);\n      curr_prefix = String::from(\"\");\n    } else {\n      curr_prefix = curr_prefix.concat(ch);\n    }\n  }\n  prefixes.push(curr_prefix);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp92kgrhti.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp92kgrhti.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp92kgrhti.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp92kgrhti.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp92kgrhti.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpqtkjq0md.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpqtkjq0md.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpqtkjq0md.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(String::from(\"\"));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4lrjoiyg.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4lrjoiyg.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4lrjoiyg.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4lrjoiyg.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4lrjoiyg.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i, string.len());\n    prefixes.push(prefix);\n  }\n  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpswvj8erl.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpswvj8erl.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpswvj8erl.rs:7:25\n  |\n7 |     let prefix = string.sub(i, string.len());\n  |                         ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    prefixes.push(prefix);\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpmrp70gda.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpmrp70gda.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpmrp70gda.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpmrp70gda.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpmrp70gda.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpxbyzkdy1.rs:6:10\n  |\n6 |   for (i in 0..string.length()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpxbyzkdy1.rs:6:7\n  |\n6 |   for (i in 0..string.length()) {\n  |       ^                       ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.length()) {\n6 +   for i in 0..string.length() {\n  | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpxbyzkdy1.rs:6:23\n  |\n6 |   for (i in 0..string.length()) {\n  |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpxbyzkdy1.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpcuf3qq0j.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpcuf3qq0j.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpcuf3qq0j.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpcuf3qq0j.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpcuf3qq0j.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    prefixes.push(prefix);\n  }\n  prefixes.push(prefix);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpsgpmcd0u.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpsgpmcd0u.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpsgpmcd0u.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpsgpmcd0u.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpsgpmcd0u.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpxbyzkdy1.rs:6:10\n  |\n6 |   for (i in 0..string.length()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpxbyzkdy1.rs:6:7\n  |\n6 |   for (i in 0..string.length()) {\n  |       ^                       ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.length()) {\n6 +   for i in 0..string.length() {\n  | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpxbyzkdy1.rs:6:23\n  |\n6 |   for (i in 0..string.length()) {\n  |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpxbyzkdy1.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(c);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4yfysfub.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4yfysfub.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4yfysfub.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4yfysfub.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4yfysfub.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(c);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4yfysfub.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4yfysfub.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4yfysfub.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4yfysfub.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4yfysfub.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i, string.len());\n    if prefix.len() > 0 {\n      prefixes.push(prefix);\n    }\n  }\n  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpb3zqoang.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpb3zqoang.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpb3zqoang.rs:7:25\n  |\n7 |     let prefix = string.sub(i, string.len());\n  |                         ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i, string.len());\n    if prefix.len() > 0 {\n      prefixes.push(prefix);\n    }\n  }\n  prefixes.sort();\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpwx0gsi0x.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpwx0gsi0x.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpwx0gsi0x.rs:7:25\n  |\n7 |     let prefix = string.sub(i, string.len());\n  |                         ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpo5jym2k7.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpo5jym2k7.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpo5jym2k7.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpo5jym2k7.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpo5jym2k7.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpjyz3rysj.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpjyz3rysj.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpjyz3rysj.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i + 1));\n  }\n  prefixes.sort();\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpxgt04795.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpxgt04795.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpxgt04795.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i + 1));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let c of string) {\n    if (current_prefix.len() == 0) {\n      current_prefix += c;\n    } else if (current_prefix.ends_with(c)) {\n      current_prefix += c;\n    } else {\n      prefixes.push(current_prefix);\n      current_prefix = String::from(c);\n    }\n  }\n  prefixes.push(current_prefix);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwz3nxwwh.rs:7:8\n  |\n7 |   for (let c of string) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpwz3nxwwh.rs:7:12\n  |\n7 |   for (let c of string) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n --> /tmp/tmpwz3nxwwh.rs:7:14\n  |\n7 |   for (let c of string) {\n  |             -^^ expected one of `)`, `,`, `@`, or `|`\n  |             |\n  |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `string`\n --> /tmp/tmpwz3nxwwh.rs:7:17\n  |\n7 |   for (let c of string) {\n  |                -^^^^^^ expected one of `)`, `,`, `@`, or `|`\n  |                |\n  |                help: missing `,`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwz3nxwwh.rs:7:24\n  |\n7 |   for (let c of string) {\n  |                        ^ help: try adding `in` here\n\nerror: expected `{`, found `prefixes`\n  --> /tmp/tmpwz3nxwwh.rs:17:3\n   |\n17 |   prefixes.push(current_prefix);\n   |   ^^^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n17 |   { prefixes.push(current_prefix); }\n   |   +                                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpqtkjq0md.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpqtkjq0md.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpqtkjq0md.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut result = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    result.push(prefix);\n    prefix = prefix.concat(String::from(\"\"));\n  }\n  result.push(prefix);\n  return result;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpxzsmz3i9.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpxzsmz3i9.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpxzsmz3i9.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpxzsmz3i9.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpxzsmz3i9.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (curr.len() == 0 || curr.get(curr.len() - 1) != c) {\n      curr += c;\n      prefixes.push(curr);\n    }\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmptqb_wyd0.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmptqb_wyd0.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmptqb_wyd0.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmptqb_wyd0.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmptqb_wyd0.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.cat(string.get(i));\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpqwyyyuo0.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpqwyyyuo0.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpqwyyyuo0.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpqwyyyuo0.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpqwyyyuo0.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpo5jym2k7.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpo5jym2k7.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpo5jym2k7.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpo5jym2k7.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpo5jym2k7.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut result = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      result.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(String::from(\"\"));\n      current = current.cat(string.get(i));\n    }\n  }\n  result.push(current);\n  return result;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp5eslsj8m.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp5eslsj8m.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp5eslsj8m.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp5eslsj8m.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp5eslsj8m.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpjyz3rysj.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpjyz3rysj.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpjyz3rysj.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut result = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur += ch;\n      result.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur += ch.to_lower();\n    }\n  }\n  result.push(cur);\n  return result;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpf2cjfka9.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpf2cjfka9.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpf2cjfka9.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpf2cjfka9.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpf2cjfka9.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpo5jym2k7.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpo5jym2k7.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpo5jym2k7.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpo5jym2k7.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpo5jym2k7.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpcuf3qq0j.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpcuf3qq0j.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpcuf3qq0j.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpcuf3qq0j.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpcuf3qq0j.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpjyz3rysj.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpjyz3rysj.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpjyz3rysj.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (i in 0..string.len()) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    prefixes.push(prefix);\n  }\n  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmp84n11w4u.rs:7:10\n  |\n7 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmp84n11w4u.rs:7:7\n  |\n7 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n7 -   for (i in 0..string.len()) {\n7 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmp84n11w4u.rs:8:21\n  |\n8 |     prefix = prefix.concat(String::from(string.get(i)));\n  |                     ^^^^^^ method not found in `String`\n\nerror[E0277]: the type `str` cannot be indexed by `usize`\n   --> /tmp/tmp84n11w4u.rs:8:52\n    |\n8   |     prefix = prefix.concat(String::from(string.get(i)));\n    |                                                --- ^ string indices are ranges of `usize`\n    |                                                |\n    |                                                required by a bound introduced by this call\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `usize`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\nnote: required by a bound in `core::str::<impl str>::get`\n\nerror[E0277]: the trait bound `String: From<Option<&_>>` is not satisfied\n --> /tmp/tmp84n11w4u.rs:8:28\n  |\n8 |     prefix = prefix.concat(String::from(string.get(i)));\n  |                            ^^^^^^^^^^^^ the trait `From<Option<&_>>` is not implemented for `String`\n  |\n  = help: the following other types implement trait `From<T>`:\n            <String as From<&String>>\n            <String as From<&mut str>>\n            <String as From<&str>>\n            <String as From<Box<str>>>\n            <String as From<Cow<'a, str>>>\n            <String as From<char>>\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i := 0; i < string.len(); i++) {\n    prefixes.push(string.sub(0, i + 1));\n  }\n  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `:`\n --> /tmp/tmp02d96600.rs:6:10\n  |\n6 |   for (i := 0; i < string.len(); i++) {\n  |          ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp02d96600.rs:6:9\n  |\n6 |   for (i := 0; i < string.len(); i++) {\n  |         ^ help: try adding `in` here\n\nerror: expected expression, found `:`\n --> /tmp/tmp02d96600.rs:6:10\n  |\n6 |   for (i := 0; i < string.len(); i++) {\n  |          ^ expected expression\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (cur.len() == 0 || cur.get(cur.len() - 1) != c) {\n      cur = cur.concat(c);\n      prefixes.push(cur);\n    }\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpn1ke42zh.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpn1ke42zh.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpn1ke42zh.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpn1ke42zh.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpn1ke42zh.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current_prefix);\n      current_prefix = String::from(\"\");\n    } else {\n      current_prefix += string.get(i);\n    }\n  }\n  prefixes.push(current_prefix);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpd2ws25mp.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpd2ws25mp.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpd2ws25mp.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpd2ws25mp.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpd2ws25mp.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(c);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp59f20g3i.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp59f20g3i.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp59f20g3i.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp59f20g3i.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp59f20g3i.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (let i = 0; i < string.len(); i++) {\n    let prefix = string.sub(i);\n    if (prefix.len() > 0) {\n      prefixes.push(prefix);\n    }\n  }\n  prefixes.sort();\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp7l6xz4in.rs:6:8\n  |\n6 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp7l6xz4in.rs:6:12\n  |\n6 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp7l6xz4in.rs:6:14\n  |\n6 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp7l6xz4in.rs:6:13\n  |\n6 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp7l6xz4in.rs:6:14\n  |\n6 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpqtkjq0md.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpqtkjq0md.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpqtkjq0md.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpqtkjq0md.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(c);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpkdjj3_vx.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpkdjj3_vx.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpkdjj3_vx.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpkdjj3_vx.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpkdjj3_vx.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  if (current.len() > 0) {\n    prefixes.push(current);\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpq36tu4kv.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpq36tu4kv.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpq36tu4kv.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpq36tu4kv.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpq36tu4kv.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut result = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      result.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(string.get(i));\n    }\n  }\n  result.push(current);\n  return result;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpgytig3yz.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpgytig3yz.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpgytig3yz.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpgytig3yz.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpgytig3yz.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut result = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i).is_upper()) {\n      current = current.concat(String::from(string.get(i).to_lower()));\n    } else {\n      result.push(current);\n      current = String::from(\"\");\n    }\n  }\n  result.push(current);\n  return result;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpsm6joh86.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpsm6joh86.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpsm6joh86.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpsm6joh86.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpsm6joh86.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  let mut i = 0;\n\n  while (i < string.len()) {\n    prefix = prefix + string[i];\n    prefixes.push(prefix);\n    i += 1;\n  }\n\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n --> /tmp/tmp6gbob_r9.rs:9:9\n  |\n9 |   while (i < string.len()) {\n  |         ^                ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n  |\n9 -   while (i < string.len()) {\n9 +   while i < string.len() {\n  | \n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp6gbob_r9.rs:10:23\n   |\n10 |     prefix = prefix + string[i];\n   |                       ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i := 0; i < string.len(); i++) {\n    let prefix = string.sub(0, i + 1);\n    if prefixes.contains(prefix) {\n      continue;\n    }\n    prefixes.push(prefix);\n  }\n  prefixes.sort();\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `:`\n --> /tmp/tmp340mbilm.rs:6:10\n  |\n6 |   for (i := 0; i < string.len(); i++) {\n  |          ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp340mbilm.rs:6:9\n  |\n6 |   for (i := 0; i < string.len(); i++) {\n  |         ^ help: try adding `in` here\n\nerror: expected expression, found `:`\n --> /tmp/tmp340mbilm.rs:6:10\n  |\n6 |   for (i := 0; i < string.len(); i++) {\n  |          ^ expected expression\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(String::from(string.get(i)));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpj8t2z4nw.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpj8t2z4nw.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpj8t2z4nw.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpj8t2z4nw.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpj8t2z4nw.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpz5npkaga.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpz5npkaga.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpz5npkaga.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpz5npkaga.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpz5npkaga.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string[i] == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string[i];\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmprxihi707.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmprxihi707.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmprxihi707.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmprxihi707.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmprxihi707.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpxbyzkdy1.rs:6:10\n  |\n6 |   for (i in 0..string.length()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpxbyzkdy1.rs:6:7\n  |\n6 |   for (i in 0..string.length()) {\n  |       ^                       ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.length()) {\n6 +   for i in 0..string.length() {\n  | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpxbyzkdy1.rs:6:23\n  |\n6 |   for (i in 0..string.length()) {\n  |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpxbyzkdy1.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string[i] == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string[i];\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmprxihi707.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmprxihi707.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmprxihi707.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmprxihi707.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmprxihi707.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp41gn0ifi.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp41gn0ifi.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp41gn0ifi.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp41gn0ifi.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp41gn0ifi.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let c of string) {\n    if (current_prefix.len() == 0) {\n      current_prefix = String::from(c);\n    } else {\n      if (c == current_prefix.data()[current_prefix.len() - 1]) {\n        current_prefix = current_prefix.drop_back();\n      } else {\n        prefixes.push(current_prefix);\n        current_prefix = String::from(c);\n      }\n    }\n  }\n  prefixes.push(current_prefix);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpe9kcezss.rs:7:8\n  |\n7 |   for (let c of string) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n --> /tmp/tmpe9kcezss.rs:7:12\n  |\n7 |   for (let c of string) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n --> /tmp/tmpe9kcezss.rs:7:14\n  |\n7 |   for (let c of string) {\n  |             -^^ expected one of `)`, `,`, `@`, or `|`\n  |             |\n  |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `string`\n --> /tmp/tmpe9kcezss.rs:7:17\n  |\n7 |   for (let c of string) {\n  |                -^^^^^^ expected one of `)`, `,`, `@`, or `|`\n  |                |\n  |                help: missing `,`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpe9kcezss.rs:7:24\n  |\n7 |   for (let c of string) {\n  |                        ^ help: try adding `in` here\n\nerror: expected `{`, found `prefixes`\n  --> /tmp/tmpe9kcezss.rs:19:3\n   |\n19 |   prefixes.push(current_prefix);\n   |   ^^^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n19 |   { prefixes.push(current_prefix); }\n   |   +                                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(string.get(i));\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpcqyxd2s3.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpcqyxd2s3.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpcqyxd2s3.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpcqyxd2s3.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpcqyxd2s3.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(string.get(i));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4q2a4a36.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4q2a4a36.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4q2a4a36.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4q2a4a36.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4q2a4a36.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    let prefix = string.sub(0, i + 1);\n    if prefixes.contains(prefix) {\n      continue;\n    }\n    prefixes.push(prefix);\n  }\n  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpjublgopg.rs:6:10\n  |\n6 |   for (i in 0..string.length()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpjublgopg.rs:6:7\n  |\n6 |   for (i in 0..string.length()) {\n  |       ^                       ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.length()) {\n6 +   for i in 0..string.length() {\n  | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpjublgopg.rs:6:23\n  |\n6 |   for (i in 0..string.length()) {\n  |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpjublgopg.rs:7:25\n  |\n7 |     let prefix = string.sub(0, i + 1);\n  |                         ^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjublgopg.rs:11:19\n   |\n11 |     prefixes.push(prefix);\n   |                   ^^^^^^- help: try using a conversion method: `.to_string()`\n   |                   |\n   |                   cyclic type of infinite size\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp41gn0ifi.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp41gn0ifi.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp41gn0ifi.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp41gn0ifi.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp41gn0ifi.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpcuf3qq0j.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpcuf3qq0j.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpcuf3qq0j.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpcuf3qq0j.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpcuf3qq0j.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let current_char = string.get(i);\n    if (current_char.is_upper()) {\n      current = current.concat(current_char.to_lower());\n    } else {\n      prefixes.push(current);\n      current = String::from(\"\");\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmppmbqzpyn.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmppmbqzpyn.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmppmbqzpyn.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmppmbqzpyn.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmppmbqzpyn.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (cur.len() == 0 || cur.get(cur.len() - 1) != c) {\n      cur = cur.concat(String::from(c));\n      prefixes.push(cur);\n    }\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp_s80pmly.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp_s80pmly.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp_s80pmly.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp_s80pmly.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp_s80pmly.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut result = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    result.push(prefix);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpfqow8c46.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpfqow8c46.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpfqow8c46.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpfqow8c46.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpfqow8c46.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpz5npkaga.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpz5npkaga.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpz5npkaga.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpz5npkaga.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpz5npkaga.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current_prefix);\n      current_prefix = String::from(\"\");\n    } else {\n      current_prefix += string.get(i);\n    }\n  }\n  prefixes.push(current_prefix);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpldwh1nuo.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpldwh1nuo.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpldwh1nuo.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpldwh1nuo.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpldwh1nuo.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpz5npkaga.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpz5npkaga.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpz5npkaga.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpz5npkaga.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpz5npkaga.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i + 1));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpv8pmffah.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpv8pmffah.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpv8pmffah.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i + 1));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i, string.len());\n    if prefix.len() > 0 {\n      prefixes.push(prefix);\n    }\n  }\n  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpb3zqoang.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpb3zqoang.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpb3zqoang.rs:7:25\n  |\n7 |     let prefix = string.sub(i, string.len());\n  |                         ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (i in 0..string.len()) {\n    prefix = prefix.concat(string.sub(i, string.len()));\n    prefixes.push(prefix);\n  }\n  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmphzr1lmcn.rs:7:10\n  |\n7 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmphzr1lmcn.rs:7:7\n  |\n7 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n7 -   for (i in 0..string.len()) {\n7 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmphzr1lmcn.rs:8:21\n  |\n8 |     prefix = prefix.concat(string.sub(i, string.len()));\n  |                     ^^^^^^ method not found in `String`\n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmphzr1lmcn.rs:8:35\n  |\n8 |     prefix = prefix.concat(string.sub(i, string.len()));\n  |                                   ^^^ method not found in `String`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpjyz3rysj.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpjyz3rysj.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpjyz3rysj.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string[i] == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string[i];\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmprxihi707.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmprxihi707.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmprxihi707.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmprxihi707.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmprxihi707.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    prefixes.push(prefix);\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpmrp70gda.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpmrp70gda.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpmrp70gda.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpmrp70gda.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpmrp70gda.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(String::from(string.get(i)));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpulm5546x.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpulm5546x.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpulm5546x.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpulm5546x.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpulm5546x.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (curr.len() == 0 || curr.get(curr.len() - 1) != c) {\n      curr += c;\n      prefixes.push(curr);\n    }\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmptqb_wyd0.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmptqb_wyd0.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmptqb_wyd0.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmptqb_wyd0.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmptqb_wyd0.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(string.get(i));\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpcqyxd2s3.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpcqyxd2s3.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpcqyxd2s3.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpcqyxd2s3.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpcqyxd2s3.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr_prefix = curr_prefix.concat(ch);\n      prefixes.push(curr_prefix);\n      curr_prefix = String::from(\"\");\n    } else {\n      curr_prefix = curr_prefix.concat(ch);\n    }\n  }\n  prefixes.push(curr_prefix);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp92kgrhti.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp92kgrhti.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp92kgrhti.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp92kgrhti.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp92kgrhti.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpo5jym2k7.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpo5jym2k7.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpo5jym2k7.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpo5jym2k7.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpo5jym2k7.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(string.get(i));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpfm23ikl5.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpfm23ikl5.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpfm23ikl5.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpfm23ikl5.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpfm23ikl5.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  if (current.len() > 0) {\n    prefixes.push(current);\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpq36tu4kv.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpq36tu4kv.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpq36tu4kv.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpq36tu4kv.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpq36tu4kv.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp41gn0ifi.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp41gn0ifi.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp41gn0ifi.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp41gn0ifi.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp41gn0ifi.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.sub(0, i + 1));\n  }\n  prefixes.sort();\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpjvn0vxoa.rs:6:10\n  |\n6 |   for (i in 0..string.length()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpjvn0vxoa.rs:6:7\n  |\n6 |   for (i in 0..string.length()) {\n  |       ^                       ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.length()) {\n6 +   for i in 0..string.length() {\n  | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpjvn0vxoa.rs:6:23\n  |\n6 |   for (i in 0..string.length()) {\n  |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpjvn0vxoa.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i + 1));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i);\n    if prefix.len() > 0 {\n      prefixes.push(prefix);\n    }\n  }\n  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmphg1xeyfs.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmphg1xeyfs.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmphg1xeyfs.rs:7:25\n  |\n7 |     let prefix = string.sub(i);\n  |                         ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(string.get(i));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4q2a4a36.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4q2a4a36.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4q2a4a36.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4q2a4a36.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4q2a4a36.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string[i] == '.') {\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur += string[i];\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp3i64d_vp.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp3i64d_vp.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp3i64d_vp.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp3i64d_vp.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp3i64d_vp.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(String::from(\"\"));\n      current = current.cat(String::from(string.get(i)));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpngwlnwcd.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpngwlnwcd.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpngwlnwcd.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpngwlnwcd.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpngwlnwcd.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp1nw1w3re.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp1nw1w3re.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp1nw1w3re.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp1nw1w3re.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '\\0') {\n      prefixes.push(curr_prefix);\n      curr_prefix = String::from(\"\");\n    } else {\n      curr_prefix = curr_prefix.concat(c);\n    }\n  }\n  prefixes.push(curr_prefix);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp2y911h1o.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp2y911h1o.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp2y911h1o.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp2y911h1o.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp2y911h1o.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string[i] == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string[i];\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4eyvu4dj.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4eyvu4dj.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4eyvu4dj.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4eyvu4dj.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4eyvu4dj.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current_prefix);\n      current_prefix = String::from(\"\");\n    } else {\n      current_prefix += string.get(i);\n    }\n  }\n  prefixes.push(current_prefix);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpldwh1nuo.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpldwh1nuo.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpldwh1nuo.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpldwh1nuo.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpldwh1nuo.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp41gn0ifi.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp41gn0ifi.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp41gn0ifi.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp41gn0ifi.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp41gn0ifi.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  if (current.len() > 0) {\n    prefixes.push(current);\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpq36tu4kv.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpq36tu4kv.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpq36tu4kv.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpq36tu4kv.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpq36tu4kv.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4ifxwvwm.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4ifxwvwm.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4ifxwvwm.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4ifxwvwm.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.sub(0, i));\n  }\n  prefixes.sort();\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmp4p9x1gil.rs:6:10\n  |\n6 |   for (i in 0..string.length()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmp4p9x1gil.rs:6:7\n  |\n6 |   for (i in 0..string.length()) {\n  |       ^                       ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.length()) {\n6 +   for i in 0..string.length() {\n  | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmp4p9x1gil.rs:6:23\n  |\n6 |   for (i in 0..string.length()) {\n  |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmp4p9x1gil.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(string.get(i));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4q2a4a36.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4q2a4a36.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4q2a4a36.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4q2a4a36.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4q2a4a36.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += c;\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpvqqjq6wc.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpvqqjq6wc.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpvqqjq6wc.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpvqqjq6wc.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpvqqjq6wc.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpjyz3rysj.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpjyz3rysj.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpjyz3rysj.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr_prefix = curr_prefix.concat(ch);\n      prefixes.push(curr_prefix);\n      curr_prefix = String::from(\"\");\n    } else {\n      curr_prefix = curr_prefix.concat(ch);\n    }\n  }\n  prefixes.push(curr_prefix);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp92kgrhti.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp92kgrhti.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp92kgrhti.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp92kgrhti.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp92kgrhti.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i);\n    if prefix.len() > 0 {\n      prefixes.push(prefix);\n    }\n  }\n  prefixes.sort();\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmp20yb48lz.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmp20yb48lz.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmp20yb48lz.rs:7:25\n  |\n7 |     let prefix = string.sub(i);\n  |                         ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.substr(0, i + 1));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpjhkjkul8.rs:6:10\n  |\n6 |   for (i in 0..string.length()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpjhkjkul8.rs:6:7\n  |\n6 |   for (i in 0..string.length()) {\n  |       ^                       ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.length()) {\n6 +   for i in 0..string.length() {\n  | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmpjhkjkul8.rs:6:23\n  |\n6 |   for (i in 0..string.length()) {\n  |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `substr` found for struct `String` in the current scope\n --> /tmp/tmpjhkjkul8.rs:7:26\n  |\n7 |     prefixes.push(string.substr(0, i + 1));\n  |                          ^^^^^^ method not found in `String`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let current_char = string.get(i);\n    if (current_char.is_upper()) {\n      current = current.concat(current_char.to_lower());\n    } else {\n      prefixes.push(current);\n      current = String::from(\"\");\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmppmbqzpyn.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmppmbqzpyn.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmppmbqzpyn.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmppmbqzpyn.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmppmbqzpyn.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i + 1));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpv8pmffah.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpv8pmffah.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpv8pmffah.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i + 1));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpwy5qqp08.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpwy5qqp08.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpwy5qqp08.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpwy5qqp08.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr_prefix = curr_prefix.concat(ch);\n      prefixes.push(curr_prefix);\n      curr_prefix = String::from(\"\");\n    } else {\n      curr_prefix = curr_prefix.concat(ch);\n    }\n  }\n  prefixes.push(curr_prefix);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp92kgrhti.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp92kgrhti.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp92kgrhti.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp92kgrhti.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp92kgrhti.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.substr(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmptkum5f_7.rs:6:10\n  |\n6 |   for (i in 0..string.length()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmptkum5f_7.rs:6:7\n  |\n6 |   for (i in 0..string.length()) {\n  |       ^                       ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.length()) {\n6 +   for i in 0..string.length() {\n  | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n --> /tmp/tmptkum5f_7.rs:6:23\n  |\n6 |   for (i in 0..string.length()) {\n  |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `substr` found for struct `String` in the current scope\n --> /tmp/tmptkum5f_7.rs:7:26\n  |\n7 |     prefixes.push(string.substr(0, i));\n  |                          ^^^^^^ method not found in `String`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n    } else {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp3jkuxn3i.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp3jkuxn3i.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp3jkuxn3i.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp3jkuxn3i.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp3jkuxn3i.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  if (current.len() > 0) {\n    prefixes.push(current);\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpq36tu4kv.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpq36tu4kv.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpq36tu4kv.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpq36tu4kv.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpq36tu4kv.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n --> /tmp/tmpjyz3rysj.rs:6:10\n  |\n6 |   for (i in 0..string.len()) {\n  |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n --> /tmp/tmpjyz3rysj.rs:6:7\n  |\n6 |   for (i in 0..string.len()) {\n  |       ^                    ^\n  |\nhelp: remove parentheses in `for` loop\n  |\n6 -   for (i in 0..string.len()) {\n6 +   for i in 0..string.len() {\n  | \n\nerror[E0599]: no method named `sub` found for struct `String` in the current scope\n --> /tmp/tmpjyz3rysj.rs:7:26\n  |\n7 |     prefixes.push(string.sub(0, i));\n  |                          ^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmpd95hhjo1.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmpd95hhjo1.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmpd95hhjo1.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmpd95hhjo1.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmpd95hhjo1.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(c);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
      "timestamp": 1664292457,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n --> /tmp/tmp4yfysfub.rs:7:8\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n --> /tmp/tmp4yfysfub.rs:7:12\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |           -^ expected one of `)`, `,`, `@`, or `|`\n  |           |\n  |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n --> /tmp/tmp4yfysfub.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n --> /tmp/tmp4yfysfub.rs:7:13\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n --> /tmp/tmp4yfysfub.rs:7:14\n  |\n7 |   for (let i = 0; i < string.len(); i++) {\n  |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}